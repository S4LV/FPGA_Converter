
DDDD.elf:     file format elf32-littlenios2
DDDD.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004134 memsz 0x00004134 flags r-x
    LOAD off    0x00005154 vaddr 0x0000c154 paddr 0x0000cb3c align 2**12
         filesz 0x000009e8 memsz 0x000009e8 flags rw-
    LOAD off    0x00006524 vaddr 0x0000d524 paddr 0x0000d524 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f74  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  0000c12c  0000c12c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000009e8  0000c154  0000cb3c  00005154  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000d524  0000d524  00006524  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00005b3c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000007b0  00000000  00000000  00005b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000148d3  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004b1f  00000000  00000000  0001abe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005c8e  00000000  00000000  0001f702  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000c70  00000000  00000000  00025390  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001cd9  00000000  00000000  00026000  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005138  00000000  00000000  00027cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002ce14  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000350  00000000  00000000  0002ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002f00f  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0002f012  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002f01e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002f01f  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  0002f020  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  0002f024  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  0002f028  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000009  00000000  00000000  0002f02c  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000030  00000000  00000000  0002f035  2**0
                  CONTENTS, READONLY
 25 .jdi          00003a0e  00000000  00000000  0002f065  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000268db  00000000  00000000  00032a73  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000c12c l    d  .rodata	00000000 .rodata
0000c154 l    d  .rwdata	00000000 .rwdata
0000d524 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DDDD_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0000c154 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009d50 l     F .text	00000008 __fp_lock
00009d58 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ad58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ae74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000aea0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000afa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b094 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b180 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b340 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000cb2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b5b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b764 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000abf4 g     F .text	00000064 _isatty_r
0000b2a4 g     F .text	0000005c alt_main
00008214 g     F .text	00000084 _puts_r
0000d574 g     O .bss	00000100 alt_irq
0000ac58 g     F .text	0000006c _lseek_r
0000cb3c g       *ABS*	00000000 __flash_rwdata_start
0000d804 g       *ABS*	00000000 __alt_heap_start
0000a908 g     F .text	0000005c __sseek
00009df4 g     F .text	0000010c __sinit
00009d6c g     F .text	00000078 __sfmoreglue
0000b320 g     F .text	00000020 __malloc_unlock
000091d8 g     F .text	0000018c memmove
00009de4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ab8c g     F .text	00000068 _fstat_r
0000d530 g     O .bss	00000004 errno
0000d538 g     O .bss	00000004 alt_argv
00014b04 g       *ABS*	00000000 _gp
0000c984 g     O .rwdata	00000180 alt_fd_list
00009098 g     F .text	00000140 memcpy
00009d60 g     F .text	0000000c _cleanup_r
0000c12c g       *ABS*	00000000 __DTOR_END__
00008298 g     F .text	00000014 puts
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000aff0 g     F .text	000000a4 isatty
0000d52c g     O .bss	00000004 __malloc_top_pad
00008338 g     F .text	000004e4 __sfvwrite_r
00009960 g     F .text	00000064 _sbrk_r
0000acc4 g     F .text	0000006c _read_r
0000cb24 g     O .rwdata	00000004 alt_max_fd
0000aa3c g     F .text	0000013c _fclose_r
00009d20 g     F .text	00000030 fflush
0000d528 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b1d0 g     F .text	000000d4 lseek
0000cb04 g     O .rwdata	00000004 _global_impure_ptr
00009364 g     F .text	000005fc _realloc_r
0000d804 g       *ABS*	00000000 __bss_end
0000bb28 g     F .text	000000f0 alt_iic_isr_register
0000bcb0 g     F .text	00000104 alt_tick
0000a00c g     F .text	00000018 __fp_lock_all
0000badc g     F .text	0000004c alt_ic_irq_enabled
0000bc18 g     F .text	00000098 alt_alarm_stop
0000d540 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000cc alt_irq_handler
0000c95c g     O .rwdata	00000028 alt_dev_null
0000b860 g     F .text	0000001c alt_dcache_flush_all
0000cb3c g       *ABS*	00000000 __ram_rwdata_end
0000cb1c g     O .rwdata	00000008 alt_dev_list
0000b604 g     F .text	000000f0 write
0000c154 g       *ABS*	00000000 __ram_rodata_end
0000aef0 g     F .text	000000b0 fstat
0000d804 g       *ABS*	00000000 end
0000c12c g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000b7d8 g     F .text	00000088 alt_avalon_timer_sc_init
00009ffc g     F .text	00000004 __sfp_lock_acquire
00008fa0 g     F .text	000000f8 memchr
0000a178 g     F .text	000002d0 _free_r
0000bf50 g     F .text	000001a0 __call_exitprocs
0000cb0c g     O .rwdata	00000004 __malloc_sbrk_base
000081b8 g     F .text	0000003c _start
0000d544 g     O .bss	00000004 _alt_tick_rate
0000d548 g     O .bss	00000004 _alt_nticks
0000b390 g     F .text	000000f4 read
0000b728 g     F .text	0000003c alt_sys_init
0000be20 g     F .text	00000130 __register_exitproc
0000ad30 g     F .text	00000028 __mulsi3
0000c154 g       *ABS*	00000000 __ram_rwdata_start
0000c12c g       *ABS*	00000000 __ram_rodata_start
0000d54c g     O .bss	00000028 __malloc_current_mallinfo
0000a9d8 g     F .text	00000064 _close_r
0000d804 g       *ABS*	00000000 __alt_stack_base
000099c4 g     F .text	00000174 __swsetup_r
00009f00 g     F .text	000000fc __sfp
0000c554 g     O .rwdata	00000408 __malloc_av_
0000a008 g     F .text	00000004 __sinit_lock_release
0000a82c g     F .text	00000054 __sread
0000b300 g     F .text	00000020 __malloc_lock
0000b504 g     F .text	000000b0 sbrk
00009b38 g     F .text	000001e8 _fflush_r
0000d524 g       *ABS*	00000000 __bss_start
0000a750 g     F .text	000000dc memset
000081f4 g     F .text	00000020 main
0000d53c g     O .bss	00000004 alt_envp
0000d524 g     O .bss	00000004 __malloc_max_total_mem
0000a964 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000ab78 g     F .text	00000014 fclose
0000d674 g     O .bss	00000190 _atexit0
0000881c g     F .text	00000784 _malloc_r
0000cb28 g     O .rwdata	00000004 alt_errno
0000a448 g     F .text	000000a8 _fwalk
0000a03c g     F .text	0000013c _malloc_trim_r
0000c12c g       *ABS*	00000000 __CTOR_END__
0000c12c g       *ABS*	00000000 __flash_rodata_start
0000c12c g       *ABS*	00000000 __DTOR_LIST__
0000b6f4 g     F .text	00000034 alt_irq_init
0000b484 g     F .text	00000080 alt_release_fd
0000bdd4 g     F .text	00000014 atexit
0000a96c g     F .text	0000006c _write_r
0000cb08 g     O .rwdata	00000004 _impure_ptr
0000d534 g     O .bss	00000004 alt_argc
0000b8d8 g     F .text	0000005c _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000a024 g     F .text	00000018 __fp_unlock_all
0000cb14 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b950 g     F .text	00000050 alt_ic_isr_register
0000cb3c g       *ABS*	00000000 _edata
0000d804 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
0000ba3c g     F .text	000000a0 alt_ic_irq_disable
0000a880 g     F .text	00000088 __swrite
0000cb10 g     O .rwdata	00000004 __malloc_trim_threshold
0000bdb4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000bde8 g     F .text	00000038 exit
0000a4f0 g     F .text	000000b8 _fwalk_reent
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a000 g     F .text	00000004 __sfp_lock_release
0000c0f0 g     F .text	0000003c _exit
0000a5a8 g     F .text	000001a8 __smakebuf_r
000082ac g     F .text	0000008c strlen
0000b934 g     F .text	0000001c alt_icache_flush_all
0000cb30 g     O .rwdata	00000004 alt_priority_mask
0000b9a0 g     F .text	0000009c alt_ic_irq_enable
0000cb34 g     O .rwdata	00000008 alt_alarm_list
0000b87c g     F .text	0000005c _do_ctors
0000ada8 g     F .text	000000cc close
0000b100 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0000a004 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606e14 	ori	at,at,33208
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f55d04 	addi	r3,r3,-10892
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21355d04 	addi	r4,r4,-10892
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d692c114 	ori	gp,gp,19204
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10b54914 	ori	r2,r2,54564

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18f60114 	ori	r3,r3,55300

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	000b1000 	call	b100 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	000b2a40 	call	b2a4 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <main>:
 */

#include <stdio.h>

int main()
{
    81f4:	defffe04 	addi	sp,sp,-8
    81f8:	dfc00115 	stw	ra,4(sp)
    81fc:	df000015 	stw	fp,0(sp)
    8200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    8204:	01000074 	movhi	r4,1
    8208:	21304b04 	addi	r4,r4,-16084
    820c:	00082980 	call	8298 <puts>

  while(1);
    8210:	003fff06 	br	8210 <main+0x1c>

00008214 <_puts_r>:
    8214:	defff604 	addi	sp,sp,-40
    8218:	dc400815 	stw	r17,32(sp)
    821c:	2023883a 	mov	r17,r4
    8220:	2809883a 	mov	r4,r5
    8224:	dc000715 	stw	r16,28(sp)
    8228:	dfc00915 	stw	ra,36(sp)
    822c:	2821883a 	mov	r16,r5
    8230:	00082ac0 	call	82ac <strlen>
    8234:	10c00044 	addi	r3,r2,1
    8238:	d8800115 	stw	r2,4(sp)
    823c:	89400217 	ldw	r5,8(r17)
    8240:	00800074 	movhi	r2,1
    8244:	10b05004 	addi	r2,r2,-16064
    8248:	d8800215 	stw	r2,8(sp)
    824c:	00800044 	movi	r2,1
    8250:	d8800315 	stw	r2,12(sp)
    8254:	8809883a 	mov	r4,r17
    8258:	00800084 	movi	r2,2
    825c:	d9800404 	addi	r6,sp,16
    8260:	dc000015 	stw	r16,0(sp)
    8264:	d8c00615 	stw	r3,24(sp)
    8268:	dec00415 	stw	sp,16(sp)
    826c:	d8800515 	stw	r2,20(sp)
    8270:	00083380 	call	8338 <__sfvwrite_r>
    8274:	1000061e 	bne	r2,zero,8290 <_puts_r+0x7c>
    8278:	00800284 	movi	r2,10
    827c:	dfc00917 	ldw	ra,36(sp)
    8280:	dc400817 	ldw	r17,32(sp)
    8284:	dc000717 	ldw	r16,28(sp)
    8288:	dec00a04 	addi	sp,sp,40
    828c:	f800283a 	ret
    8290:	00bfffc4 	movi	r2,-1
    8294:	003ff906 	br	827c <_puts_r+0x68>

00008298 <puts>:
    8298:	00800074 	movhi	r2,1
    829c:	10b2c204 	addi	r2,r2,-13560
    82a0:	200b883a 	mov	r5,r4
    82a4:	11000017 	ldw	r4,0(r2)
    82a8:	00082141 	jmpi	8214 <_puts_r>

000082ac <strlen>:
    82ac:	208000cc 	andi	r2,r4,3
    82b0:	10001f1e 	bne	r2,zero,8330 <strlen+0x84>
    82b4:	20800017 	ldw	r2,0(r4)
    82b8:	01ffbff4 	movhi	r7,65279
    82bc:	39ffbfc4 	addi	r7,r7,-257
    82c0:	01a02074 	movhi	r6,32897
    82c4:	31a02004 	addi	r6,r6,-32640
    82c8:	11c7883a 	add	r3,r2,r7
    82cc:	0084303a 	nor	r2,zero,r2
    82d0:	1886703a 	and	r3,r3,r2
    82d4:	1986703a 	and	r3,r3,r6
    82d8:	2005883a 	mov	r2,r4
    82dc:	1800101e 	bne	r3,zero,8320 <strlen+0x74>
    82e0:	10800104 	addi	r2,r2,4
    82e4:	10c00017 	ldw	r3,0(r2)
    82e8:	19cb883a 	add	r5,r3,r7
    82ec:	00c6303a 	nor	r3,zero,r3
    82f0:	28c6703a 	and	r3,r5,r3
    82f4:	1986703a 	and	r3,r3,r6
    82f8:	1800091e 	bne	r3,zero,8320 <strlen+0x74>
    82fc:	10800104 	addi	r2,r2,4
    8300:	10c00017 	ldw	r3,0(r2)
    8304:	19cb883a 	add	r5,r3,r7
    8308:	00c6303a 	nor	r3,zero,r3
    830c:	28c6703a 	and	r3,r5,r3
    8310:	1986703a 	and	r3,r3,r6
    8314:	183ff226 	beq	r3,zero,82e0 <strlen+0x34>
    8318:	00000106 	br	8320 <strlen+0x74>
    831c:	10800044 	addi	r2,r2,1
    8320:	10c00007 	ldb	r3,0(r2)
    8324:	183ffd1e 	bne	r3,zero,831c <strlen+0x70>
    8328:	1105c83a 	sub	r2,r2,r4
    832c:	f800283a 	ret
    8330:	2005883a 	mov	r2,r4
    8334:	003ffa06 	br	8320 <strlen+0x74>

00008338 <__sfvwrite_r>:
    8338:	30800217 	ldw	r2,8(r6)
    833c:	defff504 	addi	sp,sp,-44
    8340:	dd400615 	stw	r21,24(sp)
    8344:	dd000515 	stw	r20,20(sp)
    8348:	dc000115 	stw	r16,4(sp)
    834c:	dfc00a15 	stw	ra,40(sp)
    8350:	df000915 	stw	fp,36(sp)
    8354:	ddc00815 	stw	r23,32(sp)
    8358:	dd800715 	stw	r22,28(sp)
    835c:	dcc00415 	stw	r19,16(sp)
    8360:	dc800315 	stw	r18,12(sp)
    8364:	dc400215 	stw	r17,8(sp)
    8368:	3029883a 	mov	r20,r6
    836c:	202b883a 	mov	r21,r4
    8370:	2821883a 	mov	r16,r5
    8374:	10002126 	beq	r2,zero,83fc <__sfvwrite_r+0xc4>
    8378:	2880030b 	ldhu	r2,12(r5)
    837c:	10c0020c 	andi	r3,r2,8
    8380:	18ffffcc 	andi	r3,r3,65535
    8384:	18e0001c 	xori	r3,r3,32768
    8388:	18e00004 	addi	r3,r3,-32768
    838c:	18002826 	beq	r3,zero,8430 <__sfvwrite_r+0xf8>
    8390:	28c00417 	ldw	r3,16(r5)
    8394:	18002626 	beq	r3,zero,8430 <__sfvwrite_r+0xf8>
    8398:	10c0008c 	andi	r3,r2,2
    839c:	18ffffcc 	andi	r3,r3,65535
    83a0:	18e0001c 	xori	r3,r3,32768
    83a4:	18e00004 	addi	r3,r3,-32768
    83a8:	a4400017 	ldw	r17,0(r20)
    83ac:	18002b26 	beq	r3,zero,845c <__sfvwrite_r+0x124>
    83b0:	0027883a 	mov	r19,zero
    83b4:	0025883a 	mov	r18,zero
    83b8:	05810004 	movi	r22,1024
    83bc:	980d883a 	mov	r6,r19
    83c0:	a809883a 	mov	r4,r21
    83c4:	90004f26 	beq	r18,zero,8504 <__sfvwrite_r+0x1cc>
    83c8:	900f883a 	mov	r7,r18
    83cc:	81400717 	ldw	r5,28(r16)
    83d0:	b480012e 	bgeu	r22,r18,83d8 <__sfvwrite_r+0xa0>
    83d4:	01c10004 	movi	r7,1024
    83d8:	80800917 	ldw	r2,36(r16)
    83dc:	103ee83a 	callr	r2
    83e0:	0080540e 	bge	zero,r2,8534 <__sfvwrite_r+0x1fc>
    83e4:	a0c00217 	ldw	r3,8(r20)
    83e8:	98a7883a 	add	r19,r19,r2
    83ec:	90a5c83a 	sub	r18,r18,r2
    83f0:	1885c83a 	sub	r2,r3,r2
    83f4:	a0800215 	stw	r2,8(r20)
    83f8:	103ff01e 	bne	r2,zero,83bc <__sfvwrite_r+0x84>
    83fc:	0005883a 	mov	r2,zero
    8400:	dfc00a17 	ldw	ra,40(sp)
    8404:	df000917 	ldw	fp,36(sp)
    8408:	ddc00817 	ldw	r23,32(sp)
    840c:	dd800717 	ldw	r22,28(sp)
    8410:	dd400617 	ldw	r21,24(sp)
    8414:	dd000517 	ldw	r20,20(sp)
    8418:	dcc00417 	ldw	r19,16(sp)
    841c:	dc800317 	ldw	r18,12(sp)
    8420:	dc400217 	ldw	r17,8(sp)
    8424:	dc000117 	ldw	r16,4(sp)
    8428:	dec00b04 	addi	sp,sp,44
    842c:	f800283a 	ret
    8430:	a809883a 	mov	r4,r21
    8434:	800b883a 	mov	r5,r16
    8438:	00099c40 	call	99c4 <__swsetup_r>
    843c:	1000f01e 	bne	r2,zero,8800 <__sfvwrite_r+0x4c8>
    8440:	8080030b 	ldhu	r2,12(r16)
    8444:	a4400017 	ldw	r17,0(r20)
    8448:	10c0008c 	andi	r3,r2,2
    844c:	18ffffcc 	andi	r3,r3,65535
    8450:	18e0001c 	xori	r3,r3,32768
    8454:	18e00004 	addi	r3,r3,-32768
    8458:	183fd51e 	bne	r3,zero,83b0 <__sfvwrite_r+0x78>
    845c:	10c0004c 	andi	r3,r2,1
    8460:	002d883a 	mov	r22,zero
    8464:	1800381e 	bne	r3,zero,8548 <__sfvwrite_r+0x210>
    8468:	0025883a 	mov	r18,zero
    846c:	90002126 	beq	r18,zero,84f4 <__sfvwrite_r+0x1bc>
    8470:	10c0800c 	andi	r3,r2,512
    8474:	18ffffcc 	andi	r3,r3,65535
    8478:	18e0001c 	xori	r3,r3,32768
    847c:	18e00004 	addi	r3,r3,-32768
    8480:	84c00217 	ldw	r19,8(r16)
    8484:	18006b26 	beq	r3,zero,8634 <__sfvwrite_r+0x2fc>
    8488:	980f883a 	mov	r7,r19
    848c:	94c08636 	bltu	r18,r19,86a8 <__sfvwrite_r+0x370>
    8490:	10c1200c 	andi	r3,r2,1152
    8494:	18009f1e 	bne	r3,zero,8714 <__sfvwrite_r+0x3dc>
    8498:	81000017 	ldw	r4,0(r16)
    849c:	982f883a 	mov	r23,r19
    84a0:	9039883a 	mov	fp,r18
    84a4:	9027883a 	mov	r19,r18
    84a8:	380d883a 	mov	r6,r7
    84ac:	b00b883a 	mov	r5,r22
    84b0:	d9c00015 	stw	r7,0(sp)
    84b4:	00091d80 	call	91d8 <memmove>
    84b8:	d9c00017 	ldw	r7,0(sp)
    84bc:	81000217 	ldw	r4,8(r16)
    84c0:	80800017 	ldw	r2,0(r16)
    84c4:	25efc83a 	sub	r23,r4,r23
    84c8:	11cf883a 	add	r7,r2,r7
    84cc:	85c00215 	stw	r23,8(r16)
    84d0:	81c00015 	stw	r7,0(r16)
    84d4:	a0800217 	ldw	r2,8(r20)
    84d8:	b72d883a 	add	r22,r22,fp
    84dc:	9725c83a 	sub	r18,r18,fp
    84e0:	14e7c83a 	sub	r19,r2,r19
    84e4:	a4c00215 	stw	r19,8(r20)
    84e8:	983fc426 	beq	r19,zero,83fc <__sfvwrite_r+0xc4>
    84ec:	8080030b 	ldhu	r2,12(r16)
    84f0:	903fdf1e 	bne	r18,zero,8470 <__sfvwrite_r+0x138>
    84f4:	8d800017 	ldw	r22,0(r17)
    84f8:	8c800117 	ldw	r18,4(r17)
    84fc:	8c400204 	addi	r17,r17,8
    8500:	003fda06 	br	846c <__sfvwrite_r+0x134>
    8504:	8cc00017 	ldw	r19,0(r17)
    8508:	8c800117 	ldw	r18,4(r17)
    850c:	8c400204 	addi	r17,r17,8
    8510:	003faa06 	br	83bc <__sfvwrite_r+0x84>
    8514:	00093640 	call	9364 <_realloc_r>
    8518:	102f883a 	mov	r23,r2
    851c:	10009f1e 	bne	r2,zero,879c <__sfvwrite_r+0x464>
    8520:	81400417 	ldw	r5,16(r16)
    8524:	a809883a 	mov	r4,r21
    8528:	000a1780 	call	a178 <_free_r>
    852c:	00800304 	movi	r2,12
    8530:	a8800015 	stw	r2,0(r21)
    8534:	80c0030b 	ldhu	r3,12(r16)
    8538:	00bfffc4 	movi	r2,-1
    853c:	18c01014 	ori	r3,r3,64
    8540:	80c0030d 	sth	r3,12(r16)
    8544:	003fae06 	br	8400 <__sfvwrite_r+0xc8>
    8548:	0007883a 	mov	r3,zero
    854c:	0039883a 	mov	fp,zero
    8550:	0025883a 	mov	r18,zero
    8554:	90001e26 	beq	r18,zero,85d0 <__sfvwrite_r+0x298>
    8558:	18006526 	beq	r3,zero,86f0 <__sfvwrite_r+0x3b8>
    855c:	b02f883a 	mov	r23,r22
    8560:	9580012e 	bgeu	r18,r22,8568 <__sfvwrite_r+0x230>
    8564:	902f883a 	mov	r23,r18
    8568:	81000017 	ldw	r4,0(r16)
    856c:	80800417 	ldw	r2,16(r16)
    8570:	84c00217 	ldw	r19,8(r16)
    8574:	81c00517 	ldw	r7,20(r16)
    8578:	1100022e 	bgeu	r2,r4,8584 <__sfvwrite_r+0x24c>
    857c:	99e7883a 	add	r19,r19,r7
    8580:	9dc01816 	blt	r19,r23,85e4 <__sfvwrite_r+0x2ac>
    8584:	b9c03b16 	blt	r23,r7,8674 <__sfvwrite_r+0x33c>
    8588:	80800917 	ldw	r2,36(r16)
    858c:	81400717 	ldw	r5,28(r16)
    8590:	a809883a 	mov	r4,r21
    8594:	d8c00015 	stw	r3,0(sp)
    8598:	e00d883a 	mov	r6,fp
    859c:	103ee83a 	callr	r2
    85a0:	1027883a 	mov	r19,r2
    85a4:	d8c00017 	ldw	r3,0(sp)
    85a8:	00bfe20e 	bge	zero,r2,8534 <__sfvwrite_r+0x1fc>
    85ac:	b4edc83a 	sub	r22,r22,r19
    85b0:	b0001a26 	beq	r22,zero,861c <__sfvwrite_r+0x2e4>
    85b4:	a0800217 	ldw	r2,8(r20)
    85b8:	e4f9883a 	add	fp,fp,r19
    85bc:	94e5c83a 	sub	r18,r18,r19
    85c0:	14e7c83a 	sub	r19,r2,r19
    85c4:	a4c00215 	stw	r19,8(r20)
    85c8:	983f8c26 	beq	r19,zero,83fc <__sfvwrite_r+0xc4>
    85cc:	903fe21e 	bne	r18,zero,8558 <__sfvwrite_r+0x220>
    85d0:	8f000017 	ldw	fp,0(r17)
    85d4:	8c800117 	ldw	r18,4(r17)
    85d8:	0007883a 	mov	r3,zero
    85dc:	8c400204 	addi	r17,r17,8
    85e0:	003fdc06 	br	8554 <__sfvwrite_r+0x21c>
    85e4:	e00b883a 	mov	r5,fp
    85e8:	980d883a 	mov	r6,r19
    85ec:	d8c00015 	stw	r3,0(sp)
    85f0:	00091d80 	call	91d8 <memmove>
    85f4:	80800017 	ldw	r2,0(r16)
    85f8:	a809883a 	mov	r4,r21
    85fc:	800b883a 	mov	r5,r16
    8600:	14c5883a 	add	r2,r2,r19
    8604:	80800015 	stw	r2,0(r16)
    8608:	0009b380 	call	9b38 <_fflush_r>
    860c:	d8c00017 	ldw	r3,0(sp)
    8610:	103fc81e 	bne	r2,zero,8534 <__sfvwrite_r+0x1fc>
    8614:	b4edc83a 	sub	r22,r22,r19
    8618:	b03fe61e 	bne	r22,zero,85b4 <__sfvwrite_r+0x27c>
    861c:	a809883a 	mov	r4,r21
    8620:	800b883a 	mov	r5,r16
    8624:	0009b380 	call	9b38 <_fflush_r>
    8628:	103fc21e 	bne	r2,zero,8534 <__sfvwrite_r+0x1fc>
    862c:	0007883a 	mov	r3,zero
    8630:	003fe006 	br	85b4 <__sfvwrite_r+0x27c>
    8634:	81000017 	ldw	r4,0(r16)
    8638:	80800417 	ldw	r2,16(r16)
    863c:	1100022e 	bgeu	r2,r4,8648 <__sfvwrite_r+0x310>
    8640:	9839883a 	mov	fp,r19
    8644:	9c806036 	bltu	r19,r18,87c8 <__sfvwrite_r+0x490>
    8648:	81c00517 	ldw	r7,20(r16)
    864c:	91c01c36 	bltu	r18,r7,86c0 <__sfvwrite_r+0x388>
    8650:	80800917 	ldw	r2,36(r16)
    8654:	81400717 	ldw	r5,28(r16)
    8658:	a809883a 	mov	r4,r21
    865c:	b00d883a 	mov	r6,r22
    8660:	103ee83a 	callr	r2
    8664:	1027883a 	mov	r19,r2
    8668:	00bfb20e 	bge	zero,r2,8534 <__sfvwrite_r+0x1fc>
    866c:	1039883a 	mov	fp,r2
    8670:	003f9806 	br	84d4 <__sfvwrite_r+0x19c>
    8674:	b80d883a 	mov	r6,r23
    8678:	e00b883a 	mov	r5,fp
    867c:	d8c00015 	stw	r3,0(sp)
    8680:	00091d80 	call	91d8 <memmove>
    8684:	80800217 	ldw	r2,8(r16)
    8688:	81000017 	ldw	r4,0(r16)
    868c:	b827883a 	mov	r19,r23
    8690:	15c5c83a 	sub	r2,r2,r23
    8694:	25ef883a 	add	r23,r4,r23
    8698:	80800215 	stw	r2,8(r16)
    869c:	85c00015 	stw	r23,0(r16)
    86a0:	d8c00017 	ldw	r3,0(sp)
    86a4:	003fc106 	br	85ac <__sfvwrite_r+0x274>
    86a8:	81000017 	ldw	r4,0(r16)
    86ac:	902f883a 	mov	r23,r18
    86b0:	9039883a 	mov	fp,r18
    86b4:	9027883a 	mov	r19,r18
    86b8:	900f883a 	mov	r7,r18
    86bc:	003f7a06 	br	84a8 <__sfvwrite_r+0x170>
    86c0:	b00b883a 	mov	r5,r22
    86c4:	900d883a 	mov	r6,r18
    86c8:	00091d80 	call	91d8 <memmove>
    86cc:	80c00217 	ldw	r3,8(r16)
    86d0:	80800017 	ldw	r2,0(r16)
    86d4:	9027883a 	mov	r19,r18
    86d8:	1c87c83a 	sub	r3,r3,r18
    86dc:	1485883a 	add	r2,r2,r18
    86e0:	80c00215 	stw	r3,8(r16)
    86e4:	80800015 	stw	r2,0(r16)
    86e8:	9039883a 	mov	fp,r18
    86ec:	003f7906 	br	84d4 <__sfvwrite_r+0x19c>
    86f0:	e009883a 	mov	r4,fp
    86f4:	01400284 	movi	r5,10
    86f8:	900d883a 	mov	r6,r18
    86fc:	0008fa00 	call	8fa0 <memchr>
    8700:	10003c26 	beq	r2,zero,87f4 <__sfvwrite_r+0x4bc>
    8704:	15800044 	addi	r22,r2,1
    8708:	b72dc83a 	sub	r22,r22,fp
    870c:	00c00044 	movi	r3,1
    8710:	003f9206 	br	855c <__sfvwrite_r+0x224>
    8714:	81000517 	ldw	r4,20(r16)
    8718:	81400417 	ldw	r5,16(r16)
    871c:	80c00017 	ldw	r3,0(r16)
    8720:	210d883a 	add	r6,r4,r4
    8724:	3109883a 	add	r4,r6,r4
    8728:	2026d7fa 	srli	r19,r4,31
    872c:	1979c83a 	sub	fp,r3,r5
    8730:	e1800044 	addi	r6,fp,1
    8734:	9909883a 	add	r4,r19,r4
    8738:	2027d07a 	srai	r19,r4,1
    873c:	3489883a 	add	r4,r6,r18
    8740:	980d883a 	mov	r6,r19
    8744:	9900022e 	bgeu	r19,r4,8750 <__sfvwrite_r+0x418>
    8748:	2027883a 	mov	r19,r4
    874c:	200d883a 	mov	r6,r4
    8750:	1081000c 	andi	r2,r2,1024
    8754:	10bfffcc 	andi	r2,r2,65535
    8758:	10a0001c 	xori	r2,r2,32768
    875c:	10a00004 	addi	r2,r2,-32768
    8760:	a809883a 	mov	r4,r21
    8764:	103f6b26 	beq	r2,zero,8514 <__sfvwrite_r+0x1dc>
    8768:	300b883a 	mov	r5,r6
    876c:	000881c0 	call	881c <_malloc_r>
    8770:	102f883a 	mov	r23,r2
    8774:	103f6d26 	beq	r2,zero,852c <__sfvwrite_r+0x1f4>
    8778:	81400417 	ldw	r5,16(r16)
    877c:	1009883a 	mov	r4,r2
    8780:	e00d883a 	mov	r6,fp
    8784:	00090980 	call	9098 <memcpy>
    8788:	8080030b 	ldhu	r2,12(r16)
    878c:	00fedfc4 	movi	r3,-1153
    8790:	10c4703a 	and	r2,r2,r3
    8794:	10802014 	ori	r2,r2,128
    8798:	8080030d 	sth	r2,12(r16)
    879c:	bf09883a 	add	r4,r23,fp
    87a0:	9f07c83a 	sub	r3,r19,fp
    87a4:	85c00415 	stw	r23,16(r16)
    87a8:	84c00515 	stw	r19,20(r16)
    87ac:	81000015 	stw	r4,0(r16)
    87b0:	902f883a 	mov	r23,r18
    87b4:	80c00215 	stw	r3,8(r16)
    87b8:	9039883a 	mov	fp,r18
    87bc:	9027883a 	mov	r19,r18
    87c0:	900f883a 	mov	r7,r18
    87c4:	003f3806 	br	84a8 <__sfvwrite_r+0x170>
    87c8:	b00b883a 	mov	r5,r22
    87cc:	980d883a 	mov	r6,r19
    87d0:	00091d80 	call	91d8 <memmove>
    87d4:	80800017 	ldw	r2,0(r16)
    87d8:	a809883a 	mov	r4,r21
    87dc:	800b883a 	mov	r5,r16
    87e0:	14c5883a 	add	r2,r2,r19
    87e4:	80800015 	stw	r2,0(r16)
    87e8:	0009b380 	call	9b38 <_fflush_r>
    87ec:	103f3926 	beq	r2,zero,84d4 <__sfvwrite_r+0x19c>
    87f0:	003f5006 	br	8534 <__sfvwrite_r+0x1fc>
    87f4:	95800044 	addi	r22,r18,1
    87f8:	00c00044 	movi	r3,1
    87fc:	003f5706 	br	855c <__sfvwrite_r+0x224>
    8800:	80c0030b 	ldhu	r3,12(r16)
    8804:	00bfffc4 	movi	r2,-1
    8808:	18c01014 	ori	r3,r3,64
    880c:	80c0030d 	sth	r3,12(r16)
    8810:	00c00244 	movi	r3,9
    8814:	a8c00015 	stw	r3,0(r21)
    8818:	003ef906 	br	8400 <__sfvwrite_r+0xc8>

0000881c <_malloc_r>:
    881c:	defff604 	addi	sp,sp,-40
    8820:	dc800215 	stw	r18,8(sp)
    8824:	dfc00915 	stw	ra,36(sp)
    8828:	df000815 	stw	fp,32(sp)
    882c:	ddc00715 	stw	r23,28(sp)
    8830:	dd800615 	stw	r22,24(sp)
    8834:	dd400515 	stw	r21,20(sp)
    8838:	dd000415 	stw	r20,16(sp)
    883c:	dcc00315 	stw	r19,12(sp)
    8840:	dc400115 	stw	r17,4(sp)
    8844:	dc000015 	stw	r16,0(sp)
    8848:	288002c4 	addi	r2,r5,11
    884c:	00c00584 	movi	r3,22
    8850:	2025883a 	mov	r18,r4
    8854:	18802b2e 	bgeu	r3,r2,8904 <_malloc_r+0xe8>
    8858:	047ffe04 	movi	r17,-8
    885c:	1462703a 	and	r17,r2,r17
    8860:	88002a16 	blt	r17,zero,890c <_malloc_r+0xf0>
    8864:	89402936 	bltu	r17,r5,890c <_malloc_r+0xf0>
    8868:	9009883a 	mov	r4,r18
    886c:	000b3000 	call	b300 <__malloc_lock>
    8870:	00807dc4 	movi	r2,503
    8874:	14402936 	bltu	r2,r17,891c <_malloc_r+0x100>
    8878:	8808d0fa 	srli	r4,r17,3
    887c:	04c00074 	movhi	r19,1
    8880:	9cf15504 	addi	r19,r19,-15020
    8884:	2105883a 	add	r2,r4,r4
    8888:	1085883a 	add	r2,r2,r2
    888c:	1085883a 	add	r2,r2,r2
    8890:	9885883a 	add	r2,r19,r2
    8894:	14000317 	ldw	r16,12(r2)
    8898:	80815526 	beq	r16,r2,8df0 <_malloc_r+0x5d4>
    889c:	81000117 	ldw	r4,4(r16)
    88a0:	00bfff04 	movi	r2,-4
    88a4:	80c00317 	ldw	r3,12(r16)
    88a8:	2084703a 	and	r2,r4,r2
    88ac:	8085883a 	add	r2,r16,r2
    88b0:	11800117 	ldw	r6,4(r2)
    88b4:	81400217 	ldw	r5,8(r16)
    88b8:	9009883a 	mov	r4,r18
    88bc:	31800054 	ori	r6,r6,1
    88c0:	11800115 	stw	r6,4(r2)
    88c4:	28c00315 	stw	r3,12(r5)
    88c8:	19400215 	stw	r5,8(r3)
    88cc:	000b3200 	call	b320 <__malloc_unlock>
    88d0:	80800204 	addi	r2,r16,8
    88d4:	dfc00917 	ldw	ra,36(sp)
    88d8:	df000817 	ldw	fp,32(sp)
    88dc:	ddc00717 	ldw	r23,28(sp)
    88e0:	dd800617 	ldw	r22,24(sp)
    88e4:	dd400517 	ldw	r21,20(sp)
    88e8:	dd000417 	ldw	r20,16(sp)
    88ec:	dcc00317 	ldw	r19,12(sp)
    88f0:	dc800217 	ldw	r18,8(sp)
    88f4:	dc400117 	ldw	r17,4(sp)
    88f8:	dc000017 	ldw	r16,0(sp)
    88fc:	dec00a04 	addi	sp,sp,40
    8900:	f800283a 	ret
    8904:	04400404 	movi	r17,16
    8908:	897fd72e 	bgeu	r17,r5,8868 <_malloc_r+0x4c>
    890c:	00800304 	movi	r2,12
    8910:	90800015 	stw	r2,0(r18)
    8914:	0005883a 	mov	r2,zero
    8918:	003fee06 	br	88d4 <_malloc_r+0xb8>
    891c:	8808d27a 	srli	r4,r17,9
    8920:	20007126 	beq	r4,zero,8ae8 <_malloc_r+0x2cc>
    8924:	00800104 	movi	r2,4
    8928:	1100eb36 	bltu	r2,r4,8cd8 <_malloc_r+0x4bc>
    892c:	8808d1ba 	srli	r4,r17,6
    8930:	21000e04 	addi	r4,r4,56
    8934:	210b883a 	add	r5,r4,r4
    8938:	294b883a 	add	r5,r5,r5
    893c:	294b883a 	add	r5,r5,r5
    8940:	04c00074 	movhi	r19,1
    8944:	9cf15504 	addi	r19,r19,-15020
    8948:	994b883a 	add	r5,r19,r5
    894c:	2c000317 	ldw	r16,12(r5)
    8950:	2c000e26 	beq	r5,r16,898c <_malloc_r+0x170>
    8954:	80c00117 	ldw	r3,4(r16)
    8958:	01ffff04 	movi	r7,-4
    895c:	018003c4 	movi	r6,15
    8960:	19c6703a 	and	r3,r3,r7
    8964:	1c45c83a 	sub	r2,r3,r17
    8968:	30800716 	blt	r6,r2,8988 <_malloc_r+0x16c>
    896c:	1000610e 	bge	r2,zero,8af4 <_malloc_r+0x2d8>
    8970:	84000317 	ldw	r16,12(r16)
    8974:	2c000526 	beq	r5,r16,898c <_malloc_r+0x170>
    8978:	80c00117 	ldw	r3,4(r16)
    897c:	19c6703a 	and	r3,r3,r7
    8980:	1c45c83a 	sub	r2,r3,r17
    8984:	30bff90e 	bge	r6,r2,896c <_malloc_r+0x150>
    8988:	213fffc4 	addi	r4,r4,-1
    898c:	21000044 	addi	r4,r4,1
    8990:	9c000417 	ldw	r16,16(r19)
    8994:	00c00074 	movhi	r3,1
    8998:	18f15504 	addi	r3,r3,-15020
    899c:	1a400204 	addi	r9,r3,8
    89a0:	8240ff26 	beq	r16,r9,8da0 <_malloc_r+0x584>
    89a4:	81400117 	ldw	r5,4(r16)
    89a8:	00bfff04 	movi	r2,-4
    89ac:	018003c4 	movi	r6,15
    89b0:	2884703a 	and	r2,r5,r2
    89b4:	144bc83a 	sub	r5,r2,r17
    89b8:	3140ea16 	blt	r6,r5,8d64 <_malloc_r+0x548>
    89bc:	1a400515 	stw	r9,20(r3)
    89c0:	1a400415 	stw	r9,16(r3)
    89c4:	2800570e 	bge	r5,zero,8b24 <_malloc_r+0x308>
    89c8:	01407fc4 	movi	r5,511
    89cc:	2880ca36 	bltu	r5,r2,8cf8 <_malloc_r+0x4dc>
    89d0:	1004d0fa 	srli	r2,r2,3
    89d4:	02000044 	movi	r8,1
    89d8:	19c00117 	ldw	r7,4(r3)
    89dc:	108b883a 	add	r5,r2,r2
    89e0:	294b883a 	add	r5,r5,r5
    89e4:	1005d0ba 	srai	r2,r2,2
    89e8:	294b883a 	add	r5,r5,r5
    89ec:	28cb883a 	add	r5,r5,r3
    89f0:	29800217 	ldw	r6,8(r5)
    89f4:	4084983a 	sll	r2,r8,r2
    89f8:	81400315 	stw	r5,12(r16)
    89fc:	81800215 	stw	r6,8(r16)
    8a00:	11c4b03a 	or	r2,r2,r7
    8a04:	18800115 	stw	r2,4(r3)
    8a08:	2c000215 	stw	r16,8(r5)
    8a0c:	34000315 	stw	r16,12(r6)
    8a10:	200bd0ba 	srai	r5,r4,2
    8a14:	00c00044 	movi	r3,1
    8a18:	194a983a 	sll	r5,r3,r5
    8a1c:	11404936 	bltu	r2,r5,8b44 <_malloc_r+0x328>
    8a20:	1146703a 	and	r3,r2,r5
    8a24:	18000a1e 	bne	r3,zero,8a50 <_malloc_r+0x234>
    8a28:	00ffff04 	movi	r3,-4
    8a2c:	294b883a 	add	r5,r5,r5
    8a30:	20c8703a 	and	r4,r4,r3
    8a34:	1146703a 	and	r3,r2,r5
    8a38:	21000104 	addi	r4,r4,4
    8a3c:	1800041e 	bne	r3,zero,8a50 <_malloc_r+0x234>
    8a40:	294b883a 	add	r5,r5,r5
    8a44:	1146703a 	and	r3,r2,r5
    8a48:	21000104 	addi	r4,r4,4
    8a4c:	183ffc26 	beq	r3,zero,8a40 <_malloc_r+0x224>
    8a50:	023fff04 	movi	r8,-4
    8a54:	01c003c4 	movi	r7,15
    8a58:	2105883a 	add	r2,r4,r4
    8a5c:	1085883a 	add	r2,r2,r2
    8a60:	1085883a 	add	r2,r2,r2
    8a64:	9899883a 	add	r12,r19,r2
    8a68:	62800304 	addi	r10,r12,12
    8a6c:	2017883a 	mov	r11,r4
    8a70:	54000017 	ldw	r16,0(r10)
    8a74:	51bffd04 	addi	r6,r10,-12
    8a78:	8180041e 	bne	r16,r6,8a8c <_malloc_r+0x270>
    8a7c:	0000ca06 	br	8da8 <_malloc_r+0x58c>
    8a80:	10001c0e 	bge	r2,zero,8af4 <_malloc_r+0x2d8>
    8a84:	84000317 	ldw	r16,12(r16)
    8a88:	8180c726 	beq	r16,r6,8da8 <_malloc_r+0x58c>
    8a8c:	80c00117 	ldw	r3,4(r16)
    8a90:	1a06703a 	and	r3,r3,r8
    8a94:	1c45c83a 	sub	r2,r3,r17
    8a98:	38bff90e 	bge	r7,r2,8a80 <_malloc_r+0x264>
    8a9c:	81000317 	ldw	r4,12(r16)
    8aa0:	81400217 	ldw	r5,8(r16)
    8aa4:	8447883a 	add	r3,r16,r17
    8aa8:	8c400054 	ori	r17,r17,1
    8aac:	29000315 	stw	r4,12(r5)
    8ab0:	21400215 	stw	r5,8(r4)
    8ab4:	84400115 	stw	r17,4(r16)
    8ab8:	1889883a 	add	r4,r3,r2
    8abc:	11400054 	ori	r5,r2,1
    8ac0:	98c00515 	stw	r3,20(r19)
    8ac4:	98c00415 	stw	r3,16(r19)
    8ac8:	20800015 	stw	r2,0(r4)
    8acc:	1a400315 	stw	r9,12(r3)
    8ad0:	1a400215 	stw	r9,8(r3)
    8ad4:	19400115 	stw	r5,4(r3)
    8ad8:	9009883a 	mov	r4,r18
    8adc:	000b3200 	call	b320 <__malloc_unlock>
    8ae0:	80800204 	addi	r2,r16,8
    8ae4:	003f7b06 	br	88d4 <_malloc_r+0xb8>
    8ae8:	8808d0fa 	srli	r4,r17,3
    8aec:	210b883a 	add	r5,r4,r4
    8af0:	003f9106 	br	8938 <_malloc_r+0x11c>
    8af4:	80c7883a 	add	r3,r16,r3
    8af8:	19400117 	ldw	r5,4(r3)
    8afc:	80800317 	ldw	r2,12(r16)
    8b00:	81000217 	ldw	r4,8(r16)
    8b04:	29400054 	ori	r5,r5,1
    8b08:	19400115 	stw	r5,4(r3)
    8b0c:	20800315 	stw	r2,12(r4)
    8b10:	11000215 	stw	r4,8(r2)
    8b14:	9009883a 	mov	r4,r18
    8b18:	000b3200 	call	b320 <__malloc_unlock>
    8b1c:	80800204 	addi	r2,r16,8
    8b20:	003f6c06 	br	88d4 <_malloc_r+0xb8>
    8b24:	8085883a 	add	r2,r16,r2
    8b28:	10c00117 	ldw	r3,4(r2)
    8b2c:	9009883a 	mov	r4,r18
    8b30:	18c00054 	ori	r3,r3,1
    8b34:	10c00115 	stw	r3,4(r2)
    8b38:	000b3200 	call	b320 <__malloc_unlock>
    8b3c:	80800204 	addi	r2,r16,8
    8b40:	003f6406 	br	88d4 <_malloc_r+0xb8>
    8b44:	9c000217 	ldw	r16,8(r19)
    8b48:	00bfff04 	movi	r2,-4
    8b4c:	85400117 	ldw	r21,4(r16)
    8b50:	a8aa703a 	and	r21,r21,r2
    8b54:	ac400336 	bltu	r21,r17,8b64 <_malloc_r+0x348>
    8b58:	ac45c83a 	sub	r2,r21,r17
    8b5c:	00c003c4 	movi	r3,15
    8b60:	18805316 	blt	r3,r2,8cb0 <_malloc_r+0x494>
    8b64:	d5e28a17 	ldw	r23,-30168(gp)
    8b68:	d0e00217 	ldw	r3,-32760(gp)
    8b6c:	00bfffc4 	movi	r2,-1
    8b70:	8579883a 	add	fp,r16,r21
    8b74:	8def883a 	add	r23,r17,r23
    8b78:	1880d226 	beq	r3,r2,8ec4 <_malloc_r+0x6a8>
    8b7c:	bdc403c4 	addi	r23,r23,4111
    8b80:	00bc0004 	movi	r2,-4096
    8b84:	b8ae703a 	and	r23,r23,r2
    8b88:	9009883a 	mov	r4,r18
    8b8c:	b80b883a 	mov	r5,r23
    8b90:	00099600 	call	9960 <_sbrk_r>
    8b94:	1029883a 	mov	r20,r2
    8b98:	00bfffc4 	movi	r2,-1
    8b9c:	a080d126 	beq	r20,r2,8ee4 <_malloc_r+0x6c8>
    8ba0:	a7009f36 	bltu	r20,fp,8e20 <_malloc_r+0x604>
    8ba4:	05800074 	movhi	r22,1
    8ba8:	b5b55304 	addi	r22,r22,-10932
    8bac:	b0800017 	ldw	r2,0(r22)
    8bb0:	b885883a 	add	r2,r23,r2
    8bb4:	b0800015 	stw	r2,0(r22)
    8bb8:	e500cf26 	beq	fp,r20,8ef8 <_malloc_r+0x6dc>
    8bbc:	d1200217 	ldw	r4,-32760(gp)
    8bc0:	00ffffc4 	movi	r3,-1
    8bc4:	20c0e026 	beq	r4,r3,8f48 <_malloc_r+0x72c>
    8bc8:	a739c83a 	sub	fp,r20,fp
    8bcc:	1705883a 	add	r2,r2,fp
    8bd0:	b0800015 	stw	r2,0(r22)
    8bd4:	a08001cc 	andi	r2,r20,7
    8bd8:	1000a526 	beq	r2,zero,8e70 <_malloc_r+0x654>
    8bdc:	a0a9c83a 	sub	r20,r20,r2
    8be0:	00c40204 	movi	r3,4104
    8be4:	a5000204 	addi	r20,r20,8
    8be8:	1885c83a 	sub	r2,r3,r2
    8bec:	a5c7883a 	add	r3,r20,r23
    8bf0:	18c3ffcc 	andi	r3,r3,4095
    8bf4:	10efc83a 	sub	r23,r2,r3
    8bf8:	9009883a 	mov	r4,r18
    8bfc:	b80b883a 	mov	r5,r23
    8c00:	00099600 	call	9960 <_sbrk_r>
    8c04:	00ffffc4 	movi	r3,-1
    8c08:	10c0cc26 	beq	r2,r3,8f3c <_malloc_r+0x720>
    8c0c:	1505c83a 	sub	r2,r2,r20
    8c10:	b887883a 	add	r3,r23,r2
    8c14:	18c00054 	ori	r3,r3,1
    8c18:	b0800017 	ldw	r2,0(r22)
    8c1c:	9d000215 	stw	r20,8(r19)
    8c20:	a0c00115 	stw	r3,4(r20)
    8c24:	b885883a 	add	r2,r23,r2
    8c28:	b0800015 	stw	r2,0(r22)
    8c2c:	84c00e26 	beq	r16,r19,8c68 <_malloc_r+0x44c>
    8c30:	00c003c4 	movi	r3,15
    8c34:	1d40902e 	bgeu	r3,r21,8e78 <_malloc_r+0x65c>
    8c38:	ad7ffd04 	addi	r21,r21,-12
    8c3c:	013ffe04 	movi	r4,-8
    8c40:	a908703a 	and	r4,r21,r4
    8c44:	810b883a 	add	r5,r16,r4
    8c48:	01800144 	movi	r6,5
    8c4c:	29800115 	stw	r6,4(r5)
    8c50:	29800215 	stw	r6,8(r5)
    8c54:	81400117 	ldw	r5,4(r16)
    8c58:	2940004c 	andi	r5,r5,1
    8c5c:	214ab03a 	or	r5,r4,r5
    8c60:	81400115 	stw	r5,4(r16)
    8c64:	1900ae36 	bltu	r3,r4,8f20 <_malloc_r+0x704>
    8c68:	d0e28917 	ldw	r3,-30172(gp)
    8c6c:	1880012e 	bgeu	r3,r2,8c74 <_malloc_r+0x458>
    8c70:	d0a28915 	stw	r2,-30172(gp)
    8c74:	d0e28817 	ldw	r3,-30176(gp)
    8c78:	9c000217 	ldw	r16,8(r19)
    8c7c:	1880012e 	bgeu	r3,r2,8c84 <_malloc_r+0x468>
    8c80:	d0a28815 	stw	r2,-30176(gp)
    8c84:	80c00117 	ldw	r3,4(r16)
    8c88:	00bfff04 	movi	r2,-4
    8c8c:	1886703a 	and	r3,r3,r2
    8c90:	1c45c83a 	sub	r2,r3,r17
    8c94:	1c400236 	bltu	r3,r17,8ca0 <_malloc_r+0x484>
    8c98:	00c003c4 	movi	r3,15
    8c9c:	18800416 	blt	r3,r2,8cb0 <_malloc_r+0x494>
    8ca0:	9009883a 	mov	r4,r18
    8ca4:	000b3200 	call	b320 <__malloc_unlock>
    8ca8:	0005883a 	mov	r2,zero
    8cac:	003f0906 	br	88d4 <_malloc_r+0xb8>
    8cb0:	88c00054 	ori	r3,r17,1
    8cb4:	10800054 	ori	r2,r2,1
    8cb8:	80c00115 	stw	r3,4(r16)
    8cbc:	8463883a 	add	r17,r16,r17
    8cc0:	88800115 	stw	r2,4(r17)
    8cc4:	9009883a 	mov	r4,r18
    8cc8:	9c400215 	stw	r17,8(r19)
    8ccc:	000b3200 	call	b320 <__malloc_unlock>
    8cd0:	80800204 	addi	r2,r16,8
    8cd4:	003eff06 	br	88d4 <_malloc_r+0xb8>
    8cd8:	00800504 	movi	r2,20
    8cdc:	1100492e 	bgeu	r2,r4,8e04 <_malloc_r+0x5e8>
    8ce0:	00801504 	movi	r2,84
    8ce4:	11005c36 	bltu	r2,r4,8e58 <_malloc_r+0x63c>
    8ce8:	8808d33a 	srli	r4,r17,12
    8cec:	21001b84 	addi	r4,r4,110
    8cf0:	210b883a 	add	r5,r4,r4
    8cf4:	003f1006 	br	8938 <_malloc_r+0x11c>
    8cf8:	1006d27a 	srli	r3,r2,9
    8cfc:	01400104 	movi	r5,4
    8d00:	28c0432e 	bgeu	r5,r3,8e10 <_malloc_r+0x5f4>
    8d04:	01400504 	movi	r5,20
    8d08:	28c07036 	bltu	r5,r3,8ecc <_malloc_r+0x6b0>
    8d0c:	194016c4 	addi	r5,r3,91
    8d10:	294d883a 	add	r6,r5,r5
    8d14:	318d883a 	add	r6,r6,r6
    8d18:	318d883a 	add	r6,r6,r6
    8d1c:	998d883a 	add	r6,r19,r6
    8d20:	30c00217 	ldw	r3,8(r6)
    8d24:	01c00074 	movhi	r7,1
    8d28:	39f15504 	addi	r7,r7,-15020
    8d2c:	19805726 	beq	r3,r6,8e8c <_malloc_r+0x670>
    8d30:	01ffff04 	movi	r7,-4
    8d34:	19400117 	ldw	r5,4(r3)
    8d38:	29ca703a 	and	r5,r5,r7
    8d3c:	1140022e 	bgeu	r2,r5,8d48 <_malloc_r+0x52c>
    8d40:	18c00217 	ldw	r3,8(r3)
    8d44:	30fffb1e 	bne	r6,r3,8d34 <_malloc_r+0x518>
    8d48:	19400317 	ldw	r5,12(r3)
    8d4c:	98800117 	ldw	r2,4(r19)
    8d50:	81400315 	stw	r5,12(r16)
    8d54:	80c00215 	stw	r3,8(r16)
    8d58:	2c000215 	stw	r16,8(r5)
    8d5c:	1c000315 	stw	r16,12(r3)
    8d60:	003f2b06 	br	8a10 <_malloc_r+0x1f4>
    8d64:	8445883a 	add	r2,r16,r17
    8d68:	8c400054 	ori	r17,r17,1
    8d6c:	18800515 	stw	r2,20(r3)
    8d70:	18800415 	stw	r2,16(r3)
    8d74:	29000054 	ori	r4,r5,1
    8d78:	1147883a 	add	r3,r2,r5
    8d7c:	84400115 	stw	r17,4(r16)
    8d80:	11000115 	stw	r4,4(r2)
    8d84:	12400315 	stw	r9,12(r2)
    8d88:	12400215 	stw	r9,8(r2)
    8d8c:	19400015 	stw	r5,0(r3)
    8d90:	9009883a 	mov	r4,r18
    8d94:	000b3200 	call	b320 <__malloc_unlock>
    8d98:	80800204 	addi	r2,r16,8
    8d9c:	003ecd06 	br	88d4 <_malloc_r+0xb8>
    8da0:	18800117 	ldw	r2,4(r3)
    8da4:	003f1a06 	br	8a10 <_malloc_r+0x1f4>
    8da8:	5ac00044 	addi	r11,r11,1
    8dac:	588000cc 	andi	r2,r11,3
    8db0:	52800204 	addi	r10,r10,8
    8db4:	103f2e1e 	bne	r2,zero,8a70 <_malloc_r+0x254>
    8db8:	20c000cc 	andi	r3,r4,3
    8dbc:	60bffe04 	addi	r2,r12,-8
    8dc0:	18006f26 	beq	r3,zero,8f80 <_malloc_r+0x764>
    8dc4:	63000017 	ldw	r12,0(r12)
    8dc8:	213fffc4 	addi	r4,r4,-1
    8dcc:	60bffa26 	beq	r12,r2,8db8 <_malloc_r+0x59c>
    8dd0:	98800117 	ldw	r2,4(r19)
    8dd4:	294b883a 	add	r5,r5,r5
    8dd8:	117f5a36 	bltu	r2,r5,8b44 <_malloc_r+0x328>
    8ddc:	283f5926 	beq	r5,zero,8b44 <_malloc_r+0x328>
    8de0:	1146703a 	and	r3,r2,r5
    8de4:	18001626 	beq	r3,zero,8e40 <_malloc_r+0x624>
    8de8:	5809883a 	mov	r4,r11
    8dec:	003f1a06 	br	8a58 <_malloc_r+0x23c>
    8df0:	80800204 	addi	r2,r16,8
    8df4:	84000517 	ldw	r16,20(r16)
    8df8:	143ea81e 	bne	r2,r16,889c <_malloc_r+0x80>
    8dfc:	21000084 	addi	r4,r4,2
    8e00:	003ee306 	br	8990 <_malloc_r+0x174>
    8e04:	210016c4 	addi	r4,r4,91
    8e08:	210b883a 	add	r5,r4,r4
    8e0c:	003eca06 	br	8938 <_malloc_r+0x11c>
    8e10:	100ad1ba 	srli	r5,r2,6
    8e14:	29400e04 	addi	r5,r5,56
    8e18:	294d883a 	add	r6,r5,r5
    8e1c:	003fbd06 	br	8d14 <_malloc_r+0x4f8>
    8e20:	84ff6026 	beq	r16,r19,8ba4 <_malloc_r+0x388>
    8e24:	00800074 	movhi	r2,1
    8e28:	10b15504 	addi	r2,r2,-15020
    8e2c:	14000217 	ldw	r16,8(r2)
    8e30:	00bfff04 	movi	r2,-4
    8e34:	80c00117 	ldw	r3,4(r16)
    8e38:	1886703a 	and	r3,r3,r2
    8e3c:	003f9406 	br	8c90 <_malloc_r+0x474>
    8e40:	294b883a 	add	r5,r5,r5
    8e44:	1146703a 	and	r3,r2,r5
    8e48:	5ac00104 	addi	r11,r11,4
    8e4c:	183ffc26 	beq	r3,zero,8e40 <_malloc_r+0x624>
    8e50:	5809883a 	mov	r4,r11
    8e54:	003f0006 	br	8a58 <_malloc_r+0x23c>
    8e58:	00805504 	movi	r2,340
    8e5c:	11001336 	bltu	r2,r4,8eac <_malloc_r+0x690>
    8e60:	8808d3fa 	srli	r4,r17,15
    8e64:	21001dc4 	addi	r4,r4,119
    8e68:	210b883a 	add	r5,r4,r4
    8e6c:	003eb206 	br	8938 <_malloc_r+0x11c>
    8e70:	00840004 	movi	r2,4096
    8e74:	003f5d06 	br	8bec <_malloc_r+0x3d0>
    8e78:	00800044 	movi	r2,1
    8e7c:	a0800115 	stw	r2,4(r20)
    8e80:	a021883a 	mov	r16,r20
    8e84:	0007883a 	mov	r3,zero
    8e88:	003f8106 	br	8c90 <_malloc_r+0x474>
    8e8c:	280bd0ba 	srai	r5,r5,2
    8e90:	01800044 	movi	r6,1
    8e94:	38800117 	ldw	r2,4(r7)
    8e98:	314c983a 	sll	r6,r6,r5
    8e9c:	180b883a 	mov	r5,r3
    8ea0:	3084b03a 	or	r2,r6,r2
    8ea4:	38800115 	stw	r2,4(r7)
    8ea8:	003fa906 	br	8d50 <_malloc_r+0x534>
    8eac:	00815504 	movi	r2,1364
    8eb0:	11001836 	bltu	r2,r4,8f14 <_malloc_r+0x6f8>
    8eb4:	8808d4ba 	srli	r4,r17,18
    8eb8:	21001f04 	addi	r4,r4,124
    8ebc:	210b883a 	add	r5,r4,r4
    8ec0:	003e9d06 	br	8938 <_malloc_r+0x11c>
    8ec4:	bdc00404 	addi	r23,r23,16
    8ec8:	003f2f06 	br	8b88 <_malloc_r+0x36c>
    8ecc:	01401504 	movi	r5,84
    8ed0:	28c01f36 	bltu	r5,r3,8f50 <_malloc_r+0x734>
    8ed4:	100ad33a 	srli	r5,r2,12
    8ed8:	29401b84 	addi	r5,r5,110
    8edc:	294d883a 	add	r6,r5,r5
    8ee0:	003f8c06 	br	8d14 <_malloc_r+0x4f8>
    8ee4:	9c000217 	ldw	r16,8(r19)
    8ee8:	00bfff04 	movi	r2,-4
    8eec:	80c00117 	ldw	r3,4(r16)
    8ef0:	1886703a 	and	r3,r3,r2
    8ef4:	003f6606 	br	8c90 <_malloc_r+0x474>
    8ef8:	e0c3ffcc 	andi	r3,fp,4095
    8efc:	183f2f1e 	bne	r3,zero,8bbc <_malloc_r+0x3a0>
    8f00:	98c00217 	ldw	r3,8(r19)
    8f04:	bd49883a 	add	r4,r23,r21
    8f08:	21000054 	ori	r4,r4,1
    8f0c:	19000115 	stw	r4,4(r3)
    8f10:	003f5506 	br	8c68 <_malloc_r+0x44c>
    8f14:	01403f04 	movi	r5,252
    8f18:	01001f84 	movi	r4,126
    8f1c:	003e8606 	br	8938 <_malloc_r+0x11c>
    8f20:	9009883a 	mov	r4,r18
    8f24:	81400204 	addi	r5,r16,8
    8f28:	000a1780 	call	a178 <_free_r>
    8f2c:	00800074 	movhi	r2,1
    8f30:	10b55304 	addi	r2,r2,-10932
    8f34:	10800017 	ldw	r2,0(r2)
    8f38:	003f4b06 	br	8c68 <_malloc_r+0x44c>
    8f3c:	00c00044 	movi	r3,1
    8f40:	002f883a 	mov	r23,zero
    8f44:	003f3406 	br	8c18 <_malloc_r+0x3fc>
    8f48:	d5200215 	stw	r20,-32760(gp)
    8f4c:	003f2106 	br	8bd4 <_malloc_r+0x3b8>
    8f50:	01405504 	movi	r5,340
    8f54:	28c00436 	bltu	r5,r3,8f68 <_malloc_r+0x74c>
    8f58:	100ad3fa 	srli	r5,r2,15
    8f5c:	29401dc4 	addi	r5,r5,119
    8f60:	294d883a 	add	r6,r5,r5
    8f64:	003f6b06 	br	8d14 <_malloc_r+0x4f8>
    8f68:	01415504 	movi	r5,1364
    8f6c:	28c00936 	bltu	r5,r3,8f94 <_malloc_r+0x778>
    8f70:	100ad4ba 	srli	r5,r2,18
    8f74:	29401f04 	addi	r5,r5,124
    8f78:	294d883a 	add	r6,r5,r5
    8f7c:	003f6506 	br	8d14 <_malloc_r+0x4f8>
    8f80:	98800117 	ldw	r2,4(r19)
    8f84:	0146303a 	nor	r3,zero,r5
    8f88:	1884703a 	and	r2,r3,r2
    8f8c:	98800115 	stw	r2,4(r19)
    8f90:	003f9006 	br	8dd4 <_malloc_r+0x5b8>
    8f94:	01803f04 	movi	r6,252
    8f98:	01401f84 	movi	r5,126
    8f9c:	003f5d06 	br	8d14 <_malloc_r+0x4f8>

00008fa0 <memchr>:
    8fa0:	008000c4 	movi	r2,3
    8fa4:	29403fcc 	andi	r5,r5,255
    8fa8:	1180282e 	bgeu	r2,r6,904c <memchr+0xac>
    8fac:	2086703a 	and	r3,r4,r2
    8fb0:	1800351e 	bne	r3,zero,9088 <memchr+0xe8>
    8fb4:	2816923a 	slli	r11,r5,8
    8fb8:	2093883a 	add	r9,r4,r2
    8fbc:	22000084 	addi	r8,r4,2
    8fc0:	5957883a 	add	r11,r11,r5
    8fc4:	5816923a 	slli	r11,r11,8
    8fc8:	20c00044 	addi	r3,r4,1
    8fcc:	037fbff4 	movhi	r13,65279
    8fd0:	6b7fbfc4 	addi	r13,r13,-257
    8fd4:	5957883a 	add	r11,r11,r5
    8fd8:	5816923a 	slli	r11,r11,8
    8fdc:	03202074 	movhi	r12,32897
    8fe0:	63202004 	addi	r12,r12,-32640
    8fe4:	101d883a 	mov	r14,r2
    8fe8:	5957883a 	add	r11,r11,r5
    8fec:	21c00017 	ldw	r7,0(r4)
    8ff0:	31bfff04 	addi	r6,r6,-4
    8ff4:	1805883a 	mov	r2,r3
    8ff8:	3acef03a 	xor	r7,r7,r11
    8ffc:	3b55883a 	add	r10,r7,r13
    9000:	01ce303a 	nor	r7,zero,r7
    9004:	51ce703a 	and	r7,r10,r7
    9008:	3b0e703a 	and	r7,r7,r12
    900c:	38000a26 	beq	r7,zero,9038 <memchr+0x98>
    9010:	21c00003 	ldbu	r7,0(r4)
    9014:	39401e26 	beq	r7,r5,9090 <memchr+0xf0>
    9018:	19c00003 	ldbu	r7,0(r3)
    901c:	39401926 	beq	r7,r5,9084 <memchr+0xe4>
    9020:	41c00003 	ldbu	r7,0(r8)
    9024:	4005883a 	mov	r2,r8
    9028:	39401626 	beq	r7,r5,9084 <memchr+0xe4>
    902c:	49c00003 	ldbu	r7,0(r9)
    9030:	4805883a 	mov	r2,r9
    9034:	39401326 	beq	r7,r5,9084 <memchr+0xe4>
    9038:	21000104 	addi	r4,r4,4
    903c:	4a400104 	addi	r9,r9,4
    9040:	42000104 	addi	r8,r8,4
    9044:	18c00104 	addi	r3,r3,4
    9048:	71bfe836 	bltu	r14,r6,8fec <memchr+0x4c>
    904c:	2005883a 	mov	r2,r4
    9050:	30000a26 	beq	r6,zero,907c <memchr+0xdc>
    9054:	10c00003 	ldbu	r3,0(r2)
    9058:	19400a26 	beq	r3,r5,9084 <memchr+0xe4>
    905c:	10c00044 	addi	r3,r2,1
    9060:	118d883a 	add	r6,r2,r6
    9064:	00000306 	br	9074 <memchr+0xd4>
    9068:	11000003 	ldbu	r4,0(r2)
    906c:	18c00044 	addi	r3,r3,1
    9070:	21400426 	beq	r4,r5,9084 <memchr+0xe4>
    9074:	1805883a 	mov	r2,r3
    9078:	19bffb1e 	bne	r3,r6,9068 <memchr+0xc8>
    907c:	0005883a 	mov	r2,zero
    9080:	f800283a 	ret
    9084:	f800283a 	ret
    9088:	2005883a 	mov	r2,r4
    908c:	003ff106 	br	9054 <memchr+0xb4>
    9090:	2005883a 	mov	r2,r4
    9094:	f800283a 	ret

00009098 <memcpy>:
    9098:	defffb04 	addi	sp,sp,-20
    909c:	dc000015 	stw	r16,0(sp)
    90a0:	dfc00415 	stw	ra,16(sp)
    90a4:	dcc00315 	stw	r19,12(sp)
    90a8:	dc800215 	stw	r18,8(sp)
    90ac:	dc400115 	stw	r17,4(sp)
    90b0:	00c003c4 	movi	r3,15
    90b4:	2021883a 	mov	r16,r4
    90b8:	3005883a 	mov	r2,r6
    90bc:	1980032e 	bgeu	r3,r6,90cc <memcpy+0x34>
    90c0:	2906b03a 	or	r3,r5,r4
    90c4:	18c000cc 	andi	r3,r3,3
    90c8:	18001026 	beq	r3,zero,910c <memcpy+0x74>
    90cc:	8007883a 	mov	r3,r16
    90d0:	288f883a 	add	r7,r5,r2
    90d4:	10000526 	beq	r2,zero,90ec <memcpy+0x54>
    90d8:	29800003 	ldbu	r6,0(r5)
    90dc:	18c00044 	addi	r3,r3,1
    90e0:	29400044 	addi	r5,r5,1
    90e4:	19bfffc5 	stb	r6,-1(r3)
    90e8:	29fffb1e 	bne	r5,r7,90d8 <memcpy+0x40>
    90ec:	8005883a 	mov	r2,r16
    90f0:	dfc00417 	ldw	ra,16(sp)
    90f4:	dcc00317 	ldw	r19,12(sp)
    90f8:	dc800217 	ldw	r18,8(sp)
    90fc:	dc400117 	ldw	r17,4(sp)
    9100:	dc000017 	ldw	r16,0(sp)
    9104:	dec00504 	addi	sp,sp,20
    9108:	f800283a 	ret
    910c:	32bffc04 	addi	r10,r6,-16
    9110:	5014d13a 	srli	r10,r10,4
    9114:	20800404 	addi	r2,r4,16
    9118:	2007883a 	mov	r3,r4
    911c:	5008913a 	slli	r4,r10,4
    9120:	280f883a 	mov	r7,r5
    9124:	1105883a 	add	r2,r2,r4
    9128:	3a000017 	ldw	r8,0(r7)
    912c:	18c00404 	addi	r3,r3,16
    9130:	39c00404 	addi	r7,r7,16
    9134:	1a3ffc15 	stw	r8,-16(r3)
    9138:	3a3ffd17 	ldw	r8,-12(r7)
    913c:	1a3ffd15 	stw	r8,-12(r3)
    9140:	3a3ffe17 	ldw	r8,-8(r7)
    9144:	1a3ffe15 	stw	r8,-8(r3)
    9148:	3a3fff17 	ldw	r8,-4(r7)
    914c:	1a3fff15 	stw	r8,-4(r3)
    9150:	18bff51e 	bne	r3,r2,9128 <memcpy+0x90>
    9154:	52800044 	addi	r10,r10,1
    9158:	5014913a 	slli	r10,r10,4
    915c:	308003cc 	andi	r2,r6,15
    9160:	010000c4 	movi	r4,3
    9164:	8287883a 	add	r3,r16,r10
    9168:	2a95883a 	add	r10,r5,r10
    916c:	2080182e 	bgeu	r4,r2,91d0 <memcpy+0x138>
    9170:	147fff04 	addi	r17,r2,-4
    9174:	8808d0ba 	srli	r4,r17,2
    9178:	1a400104 	addi	r9,r3,4
    917c:	180d883a 	mov	r6,r3
    9180:	2105883a 	add	r2,r4,r4
    9184:	1085883a 	add	r2,r2,r2
    9188:	4893883a 	add	r9,r9,r2
    918c:	500f883a 	mov	r7,r10
    9190:	3a000017 	ldw	r8,0(r7)
    9194:	31800104 	addi	r6,r6,4
    9198:	39c00104 	addi	r7,r7,4
    919c:	323fff15 	stw	r8,-4(r6)
    91a0:	327ffb1e 	bne	r6,r9,9190 <memcpy+0xf8>
    91a4:	20800044 	addi	r2,r4,1
    91a8:	1085883a 	add	r2,r2,r2
    91ac:	1085883a 	add	r2,r2,r2
    91b0:	017fff04 	movi	r5,-4
    91b4:	18a5883a 	add	r18,r3,r2
    91b8:	50a7883a 	add	r19,r10,r2
    91bc:	000ad300 	call	ad30 <__mulsi3>
    91c0:	1445883a 	add	r2,r2,r17
    91c4:	980b883a 	mov	r5,r19
    91c8:	9007883a 	mov	r3,r18
    91cc:	003fc006 	br	90d0 <memcpy+0x38>
    91d0:	500b883a 	mov	r5,r10
    91d4:	003fbe06 	br	90d0 <memcpy+0x38>

000091d8 <memmove>:
    91d8:	defffb04 	addi	sp,sp,-20
    91dc:	dc000015 	stw	r16,0(sp)
    91e0:	dfc00415 	stw	ra,16(sp)
    91e4:	dcc00315 	stw	r19,12(sp)
    91e8:	dc800215 	stw	r18,8(sp)
    91ec:	dc400115 	stw	r17,4(sp)
    91f0:	2021883a 	mov	r16,r4
    91f4:	300f883a 	mov	r7,r6
    91f8:	2900122e 	bgeu	r5,r4,9244 <memmove+0x6c>
    91fc:	2987883a 	add	r3,r5,r6
    9200:	20c0102e 	bgeu	r4,r3,9244 <memmove+0x6c>
    9204:	218b883a 	add	r5,r4,r6
    9208:	1989c83a 	sub	r4,r3,r6
    920c:	30000526 	beq	r6,zero,9224 <memmove+0x4c>
    9210:	18ffffc4 	addi	r3,r3,-1
    9214:	18800003 	ldbu	r2,0(r3)
    9218:	297fffc4 	addi	r5,r5,-1
    921c:	28800005 	stb	r2,0(r5)
    9220:	193ffb1e 	bne	r3,r4,9210 <memmove+0x38>
    9224:	8005883a 	mov	r2,r16
    9228:	dfc00417 	ldw	ra,16(sp)
    922c:	dcc00317 	ldw	r19,12(sp)
    9230:	dc800217 	ldw	r18,8(sp)
    9234:	dc400117 	ldw	r17,4(sp)
    9238:	dc000017 	ldw	r16,0(sp)
    923c:	dec00504 	addi	sp,sp,20
    9240:	f800283a 	ret
    9244:	008003c4 	movi	r2,15
    9248:	1180422e 	bgeu	r2,r6,9354 <memmove+0x17c>
    924c:	2c04b03a 	or	r2,r5,r16
    9250:	108000cc 	andi	r2,r2,3
    9254:	10003f1e 	bne	r2,zero,9354 <memmove+0x17c>
    9258:	32bffc04 	addi	r10,r6,-16
    925c:	5014d13a 	srli	r10,r10,4
    9260:	81000404 	addi	r4,r16,16
    9264:	8007883a 	mov	r3,r16
    9268:	5004913a 	slli	r2,r10,4
    926c:	280f883a 	mov	r7,r5
    9270:	2089883a 	add	r4,r4,r2
    9274:	38800017 	ldw	r2,0(r7)
    9278:	18c00404 	addi	r3,r3,16
    927c:	39c00404 	addi	r7,r7,16
    9280:	18bffc15 	stw	r2,-16(r3)
    9284:	38bffd17 	ldw	r2,-12(r7)
    9288:	18bffd15 	stw	r2,-12(r3)
    928c:	38bffe17 	ldw	r2,-8(r7)
    9290:	18bffe15 	stw	r2,-8(r3)
    9294:	38bfff17 	ldw	r2,-4(r7)
    9298:	18bfff15 	stw	r2,-4(r3)
    929c:	193ff51e 	bne	r3,r4,9274 <memmove+0x9c>
    92a0:	52800044 	addi	r10,r10,1
    92a4:	5014913a 	slli	r10,r10,4
    92a8:	31c003cc 	andi	r7,r6,15
    92ac:	008000c4 	movi	r2,3
    92b0:	8287883a 	add	r3,r16,r10
    92b4:	2a95883a 	add	r10,r5,r10
    92b8:	11c0282e 	bgeu	r2,r7,935c <memmove+0x184>
    92bc:	3c7fff04 	addi	r17,r7,-4
    92c0:	8808d0ba 	srli	r4,r17,2
    92c4:	1a400104 	addi	r9,r3,4
    92c8:	180d883a 	mov	r6,r3
    92cc:	2105883a 	add	r2,r4,r4
    92d0:	1085883a 	add	r2,r2,r2
    92d4:	4893883a 	add	r9,r9,r2
    92d8:	5005883a 	mov	r2,r10
    92dc:	12000017 	ldw	r8,0(r2)
    92e0:	31800104 	addi	r6,r6,4
    92e4:	10800104 	addi	r2,r2,4
    92e8:	323fff15 	stw	r8,-4(r6)
    92ec:	327ffb1e 	bne	r6,r9,92dc <memmove+0x104>
    92f0:	20800044 	addi	r2,r4,1
    92f4:	1085883a 	add	r2,r2,r2
    92f8:	1085883a 	add	r2,r2,r2
    92fc:	017fff04 	movi	r5,-4
    9300:	18a5883a 	add	r18,r3,r2
    9304:	50a7883a 	add	r19,r10,r2
    9308:	000ad300 	call	ad30 <__mulsi3>
    930c:	144f883a 	add	r7,r2,r17
    9310:	980b883a 	mov	r5,r19
    9314:	9007883a 	mov	r3,r18
    9318:	383fc226 	beq	r7,zero,9224 <memmove+0x4c>
    931c:	19cf883a 	add	r7,r3,r7
    9320:	29800003 	ldbu	r6,0(r5)
    9324:	18c00044 	addi	r3,r3,1
    9328:	29400044 	addi	r5,r5,1
    932c:	19bfffc5 	stb	r6,-1(r3)
    9330:	19fffb1e 	bne	r3,r7,9320 <memmove+0x148>
    9334:	8005883a 	mov	r2,r16
    9338:	dfc00417 	ldw	ra,16(sp)
    933c:	dcc00317 	ldw	r19,12(sp)
    9340:	dc800217 	ldw	r18,8(sp)
    9344:	dc400117 	ldw	r17,4(sp)
    9348:	dc000017 	ldw	r16,0(sp)
    934c:	dec00504 	addi	sp,sp,20
    9350:	f800283a 	ret
    9354:	8007883a 	mov	r3,r16
    9358:	003fef06 	br	9318 <memmove+0x140>
    935c:	500b883a 	mov	r5,r10
    9360:	003fed06 	br	9318 <memmove+0x140>

00009364 <_realloc_r>:
    9364:	defff504 	addi	sp,sp,-44
    9368:	dd400615 	stw	r21,24(sp)
    936c:	dc800315 	stw	r18,12(sp)
    9370:	dc000115 	stw	r16,4(sp)
    9374:	dfc00a15 	stw	ra,40(sp)
    9378:	df000915 	stw	fp,36(sp)
    937c:	ddc00815 	stw	r23,32(sp)
    9380:	dd800715 	stw	r22,28(sp)
    9384:	dd000515 	stw	r20,20(sp)
    9388:	dcc00415 	stw	r19,16(sp)
    938c:	dc400215 	stw	r17,8(sp)
    9390:	2821883a 	mov	r16,r5
    9394:	202b883a 	mov	r21,r4
    9398:	3025883a 	mov	r18,r6
    939c:	28009626 	beq	r5,zero,95f8 <_realloc_r+0x294>
    93a0:	000b3000 	call	b300 <__malloc_lock>
    93a4:	80bfff17 	ldw	r2,-4(r16)
    93a8:	04ffff04 	movi	r19,-4
    93ac:	90c002c4 	addi	r3,r18,11
    93b0:	01000584 	movi	r4,22
    93b4:	85bffe04 	addi	r22,r16,-8
    93b8:	14e6703a 	and	r19,r2,r19
    93bc:	20c0372e 	bgeu	r4,r3,949c <_realloc_r+0x138>
    93c0:	047ffe04 	movi	r17,-8
    93c4:	1c62703a 	and	r17,r3,r17
    93c8:	8807883a 	mov	r3,r17
    93cc:	88005a16 	blt	r17,zero,9538 <_realloc_r+0x1d4>
    93d0:	8c805936 	bltu	r17,r18,9538 <_realloc_r+0x1d4>
    93d4:	98c0340e 	bge	r19,r3,94a8 <_realloc_r+0x144>
    93d8:	07000074 	movhi	fp,1
    93dc:	e7315504 	addi	fp,fp,-15020
    93e0:	e1400217 	ldw	r5,8(fp)
    93e4:	b4c9883a 	add	r4,r22,r19
    93e8:	29009026 	beq	r5,r4,962c <_realloc_r+0x2c8>
    93ec:	21800117 	ldw	r6,4(r4)
    93f0:	01ffff84 	movi	r7,-2
    93f4:	31ce703a 	and	r7,r6,r7
    93f8:	21cf883a 	add	r7,r4,r7
    93fc:	39c00117 	ldw	r7,4(r7)
    9400:	39c0004c 	andi	r7,r7,1
    9404:	38004326 	beq	r7,zero,9514 <_realloc_r+0x1b0>
    9408:	000d883a 	mov	r6,zero
    940c:	0009883a 	mov	r4,zero
    9410:	1080004c 	andi	r2,r2,1
    9414:	10005a1e 	bne	r2,zero,9580 <_realloc_r+0x21c>
    9418:	85fffe17 	ldw	r23,-8(r16)
    941c:	00bfff04 	movi	r2,-4
    9420:	b5efc83a 	sub	r23,r22,r23
    9424:	b9c00117 	ldw	r7,4(r23)
    9428:	388e703a 	and	r7,r7,r2
    942c:	3ccf883a 	add	r7,r7,r19
    9430:	20005226 	beq	r4,zero,957c <_realloc_r+0x218>
    9434:	31e9883a 	add	r20,r6,r7
    9438:	2140c726 	beq	r4,r5,9758 <_realloc_r+0x3f4>
    943c:	a0c04f16 	blt	r20,r3,957c <_realloc_r+0x218>
    9440:	20800317 	ldw	r2,12(r4)
    9444:	20c00217 	ldw	r3,8(r4)
    9448:	99bfff04 	addi	r6,r19,-4
    944c:	01000904 	movi	r4,36
    9450:	18800315 	stw	r2,12(r3)
    9454:	10c00215 	stw	r3,8(r2)
    9458:	b8c00217 	ldw	r3,8(r23)
    945c:	b8800317 	ldw	r2,12(r23)
    9460:	bc800204 	addi	r18,r23,8
    9464:	18800315 	stw	r2,12(r3)
    9468:	10c00215 	stw	r3,8(r2)
    946c:	2180ed36 	bltu	r4,r6,9824 <_realloc_r+0x4c0>
    9470:	008004c4 	movi	r2,19
    9474:	11809b2e 	bgeu	r2,r6,96e4 <_realloc_r+0x380>
    9478:	80800017 	ldw	r2,0(r16)
    947c:	b8800215 	stw	r2,8(r23)
    9480:	80800117 	ldw	r2,4(r16)
    9484:	b8800315 	stw	r2,12(r23)
    9488:	008006c4 	movi	r2,27
    948c:	1180f936 	bltu	r2,r6,9874 <_realloc_r+0x510>
    9490:	b8800404 	addi	r2,r23,16
    9494:	80c00204 	addi	r3,r16,8
    9498:	00009406 	br	96ec <_realloc_r+0x388>
    949c:	00c00404 	movi	r3,16
    94a0:	1823883a 	mov	r17,r3
    94a4:	003fca06 	br	93d0 <_realloc_r+0x6c>
    94a8:	9829883a 	mov	r20,r19
    94ac:	a447c83a 	sub	r3,r20,r17
    94b0:	010003c4 	movi	r4,15
    94b4:	1080004c 	andi	r2,r2,1
    94b8:	20c02336 	bltu	r4,r3,9548 <_realloc_r+0x1e4>
    94bc:	1504b03a 	or	r2,r2,r20
    94c0:	b0800115 	stw	r2,4(r22)
    94c4:	b52d883a 	add	r22,r22,r20
    94c8:	b0800117 	ldw	r2,4(r22)
    94cc:	10800054 	ori	r2,r2,1
    94d0:	b0800115 	stw	r2,4(r22)
    94d4:	a809883a 	mov	r4,r21
    94d8:	000b3200 	call	b320 <__malloc_unlock>
    94dc:	8025883a 	mov	r18,r16
    94e0:	9005883a 	mov	r2,r18
    94e4:	dfc00a17 	ldw	ra,40(sp)
    94e8:	df000917 	ldw	fp,36(sp)
    94ec:	ddc00817 	ldw	r23,32(sp)
    94f0:	dd800717 	ldw	r22,28(sp)
    94f4:	dd400617 	ldw	r21,24(sp)
    94f8:	dd000517 	ldw	r20,20(sp)
    94fc:	dcc00417 	ldw	r19,16(sp)
    9500:	dc800317 	ldw	r18,12(sp)
    9504:	dc400217 	ldw	r17,8(sp)
    9508:	dc000117 	ldw	r16,4(sp)
    950c:	dec00b04 	addi	sp,sp,44
    9510:	f800283a 	ret
    9514:	01ffff04 	movi	r7,-4
    9518:	31cc703a 	and	r6,r6,r7
    951c:	34e9883a 	add	r20,r6,r19
    9520:	a0ffbb16 	blt	r20,r3,9410 <_realloc_r+0xac>
    9524:	20c00317 	ldw	r3,12(r4)
    9528:	21000217 	ldw	r4,8(r4)
    952c:	20c00315 	stw	r3,12(r4)
    9530:	19000215 	stw	r4,8(r3)
    9534:	003fdd06 	br	94ac <_realloc_r+0x148>
    9538:	00800304 	movi	r2,12
    953c:	a8800015 	stw	r2,0(r21)
    9540:	0025883a 	mov	r18,zero
    9544:	003fe606 	br	94e0 <_realloc_r+0x17c>
    9548:	1444b03a 	or	r2,r2,r17
    954c:	b0800115 	stw	r2,4(r22)
    9550:	b44b883a 	add	r5,r22,r17
    9554:	18800054 	ori	r2,r3,1
    9558:	28800115 	stw	r2,4(r5)
    955c:	28c7883a 	add	r3,r5,r3
    9560:	18800117 	ldw	r2,4(r3)
    9564:	a809883a 	mov	r4,r21
    9568:	29400204 	addi	r5,r5,8
    956c:	10800054 	ori	r2,r2,1
    9570:	18800115 	stw	r2,4(r3)
    9574:	000a1780 	call	a178 <_free_r>
    9578:	003fd606 	br	94d4 <_realloc_r+0x170>
    957c:	38c0330e 	bge	r7,r3,964c <_realloc_r+0x2e8>
    9580:	900b883a 	mov	r5,r18
    9584:	a809883a 	mov	r4,r21
    9588:	000881c0 	call	881c <_malloc_r>
    958c:	1025883a 	mov	r18,r2
    9590:	10001626 	beq	r2,zero,95ec <_realloc_r+0x288>
    9594:	80bfff17 	ldw	r2,-4(r16)
    9598:	00ffff84 	movi	r3,-2
    959c:	913ffe04 	addi	r4,r18,-8
    95a0:	10c6703a 	and	r3,r2,r3
    95a4:	b0c7883a 	add	r3,r22,r3
    95a8:	20c09926 	beq	r4,r3,9810 <_realloc_r+0x4ac>
    95ac:	99bfff04 	addi	r6,r19,-4
    95b0:	00800904 	movi	r2,36
    95b4:	11806436 	bltu	r2,r6,9748 <_realloc_r+0x3e4>
    95b8:	00c004c4 	movi	r3,19
    95bc:	19804036 	bltu	r3,r6,96c0 <_realloc_r+0x35c>
    95c0:	9005883a 	mov	r2,r18
    95c4:	8007883a 	mov	r3,r16
    95c8:	19000017 	ldw	r4,0(r3)
    95cc:	11000015 	stw	r4,0(r2)
    95d0:	19000117 	ldw	r4,4(r3)
    95d4:	11000115 	stw	r4,4(r2)
    95d8:	18c00217 	ldw	r3,8(r3)
    95dc:	10c00215 	stw	r3,8(r2)
    95e0:	a809883a 	mov	r4,r21
    95e4:	800b883a 	mov	r5,r16
    95e8:	000a1780 	call	a178 <_free_r>
    95ec:	a809883a 	mov	r4,r21
    95f0:	000b3200 	call	b320 <__malloc_unlock>
    95f4:	003fba06 	br	94e0 <_realloc_r+0x17c>
    95f8:	300b883a 	mov	r5,r6
    95fc:	dfc00a17 	ldw	ra,40(sp)
    9600:	df000917 	ldw	fp,36(sp)
    9604:	ddc00817 	ldw	r23,32(sp)
    9608:	dd800717 	ldw	r22,28(sp)
    960c:	dd400617 	ldw	r21,24(sp)
    9610:	dd000517 	ldw	r20,20(sp)
    9614:	dcc00417 	ldw	r19,16(sp)
    9618:	dc800317 	ldw	r18,12(sp)
    961c:	dc400217 	ldw	r17,8(sp)
    9620:	dc000117 	ldw	r16,4(sp)
    9624:	dec00b04 	addi	sp,sp,44
    9628:	000881c1 	jmpi	881c <_malloc_r>
    962c:	29800117 	ldw	r6,4(r5)
    9630:	013fff04 	movi	r4,-4
    9634:	89c00404 	addi	r7,r17,16
    9638:	310c703a 	and	r6,r6,r4
    963c:	34c9883a 	add	r4,r6,r19
    9640:	21c0340e 	bge	r4,r7,9714 <_realloc_r+0x3b0>
    9644:	2809883a 	mov	r4,r5
    9648:	003f7106 	br	9410 <_realloc_r+0xac>
    964c:	b8800317 	ldw	r2,12(r23)
    9650:	b8c00217 	ldw	r3,8(r23)
    9654:	99bfff04 	addi	r6,r19,-4
    9658:	01000904 	movi	r4,36
    965c:	18800315 	stw	r2,12(r3)
    9660:	10c00215 	stw	r3,8(r2)
    9664:	bc800204 	addi	r18,r23,8
    9668:	21807836 	bltu	r4,r6,984c <_realloc_r+0x4e8>
    966c:	008004c4 	movi	r2,19
    9670:	1180732e 	bgeu	r2,r6,9840 <_realloc_r+0x4dc>
    9674:	80800017 	ldw	r2,0(r16)
    9678:	b8800215 	stw	r2,8(r23)
    967c:	80800117 	ldw	r2,4(r16)
    9680:	b8800315 	stw	r2,12(r23)
    9684:	008006c4 	movi	r2,27
    9688:	11808936 	bltu	r2,r6,98b0 <_realloc_r+0x54c>
    968c:	b8800404 	addi	r2,r23,16
    9690:	80c00204 	addi	r3,r16,8
    9694:	19000017 	ldw	r4,0(r3)
    9698:	9021883a 	mov	r16,r18
    969c:	3829883a 	mov	r20,r7
    96a0:	11000015 	stw	r4,0(r2)
    96a4:	19000117 	ldw	r4,4(r3)
    96a8:	b82d883a 	mov	r22,r23
    96ac:	11000115 	stw	r4,4(r2)
    96b0:	18c00217 	ldw	r3,8(r3)
    96b4:	10c00215 	stw	r3,8(r2)
    96b8:	b8800117 	ldw	r2,4(r23)
    96bc:	003f7b06 	br	94ac <_realloc_r+0x148>
    96c0:	80c00017 	ldw	r3,0(r16)
    96c4:	90c00015 	stw	r3,0(r18)
    96c8:	80c00117 	ldw	r3,4(r16)
    96cc:	90c00115 	stw	r3,4(r18)
    96d0:	00c006c4 	movi	r3,27
    96d4:	19804636 	bltu	r3,r6,97f0 <_realloc_r+0x48c>
    96d8:	90800204 	addi	r2,r18,8
    96dc:	80c00204 	addi	r3,r16,8
    96e0:	003fb906 	br	95c8 <_realloc_r+0x264>
    96e4:	9005883a 	mov	r2,r18
    96e8:	8007883a 	mov	r3,r16
    96ec:	19000017 	ldw	r4,0(r3)
    96f0:	9021883a 	mov	r16,r18
    96f4:	b82d883a 	mov	r22,r23
    96f8:	11000015 	stw	r4,0(r2)
    96fc:	19000117 	ldw	r4,4(r3)
    9700:	11000115 	stw	r4,4(r2)
    9704:	18c00217 	ldw	r3,8(r3)
    9708:	10c00215 	stw	r3,8(r2)
    970c:	b8800117 	ldw	r2,4(r23)
    9710:	003f6606 	br	94ac <_realloc_r+0x148>
    9714:	2445c83a 	sub	r2,r4,r17
    9718:	b46d883a 	add	r22,r22,r17
    971c:	10800054 	ori	r2,r2,1
    9720:	b0800115 	stw	r2,4(r22)
    9724:	80bfff17 	ldw	r2,-4(r16)
    9728:	a809883a 	mov	r4,r21
    972c:	e5800215 	stw	r22,8(fp)
    9730:	1080004c 	andi	r2,r2,1
    9734:	88a2b03a 	or	r17,r17,r2
    9738:	847fff15 	stw	r17,-4(r16)
    973c:	000b3200 	call	b320 <__malloc_unlock>
    9740:	8025883a 	mov	r18,r16
    9744:	003f6606 	br	94e0 <_realloc_r+0x17c>
    9748:	9009883a 	mov	r4,r18
    974c:	800b883a 	mov	r5,r16
    9750:	00091d80 	call	91d8 <memmove>
    9754:	003fa206 	br	95e0 <_realloc_r+0x27c>
    9758:	88800404 	addi	r2,r17,16
    975c:	a0bf8716 	blt	r20,r2,957c <_realloc_r+0x218>
    9760:	b8800317 	ldw	r2,12(r23)
    9764:	b8c00217 	ldw	r3,8(r23)
    9768:	99bfff04 	addi	r6,r19,-4
    976c:	01000904 	movi	r4,36
    9770:	18800315 	stw	r2,12(r3)
    9774:	10c00215 	stw	r3,8(r2)
    9778:	bc800204 	addi	r18,r23,8
    977c:	21806536 	bltu	r4,r6,9914 <_realloc_r+0x5b0>
    9780:	008004c4 	movi	r2,19
    9784:	1180592e 	bgeu	r2,r6,98ec <_realloc_r+0x588>
    9788:	80800017 	ldw	r2,0(r16)
    978c:	b8800215 	stw	r2,8(r23)
    9790:	80800117 	ldw	r2,4(r16)
    9794:	b8800315 	stw	r2,12(r23)
    9798:	008006c4 	movi	r2,27
    979c:	11806136 	bltu	r2,r6,9924 <_realloc_r+0x5c0>
    97a0:	b8800404 	addi	r2,r23,16
    97a4:	80c00204 	addi	r3,r16,8
    97a8:	19000017 	ldw	r4,0(r3)
    97ac:	11000015 	stw	r4,0(r2)
    97b0:	19000117 	ldw	r4,4(r3)
    97b4:	11000115 	stw	r4,4(r2)
    97b8:	18c00217 	ldw	r3,8(r3)
    97bc:	10c00215 	stw	r3,8(r2)
    97c0:	a447c83a 	sub	r3,r20,r17
    97c4:	bc45883a 	add	r2,r23,r17
    97c8:	18c00054 	ori	r3,r3,1
    97cc:	10c00115 	stw	r3,4(r2)
    97d0:	b8c00117 	ldw	r3,4(r23)
    97d4:	e0800215 	stw	r2,8(fp)
    97d8:	a809883a 	mov	r4,r21
    97dc:	1880004c 	andi	r2,r3,1
    97e0:	88a2b03a 	or	r17,r17,r2
    97e4:	bc400115 	stw	r17,4(r23)
    97e8:	000b3200 	call	b320 <__malloc_unlock>
    97ec:	003f3c06 	br	94e0 <_realloc_r+0x17c>
    97f0:	80c00217 	ldw	r3,8(r16)
    97f4:	90c00215 	stw	r3,8(r18)
    97f8:	80c00317 	ldw	r3,12(r16)
    97fc:	90c00315 	stw	r3,12(r18)
    9800:	30802426 	beq	r6,r2,9894 <_realloc_r+0x530>
    9804:	90800404 	addi	r2,r18,16
    9808:	80c00404 	addi	r3,r16,16
    980c:	003f6e06 	br	95c8 <_realloc_r+0x264>
    9810:	953fff17 	ldw	r20,-4(r18)
    9814:	00ffff04 	movi	r3,-4
    9818:	a0e8703a 	and	r20,r20,r3
    981c:	a4e9883a 	add	r20,r20,r19
    9820:	003f2206 	br	94ac <_realloc_r+0x148>
    9824:	800b883a 	mov	r5,r16
    9828:	9009883a 	mov	r4,r18
    982c:	00091d80 	call	91d8 <memmove>
    9830:	9021883a 	mov	r16,r18
    9834:	b8800117 	ldw	r2,4(r23)
    9838:	b82d883a 	mov	r22,r23
    983c:	003f1b06 	br	94ac <_realloc_r+0x148>
    9840:	9005883a 	mov	r2,r18
    9844:	8007883a 	mov	r3,r16
    9848:	003f9206 	br	9694 <_realloc_r+0x330>
    984c:	800b883a 	mov	r5,r16
    9850:	9009883a 	mov	r4,r18
    9854:	d9c00015 	stw	r7,0(sp)
    9858:	00091d80 	call	91d8 <memmove>
    985c:	d9c00017 	ldw	r7,0(sp)
    9860:	9021883a 	mov	r16,r18
    9864:	b8800117 	ldw	r2,4(r23)
    9868:	3829883a 	mov	r20,r7
    986c:	b82d883a 	mov	r22,r23
    9870:	003f0e06 	br	94ac <_realloc_r+0x148>
    9874:	80800217 	ldw	r2,8(r16)
    9878:	b8800415 	stw	r2,16(r23)
    987c:	80800317 	ldw	r2,12(r16)
    9880:	b8800515 	stw	r2,20(r23)
    9884:	31001226 	beq	r6,r4,98d0 <_realloc_r+0x56c>
    9888:	b8800604 	addi	r2,r23,24
    988c:	80c00404 	addi	r3,r16,16
    9890:	003f9606 	br	96ec <_realloc_r+0x388>
    9894:	81000417 	ldw	r4,16(r16)
    9898:	90800604 	addi	r2,r18,24
    989c:	80c00604 	addi	r3,r16,24
    98a0:	91000415 	stw	r4,16(r18)
    98a4:	81000517 	ldw	r4,20(r16)
    98a8:	91000515 	stw	r4,20(r18)
    98ac:	003f4606 	br	95c8 <_realloc_r+0x264>
    98b0:	80800217 	ldw	r2,8(r16)
    98b4:	b8800415 	stw	r2,16(r23)
    98b8:	80800317 	ldw	r2,12(r16)
    98bc:	b8800515 	stw	r2,20(r23)
    98c0:	31000d26 	beq	r6,r4,98f8 <_realloc_r+0x594>
    98c4:	b8800604 	addi	r2,r23,24
    98c8:	80c00404 	addi	r3,r16,16
    98cc:	003f7106 	br	9694 <_realloc_r+0x330>
    98d0:	81000417 	ldw	r4,16(r16)
    98d4:	b8800804 	addi	r2,r23,32
    98d8:	80c00604 	addi	r3,r16,24
    98dc:	b9000615 	stw	r4,24(r23)
    98e0:	81000517 	ldw	r4,20(r16)
    98e4:	b9000715 	stw	r4,28(r23)
    98e8:	003f8006 	br	96ec <_realloc_r+0x388>
    98ec:	9005883a 	mov	r2,r18
    98f0:	8007883a 	mov	r3,r16
    98f4:	003fac06 	br	97a8 <_realloc_r+0x444>
    98f8:	81000417 	ldw	r4,16(r16)
    98fc:	b8800804 	addi	r2,r23,32
    9900:	80c00604 	addi	r3,r16,24
    9904:	b9000615 	stw	r4,24(r23)
    9908:	81000517 	ldw	r4,20(r16)
    990c:	b9000715 	stw	r4,28(r23)
    9910:	003f6006 	br	9694 <_realloc_r+0x330>
    9914:	9009883a 	mov	r4,r18
    9918:	800b883a 	mov	r5,r16
    991c:	00091d80 	call	91d8 <memmove>
    9920:	003fa706 	br	97c0 <_realloc_r+0x45c>
    9924:	80800217 	ldw	r2,8(r16)
    9928:	b8800415 	stw	r2,16(r23)
    992c:	80800317 	ldw	r2,12(r16)
    9930:	b8800515 	stw	r2,20(r23)
    9934:	31000326 	beq	r6,r4,9944 <_realloc_r+0x5e0>
    9938:	b8800604 	addi	r2,r23,24
    993c:	80c00404 	addi	r3,r16,16
    9940:	003f9906 	br	97a8 <_realloc_r+0x444>
    9944:	81000417 	ldw	r4,16(r16)
    9948:	b8800804 	addi	r2,r23,32
    994c:	80c00604 	addi	r3,r16,24
    9950:	b9000615 	stw	r4,24(r23)
    9954:	81000517 	ldw	r4,20(r16)
    9958:	b9000715 	stw	r4,28(r23)
    995c:	003f9206 	br	97a8 <_realloc_r+0x444>

00009960 <_sbrk_r>:
    9960:	defffd04 	addi	sp,sp,-12
    9964:	dc400115 	stw	r17,4(sp)
    9968:	dc000015 	stw	r16,0(sp)
    996c:	2023883a 	mov	r17,r4
    9970:	04000074 	movhi	r16,1
    9974:	84354c04 	addi	r16,r16,-10960
    9978:	2809883a 	mov	r4,r5
    997c:	dfc00215 	stw	ra,8(sp)
    9980:	80000015 	stw	zero,0(r16)
    9984:	000b5040 	call	b504 <sbrk>
    9988:	00ffffc4 	movi	r3,-1
    998c:	10c00526 	beq	r2,r3,99a4 <_sbrk_r+0x44>
    9990:	dfc00217 	ldw	ra,8(sp)
    9994:	dc400117 	ldw	r17,4(sp)
    9998:	dc000017 	ldw	r16,0(sp)
    999c:	dec00304 	addi	sp,sp,12
    99a0:	f800283a 	ret
    99a4:	80c00017 	ldw	r3,0(r16)
    99a8:	183ff926 	beq	r3,zero,9990 <_sbrk_r+0x30>
    99ac:	88c00015 	stw	r3,0(r17)
    99b0:	dfc00217 	ldw	ra,8(sp)
    99b4:	dc400117 	ldw	r17,4(sp)
    99b8:	dc000017 	ldw	r16,0(sp)
    99bc:	dec00304 	addi	sp,sp,12
    99c0:	f800283a 	ret

000099c4 <__swsetup_r>:
    99c4:	00800074 	movhi	r2,1
    99c8:	10b2c204 	addi	r2,r2,-13560
    99cc:	10800017 	ldw	r2,0(r2)
    99d0:	defffd04 	addi	sp,sp,-12
    99d4:	dc400115 	stw	r17,4(sp)
    99d8:	dc000015 	stw	r16,0(sp)
    99dc:	dfc00215 	stw	ra,8(sp)
    99e0:	2023883a 	mov	r17,r4
    99e4:	2821883a 	mov	r16,r5
    99e8:	10000226 	beq	r2,zero,99f4 <__swsetup_r+0x30>
    99ec:	10c00e17 	ldw	r3,56(r2)
    99f0:	18003d26 	beq	r3,zero,9ae8 <__swsetup_r+0x124>
    99f4:	8080030b 	ldhu	r2,12(r16)
    99f8:	10c0020c 	andi	r3,r2,8
    99fc:	18ffffcc 	andi	r3,r3,65535
    9a00:	18e0001c 	xori	r3,r3,32768
    9a04:	18e00004 	addi	r3,r3,-32768
    9a08:	18001226 	beq	r3,zero,9a54 <__swsetup_r+0x90>
    9a0c:	80c00417 	ldw	r3,16(r16)
    9a10:	18001f26 	beq	r3,zero,9a90 <__swsetup_r+0xcc>
    9a14:	1100004c 	andi	r4,r2,1
    9a18:	2000261e 	bne	r4,zero,9ab4 <__swsetup_r+0xf0>
    9a1c:	1080008c 	andi	r2,r2,2
    9a20:	10bfffcc 	andi	r2,r2,65535
    9a24:	10a0001c 	xori	r2,r2,32768
    9a28:	10a00004 	addi	r2,r2,-32768
    9a2c:	1000311e 	bne	r2,zero,9af4 <__swsetup_r+0x130>
    9a30:	80800517 	ldw	r2,20(r16)
    9a34:	80800215 	stw	r2,8(r16)
    9a38:	18002326 	beq	r3,zero,9ac8 <__swsetup_r+0x104>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	dfc00217 	ldw	ra,8(sp)
    9a44:	dc400117 	ldw	r17,4(sp)
    9a48:	dc000017 	ldw	r16,0(sp)
    9a4c:	dec00304 	addi	sp,sp,12
    9a50:	f800283a 	ret
    9a54:	10c0040c 	andi	r3,r2,16
    9a58:	18ffffcc 	andi	r3,r3,65535
    9a5c:	18e0001c 	xori	r3,r3,32768
    9a60:	18e00004 	addi	r3,r3,-32768
    9a64:	18001e26 	beq	r3,zero,9ae0 <__swsetup_r+0x11c>
    9a68:	10c0010c 	andi	r3,r2,4
    9a6c:	18ffffcc 	andi	r3,r3,65535
    9a70:	18e0001c 	xori	r3,r3,32768
    9a74:	18e00004 	addi	r3,r3,-32768
    9a78:	1800211e 	bne	r3,zero,9b00 <__swsetup_r+0x13c>
    9a7c:	80c00417 	ldw	r3,16(r16)
    9a80:	11400214 	ori	r5,r2,8
    9a84:	8140030d 	sth	r5,12(r16)
    9a88:	2805883a 	mov	r2,r5
    9a8c:	183fe11e 	bne	r3,zero,9a14 <__swsetup_r+0x50>
    9a90:	1140a00c 	andi	r5,r2,640
    9a94:	01008004 	movi	r4,512
    9a98:	293fde26 	beq	r5,r4,9a14 <__swsetup_r+0x50>
    9a9c:	8809883a 	mov	r4,r17
    9aa0:	800b883a 	mov	r5,r16
    9aa4:	000a5a80 	call	a5a8 <__smakebuf_r>
    9aa8:	8080030b 	ldhu	r2,12(r16)
    9aac:	80c00417 	ldw	r3,16(r16)
    9ab0:	003fd806 	br	9a14 <__swsetup_r+0x50>
    9ab4:	80800517 	ldw	r2,20(r16)
    9ab8:	80000215 	stw	zero,8(r16)
    9abc:	0085c83a 	sub	r2,zero,r2
    9ac0:	80800615 	stw	r2,24(r16)
    9ac4:	183fdd1e 	bne	r3,zero,9a3c <__swsetup_r+0x78>
    9ac8:	8080030b 	ldhu	r2,12(r16)
    9acc:	1080200c 	andi	r2,r2,128
    9ad0:	10bfffcc 	andi	r2,r2,65535
    9ad4:	10a0001c 	xori	r2,r2,32768
    9ad8:	10a00004 	addi	r2,r2,-32768
    9adc:	103fd826 	beq	r2,zero,9a40 <__swsetup_r+0x7c>
    9ae0:	00bfffc4 	movi	r2,-1
    9ae4:	003fd606 	br	9a40 <__swsetup_r+0x7c>
    9ae8:	1009883a 	mov	r4,r2
    9aec:	0009df40 	call	9df4 <__sinit>
    9af0:	003fc006 	br	99f4 <__swsetup_r+0x30>
    9af4:	0005883a 	mov	r2,zero
    9af8:	80800215 	stw	r2,8(r16)
    9afc:	003fce06 	br	9a38 <__swsetup_r+0x74>
    9b00:	81400c17 	ldw	r5,48(r16)
    9b04:	28000626 	beq	r5,zero,9b20 <__swsetup_r+0x15c>
    9b08:	80c01004 	addi	r3,r16,64
    9b0c:	28c00326 	beq	r5,r3,9b1c <__swsetup_r+0x158>
    9b10:	8809883a 	mov	r4,r17
    9b14:	000a1780 	call	a178 <_free_r>
    9b18:	8080030b 	ldhu	r2,12(r16)
    9b1c:	80000c15 	stw	zero,48(r16)
    9b20:	80c00417 	ldw	r3,16(r16)
    9b24:	013ff6c4 	movi	r4,-37
    9b28:	2084703a 	and	r2,r4,r2
    9b2c:	80000115 	stw	zero,4(r16)
    9b30:	80c00015 	stw	r3,0(r16)
    9b34:	003fd206 	br	9a80 <__swsetup_r+0xbc>

00009b38 <_fflush_r>:
    9b38:	defffb04 	addi	sp,sp,-20
    9b3c:	dcc00315 	stw	r19,12(sp)
    9b40:	dc400115 	stw	r17,4(sp)
    9b44:	dfc00415 	stw	ra,16(sp)
    9b48:	dc800215 	stw	r18,8(sp)
    9b4c:	dc000015 	stw	r16,0(sp)
    9b50:	2027883a 	mov	r19,r4
    9b54:	2823883a 	mov	r17,r5
    9b58:	20000226 	beq	r4,zero,9b64 <_fflush_r+0x2c>
    9b5c:	20800e17 	ldw	r2,56(r4)
    9b60:	10005726 	beq	r2,zero,9cc0 <_fflush_r+0x188>
    9b64:	8880030b 	ldhu	r2,12(r17)
    9b68:	10c0020c 	andi	r3,r2,8
    9b6c:	18ffffcc 	andi	r3,r3,65535
    9b70:	18e0001c 	xori	r3,r3,32768
    9b74:	18e00004 	addi	r3,r3,-32768
    9b78:	1800311e 	bne	r3,zero,9c40 <_fflush_r+0x108>
    9b7c:	89000117 	ldw	r4,4(r17)
    9b80:	10c20014 	ori	r3,r2,2048
    9b84:	88c0030d 	sth	r3,12(r17)
    9b88:	180b883a 	mov	r5,r3
    9b8c:	0100520e 	bge	zero,r4,9cd8 <_fflush_r+0x1a0>
    9b90:	88c00a17 	ldw	r3,40(r17)
    9b94:	18002226 	beq	r3,zero,9c20 <_fflush_r+0xe8>
    9b98:	1084000c 	andi	r2,r2,4096
    9b9c:	10bfffcc 	andi	r2,r2,65535
    9ba0:	10a0001c 	xori	r2,r2,32768
    9ba4:	10a00004 	addi	r2,r2,-32768
    9ba8:	10004e26 	beq	r2,zero,9ce4 <_fflush_r+0x1ac>
    9bac:	8c001417 	ldw	r16,80(r17)
    9bb0:	2940010c 	andi	r5,r5,4
    9bb4:	297fffcc 	andi	r5,r5,65535
    9bb8:	2960001c 	xori	r5,r5,32768
    9bbc:	29600004 	addi	r5,r5,-32768
    9bc0:	28000626 	beq	r5,zero,9bdc <_fflush_r+0xa4>
    9bc4:	89000117 	ldw	r4,4(r17)
    9bc8:	88800c17 	ldw	r2,48(r17)
    9bcc:	8121c83a 	sub	r16,r16,r4
    9bd0:	10000226 	beq	r2,zero,9bdc <_fflush_r+0xa4>
    9bd4:	88800f17 	ldw	r2,60(r17)
    9bd8:	80a1c83a 	sub	r16,r16,r2
    9bdc:	89400717 	ldw	r5,28(r17)
    9be0:	9809883a 	mov	r4,r19
    9be4:	800d883a 	mov	r6,r16
    9be8:	000f883a 	mov	r7,zero
    9bec:	183ee83a 	callr	r3
    9bf0:	8080281e 	bne	r16,r2,9c94 <_fflush_r+0x15c>
    9bf4:	8880030b 	ldhu	r2,12(r17)
    9bf8:	88c00417 	ldw	r3,16(r17)
    9bfc:	88000115 	stw	zero,4(r17)
    9c00:	113dffcc 	andi	r4,r2,63487
    9c04:	1084000c 	andi	r2,r2,4096
    9c08:	10bfffcc 	andi	r2,r2,65535
    9c0c:	10a0001c 	xori	r2,r2,32768
    9c10:	8900030d 	sth	r4,12(r17)
    9c14:	88c00015 	stw	r3,0(r17)
    9c18:	10a00004 	addi	r2,r2,-32768
    9c1c:	10002c1e 	bne	r2,zero,9cd0 <_fflush_r+0x198>
    9c20:	0005883a 	mov	r2,zero
    9c24:	dfc00417 	ldw	ra,16(sp)
    9c28:	dcc00317 	ldw	r19,12(sp)
    9c2c:	dc800217 	ldw	r18,8(sp)
    9c30:	dc400117 	ldw	r17,4(sp)
    9c34:	dc000017 	ldw	r16,0(sp)
    9c38:	dec00504 	addi	sp,sp,20
    9c3c:	f800283a 	ret
    9c40:	8c800417 	ldw	r18,16(r17)
    9c44:	903ff626 	beq	r18,zero,9c20 <_fflush_r+0xe8>
    9c48:	8c000017 	ldw	r16,0(r17)
    9c4c:	108000cc 	andi	r2,r2,3
    9c50:	8c800015 	stw	r18,0(r17)
    9c54:	84a1c83a 	sub	r16,r16,r18
    9c58:	10001b1e 	bne	r2,zero,9cc8 <_fflush_r+0x190>
    9c5c:	88800517 	ldw	r2,20(r17)
    9c60:	88800215 	stw	r2,8(r17)
    9c64:	04000316 	blt	zero,r16,9c74 <_fflush_r+0x13c>
    9c68:	003fed06 	br	9c20 <_fflush_r+0xe8>
    9c6c:	90a5883a 	add	r18,r18,r2
    9c70:	043feb0e 	bge	zero,r16,9c20 <_fflush_r+0xe8>
    9c74:	88800917 	ldw	r2,36(r17)
    9c78:	89400717 	ldw	r5,28(r17)
    9c7c:	800f883a 	mov	r7,r16
    9c80:	900d883a 	mov	r6,r18
    9c84:	9809883a 	mov	r4,r19
    9c88:	103ee83a 	callr	r2
    9c8c:	80a1c83a 	sub	r16,r16,r2
    9c90:	00bff616 	blt	zero,r2,9c6c <_fflush_r+0x134>
    9c94:	88c0030b 	ldhu	r3,12(r17)
    9c98:	00bfffc4 	movi	r2,-1
    9c9c:	18c01014 	ori	r3,r3,64
    9ca0:	88c0030d 	sth	r3,12(r17)
    9ca4:	dfc00417 	ldw	ra,16(sp)
    9ca8:	dcc00317 	ldw	r19,12(sp)
    9cac:	dc800217 	ldw	r18,8(sp)
    9cb0:	dc400117 	ldw	r17,4(sp)
    9cb4:	dc000017 	ldw	r16,0(sp)
    9cb8:	dec00504 	addi	sp,sp,20
    9cbc:	f800283a 	ret
    9cc0:	0009df40 	call	9df4 <__sinit>
    9cc4:	003fa706 	br	9b64 <_fflush_r+0x2c>
    9cc8:	0005883a 	mov	r2,zero
    9ccc:	003fe406 	br	9c60 <_fflush_r+0x128>
    9cd0:	8c001415 	stw	r16,80(r17)
    9cd4:	003fd206 	br	9c20 <_fflush_r+0xe8>
    9cd8:	88c00f17 	ldw	r3,60(r17)
    9cdc:	00ffac16 	blt	zero,r3,9b90 <_fflush_r+0x58>
    9ce0:	003fcf06 	br	9c20 <_fflush_r+0xe8>
    9ce4:	89400717 	ldw	r5,28(r17)
    9ce8:	9809883a 	mov	r4,r19
    9cec:	000d883a 	mov	r6,zero
    9cf0:	01c00044 	movi	r7,1
    9cf4:	183ee83a 	callr	r3
    9cf8:	1021883a 	mov	r16,r2
    9cfc:	00bfffc4 	movi	r2,-1
    9d00:	80800326 	beq	r16,r2,9d10 <_fflush_r+0x1d8>
    9d04:	8940030b 	ldhu	r5,12(r17)
    9d08:	88c00a17 	ldw	r3,40(r17)
    9d0c:	003fa806 	br	9bb0 <_fflush_r+0x78>
    9d10:	98c00017 	ldw	r3,0(r19)
    9d14:	00800744 	movi	r2,29
    9d18:	18bfde1e 	bne	r3,r2,9c94 <_fflush_r+0x15c>
    9d1c:	003fc006 	br	9c20 <_fflush_r+0xe8>

00009d20 <fflush>:
    9d20:	200b883a 	mov	r5,r4
    9d24:	20000426 	beq	r4,zero,9d38 <fflush+0x18>
    9d28:	00800074 	movhi	r2,1
    9d2c:	10b2c204 	addi	r2,r2,-13560
    9d30:	11000017 	ldw	r4,0(r2)
    9d34:	0009b381 	jmpi	9b38 <_fflush_r>
    9d38:	00800074 	movhi	r2,1
    9d3c:	10b2c104 	addi	r2,r2,-13564
    9d40:	11000017 	ldw	r4,0(r2)
    9d44:	01400074 	movhi	r5,1
    9d48:	2966ce04 	addi	r5,r5,-25800
    9d4c:	000a4f01 	jmpi	a4f0 <_fwalk_reent>

00009d50 <__fp_lock>:
    9d50:	0005883a 	mov	r2,zero
    9d54:	f800283a 	ret

00009d58 <__fp_unlock>:
    9d58:	0005883a 	mov	r2,zero
    9d5c:	f800283a 	ret

00009d60 <_cleanup_r>:
    9d60:	01400074 	movhi	r5,1
    9d64:	296ade04 	addi	r5,r5,-21640
    9d68:	000a4481 	jmpi	a448 <_fwalk>

00009d6c <__sfmoreglue>:
    9d6c:	defffc04 	addi	sp,sp,-16
    9d70:	dc800215 	stw	r18,8(sp)
    9d74:	2825883a 	mov	r18,r5
    9d78:	dc000015 	stw	r16,0(sp)
    9d7c:	01401704 	movi	r5,92
    9d80:	2021883a 	mov	r16,r4
    9d84:	9009883a 	mov	r4,r18
    9d88:	dfc00315 	stw	ra,12(sp)
    9d8c:	dc400115 	stw	r17,4(sp)
    9d90:	000ad300 	call	ad30 <__mulsi3>
    9d94:	8009883a 	mov	r4,r16
    9d98:	11400304 	addi	r5,r2,12
    9d9c:	1023883a 	mov	r17,r2
    9da0:	000881c0 	call	881c <_malloc_r>
    9da4:	1021883a 	mov	r16,r2
    9da8:	10000726 	beq	r2,zero,9dc8 <__sfmoreglue+0x5c>
    9dac:	11000304 	addi	r4,r2,12
    9db0:	10000015 	stw	zero,0(r2)
    9db4:	14800115 	stw	r18,4(r2)
    9db8:	11000215 	stw	r4,8(r2)
    9dbc:	000b883a 	mov	r5,zero
    9dc0:	880d883a 	mov	r6,r17
    9dc4:	000a7500 	call	a750 <memset>
    9dc8:	8005883a 	mov	r2,r16
    9dcc:	dfc00317 	ldw	ra,12(sp)
    9dd0:	dc800217 	ldw	r18,8(sp)
    9dd4:	dc400117 	ldw	r17,4(sp)
    9dd8:	dc000017 	ldw	r16,0(sp)
    9ddc:	dec00404 	addi	sp,sp,16
    9de0:	f800283a 	ret

00009de4 <_cleanup>:
    9de4:	00800074 	movhi	r2,1
    9de8:	10b2c104 	addi	r2,r2,-13564
    9dec:	11000017 	ldw	r4,0(r2)
    9df0:	0009d601 	jmpi	9d60 <_cleanup_r>

00009df4 <__sinit>:
    9df4:	20800e17 	ldw	r2,56(r4)
    9df8:	1000401e 	bne	r2,zero,9efc <__sinit+0x108>
    9dfc:	21400117 	ldw	r5,4(r4)
    9e00:	01800074 	movhi	r6,1
    9e04:	31a75804 	addi	r6,r6,-25248
    9e08:	20c00217 	ldw	r3,8(r4)
    9e0c:	21800f15 	stw	r6,60(r4)
    9e10:	2080bb04 	addi	r2,r4,748
    9e14:	02400044 	movi	r9,1
    9e18:	018000c4 	movi	r6,3
    9e1c:	2180b915 	stw	r6,740(r4)
    9e20:	2080ba15 	stw	r2,744(r4)
    9e24:	22400e15 	stw	r9,56(r4)
    9e28:	20800317 	ldw	r2,12(r4)
    9e2c:	2000b815 	stw	zero,736(r4)
    9e30:	02000074 	movhi	r8,1
    9e34:	422a0b04 	addi	r8,r8,-22484
    9e38:	01c00074 	movhi	r7,1
    9e3c:	39ea2004 	addi	r7,r7,-22400
    9e40:	01800074 	movhi	r6,1
    9e44:	31aa4204 	addi	r6,r6,-22264
    9e48:	01000074 	movhi	r4,1
    9e4c:	212a5904 	addi	r4,r4,-22172
    9e50:	02800104 	movi	r10,4
    9e54:	28000015 	stw	zero,0(r5)
    9e58:	28000115 	stw	zero,4(r5)
    9e5c:	28000215 	stw	zero,8(r5)
    9e60:	2a80030d 	sth	r10,12(r5)
    9e64:	2800038d 	sth	zero,14(r5)
    9e68:	28000415 	stw	zero,16(r5)
    9e6c:	28000515 	stw	zero,20(r5)
    9e70:	28000615 	stw	zero,24(r5)
    9e74:	29400715 	stw	r5,28(r5)
    9e78:	2a000815 	stw	r8,32(r5)
    9e7c:	29c00915 	stw	r7,36(r5)
    9e80:	29800a15 	stw	r6,40(r5)
    9e84:	29000b15 	stw	r4,44(r5)
    9e88:	01400284 	movi	r5,10
    9e8c:	18000015 	stw	zero,0(r3)
    9e90:	18000115 	stw	zero,4(r3)
    9e94:	18000215 	stw	zero,8(r3)
    9e98:	1940030d 	sth	r5,12(r3)
    9e9c:	1a40038d 	sth	r9,14(r3)
    9ea0:	18000415 	stw	zero,16(r3)
    9ea4:	18000515 	stw	zero,20(r3)
    9ea8:	18000615 	stw	zero,24(r3)
    9eac:	18c00715 	stw	r3,28(r3)
    9eb0:	1a000815 	stw	r8,32(r3)
    9eb4:	19c00915 	stw	r7,36(r3)
    9eb8:	19800a15 	stw	r6,40(r3)
    9ebc:	19000b15 	stw	r4,44(r3)
    9ec0:	00c00484 	movi	r3,18
    9ec4:	10c0030d 	sth	r3,12(r2)
    9ec8:	00c00084 	movi	r3,2
    9ecc:	10000015 	stw	zero,0(r2)
    9ed0:	10000115 	stw	zero,4(r2)
    9ed4:	10000215 	stw	zero,8(r2)
    9ed8:	10c0038d 	sth	r3,14(r2)
    9edc:	10000415 	stw	zero,16(r2)
    9ee0:	10000515 	stw	zero,20(r2)
    9ee4:	10000615 	stw	zero,24(r2)
    9ee8:	10800715 	stw	r2,28(r2)
    9eec:	12000815 	stw	r8,32(r2)
    9ef0:	11c00915 	stw	r7,36(r2)
    9ef4:	11800a15 	stw	r6,40(r2)
    9ef8:	11000b15 	stw	r4,44(r2)
    9efc:	f800283a 	ret

00009f00 <__sfp>:
    9f00:	defffc04 	addi	sp,sp,-16
    9f04:	00800074 	movhi	r2,1
    9f08:	10b2c104 	addi	r2,r2,-13564
    9f0c:	dc400115 	stw	r17,4(sp)
    9f10:	14400017 	ldw	r17,0(r2)
    9f14:	dc800215 	stw	r18,8(sp)
    9f18:	dfc00315 	stw	ra,12(sp)
    9f1c:	88800e17 	ldw	r2,56(r17)
    9f20:	dc000015 	stw	r16,0(sp)
    9f24:	2025883a 	mov	r18,r4
    9f28:	10002826 	beq	r2,zero,9fcc <__sfp+0xcc>
    9f2c:	8c40b804 	addi	r17,r17,736
    9f30:	043fffc4 	movi	r16,-1
    9f34:	89400117 	ldw	r5,4(r17)
    9f38:	88800217 	ldw	r2,8(r17)
    9f3c:	297fffc4 	addi	r5,r5,-1
    9f40:	28000a16 	blt	r5,zero,9f6c <__sfp+0x6c>
    9f44:	10c0030f 	ldh	r3,12(r2)
    9f48:	18000c26 	beq	r3,zero,9f7c <__sfp+0x7c>
    9f4c:	10c01a04 	addi	r3,r2,104
    9f50:	00000206 	br	9f5c <__sfp+0x5c>
    9f54:	19bfe90f 	ldh	r6,-92(r3)
    9f58:	30000826 	beq	r6,zero,9f7c <__sfp+0x7c>
    9f5c:	297fffc4 	addi	r5,r5,-1
    9f60:	18bffd04 	addi	r2,r3,-12
    9f64:	18c01704 	addi	r3,r3,92
    9f68:	2c3ffa1e 	bne	r5,r16,9f54 <__sfp+0x54>
    9f6c:	88800017 	ldw	r2,0(r17)
    9f70:	10001926 	beq	r2,zero,9fd8 <__sfp+0xd8>
    9f74:	1023883a 	mov	r17,r2
    9f78:	003fee06 	br	9f34 <__sfp+0x34>
    9f7c:	00ffffc4 	movi	r3,-1
    9f80:	10c0038d 	sth	r3,14(r2)
    9f84:	00c00044 	movi	r3,1
    9f88:	10c0030d 	sth	r3,12(r2)
    9f8c:	10000015 	stw	zero,0(r2)
    9f90:	10000215 	stw	zero,8(r2)
    9f94:	10000115 	stw	zero,4(r2)
    9f98:	10000415 	stw	zero,16(r2)
    9f9c:	10000515 	stw	zero,20(r2)
    9fa0:	10000615 	stw	zero,24(r2)
    9fa4:	10000c15 	stw	zero,48(r2)
    9fa8:	10000d15 	stw	zero,52(r2)
    9fac:	10001115 	stw	zero,68(r2)
    9fb0:	10001215 	stw	zero,72(r2)
    9fb4:	dfc00317 	ldw	ra,12(sp)
    9fb8:	dc800217 	ldw	r18,8(sp)
    9fbc:	dc400117 	ldw	r17,4(sp)
    9fc0:	dc000017 	ldw	r16,0(sp)
    9fc4:	dec00404 	addi	sp,sp,16
    9fc8:	f800283a 	ret
    9fcc:	8809883a 	mov	r4,r17
    9fd0:	0009df40 	call	9df4 <__sinit>
    9fd4:	003fd506 	br	9f2c <__sfp+0x2c>
    9fd8:	9009883a 	mov	r4,r18
    9fdc:	01400104 	movi	r5,4
    9fe0:	0009d6c0 	call	9d6c <__sfmoreglue>
    9fe4:	88800015 	stw	r2,0(r17)
    9fe8:	103fe21e 	bne	r2,zero,9f74 <__sfp+0x74>
    9fec:	00800304 	movi	r2,12
    9ff0:	90800015 	stw	r2,0(r18)
    9ff4:	0005883a 	mov	r2,zero
    9ff8:	003fee06 	br	9fb4 <__sfp+0xb4>

00009ffc <__sfp_lock_acquire>:
    9ffc:	f800283a 	ret

0000a000 <__sfp_lock_release>:
    a000:	f800283a 	ret

0000a004 <__sinit_lock_acquire>:
    a004:	f800283a 	ret

0000a008 <__sinit_lock_release>:
    a008:	f800283a 	ret

0000a00c <__fp_lock_all>:
    a00c:	00800074 	movhi	r2,1
    a010:	10b2c204 	addi	r2,r2,-13560
    a014:	11000017 	ldw	r4,0(r2)
    a018:	01400074 	movhi	r5,1
    a01c:	29675404 	addi	r5,r5,-25264
    a020:	000a4481 	jmpi	a448 <_fwalk>

0000a024 <__fp_unlock_all>:
    a024:	00800074 	movhi	r2,1
    a028:	10b2c204 	addi	r2,r2,-13560
    a02c:	11000017 	ldw	r4,0(r2)
    a030:	01400074 	movhi	r5,1
    a034:	29675604 	addi	r5,r5,-25256
    a038:	000a4481 	jmpi	a448 <_fwalk>

0000a03c <_malloc_trim_r>:
    a03c:	defffb04 	addi	sp,sp,-20
    a040:	dcc00315 	stw	r19,12(sp)
    a044:	dc800215 	stw	r18,8(sp)
    a048:	dc400115 	stw	r17,4(sp)
    a04c:	dc000015 	stw	r16,0(sp)
    a050:	2827883a 	mov	r19,r5
    a054:	dfc00415 	stw	ra,16(sp)
    a058:	04400074 	movhi	r17,1
    a05c:	8c715504 	addi	r17,r17,-15020
    a060:	2021883a 	mov	r16,r4
    a064:	000b3000 	call	b300 <__malloc_lock>
    a068:	88800217 	ldw	r2,8(r17)
    a06c:	14800117 	ldw	r18,4(r2)
    a070:	00bfff04 	movi	r2,-4
    a074:	90a4703a 	and	r18,r18,r2
    a078:	9083fbc4 	addi	r2,r18,4079
    a07c:	14e7c83a 	sub	r19,r2,r19
    a080:	9826d33a 	srli	r19,r19,12
    a084:	0083ffc4 	movi	r2,4095
    a088:	9cffffc4 	addi	r19,r19,-1
    a08c:	9826933a 	slli	r19,r19,12
    a090:	14c0060e 	bge	r2,r19,a0ac <_malloc_trim_r+0x70>
    a094:	8009883a 	mov	r4,r16
    a098:	000b883a 	mov	r5,zero
    a09c:	00099600 	call	9960 <_sbrk_r>
    a0a0:	88c00217 	ldw	r3,8(r17)
    a0a4:	1c87883a 	add	r3,r3,r18
    a0a8:	10c00a26 	beq	r2,r3,a0d4 <_malloc_trim_r+0x98>
    a0ac:	8009883a 	mov	r4,r16
    a0b0:	000b3200 	call	b320 <__malloc_unlock>
    a0b4:	0005883a 	mov	r2,zero
    a0b8:	dfc00417 	ldw	ra,16(sp)
    a0bc:	dcc00317 	ldw	r19,12(sp)
    a0c0:	dc800217 	ldw	r18,8(sp)
    a0c4:	dc400117 	ldw	r17,4(sp)
    a0c8:	dc000017 	ldw	r16,0(sp)
    a0cc:	dec00504 	addi	sp,sp,20
    a0d0:	f800283a 	ret
    a0d4:	8009883a 	mov	r4,r16
    a0d8:	04cbc83a 	sub	r5,zero,r19
    a0dc:	00099600 	call	9960 <_sbrk_r>
    a0e0:	00ffffc4 	movi	r3,-1
    a0e4:	10c01326 	beq	r2,r3,a134 <_malloc_trim_r+0xf8>
    a0e8:	00800074 	movhi	r2,1
    a0ec:	10b55304 	addi	r2,r2,-10932
    a0f0:	11000017 	ldw	r4,0(r2)
    a0f4:	88c00217 	ldw	r3,8(r17)
    a0f8:	94e5c83a 	sub	r18,r18,r19
    a0fc:	94800054 	ori	r18,r18,1
    a100:	24e7c83a 	sub	r19,r4,r19
    a104:	1c800115 	stw	r18,4(r3)
    a108:	8009883a 	mov	r4,r16
    a10c:	14c00015 	stw	r19,0(r2)
    a110:	000b3200 	call	b320 <__malloc_unlock>
    a114:	00800044 	movi	r2,1
    a118:	dfc00417 	ldw	ra,16(sp)
    a11c:	dcc00317 	ldw	r19,12(sp)
    a120:	dc800217 	ldw	r18,8(sp)
    a124:	dc400117 	ldw	r17,4(sp)
    a128:	dc000017 	ldw	r16,0(sp)
    a12c:	dec00504 	addi	sp,sp,20
    a130:	f800283a 	ret
    a134:	8009883a 	mov	r4,r16
    a138:	000b883a 	mov	r5,zero
    a13c:	00099600 	call	9960 <_sbrk_r>
    a140:	88c00217 	ldw	r3,8(r17)
    a144:	014003c4 	movi	r5,15
    a148:	10c9c83a 	sub	r4,r2,r3
    a14c:	293fd70e 	bge	r5,r4,a0ac <_malloc_trim_r+0x70>
    a150:	01400074 	movhi	r5,1
    a154:	2972c304 	addi	r5,r5,-13556
    a158:	29400017 	ldw	r5,0(r5)
    a15c:	21000054 	ori	r4,r4,1
    a160:	19000115 	stw	r4,4(r3)
    a164:	1145c83a 	sub	r2,r2,r5
    a168:	01400074 	movhi	r5,1
    a16c:	29755304 	addi	r5,r5,-10932
    a170:	28800015 	stw	r2,0(r5)
    a174:	003fcd06 	br	a0ac <_malloc_trim_r+0x70>

0000a178 <_free_r>:
    a178:	defffd04 	addi	sp,sp,-12
    a17c:	dc400115 	stw	r17,4(sp)
    a180:	dc000015 	stw	r16,0(sp)
    a184:	dfc00215 	stw	ra,8(sp)
    a188:	2821883a 	mov	r16,r5
    a18c:	2023883a 	mov	r17,r4
    a190:	28004b26 	beq	r5,zero,a2c0 <_free_r+0x148>
    a194:	000b3000 	call	b300 <__malloc_lock>
    a198:	823fff17 	ldw	r8,-4(r16)
    a19c:	00bfff84 	movi	r2,-2
    a1a0:	81bffe04 	addi	r6,r16,-8
    a1a4:	4084703a 	and	r2,r8,r2
    a1a8:	3087883a 	add	r3,r6,r2
    a1ac:	01400074 	movhi	r5,1
    a1b0:	29715504 	addi	r5,r5,-15020
    a1b4:	1a400117 	ldw	r9,4(r3)
    a1b8:	29000217 	ldw	r4,8(r5)
    a1bc:	01ffff04 	movi	r7,-4
    a1c0:	49ce703a 	and	r7,r9,r7
    a1c4:	20c06526 	beq	r4,r3,a35c <_free_r+0x1e4>
    a1c8:	19c00115 	stw	r7,4(r3)
    a1cc:	4200004c 	andi	r8,r8,1
    a1d0:	40003026 	beq	r8,zero,a294 <_free_r+0x11c>
    a1d4:	0009883a 	mov	r4,zero
    a1d8:	19d1883a 	add	r8,r3,r7
    a1dc:	42000117 	ldw	r8,4(r8)
    a1e0:	4200004c 	andi	r8,r8,1
    a1e4:	4000061e 	bne	r8,zero,a200 <_free_r+0x88>
    a1e8:	11c5883a 	add	r2,r2,r7
    a1ec:	19c00217 	ldw	r7,8(r3)
    a1f0:	20004e26 	beq	r4,zero,a32c <_free_r+0x1b4>
    a1f4:	18c00317 	ldw	r3,12(r3)
    a1f8:	38c00315 	stw	r3,12(r7)
    a1fc:	19c00215 	stw	r7,8(r3)
    a200:	11c00054 	ori	r7,r2,1
    a204:	3087883a 	add	r3,r6,r2
    a208:	31c00115 	stw	r7,4(r6)
    a20c:	18800015 	stw	r2,0(r3)
    a210:	20001a1e 	bne	r4,zero,a27c <_free_r+0x104>
    a214:	00c07fc4 	movi	r3,511
    a218:	18802e2e 	bgeu	r3,r2,a2d4 <_free_r+0x15c>
    a21c:	1006d27a 	srli	r3,r2,9
    a220:	01000104 	movi	r4,4
    a224:	20c06636 	bltu	r4,r3,a3c0 <_free_r+0x248>
    a228:	1008d1ba 	srli	r4,r2,6
    a22c:	21000e04 	addi	r4,r4,56
    a230:	210f883a 	add	r7,r4,r4
    a234:	39cf883a 	add	r7,r7,r7
    a238:	39cf883a 	add	r7,r7,r7
    a23c:	29cf883a 	add	r7,r5,r7
    a240:	38c00217 	ldw	r3,8(r7)
    a244:	01400074 	movhi	r5,1
    a248:	29715504 	addi	r5,r5,-15020
    a24c:	19c06126 	beq	r3,r7,a3d4 <_free_r+0x25c>
    a250:	013fff04 	movi	r4,-4
    a254:	19400117 	ldw	r5,4(r3)
    a258:	290a703a 	and	r5,r5,r4
    a25c:	1140022e 	bgeu	r2,r5,a268 <_free_r+0xf0>
    a260:	18c00217 	ldw	r3,8(r3)
    a264:	38fffb1e 	bne	r7,r3,a254 <_free_r+0xdc>
    a268:	18800317 	ldw	r2,12(r3)
    a26c:	30800315 	stw	r2,12(r6)
    a270:	30c00215 	stw	r3,8(r6)
    a274:	11800215 	stw	r6,8(r2)
    a278:	19800315 	stw	r6,12(r3)
    a27c:	8809883a 	mov	r4,r17
    a280:	dfc00217 	ldw	ra,8(sp)
    a284:	dc400117 	ldw	r17,4(sp)
    a288:	dc000017 	ldw	r16,0(sp)
    a28c:	dec00304 	addi	sp,sp,12
    a290:	000b3201 	jmpi	b320 <__malloc_unlock>
    a294:	813ffe17 	ldw	r4,-8(r16)
    a298:	2a400204 	addi	r9,r5,8
    a29c:	310dc83a 	sub	r6,r6,r4
    a2a0:	32000217 	ldw	r8,8(r6)
    a2a4:	1105883a 	add	r2,r2,r4
    a2a8:	42404326 	beq	r8,r9,a3b8 <_free_r+0x240>
    a2ac:	32400317 	ldw	r9,12(r6)
    a2b0:	0009883a 	mov	r4,zero
    a2b4:	42400315 	stw	r9,12(r8)
    a2b8:	4a000215 	stw	r8,8(r9)
    a2bc:	003fc606 	br	a1d8 <_free_r+0x60>
    a2c0:	dfc00217 	ldw	ra,8(sp)
    a2c4:	dc400117 	ldw	r17,4(sp)
    a2c8:	dc000017 	ldw	r16,0(sp)
    a2cc:	dec00304 	addi	sp,sp,12
    a2d0:	f800283a 	ret
    a2d4:	1004d0fa 	srli	r2,r2,3
    a2d8:	02000044 	movi	r8,1
    a2dc:	29c00117 	ldw	r7,4(r5)
    a2e0:	1087883a 	add	r3,r2,r2
    a2e4:	18c7883a 	add	r3,r3,r3
    a2e8:	1005d0ba 	srai	r2,r2,2
    a2ec:	18c7883a 	add	r3,r3,r3
    a2f0:	28c7883a 	add	r3,r5,r3
    a2f4:	19000217 	ldw	r4,8(r3)
    a2f8:	4084983a 	sll	r2,r8,r2
    a2fc:	30c00315 	stw	r3,12(r6)
    a300:	31000215 	stw	r4,8(r6)
    a304:	11c4b03a 	or	r2,r2,r7
    a308:	21800315 	stw	r6,12(r4)
    a30c:	8809883a 	mov	r4,r17
    a310:	28800115 	stw	r2,4(r5)
    a314:	19800215 	stw	r6,8(r3)
    a318:	dfc00217 	ldw	ra,8(sp)
    a31c:	dc400117 	ldw	r17,4(sp)
    a320:	dc000017 	ldw	r16,0(sp)
    a324:	dec00304 	addi	sp,sp,12
    a328:	000b3201 	jmpi	b320 <__malloc_unlock>
    a32c:	02000074 	movhi	r8,1
    a330:	42315704 	addi	r8,r8,-15012
    a334:	3a3faf1e 	bne	r7,r8,a1f4 <_free_r+0x7c>
    a338:	29800515 	stw	r6,20(r5)
    a33c:	29800415 	stw	r6,16(r5)
    a340:	11000054 	ori	r4,r2,1
    a344:	3087883a 	add	r3,r6,r2
    a348:	31c00315 	stw	r7,12(r6)
    a34c:	31c00215 	stw	r7,8(r6)
    a350:	31000115 	stw	r4,4(r6)
    a354:	18800015 	stw	r2,0(r3)
    a358:	003fc806 	br	a27c <_free_r+0x104>
    a35c:	4200004c 	andi	r8,r8,1
    a360:	3885883a 	add	r2,r7,r2
    a364:	4000071e 	bne	r8,zero,a384 <_free_r+0x20c>
    a368:	81fffe17 	ldw	r7,-8(r16)
    a36c:	31cdc83a 	sub	r6,r6,r7
    a370:	30c00317 	ldw	r3,12(r6)
    a374:	31000217 	ldw	r4,8(r6)
    a378:	11c5883a 	add	r2,r2,r7
    a37c:	20c00315 	stw	r3,12(r4)
    a380:	19000215 	stw	r4,8(r3)
    a384:	00c00074 	movhi	r3,1
    a388:	18f2c404 	addi	r3,r3,-13552
    a38c:	18c00017 	ldw	r3,0(r3)
    a390:	11000054 	ori	r4,r2,1
    a394:	31000115 	stw	r4,4(r6)
    a398:	29800215 	stw	r6,8(r5)
    a39c:	10ffb736 	bltu	r2,r3,a27c <_free_r+0x104>
    a3a0:	00800074 	movhi	r2,1
    a3a4:	10b54b04 	addi	r2,r2,-10964
    a3a8:	11400017 	ldw	r5,0(r2)
    a3ac:	8809883a 	mov	r4,r17
    a3b0:	000a03c0 	call	a03c <_malloc_trim_r>
    a3b4:	003fb106 	br	a27c <_free_r+0x104>
    a3b8:	01000044 	movi	r4,1
    a3bc:	003f8606 	br	a1d8 <_free_r+0x60>
    a3c0:	01000504 	movi	r4,20
    a3c4:	20c00b36 	bltu	r4,r3,a3f4 <_free_r+0x27c>
    a3c8:	190016c4 	addi	r4,r3,91
    a3cc:	210f883a 	add	r7,r4,r4
    a3d0:	003f9806 	br	a234 <_free_r+0xbc>
    a3d4:	2009d0ba 	srai	r4,r4,2
    a3d8:	00800044 	movi	r2,1
    a3dc:	29c00117 	ldw	r7,4(r5)
    a3e0:	1108983a 	sll	r4,r2,r4
    a3e4:	1805883a 	mov	r2,r3
    a3e8:	21c8b03a 	or	r4,r4,r7
    a3ec:	29000115 	stw	r4,4(r5)
    a3f0:	003f9e06 	br	a26c <_free_r+0xf4>
    a3f4:	01001504 	movi	r4,84
    a3f8:	20c00436 	bltu	r4,r3,a40c <_free_r+0x294>
    a3fc:	1008d33a 	srli	r4,r2,12
    a400:	21001b84 	addi	r4,r4,110
    a404:	210f883a 	add	r7,r4,r4
    a408:	003f8a06 	br	a234 <_free_r+0xbc>
    a40c:	01005504 	movi	r4,340
    a410:	20c00436 	bltu	r4,r3,a424 <_free_r+0x2ac>
    a414:	1008d3fa 	srli	r4,r2,15
    a418:	21001dc4 	addi	r4,r4,119
    a41c:	210f883a 	add	r7,r4,r4
    a420:	003f8406 	br	a234 <_free_r+0xbc>
    a424:	01015504 	movi	r4,1364
    a428:	20c00436 	bltu	r4,r3,a43c <_free_r+0x2c4>
    a42c:	1008d4ba 	srli	r4,r2,18
    a430:	21001f04 	addi	r4,r4,124
    a434:	210f883a 	add	r7,r4,r4
    a438:	003f7e06 	br	a234 <_free_r+0xbc>
    a43c:	01c03f04 	movi	r7,252
    a440:	01001f84 	movi	r4,126
    a444:	003f7b06 	br	a234 <_free_r+0xbc>

0000a448 <_fwalk>:
    a448:	defff904 	addi	sp,sp,-28
    a44c:	dcc00315 	stw	r19,12(sp)
    a450:	24c0b804 	addi	r19,r4,736
    a454:	dd400515 	stw	r21,20(sp)
    a458:	dd000415 	stw	r20,16(sp)
    a45c:	dfc00615 	stw	ra,24(sp)
    a460:	dc800215 	stw	r18,8(sp)
    a464:	dc400115 	stw	r17,4(sp)
    a468:	dc000015 	stw	r16,0(sp)
    a46c:	282b883a 	mov	r21,r5
    a470:	0029883a 	mov	r20,zero
    a474:	0009ffc0 	call	9ffc <__sfp_lock_acquire>
    a478:	98001226 	beq	r19,zero,a4c4 <_fwalk+0x7c>
    a47c:	04bfffc4 	movi	r18,-1
    a480:	9c400117 	ldw	r17,4(r19)
    a484:	9c000217 	ldw	r16,8(r19)
    a488:	8c7fffc4 	addi	r17,r17,-1
    a48c:	88000b16 	blt	r17,zero,a4bc <_fwalk+0x74>
    a490:	84000304 	addi	r16,r16,12
    a494:	80c0000f 	ldh	r3,0(r16)
    a498:	8c7fffc4 	addi	r17,r17,-1
    a49c:	813ffd04 	addi	r4,r16,-12
    a4a0:	18000426 	beq	r3,zero,a4b4 <_fwalk+0x6c>
    a4a4:	80c0008f 	ldh	r3,2(r16)
    a4a8:	1c800226 	beq	r3,r18,a4b4 <_fwalk+0x6c>
    a4ac:	a83ee83a 	callr	r21
    a4b0:	a0a8b03a 	or	r20,r20,r2
    a4b4:	84001704 	addi	r16,r16,92
    a4b8:	8cbff61e 	bne	r17,r18,a494 <_fwalk+0x4c>
    a4bc:	9cc00017 	ldw	r19,0(r19)
    a4c0:	983fef1e 	bne	r19,zero,a480 <_fwalk+0x38>
    a4c4:	000a0000 	call	a000 <__sfp_lock_release>
    a4c8:	a005883a 	mov	r2,r20
    a4cc:	dfc00617 	ldw	ra,24(sp)
    a4d0:	dd400517 	ldw	r21,20(sp)
    a4d4:	dd000417 	ldw	r20,16(sp)
    a4d8:	dcc00317 	ldw	r19,12(sp)
    a4dc:	dc800217 	ldw	r18,8(sp)
    a4e0:	dc400117 	ldw	r17,4(sp)
    a4e4:	dc000017 	ldw	r16,0(sp)
    a4e8:	dec00704 	addi	sp,sp,28
    a4ec:	f800283a 	ret

0000a4f0 <_fwalk_reent>:
    a4f0:	defff804 	addi	sp,sp,-32
    a4f4:	dcc00315 	stw	r19,12(sp)
    a4f8:	24c0b804 	addi	r19,r4,736
    a4fc:	dd800615 	stw	r22,24(sp)
    a500:	dd400515 	stw	r21,20(sp)
    a504:	dd000415 	stw	r20,16(sp)
    a508:	dfc00715 	stw	ra,28(sp)
    a50c:	dc800215 	stw	r18,8(sp)
    a510:	dc400115 	stw	r17,4(sp)
    a514:	dc000015 	stw	r16,0(sp)
    a518:	2029883a 	mov	r20,r4
    a51c:	282b883a 	mov	r21,r5
    a520:	002d883a 	mov	r22,zero
    a524:	0009ffc0 	call	9ffc <__sfp_lock_acquire>
    a528:	98001326 	beq	r19,zero,a578 <_fwalk_reent+0x88>
    a52c:	04bfffc4 	movi	r18,-1
    a530:	9c400117 	ldw	r17,4(r19)
    a534:	9c000217 	ldw	r16,8(r19)
    a538:	8c7fffc4 	addi	r17,r17,-1
    a53c:	88000c16 	blt	r17,zero,a570 <_fwalk_reent+0x80>
    a540:	84000304 	addi	r16,r16,12
    a544:	80c0000f 	ldh	r3,0(r16)
    a548:	8c7fffc4 	addi	r17,r17,-1
    a54c:	817ffd04 	addi	r5,r16,-12
    a550:	18000526 	beq	r3,zero,a568 <_fwalk_reent+0x78>
    a554:	80c0008f 	ldh	r3,2(r16)
    a558:	a009883a 	mov	r4,r20
    a55c:	1c800226 	beq	r3,r18,a568 <_fwalk_reent+0x78>
    a560:	a83ee83a 	callr	r21
    a564:	b0acb03a 	or	r22,r22,r2
    a568:	84001704 	addi	r16,r16,92
    a56c:	8cbff51e 	bne	r17,r18,a544 <_fwalk_reent+0x54>
    a570:	9cc00017 	ldw	r19,0(r19)
    a574:	983fee1e 	bne	r19,zero,a530 <_fwalk_reent+0x40>
    a578:	000a0000 	call	a000 <__sfp_lock_release>
    a57c:	b005883a 	mov	r2,r22
    a580:	dfc00717 	ldw	ra,28(sp)
    a584:	dd800617 	ldw	r22,24(sp)
    a588:	dd400517 	ldw	r21,20(sp)
    a58c:	dd000417 	ldw	r20,16(sp)
    a590:	dcc00317 	ldw	r19,12(sp)
    a594:	dc800217 	ldw	r18,8(sp)
    a598:	dc400117 	ldw	r17,4(sp)
    a59c:	dc000017 	ldw	r16,0(sp)
    a5a0:	dec00804 	addi	sp,sp,32
    a5a4:	f800283a 	ret

0000a5a8 <__smakebuf_r>:
    a5a8:	2880030b 	ldhu	r2,12(r5)
    a5ac:	deffed04 	addi	sp,sp,-76
    a5b0:	dc401015 	stw	r17,64(sp)
    a5b4:	10c0008c 	andi	r3,r2,2
    a5b8:	18ffffcc 	andi	r3,r3,65535
    a5bc:	18e0001c 	xori	r3,r3,32768
    a5c0:	dc000f15 	stw	r16,60(sp)
    a5c4:	dfc01215 	stw	ra,72(sp)
    a5c8:	dc801115 	stw	r18,68(sp)
    a5cc:	18e00004 	addi	r3,r3,-32768
    a5d0:	2821883a 	mov	r16,r5
    a5d4:	2023883a 	mov	r17,r4
    a5d8:	1800381e 	bne	r3,zero,a6bc <__smakebuf_r+0x114>
    a5dc:	2940038f 	ldh	r5,14(r5)
    a5e0:	28002d16 	blt	r5,zero,a698 <__smakebuf_r+0xf0>
    a5e4:	d80d883a 	mov	r6,sp
    a5e8:	000ab8c0 	call	ab8c <_fstat_r>
    a5ec:	10002916 	blt	r2,zero,a694 <__smakebuf_r+0xec>
    a5f0:	d8800117 	ldw	r2,4(sp)
    a5f4:	00e00014 	movui	r3,32768
    a5f8:	10bc000c 	andi	r2,r2,61440
    a5fc:	10c03c26 	beq	r2,r3,a6f0 <__smakebuf_r+0x148>
    a600:	80c0030b 	ldhu	r3,12(r16)
    a604:	18c20014 	ori	r3,r3,2048
    a608:	80c0030d 	sth	r3,12(r16)
    a60c:	00c80004 	movi	r3,8192
    a610:	10c00c1e 	bne	r2,r3,a644 <__smakebuf_r+0x9c>
    a614:	8140038f 	ldh	r5,14(r16)
    a618:	8809883a 	mov	r4,r17
    a61c:	000abf40 	call	abf4 <_isatty_r>
    a620:	10000826 	beq	r2,zero,a644 <__smakebuf_r+0x9c>
    a624:	80c0030b 	ldhu	r3,12(r16)
    a628:	808010c4 	addi	r2,r16,67
    a62c:	80800015 	stw	r2,0(r16)
    a630:	18c00054 	ori	r3,r3,1
    a634:	80800415 	stw	r2,16(r16)
    a638:	00800044 	movi	r2,1
    a63c:	80c0030d 	sth	r3,12(r16)
    a640:	80800515 	stw	r2,20(r16)
    a644:	04810004 	movi	r18,1024
    a648:	8809883a 	mov	r4,r17
    a64c:	900b883a 	mov	r5,r18
    a650:	000881c0 	call	881c <_malloc_r>
    a654:	10003026 	beq	r2,zero,a718 <__smakebuf_r+0x170>
    a658:	80c0030b 	ldhu	r3,12(r16)
    a65c:	01000074 	movhi	r4,1
    a660:	21275804 	addi	r4,r4,-25248
    a664:	89000f15 	stw	r4,60(r17)
    a668:	18c02014 	ori	r3,r3,128
    a66c:	80c0030d 	sth	r3,12(r16)
    a670:	80800015 	stw	r2,0(r16)
    a674:	80800415 	stw	r2,16(r16)
    a678:	84800515 	stw	r18,20(r16)
    a67c:	dfc01217 	ldw	ra,72(sp)
    a680:	dc801117 	ldw	r18,68(sp)
    a684:	dc401017 	ldw	r17,64(sp)
    a688:	dc000f17 	ldw	r16,60(sp)
    a68c:	dec01304 	addi	sp,sp,76
    a690:	f800283a 	ret
    a694:	8080030b 	ldhu	r2,12(r16)
    a698:	10c0200c 	andi	r3,r2,128
    a69c:	18ffffcc 	andi	r3,r3,65535
    a6a0:	18e0001c 	xori	r3,r3,32768
    a6a4:	18e00004 	addi	r3,r3,-32768
    a6a8:	18000f1e 	bne	r3,zero,a6e8 <__smakebuf_r+0x140>
    a6ac:	04810004 	movi	r18,1024
    a6b0:	10820014 	ori	r2,r2,2048
    a6b4:	8080030d 	sth	r2,12(r16)
    a6b8:	003fe306 	br	a648 <__smakebuf_r+0xa0>
    a6bc:	288010c4 	addi	r2,r5,67
    a6c0:	28800015 	stw	r2,0(r5)
    a6c4:	28800415 	stw	r2,16(r5)
    a6c8:	00800044 	movi	r2,1
    a6cc:	28800515 	stw	r2,20(r5)
    a6d0:	dfc01217 	ldw	ra,72(sp)
    a6d4:	dc801117 	ldw	r18,68(sp)
    a6d8:	dc401017 	ldw	r17,64(sp)
    a6dc:	dc000f17 	ldw	r16,60(sp)
    a6e0:	dec01304 	addi	sp,sp,76
    a6e4:	f800283a 	ret
    a6e8:	04801004 	movi	r18,64
    a6ec:	003ff006 	br	a6b0 <__smakebuf_r+0x108>
    a6f0:	81000a17 	ldw	r4,40(r16)
    a6f4:	00c00074 	movhi	r3,1
    a6f8:	18ea4204 	addi	r3,r3,-22264
    a6fc:	20ffc01e 	bne	r4,r3,a600 <__smakebuf_r+0x58>
    a700:	8080030b 	ldhu	r2,12(r16)
    a704:	00c10004 	movi	r3,1024
    a708:	80c01315 	stw	r3,76(r16)
    a70c:	10c4b03a 	or	r2,r2,r3
    a710:	8080030d 	sth	r2,12(r16)
    a714:	003fcb06 	br	a644 <__smakebuf_r+0x9c>
    a718:	8080030b 	ldhu	r2,12(r16)
    a71c:	10c0800c 	andi	r3,r2,512
    a720:	18ffffcc 	andi	r3,r3,65535
    a724:	18e0001c 	xori	r3,r3,32768
    a728:	18e00004 	addi	r3,r3,-32768
    a72c:	183fd31e 	bne	r3,zero,a67c <__smakebuf_r+0xd4>
    a730:	10800094 	ori	r2,r2,2
    a734:	80c010c4 	addi	r3,r16,67
    a738:	8080030d 	sth	r2,12(r16)
    a73c:	00800044 	movi	r2,1
    a740:	80c00015 	stw	r3,0(r16)
    a744:	80c00415 	stw	r3,16(r16)
    a748:	80800515 	stw	r2,20(r16)
    a74c:	003fcb06 	br	a67c <__smakebuf_r+0xd4>

0000a750 <memset>:
    a750:	00c000c4 	movi	r3,3
    a754:	2005883a 	mov	r2,r4
    a758:	29403fcc 	andi	r5,r5,255
    a75c:	19802d2e 	bgeu	r3,r6,a814 <memset+0xc4>
    a760:	20c6703a 	and	r3,r4,r3
    a764:	18002e1e 	bne	r3,zero,a820 <memset+0xd0>
    a768:	2806923a 	slli	r3,r5,8
    a76c:	010003c4 	movi	r4,15
    a770:	3011883a 	mov	r8,r6
    a774:	1946b03a 	or	r3,r3,r5
    a778:	180e943a 	slli	r7,r3,16
    a77c:	38ceb03a 	or	r7,r7,r3
    a780:	1007883a 	mov	r3,r2
    a784:	21800f2e 	bgeu	r4,r6,a7c4 <memset+0x74>
    a788:	19c00015 	stw	r7,0(r3)
    a78c:	19c00115 	stw	r7,4(r3)
    a790:	19c00215 	stw	r7,8(r3)
    a794:	19c00315 	stw	r7,12(r3)
    a798:	423ffc04 	addi	r8,r8,-16
    a79c:	18c00404 	addi	r3,r3,16
    a7a0:	223ff936 	bltu	r4,r8,a788 <memset+0x38>
    a7a4:	30fffc04 	addi	r3,r6,-16
    a7a8:	1806d13a 	srli	r3,r3,4
    a7ac:	318003cc 	andi	r6,r6,15
    a7b0:	010000c4 	movi	r4,3
    a7b4:	18c00044 	addi	r3,r3,1
    a7b8:	1806913a 	slli	r3,r3,4
    a7bc:	10c7883a 	add	r3,r2,r3
    a7c0:	21800e2e 	bgeu	r4,r6,a7fc <memset+0xac>
    a7c4:	1813883a 	mov	r9,r3
    a7c8:	3011883a 	mov	r8,r6
    a7cc:	010000c4 	movi	r4,3
    a7d0:	49c00015 	stw	r7,0(r9)
    a7d4:	423fff04 	addi	r8,r8,-4
    a7d8:	4a400104 	addi	r9,r9,4
    a7dc:	223ffc36 	bltu	r4,r8,a7d0 <memset+0x80>
    a7e0:	313fff04 	addi	r4,r6,-4
    a7e4:	2008d0ba 	srli	r4,r4,2
    a7e8:	318000cc 	andi	r6,r6,3
    a7ec:	21000044 	addi	r4,r4,1
    a7f0:	2109883a 	add	r4,r4,r4
    a7f4:	2109883a 	add	r4,r4,r4
    a7f8:	1907883a 	add	r3,r3,r4
    a7fc:	30000a26 	beq	r6,zero,a828 <memset+0xd8>
    a800:	198d883a 	add	r6,r3,r6
    a804:	19400005 	stb	r5,0(r3)
    a808:	18c00044 	addi	r3,r3,1
    a80c:	19bffd1e 	bne	r3,r6,a804 <memset+0xb4>
    a810:	f800283a 	ret
    a814:	2007883a 	mov	r3,r4
    a818:	303ff91e 	bne	r6,zero,a800 <memset+0xb0>
    a81c:	00000206 	br	a828 <memset+0xd8>
    a820:	2007883a 	mov	r3,r4
    a824:	003ff606 	br	a800 <memset+0xb0>
    a828:	f800283a 	ret

0000a82c <__sread>:
    a82c:	defffe04 	addi	sp,sp,-8
    a830:	dc000015 	stw	r16,0(sp)
    a834:	2821883a 	mov	r16,r5
    a838:	2940038f 	ldh	r5,14(r5)
    a83c:	dfc00115 	stw	ra,4(sp)
    a840:	000acc40 	call	acc4 <_read_r>
    a844:	10000716 	blt	r2,zero,a864 <__sread+0x38>
    a848:	80c01417 	ldw	r3,80(r16)
    a84c:	1887883a 	add	r3,r3,r2
    a850:	80c01415 	stw	r3,80(r16)
    a854:	dfc00117 	ldw	ra,4(sp)
    a858:	dc000017 	ldw	r16,0(sp)
    a85c:	dec00204 	addi	sp,sp,8
    a860:	f800283a 	ret
    a864:	80c0030b 	ldhu	r3,12(r16)
    a868:	18fbffcc 	andi	r3,r3,61439
    a86c:	80c0030d 	sth	r3,12(r16)
    a870:	dfc00117 	ldw	ra,4(sp)
    a874:	dc000017 	ldw	r16,0(sp)
    a878:	dec00204 	addi	sp,sp,8
    a87c:	f800283a 	ret

0000a880 <__swrite>:
    a880:	2880030b 	ldhu	r2,12(r5)
    a884:	defffb04 	addi	sp,sp,-20
    a888:	dcc00315 	stw	r19,12(sp)
    a88c:	10c0400c 	andi	r3,r2,256
    a890:	18ffffcc 	andi	r3,r3,65535
    a894:	18e0001c 	xori	r3,r3,32768
    a898:	dc800215 	stw	r18,8(sp)
    a89c:	dc400115 	stw	r17,4(sp)
    a8a0:	dc000015 	stw	r16,0(sp)
    a8a4:	dfc00415 	stw	ra,16(sp)
    a8a8:	18e00004 	addi	r3,r3,-32768
    a8ac:	2821883a 	mov	r16,r5
    a8b0:	2027883a 	mov	r19,r4
    a8b4:	3025883a 	mov	r18,r6
    a8b8:	3823883a 	mov	r17,r7
    a8bc:	18000526 	beq	r3,zero,a8d4 <__swrite+0x54>
    a8c0:	2940038f 	ldh	r5,14(r5)
    a8c4:	000d883a 	mov	r6,zero
    a8c8:	01c00084 	movi	r7,2
    a8cc:	000ac580 	call	ac58 <_lseek_r>
    a8d0:	8080030b 	ldhu	r2,12(r16)
    a8d4:	8140038f 	ldh	r5,14(r16)
    a8d8:	10bbffcc 	andi	r2,r2,61439
    a8dc:	9809883a 	mov	r4,r19
    a8e0:	900d883a 	mov	r6,r18
    a8e4:	880f883a 	mov	r7,r17
    a8e8:	8080030d 	sth	r2,12(r16)
    a8ec:	dfc00417 	ldw	ra,16(sp)
    a8f0:	dcc00317 	ldw	r19,12(sp)
    a8f4:	dc800217 	ldw	r18,8(sp)
    a8f8:	dc400117 	ldw	r17,4(sp)
    a8fc:	dc000017 	ldw	r16,0(sp)
    a900:	dec00504 	addi	sp,sp,20
    a904:	000a96c1 	jmpi	a96c <_write_r>

0000a908 <__sseek>:
    a908:	defffe04 	addi	sp,sp,-8
    a90c:	dc000015 	stw	r16,0(sp)
    a910:	2821883a 	mov	r16,r5
    a914:	2940038f 	ldh	r5,14(r5)
    a918:	dfc00115 	stw	ra,4(sp)
    a91c:	000ac580 	call	ac58 <_lseek_r>
    a920:	00ffffc4 	movi	r3,-1
    a924:	10c00826 	beq	r2,r3,a948 <__sseek+0x40>
    a928:	80c0030b 	ldhu	r3,12(r16)
    a92c:	80801415 	stw	r2,80(r16)
    a930:	18c40014 	ori	r3,r3,4096
    a934:	80c0030d 	sth	r3,12(r16)
    a938:	dfc00117 	ldw	ra,4(sp)
    a93c:	dc000017 	ldw	r16,0(sp)
    a940:	dec00204 	addi	sp,sp,8
    a944:	f800283a 	ret
    a948:	80c0030b 	ldhu	r3,12(r16)
    a94c:	18fbffcc 	andi	r3,r3,61439
    a950:	80c0030d 	sth	r3,12(r16)
    a954:	dfc00117 	ldw	ra,4(sp)
    a958:	dc000017 	ldw	r16,0(sp)
    a95c:	dec00204 	addi	sp,sp,8
    a960:	f800283a 	ret

0000a964 <__sclose>:
    a964:	2940038f 	ldh	r5,14(r5)
    a968:	000a9d81 	jmpi	a9d8 <_close_r>

0000a96c <_write_r>:
    a96c:	defffd04 	addi	sp,sp,-12
    a970:	dc400115 	stw	r17,4(sp)
    a974:	dc000015 	stw	r16,0(sp)
    a978:	2023883a 	mov	r17,r4
    a97c:	04000074 	movhi	r16,1
    a980:	84354c04 	addi	r16,r16,-10960
    a984:	2809883a 	mov	r4,r5
    a988:	300b883a 	mov	r5,r6
    a98c:	380d883a 	mov	r6,r7
    a990:	dfc00215 	stw	ra,8(sp)
    a994:	80000015 	stw	zero,0(r16)
    a998:	000b6040 	call	b604 <write>
    a99c:	00ffffc4 	movi	r3,-1
    a9a0:	10c00526 	beq	r2,r3,a9b8 <_write_r+0x4c>
    a9a4:	dfc00217 	ldw	ra,8(sp)
    a9a8:	dc400117 	ldw	r17,4(sp)
    a9ac:	dc000017 	ldw	r16,0(sp)
    a9b0:	dec00304 	addi	sp,sp,12
    a9b4:	f800283a 	ret
    a9b8:	80c00017 	ldw	r3,0(r16)
    a9bc:	183ff926 	beq	r3,zero,a9a4 <_write_r+0x38>
    a9c0:	88c00015 	stw	r3,0(r17)
    a9c4:	dfc00217 	ldw	ra,8(sp)
    a9c8:	dc400117 	ldw	r17,4(sp)
    a9cc:	dc000017 	ldw	r16,0(sp)
    a9d0:	dec00304 	addi	sp,sp,12
    a9d4:	f800283a 	ret

0000a9d8 <_close_r>:
    a9d8:	defffd04 	addi	sp,sp,-12
    a9dc:	dc400115 	stw	r17,4(sp)
    a9e0:	dc000015 	stw	r16,0(sp)
    a9e4:	2023883a 	mov	r17,r4
    a9e8:	04000074 	movhi	r16,1
    a9ec:	84354c04 	addi	r16,r16,-10960
    a9f0:	2809883a 	mov	r4,r5
    a9f4:	dfc00215 	stw	ra,8(sp)
    a9f8:	80000015 	stw	zero,0(r16)
    a9fc:	000ada80 	call	ada8 <close>
    aa00:	00ffffc4 	movi	r3,-1
    aa04:	10c00526 	beq	r2,r3,aa1c <_close_r+0x44>
    aa08:	dfc00217 	ldw	ra,8(sp)
    aa0c:	dc400117 	ldw	r17,4(sp)
    aa10:	dc000017 	ldw	r16,0(sp)
    aa14:	dec00304 	addi	sp,sp,12
    aa18:	f800283a 	ret
    aa1c:	80c00017 	ldw	r3,0(r16)
    aa20:	183ff926 	beq	r3,zero,aa08 <_close_r+0x30>
    aa24:	88c00015 	stw	r3,0(r17)
    aa28:	dfc00217 	ldw	ra,8(sp)
    aa2c:	dc400117 	ldw	r17,4(sp)
    aa30:	dc000017 	ldw	r16,0(sp)
    aa34:	dec00304 	addi	sp,sp,12
    aa38:	f800283a 	ret

0000aa3c <_fclose_r>:
    aa3c:	defffc04 	addi	sp,sp,-16
    aa40:	dc400115 	stw	r17,4(sp)
    aa44:	dc000015 	stw	r16,0(sp)
    aa48:	dfc00315 	stw	ra,12(sp)
    aa4c:	dc800215 	stw	r18,8(sp)
    aa50:	2821883a 	mov	r16,r5
    aa54:	2023883a 	mov	r17,r4
    aa58:	28003426 	beq	r5,zero,ab2c <_fclose_r+0xf0>
    aa5c:	0009ffc0 	call	9ffc <__sfp_lock_acquire>
    aa60:	88000226 	beq	r17,zero,aa6c <_fclose_r+0x30>
    aa64:	88800e17 	ldw	r2,56(r17)
    aa68:	10003826 	beq	r2,zero,ab4c <_fclose_r+0x110>
    aa6c:	8080030f 	ldh	r2,12(r16)
    aa70:	10002526 	beq	r2,zero,ab08 <_fclose_r+0xcc>
    aa74:	8809883a 	mov	r4,r17
    aa78:	800b883a 	mov	r5,r16
    aa7c:	0009b380 	call	9b38 <_fflush_r>
    aa80:	1025883a 	mov	r18,r2
    aa84:	80800b17 	ldw	r2,44(r16)
    aa88:	10000426 	beq	r2,zero,aa9c <_fclose_r+0x60>
    aa8c:	81400717 	ldw	r5,28(r16)
    aa90:	8809883a 	mov	r4,r17
    aa94:	103ee83a 	callr	r2
    aa98:	10003516 	blt	r2,zero,ab70 <_fclose_r+0x134>
    aa9c:	8080030b 	ldhu	r2,12(r16)
    aaa0:	1080200c 	andi	r2,r2,128
    aaa4:	10bfffcc 	andi	r2,r2,65535
    aaa8:	10a0001c 	xori	r2,r2,32768
    aaac:	10a00004 	addi	r2,r2,-32768
    aab0:	10002b1e 	bne	r2,zero,ab60 <_fclose_r+0x124>
    aab4:	81400c17 	ldw	r5,48(r16)
    aab8:	28000526 	beq	r5,zero,aad0 <_fclose_r+0x94>
    aabc:	80801004 	addi	r2,r16,64
    aac0:	28800226 	beq	r5,r2,aacc <_fclose_r+0x90>
    aac4:	8809883a 	mov	r4,r17
    aac8:	000a1780 	call	a178 <_free_r>
    aacc:	80000c15 	stw	zero,48(r16)
    aad0:	81401117 	ldw	r5,68(r16)
    aad4:	28000326 	beq	r5,zero,aae4 <_fclose_r+0xa8>
    aad8:	8809883a 	mov	r4,r17
    aadc:	000a1780 	call	a178 <_free_r>
    aae0:	80001115 	stw	zero,68(r16)
    aae4:	8000030d 	sth	zero,12(r16)
    aae8:	000a0000 	call	a000 <__sfp_lock_release>
    aaec:	9005883a 	mov	r2,r18
    aaf0:	dfc00317 	ldw	ra,12(sp)
    aaf4:	dc800217 	ldw	r18,8(sp)
    aaf8:	dc400117 	ldw	r17,4(sp)
    aafc:	dc000017 	ldw	r16,0(sp)
    ab00:	dec00404 	addi	sp,sp,16
    ab04:	f800283a 	ret
    ab08:	000a0000 	call	a000 <__sfp_lock_release>
    ab0c:	0025883a 	mov	r18,zero
    ab10:	9005883a 	mov	r2,r18
    ab14:	dfc00317 	ldw	ra,12(sp)
    ab18:	dc800217 	ldw	r18,8(sp)
    ab1c:	dc400117 	ldw	r17,4(sp)
    ab20:	dc000017 	ldw	r16,0(sp)
    ab24:	dec00404 	addi	sp,sp,16
    ab28:	f800283a 	ret
    ab2c:	0025883a 	mov	r18,zero
    ab30:	9005883a 	mov	r2,r18
    ab34:	dfc00317 	ldw	ra,12(sp)
    ab38:	dc800217 	ldw	r18,8(sp)
    ab3c:	dc400117 	ldw	r17,4(sp)
    ab40:	dc000017 	ldw	r16,0(sp)
    ab44:	dec00404 	addi	sp,sp,16
    ab48:	f800283a 	ret
    ab4c:	8809883a 	mov	r4,r17
    ab50:	0009df40 	call	9df4 <__sinit>
    ab54:	8080030f 	ldh	r2,12(r16)
    ab58:	103fc61e 	bne	r2,zero,aa74 <_fclose_r+0x38>
    ab5c:	003fea06 	br	ab08 <_fclose_r+0xcc>
    ab60:	81400417 	ldw	r5,16(r16)
    ab64:	8809883a 	mov	r4,r17
    ab68:	000a1780 	call	a178 <_free_r>
    ab6c:	003fd106 	br	aab4 <_fclose_r+0x78>
    ab70:	04bfffc4 	movi	r18,-1
    ab74:	003fc906 	br	aa9c <_fclose_r+0x60>

0000ab78 <fclose>:
    ab78:	00800074 	movhi	r2,1
    ab7c:	10b2c204 	addi	r2,r2,-13560
    ab80:	200b883a 	mov	r5,r4
    ab84:	11000017 	ldw	r4,0(r2)
    ab88:	000aa3c1 	jmpi	aa3c <_fclose_r>

0000ab8c <_fstat_r>:
    ab8c:	defffd04 	addi	sp,sp,-12
    ab90:	dc400115 	stw	r17,4(sp)
    ab94:	dc000015 	stw	r16,0(sp)
    ab98:	2023883a 	mov	r17,r4
    ab9c:	04000074 	movhi	r16,1
    aba0:	84354c04 	addi	r16,r16,-10960
    aba4:	2809883a 	mov	r4,r5
    aba8:	300b883a 	mov	r5,r6
    abac:	dfc00215 	stw	ra,8(sp)
    abb0:	80000015 	stw	zero,0(r16)
    abb4:	000aef00 	call	aef0 <fstat>
    abb8:	00ffffc4 	movi	r3,-1
    abbc:	10c00526 	beq	r2,r3,abd4 <_fstat_r+0x48>
    abc0:	dfc00217 	ldw	ra,8(sp)
    abc4:	dc400117 	ldw	r17,4(sp)
    abc8:	dc000017 	ldw	r16,0(sp)
    abcc:	dec00304 	addi	sp,sp,12
    abd0:	f800283a 	ret
    abd4:	80c00017 	ldw	r3,0(r16)
    abd8:	183ff926 	beq	r3,zero,abc0 <_fstat_r+0x34>
    abdc:	88c00015 	stw	r3,0(r17)
    abe0:	dfc00217 	ldw	ra,8(sp)
    abe4:	dc400117 	ldw	r17,4(sp)
    abe8:	dc000017 	ldw	r16,0(sp)
    abec:	dec00304 	addi	sp,sp,12
    abf0:	f800283a 	ret

0000abf4 <_isatty_r>:
    abf4:	defffd04 	addi	sp,sp,-12
    abf8:	dc400115 	stw	r17,4(sp)
    abfc:	dc000015 	stw	r16,0(sp)
    ac00:	2023883a 	mov	r17,r4
    ac04:	04000074 	movhi	r16,1
    ac08:	84354c04 	addi	r16,r16,-10960
    ac0c:	2809883a 	mov	r4,r5
    ac10:	dfc00215 	stw	ra,8(sp)
    ac14:	80000015 	stw	zero,0(r16)
    ac18:	000aff00 	call	aff0 <isatty>
    ac1c:	00ffffc4 	movi	r3,-1
    ac20:	10c00526 	beq	r2,r3,ac38 <_isatty_r+0x44>
    ac24:	dfc00217 	ldw	ra,8(sp)
    ac28:	dc400117 	ldw	r17,4(sp)
    ac2c:	dc000017 	ldw	r16,0(sp)
    ac30:	dec00304 	addi	sp,sp,12
    ac34:	f800283a 	ret
    ac38:	80c00017 	ldw	r3,0(r16)
    ac3c:	183ff926 	beq	r3,zero,ac24 <_isatty_r+0x30>
    ac40:	88c00015 	stw	r3,0(r17)
    ac44:	dfc00217 	ldw	ra,8(sp)
    ac48:	dc400117 	ldw	r17,4(sp)
    ac4c:	dc000017 	ldw	r16,0(sp)
    ac50:	dec00304 	addi	sp,sp,12
    ac54:	f800283a 	ret

0000ac58 <_lseek_r>:
    ac58:	defffd04 	addi	sp,sp,-12
    ac5c:	dc400115 	stw	r17,4(sp)
    ac60:	dc000015 	stw	r16,0(sp)
    ac64:	2023883a 	mov	r17,r4
    ac68:	04000074 	movhi	r16,1
    ac6c:	84354c04 	addi	r16,r16,-10960
    ac70:	2809883a 	mov	r4,r5
    ac74:	300b883a 	mov	r5,r6
    ac78:	380d883a 	mov	r6,r7
    ac7c:	dfc00215 	stw	ra,8(sp)
    ac80:	80000015 	stw	zero,0(r16)
    ac84:	000b1d00 	call	b1d0 <lseek>
    ac88:	00ffffc4 	movi	r3,-1
    ac8c:	10c00526 	beq	r2,r3,aca4 <_lseek_r+0x4c>
    ac90:	dfc00217 	ldw	ra,8(sp)
    ac94:	dc400117 	ldw	r17,4(sp)
    ac98:	dc000017 	ldw	r16,0(sp)
    ac9c:	dec00304 	addi	sp,sp,12
    aca0:	f800283a 	ret
    aca4:	80c00017 	ldw	r3,0(r16)
    aca8:	183ff926 	beq	r3,zero,ac90 <_lseek_r+0x38>
    acac:	88c00015 	stw	r3,0(r17)
    acb0:	dfc00217 	ldw	ra,8(sp)
    acb4:	dc400117 	ldw	r17,4(sp)
    acb8:	dc000017 	ldw	r16,0(sp)
    acbc:	dec00304 	addi	sp,sp,12
    acc0:	f800283a 	ret

0000acc4 <_read_r>:
    acc4:	defffd04 	addi	sp,sp,-12
    acc8:	dc400115 	stw	r17,4(sp)
    accc:	dc000015 	stw	r16,0(sp)
    acd0:	2023883a 	mov	r17,r4
    acd4:	04000074 	movhi	r16,1
    acd8:	84354c04 	addi	r16,r16,-10960
    acdc:	2809883a 	mov	r4,r5
    ace0:	300b883a 	mov	r5,r6
    ace4:	380d883a 	mov	r6,r7
    ace8:	dfc00215 	stw	ra,8(sp)
    acec:	80000015 	stw	zero,0(r16)
    acf0:	000b3900 	call	b390 <read>
    acf4:	00ffffc4 	movi	r3,-1
    acf8:	10c00526 	beq	r2,r3,ad10 <_read_r+0x4c>
    acfc:	dfc00217 	ldw	ra,8(sp)
    ad00:	dc400117 	ldw	r17,4(sp)
    ad04:	dc000017 	ldw	r16,0(sp)
    ad08:	dec00304 	addi	sp,sp,12
    ad0c:	f800283a 	ret
    ad10:	80c00017 	ldw	r3,0(r16)
    ad14:	183ff926 	beq	r3,zero,acfc <_read_r+0x38>
    ad18:	88c00015 	stw	r3,0(r17)
    ad1c:	dfc00217 	ldw	ra,8(sp)
    ad20:	dc400117 	ldw	r17,4(sp)
    ad24:	dc000017 	ldw	r16,0(sp)
    ad28:	dec00304 	addi	sp,sp,12
    ad2c:	f800283a 	ret

0000ad30 <__mulsi3>:
    ad30:	0005883a 	mov	r2,zero
    ad34:	20000726 	beq	r4,zero,ad54 <__mulsi3+0x24>
    ad38:	20c0004c 	andi	r3,r4,1
    ad3c:	2008d07a 	srli	r4,r4,1
    ad40:	18000126 	beq	r3,zero,ad48 <__mulsi3+0x18>
    ad44:	1145883a 	add	r2,r2,r5
    ad48:	294b883a 	add	r5,r5,r5
    ad4c:	203ffa1e 	bne	r4,zero,ad38 <__mulsi3+0x8>
    ad50:	f800283a 	ret
    ad54:	f800283a 	ret

0000ad58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad58:	defffe04 	addi	sp,sp,-8
    ad5c:	dfc00115 	stw	ra,4(sp)
    ad60:	df000015 	stw	fp,0(sp)
    ad64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ad68:	00800074 	movhi	r2,1
    ad6c:	10b2ca04 	addi	r2,r2,-13528
    ad70:	10800017 	ldw	r2,0(r2)
    ad74:	10000526 	beq	r2,zero,ad8c <alt_get_errno+0x34>
    ad78:	00800074 	movhi	r2,1
    ad7c:	10b2ca04 	addi	r2,r2,-13528
    ad80:	10800017 	ldw	r2,0(r2)
    ad84:	103ee83a 	callr	r2
    ad88:	00000206 	br	ad94 <alt_get_errno+0x3c>
    ad8c:	00800074 	movhi	r2,1
    ad90:	10b54c04 	addi	r2,r2,-10960
}
    ad94:	e037883a 	mov	sp,fp
    ad98:	dfc00117 	ldw	ra,4(sp)
    ad9c:	df000017 	ldw	fp,0(sp)
    ada0:	dec00204 	addi	sp,sp,8
    ada4:	f800283a 	ret

0000ada8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ada8:	defffb04 	addi	sp,sp,-20
    adac:	dfc00415 	stw	ra,16(sp)
    adb0:	df000315 	stw	fp,12(sp)
    adb4:	df000304 	addi	fp,sp,12
    adb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    adbc:	e0bfff17 	ldw	r2,-4(fp)
    adc0:	10000716 	blt	r2,zero,ade0 <close+0x38>
    adc4:	e13fff17 	ldw	r4,-4(fp)
    adc8:	01400304 	movi	r5,12
    adcc:	000ad300 	call	ad30 <__mulsi3>
    add0:	00c00074 	movhi	r3,1
    add4:	18f26104 	addi	r3,r3,-13948
    add8:	10c5883a 	add	r2,r2,r3
    addc:	00000106 	br	ade4 <close+0x3c>
    ade0:	0005883a 	mov	r2,zero
    ade4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ade8:	e0bffd17 	ldw	r2,-12(fp)
    adec:	10001826 	beq	r2,zero,ae50 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    adf0:	e0bffd17 	ldw	r2,-12(fp)
    adf4:	10800017 	ldw	r2,0(r2)
    adf8:	10800417 	ldw	r2,16(r2)
    adfc:	10000626 	beq	r2,zero,ae18 <close+0x70>
    ae00:	e0bffd17 	ldw	r2,-12(fp)
    ae04:	10800017 	ldw	r2,0(r2)
    ae08:	10800417 	ldw	r2,16(r2)
    ae0c:	e13ffd17 	ldw	r4,-12(fp)
    ae10:	103ee83a 	callr	r2
    ae14:	00000106 	br	ae1c <close+0x74>
    ae18:	0005883a 	mov	r2,zero
    ae1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ae20:	e13fff17 	ldw	r4,-4(fp)
    ae24:	000b4840 	call	b484 <alt_release_fd>
    if (rval < 0)
    ae28:	e0bffe17 	ldw	r2,-8(fp)
    ae2c:	1000060e 	bge	r2,zero,ae48 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ae30:	000ad580 	call	ad58 <alt_get_errno>
    ae34:	e0fffe17 	ldw	r3,-8(fp)
    ae38:	00c7c83a 	sub	r3,zero,r3
    ae3c:	10c00015 	stw	r3,0(r2)
      return -1;
    ae40:	00bfffc4 	movi	r2,-1
    ae44:	00000606 	br	ae60 <close+0xb8>
    }
    return 0;
    ae48:	0005883a 	mov	r2,zero
    ae4c:	00000406 	br	ae60 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ae50:	000ad580 	call	ad58 <alt_get_errno>
    ae54:	00c01444 	movi	r3,81
    ae58:	10c00015 	stw	r3,0(r2)
    return -1;
    ae5c:	00bfffc4 	movi	r2,-1
  }
}
    ae60:	e037883a 	mov	sp,fp
    ae64:	dfc00117 	ldw	ra,4(sp)
    ae68:	df000017 	ldw	fp,0(sp)
    ae6c:	dec00204 	addi	sp,sp,8
    ae70:	f800283a 	ret

0000ae74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ae74:	defffc04 	addi	sp,sp,-16
    ae78:	df000315 	stw	fp,12(sp)
    ae7c:	df000304 	addi	fp,sp,12
    ae80:	e13ffd15 	stw	r4,-12(fp)
    ae84:	e17ffe15 	stw	r5,-8(fp)
    ae88:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ae8c:	e0bfff17 	ldw	r2,-4(fp)
}
    ae90:	e037883a 	mov	sp,fp
    ae94:	df000017 	ldw	fp,0(sp)
    ae98:	dec00104 	addi	sp,sp,4
    ae9c:	f800283a 	ret

0000aea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aea0:	defffe04 	addi	sp,sp,-8
    aea4:	dfc00115 	stw	ra,4(sp)
    aea8:	df000015 	stw	fp,0(sp)
    aeac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aeb0:	00800074 	movhi	r2,1
    aeb4:	10b2ca04 	addi	r2,r2,-13528
    aeb8:	10800017 	ldw	r2,0(r2)
    aebc:	10000526 	beq	r2,zero,aed4 <alt_get_errno+0x34>
    aec0:	00800074 	movhi	r2,1
    aec4:	10b2ca04 	addi	r2,r2,-13528
    aec8:	10800017 	ldw	r2,0(r2)
    aecc:	103ee83a 	callr	r2
    aed0:	00000206 	br	aedc <alt_get_errno+0x3c>
    aed4:	00800074 	movhi	r2,1
    aed8:	10b54c04 	addi	r2,r2,-10960
}
    aedc:	e037883a 	mov	sp,fp
    aee0:	dfc00117 	ldw	ra,4(sp)
    aee4:	df000017 	ldw	fp,0(sp)
    aee8:	dec00204 	addi	sp,sp,8
    aeec:	f800283a 	ret

0000aef0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    aef0:	defffb04 	addi	sp,sp,-20
    aef4:	dfc00415 	stw	ra,16(sp)
    aef8:	df000315 	stw	fp,12(sp)
    aefc:	df000304 	addi	fp,sp,12
    af00:	e13ffe15 	stw	r4,-8(fp)
    af04:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    af08:	e0bffe17 	ldw	r2,-8(fp)
    af0c:	10000716 	blt	r2,zero,af2c <fstat+0x3c>
    af10:	e13ffe17 	ldw	r4,-8(fp)
    af14:	01400304 	movi	r5,12
    af18:	000ad300 	call	ad30 <__mulsi3>
    af1c:	00c00074 	movhi	r3,1
    af20:	18f26104 	addi	r3,r3,-13948
    af24:	10c5883a 	add	r2,r2,r3
    af28:	00000106 	br	af30 <fstat+0x40>
    af2c:	0005883a 	mov	r2,zero
    af30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    af34:	e0bffd17 	ldw	r2,-12(fp)
    af38:	10001026 	beq	r2,zero,af7c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    af3c:	e0bffd17 	ldw	r2,-12(fp)
    af40:	10800017 	ldw	r2,0(r2)
    af44:	10800817 	ldw	r2,32(r2)
    af48:	10000726 	beq	r2,zero,af68 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
    af4c:	e0bffd17 	ldw	r2,-12(fp)
    af50:	10800017 	ldw	r2,0(r2)
    af54:	10800817 	ldw	r2,32(r2)
    af58:	e13ffd17 	ldw	r4,-12(fp)
    af5c:	e17fff17 	ldw	r5,-4(fp)
    af60:	103ee83a 	callr	r2
    af64:	00000906 	br	af8c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	00c80004 	movi	r3,8192
    af70:	10c00115 	stw	r3,4(r2)
      return 0;
    af74:	0005883a 	mov	r2,zero
    af78:	00000406 	br	af8c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af7c:	000aea00 	call	aea0 <alt_get_errno>
    af80:	00c01444 	movi	r3,81
    af84:	10c00015 	stw	r3,0(r2)
    return -1;
    af88:	00bfffc4 	movi	r2,-1
  }
}
    af8c:	e037883a 	mov	sp,fp
    af90:	dfc00117 	ldw	ra,4(sp)
    af94:	df000017 	ldw	fp,0(sp)
    af98:	dec00204 	addi	sp,sp,8
    af9c:	f800283a 	ret

0000afa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    afa0:	defffe04 	addi	sp,sp,-8
    afa4:	dfc00115 	stw	ra,4(sp)
    afa8:	df000015 	stw	fp,0(sp)
    afac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    afb0:	00800074 	movhi	r2,1
    afb4:	10b2ca04 	addi	r2,r2,-13528
    afb8:	10800017 	ldw	r2,0(r2)
    afbc:	10000526 	beq	r2,zero,afd4 <alt_get_errno+0x34>
    afc0:	00800074 	movhi	r2,1
    afc4:	10b2ca04 	addi	r2,r2,-13528
    afc8:	10800017 	ldw	r2,0(r2)
    afcc:	103ee83a 	callr	r2
    afd0:	00000206 	br	afdc <alt_get_errno+0x3c>
    afd4:	00800074 	movhi	r2,1
    afd8:	10b54c04 	addi	r2,r2,-10960
}
    afdc:	e037883a 	mov	sp,fp
    afe0:	dfc00117 	ldw	ra,4(sp)
    afe4:	df000017 	ldw	fp,0(sp)
    afe8:	dec00204 	addi	sp,sp,8
    afec:	f800283a 	ret

0000aff0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    aff0:	deffed04 	addi	sp,sp,-76
    aff4:	dfc01215 	stw	ra,72(sp)
    aff8:	df001115 	stw	fp,68(sp)
    affc:	df001104 	addi	fp,sp,68
    b000:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b004:	e0bfff17 	ldw	r2,-4(fp)
    b008:	10000716 	blt	r2,zero,b028 <isatty+0x38>
    b00c:	e13fff17 	ldw	r4,-4(fp)
    b010:	01400304 	movi	r5,12
    b014:	000ad300 	call	ad30 <__mulsi3>
    b018:	00c00074 	movhi	r3,1
    b01c:	18f26104 	addi	r3,r3,-13948
    b020:	10c5883a 	add	r2,r2,r3
    b024:	00000106 	br	b02c <isatty+0x3c>
    b028:	0005883a 	mov	r2,zero
    b02c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b030:	e0bfef17 	ldw	r2,-68(fp)
    b034:	10000e26 	beq	r2,zero,b070 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b038:	e0bfef17 	ldw	r2,-68(fp)
    b03c:	10800017 	ldw	r2,0(r2)
    b040:	10800817 	ldw	r2,32(r2)
    b044:	1000021e 	bne	r2,zero,b050 <isatty+0x60>
    {
      return 1;
    b048:	00800044 	movi	r2,1
    b04c:	00000c06 	br	b080 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b050:	e0bff004 	addi	r2,fp,-64
    b054:	e13fff17 	ldw	r4,-4(fp)
    b058:	100b883a 	mov	r5,r2
    b05c:	000aef00 	call	aef0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b060:	e0bff117 	ldw	r2,-60(fp)
    b064:	10880020 	cmpeqi	r2,r2,8192
    b068:	10803fcc 	andi	r2,r2,255
    b06c:	00000406 	br	b080 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b070:	000afa00 	call	afa0 <alt_get_errno>
    b074:	00c01444 	movi	r3,81
    b078:	10c00015 	stw	r3,0(r2)
    return 0;
    b07c:	0005883a 	mov	r2,zero
  }
}
    b080:	e037883a 	mov	sp,fp
    b084:	dfc00117 	ldw	ra,4(sp)
    b088:	df000017 	ldw	fp,0(sp)
    b08c:	dec00204 	addi	sp,sp,8
    b090:	f800283a 	ret

0000b094 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b094:	defffc04 	addi	sp,sp,-16
    b098:	df000315 	stw	fp,12(sp)
    b09c:	df000304 	addi	fp,sp,12
    b0a0:	e13ffd15 	stw	r4,-12(fp)
    b0a4:	e17ffe15 	stw	r5,-8(fp)
    b0a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b0ac:	e0fffe17 	ldw	r3,-8(fp)
    b0b0:	e0bffd17 	ldw	r2,-12(fp)
    b0b4:	18800e26 	beq	r3,r2,b0f0 <alt_load_section+0x5c>
  {
    while( to != end )
    b0b8:	00000a06 	br	b0e4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b0bc:	e0bffd17 	ldw	r2,-12(fp)
    b0c0:	10c00017 	ldw	r3,0(r2)
    b0c4:	e0bffe17 	ldw	r2,-8(fp)
    b0c8:	10c00015 	stw	r3,0(r2)
    b0cc:	e0bffe17 	ldw	r2,-8(fp)
    b0d0:	10800104 	addi	r2,r2,4
    b0d4:	e0bffe15 	stw	r2,-8(fp)
    b0d8:	e0bffd17 	ldw	r2,-12(fp)
    b0dc:	10800104 	addi	r2,r2,4
    b0e0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b0e4:	e0fffe17 	ldw	r3,-8(fp)
    b0e8:	e0bfff17 	ldw	r2,-4(fp)
    b0ec:	18bff31e 	bne	r3,r2,b0bc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b0f0:	e037883a 	mov	sp,fp
    b0f4:	df000017 	ldw	fp,0(sp)
    b0f8:	dec00104 	addi	sp,sp,4
    b0fc:	f800283a 	ret

0000b100 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b100:	defffe04 	addi	sp,sp,-8
    b104:	dfc00115 	stw	ra,4(sp)
    b108:	df000015 	stw	fp,0(sp)
    b10c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b110:	01000074 	movhi	r4,1
    b114:	2132cf04 	addi	r4,r4,-13508
    b118:	01400074 	movhi	r5,1
    b11c:	29705504 	addi	r5,r5,-16044
    b120:	01800074 	movhi	r6,1
    b124:	31b2cf04 	addi	r6,r6,-13508
    b128:	000b0940 	call	b094 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b12c:	01000074 	movhi	r4,1
    b130:	21200804 	addi	r4,r4,-32736
    b134:	01400074 	movhi	r5,1
    b138:	29600804 	addi	r5,r5,-32736
    b13c:	01800074 	movhi	r6,1
    b140:	31a06e04 	addi	r6,r6,-32328
    b144:	000b0940 	call	b094 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b148:	01000074 	movhi	r4,1
    b14c:	21304b04 	addi	r4,r4,-16084
    b150:	01400074 	movhi	r5,1
    b154:	29704b04 	addi	r5,r5,-16084
    b158:	01800074 	movhi	r6,1
    b15c:	31b05504 	addi	r6,r6,-16044
    b160:	000b0940 	call	b094 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b164:	000b8600 	call	b860 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b168:	000b9340 	call	b934 <alt_icache_flush_all>
}
    b16c:	e037883a 	mov	sp,fp
    b170:	dfc00117 	ldw	ra,4(sp)
    b174:	df000017 	ldw	fp,0(sp)
    b178:	dec00204 	addi	sp,sp,8
    b17c:	f800283a 	ret

0000b180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b180:	defffe04 	addi	sp,sp,-8
    b184:	dfc00115 	stw	ra,4(sp)
    b188:	df000015 	stw	fp,0(sp)
    b18c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b190:	00800074 	movhi	r2,1
    b194:	10b2ca04 	addi	r2,r2,-13528
    b198:	10800017 	ldw	r2,0(r2)
    b19c:	10000526 	beq	r2,zero,b1b4 <alt_get_errno+0x34>
    b1a0:	00800074 	movhi	r2,1
    b1a4:	10b2ca04 	addi	r2,r2,-13528
    b1a8:	10800017 	ldw	r2,0(r2)
    b1ac:	103ee83a 	callr	r2
    b1b0:	00000206 	br	b1bc <alt_get_errno+0x3c>
    b1b4:	00800074 	movhi	r2,1
    b1b8:	10b54c04 	addi	r2,r2,-10960
}
    b1bc:	e037883a 	mov	sp,fp
    b1c0:	dfc00117 	ldw	ra,4(sp)
    b1c4:	df000017 	ldw	fp,0(sp)
    b1c8:	dec00204 	addi	sp,sp,8
    b1cc:	f800283a 	ret

0000b1d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b1d0:	defff904 	addi	sp,sp,-28
    b1d4:	dfc00615 	stw	ra,24(sp)
    b1d8:	df000515 	stw	fp,20(sp)
    b1dc:	df000504 	addi	fp,sp,20
    b1e0:	e13ffd15 	stw	r4,-12(fp)
    b1e4:	e17ffe15 	stw	r5,-8(fp)
    b1e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b1ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b1f0:	e0bffd17 	ldw	r2,-12(fp)
    b1f4:	10000716 	blt	r2,zero,b214 <lseek+0x44>
    b1f8:	e13ffd17 	ldw	r4,-12(fp)
    b1fc:	01400304 	movi	r5,12
    b200:	000ad300 	call	ad30 <__mulsi3>
    b204:	00c00074 	movhi	r3,1
    b208:	18f26104 	addi	r3,r3,-13948
    b20c:	10c5883a 	add	r2,r2,r3
    b210:	00000106 	br	b218 <lseek+0x48>
    b214:	0005883a 	mov	r2,zero
    b218:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b21c:	e0bffc17 	ldw	r2,-16(fp)
    b220:	10001026 	beq	r2,zero,b264 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b224:	e0bffc17 	ldw	r2,-16(fp)
    b228:	10800017 	ldw	r2,0(r2)
    b22c:	10800717 	ldw	r2,28(r2)
    b230:	10000926 	beq	r2,zero,b258 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b234:	e0bffc17 	ldw	r2,-16(fp)
    b238:	10800017 	ldw	r2,0(r2)
    b23c:	10800717 	ldw	r2,28(r2)
    b240:	e13ffc17 	ldw	r4,-16(fp)
    b244:	e17ffe17 	ldw	r5,-8(fp)
    b248:	e1bfff17 	ldw	r6,-4(fp)
    b24c:	103ee83a 	callr	r2
    b250:	e0bffb15 	stw	r2,-20(fp)
    b254:	00000506 	br	b26c <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b258:	00bfde84 	movi	r2,-134
    b25c:	e0bffb15 	stw	r2,-20(fp)
    b260:	00000206 	br	b26c <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
    b264:	00bfebc4 	movi	r2,-81
    b268:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b26c:	e0bffb17 	ldw	r2,-20(fp)
    b270:	1000060e 	bge	r2,zero,b28c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    b274:	000b1800 	call	b180 <alt_get_errno>
    b278:	e0fffb17 	ldw	r3,-20(fp)
    b27c:	00c7c83a 	sub	r3,zero,r3
    b280:	10c00015 	stw	r3,0(r2)
    rc = -1;
    b284:	00bfffc4 	movi	r2,-1
    b288:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b28c:	e0bffb17 	ldw	r2,-20(fp)
}
    b290:	e037883a 	mov	sp,fp
    b294:	dfc00117 	ldw	ra,4(sp)
    b298:	df000017 	ldw	fp,0(sp)
    b29c:	dec00204 	addi	sp,sp,8
    b2a0:	f800283a 	ret

0000b2a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b2a4:	defffd04 	addi	sp,sp,-12
    b2a8:	dfc00215 	stw	ra,8(sp)
    b2ac:	df000115 	stw	fp,4(sp)
    b2b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b2b4:	0009883a 	mov	r4,zero
    b2b8:	000b6f40 	call	b6f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b2bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b2c0:	000b7280 	call	b728 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b2c4:	000b87c0 	call	b87c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b2c8:	01000074 	movhi	r4,1
    b2cc:	212e3604 	addi	r4,r4,-18216
    b2d0:	000bdd40 	call	bdd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b2d4:	d1228c17 	ldw	r4,-30160(gp)
    b2d8:	d0e28d17 	ldw	r3,-30156(gp)
    b2dc:	d0a28e17 	ldw	r2,-30152(gp)
    b2e0:	180b883a 	mov	r5,r3
    b2e4:	100d883a 	mov	r6,r2
    b2e8:	00081f40 	call	81f4 <main>
    b2ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b2f0:	01000044 	movi	r4,1
    b2f4:	000ada80 	call	ada8 <close>
  exit (result);
    b2f8:	e13fff17 	ldw	r4,-4(fp)
    b2fc:	000bde80 	call	bde8 <exit>

0000b300 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b300:	defffe04 	addi	sp,sp,-8
    b304:	df000115 	stw	fp,4(sp)
    b308:	df000104 	addi	fp,sp,4
    b30c:	e13fff15 	stw	r4,-4(fp)
}
    b310:	e037883a 	mov	sp,fp
    b314:	df000017 	ldw	fp,0(sp)
    b318:	dec00104 	addi	sp,sp,4
    b31c:	f800283a 	ret

0000b320 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b320:	defffe04 	addi	sp,sp,-8
    b324:	df000115 	stw	fp,4(sp)
    b328:	df000104 	addi	fp,sp,4
    b32c:	e13fff15 	stw	r4,-4(fp)
}
    b330:	e037883a 	mov	sp,fp
    b334:	df000017 	ldw	fp,0(sp)
    b338:	dec00104 	addi	sp,sp,4
    b33c:	f800283a 	ret

0000b340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b340:	defffe04 	addi	sp,sp,-8
    b344:	dfc00115 	stw	ra,4(sp)
    b348:	df000015 	stw	fp,0(sp)
    b34c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b350:	00800074 	movhi	r2,1
    b354:	10b2ca04 	addi	r2,r2,-13528
    b358:	10800017 	ldw	r2,0(r2)
    b35c:	10000526 	beq	r2,zero,b374 <alt_get_errno+0x34>
    b360:	00800074 	movhi	r2,1
    b364:	10b2ca04 	addi	r2,r2,-13528
    b368:	10800017 	ldw	r2,0(r2)
    b36c:	103ee83a 	callr	r2
    b370:	00000206 	br	b37c <alt_get_errno+0x3c>
    b374:	00800074 	movhi	r2,1
    b378:	10b54c04 	addi	r2,r2,-10960
}
    b37c:	e037883a 	mov	sp,fp
    b380:	dfc00117 	ldw	ra,4(sp)
    b384:	df000017 	ldw	fp,0(sp)
    b388:	dec00204 	addi	sp,sp,8
    b38c:	f800283a 	ret

0000b390 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b390:	defff904 	addi	sp,sp,-28
    b394:	dfc00615 	stw	ra,24(sp)
    b398:	df000515 	stw	fp,20(sp)
    b39c:	df000504 	addi	fp,sp,20
    b3a0:	e13ffd15 	stw	r4,-12(fp)
    b3a4:	e17ffe15 	stw	r5,-8(fp)
    b3a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b3ac:	e0bffd17 	ldw	r2,-12(fp)
    b3b0:	10000716 	blt	r2,zero,b3d0 <read+0x40>
    b3b4:	e13ffd17 	ldw	r4,-12(fp)
    b3b8:	01400304 	movi	r5,12
    b3bc:	000ad300 	call	ad30 <__mulsi3>
    b3c0:	00c00074 	movhi	r3,1
    b3c4:	18f26104 	addi	r3,r3,-13948
    b3c8:	10c5883a 	add	r2,r2,r3
    b3cc:	00000106 	br	b3d4 <read+0x44>
    b3d0:	0005883a 	mov	r2,zero
    b3d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b3d8:	e0bffb17 	ldw	r2,-20(fp)
    b3dc:	10002026 	beq	r2,zero,b460 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b3e0:	e0bffb17 	ldw	r2,-20(fp)
    b3e4:	10800217 	ldw	r2,8(r2)
    b3e8:	108000cc 	andi	r2,r2,3
    b3ec:	10800060 	cmpeqi	r2,r2,1
    b3f0:	1000171e 	bne	r2,zero,b450 <read+0xc0>
        (fd->dev->read))
    b3f4:	e0bffb17 	ldw	r2,-20(fp)
    b3f8:	10800017 	ldw	r2,0(r2)
    b3fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b400:	10001326 	beq	r2,zero,b450 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b404:	e0bffb17 	ldw	r2,-20(fp)
    b408:	10800017 	ldw	r2,0(r2)
    b40c:	10c00517 	ldw	r3,20(r2)
    b410:	e0bfff17 	ldw	r2,-4(fp)
    b414:	e13ffb17 	ldw	r4,-20(fp)
    b418:	e17ffe17 	ldw	r5,-8(fp)
    b41c:	100d883a 	mov	r6,r2
    b420:	183ee83a 	callr	r3
    b424:	e0bffc15 	stw	r2,-16(fp)
    b428:	e0bffc17 	ldw	r2,-16(fp)
    b42c:	1000060e 	bge	r2,zero,b448 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    b430:	000b3400 	call	b340 <alt_get_errno>
    b434:	e0fffc17 	ldw	r3,-16(fp)
    b438:	00c7c83a 	sub	r3,zero,r3
    b43c:	10c00015 	stw	r3,0(r2)
          return -1;
    b440:	00bfffc4 	movi	r2,-1
    b444:	00000a06 	br	b470 <read+0xe0>
        }
        return rval;
    b448:	e0bffc17 	ldw	r2,-16(fp)
    b44c:	00000806 	br	b470 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b450:	000b3400 	call	b340 <alt_get_errno>
    b454:	00c00344 	movi	r3,13
    b458:	10c00015 	stw	r3,0(r2)
    b45c:	00000306 	br	b46c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b460:	000b3400 	call	b340 <alt_get_errno>
    b464:	00c01444 	movi	r3,81
    b468:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b46c:	00bfffc4 	movi	r2,-1
}
    b470:	e037883a 	mov	sp,fp
    b474:	dfc00117 	ldw	ra,4(sp)
    b478:	df000017 	ldw	fp,0(sp)
    b47c:	dec00204 	addi	sp,sp,8
    b480:	f800283a 	ret

0000b484 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b484:	defffc04 	addi	sp,sp,-16
    b488:	dfc00315 	stw	ra,12(sp)
    b48c:	df000215 	stw	fp,8(sp)
    b490:	dc000115 	stw	r16,4(sp)
    b494:	df000104 	addi	fp,sp,4
    b498:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b49c:	e0bfff17 	ldw	r2,-4(fp)
    b4a0:	108000d0 	cmplti	r2,r2,3
    b4a4:	1000111e 	bne	r2,zero,b4ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    b4a8:	04000074 	movhi	r16,1
    b4ac:	84326104 	addi	r16,r16,-13948
    b4b0:	e0bfff17 	ldw	r2,-4(fp)
    b4b4:	1009883a 	mov	r4,r2
    b4b8:	01400304 	movi	r5,12
    b4bc:	000ad300 	call	ad30 <__mulsi3>
    b4c0:	8085883a 	add	r2,r16,r2
    b4c4:	10800204 	addi	r2,r2,8
    b4c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b4cc:	04000074 	movhi	r16,1
    b4d0:	84326104 	addi	r16,r16,-13948
    b4d4:	e0bfff17 	ldw	r2,-4(fp)
    b4d8:	1009883a 	mov	r4,r2
    b4dc:	01400304 	movi	r5,12
    b4e0:	000ad300 	call	ad30 <__mulsi3>
    b4e4:	8085883a 	add	r2,r16,r2
    b4e8:	10000015 	stw	zero,0(r2)
  }
}
    b4ec:	e037883a 	mov	sp,fp
    b4f0:	dfc00217 	ldw	ra,8(sp)
    b4f4:	df000117 	ldw	fp,4(sp)
    b4f8:	dc000017 	ldw	r16,0(sp)
    b4fc:	dec00304 	addi	sp,sp,12
    b500:	f800283a 	ret

0000b504 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b504:	defff904 	addi	sp,sp,-28
    b508:	df000615 	stw	fp,24(sp)
    b50c:	df000604 	addi	fp,sp,24
    b510:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b514:	0005303a 	rdctl	r2,status
    b518:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b51c:	e0fffc17 	ldw	r3,-16(fp)
    b520:	00bfff84 	movi	r2,-2
    b524:	1884703a 	and	r2,r3,r2
    b528:	1001703a 	wrctl	status,r2
  
  return context;
    b52c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b530:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b534:	d0a00a17 	ldw	r2,-32728(gp)
    b538:	10c000c4 	addi	r3,r2,3
    b53c:	00bfff04 	movi	r2,-4
    b540:	1884703a 	and	r2,r3,r2
    b544:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b548:	d0e00a17 	ldw	r3,-32728(gp)
    b54c:	e0bfff17 	ldw	r2,-4(fp)
    b550:	1885883a 	add	r2,r3,r2
    b554:	00c00074 	movhi	r3,1
    b558:	18c00004 	addi	r3,r3,0
    b55c:	1880062e 	bgeu	r3,r2,b578 <sbrk+0x74>
    b560:	e0bffa17 	ldw	r2,-24(fp)
    b564:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b568:	e0bffd17 	ldw	r2,-12(fp)
    b56c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b570:	00bfffc4 	movi	r2,-1
    b574:	00000b06 	br	b5a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b578:	d0a00a17 	ldw	r2,-32728(gp)
    b57c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    b580:	d0e00a17 	ldw	r3,-32728(gp)
    b584:	e0bfff17 	ldw	r2,-4(fp)
    b588:	1885883a 	add	r2,r3,r2
    b58c:	d0a00a15 	stw	r2,-32728(gp)
    b590:	e0bffa17 	ldw	r2,-24(fp)
    b594:	e0bffe15 	stw	r2,-8(fp)
    b598:	e0bffe17 	ldw	r2,-8(fp)
    b59c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b5a0:	e0bffb17 	ldw	r2,-20(fp)
} 
    b5a4:	e037883a 	mov	sp,fp
    b5a8:	df000017 	ldw	fp,0(sp)
    b5ac:	dec00104 	addi	sp,sp,4
    b5b0:	f800283a 	ret

0000b5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5b4:	defffe04 	addi	sp,sp,-8
    b5b8:	dfc00115 	stw	ra,4(sp)
    b5bc:	df000015 	stw	fp,0(sp)
    b5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b5c4:	00800074 	movhi	r2,1
    b5c8:	10b2ca04 	addi	r2,r2,-13528
    b5cc:	10800017 	ldw	r2,0(r2)
    b5d0:	10000526 	beq	r2,zero,b5e8 <alt_get_errno+0x34>
    b5d4:	00800074 	movhi	r2,1
    b5d8:	10b2ca04 	addi	r2,r2,-13528
    b5dc:	10800017 	ldw	r2,0(r2)
    b5e0:	103ee83a 	callr	r2
    b5e4:	00000206 	br	b5f0 <alt_get_errno+0x3c>
    b5e8:	00800074 	movhi	r2,1
    b5ec:	10b54c04 	addi	r2,r2,-10960
}
    b5f0:	e037883a 	mov	sp,fp
    b5f4:	dfc00117 	ldw	ra,4(sp)
    b5f8:	df000017 	ldw	fp,0(sp)
    b5fc:	dec00204 	addi	sp,sp,8
    b600:	f800283a 	ret

0000b604 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b604:	defff904 	addi	sp,sp,-28
    b608:	dfc00615 	stw	ra,24(sp)
    b60c:	df000515 	stw	fp,20(sp)
    b610:	df000504 	addi	fp,sp,20
    b614:	e13ffd15 	stw	r4,-12(fp)
    b618:	e17ffe15 	stw	r5,-8(fp)
    b61c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b620:	e0bffd17 	ldw	r2,-12(fp)
    b624:	10000716 	blt	r2,zero,b644 <write+0x40>
    b628:	e13ffd17 	ldw	r4,-12(fp)
    b62c:	01400304 	movi	r5,12
    b630:	000ad300 	call	ad30 <__mulsi3>
    b634:	00c00074 	movhi	r3,1
    b638:	18f26104 	addi	r3,r3,-13948
    b63c:	10c5883a 	add	r2,r2,r3
    b640:	00000106 	br	b648 <write+0x44>
    b644:	0005883a 	mov	r2,zero
    b648:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b64c:	e0bffb17 	ldw	r2,-20(fp)
    b650:	10001f26 	beq	r2,zero,b6d0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b654:	e0bffb17 	ldw	r2,-20(fp)
    b658:	10800217 	ldw	r2,8(r2)
    b65c:	108000cc 	andi	r2,r2,3
    b660:	10001726 	beq	r2,zero,b6c0 <write+0xbc>
    b664:	e0bffb17 	ldw	r2,-20(fp)
    b668:	10800017 	ldw	r2,0(r2)
    b66c:	10800617 	ldw	r2,24(r2)
    b670:	10001326 	beq	r2,zero,b6c0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b674:	e0bffb17 	ldw	r2,-20(fp)
    b678:	10800017 	ldw	r2,0(r2)
    b67c:	10c00617 	ldw	r3,24(r2)
    b680:	e0bfff17 	ldw	r2,-4(fp)
    b684:	e13ffb17 	ldw	r4,-20(fp)
    b688:	e17ffe17 	ldw	r5,-8(fp)
    b68c:	100d883a 	mov	r6,r2
    b690:	183ee83a 	callr	r3
    b694:	e0bffc15 	stw	r2,-16(fp)
    b698:	e0bffc17 	ldw	r2,-16(fp)
    b69c:	1000060e 	bge	r2,zero,b6b8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b6a0:	000b5b40 	call	b5b4 <alt_get_errno>
    b6a4:	e0fffc17 	ldw	r3,-16(fp)
    b6a8:	00c7c83a 	sub	r3,zero,r3
    b6ac:	10c00015 	stw	r3,0(r2)
        return -1;
    b6b0:	00bfffc4 	movi	r2,-1
    b6b4:	00000a06 	br	b6e0 <write+0xdc>
      }
      return rval;
    b6b8:	e0bffc17 	ldw	r2,-16(fp)
    b6bc:	00000806 	br	b6e0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b6c0:	000b5b40 	call	b5b4 <alt_get_errno>
    b6c4:	00c00344 	movi	r3,13
    b6c8:	10c00015 	stw	r3,0(r2)
    b6cc:	00000306 	br	b6dc <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b6d0:	000b5b40 	call	b5b4 <alt_get_errno>
    b6d4:	00c01444 	movi	r3,81
    b6d8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b6dc:	00bfffc4 	movi	r2,-1
}
    b6e0:	e037883a 	mov	sp,fp
    b6e4:	dfc00117 	ldw	ra,4(sp)
    b6e8:	df000017 	ldw	fp,0(sp)
    b6ec:	dec00204 	addi	sp,sp,8
    b6f0:	f800283a 	ret

0000b6f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b6f4:	defffd04 	addi	sp,sp,-12
    b6f8:	dfc00215 	stw	ra,8(sp)
    b6fc:	df000115 	stw	fp,4(sp)
    b700:	df000104 	addi	fp,sp,4
    b704:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    b708:	000bdb40 	call	bdb4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b70c:	00800044 	movi	r2,1
    b710:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b714:	e037883a 	mov	sp,fp
    b718:	dfc00117 	ldw	ra,4(sp)
    b71c:	df000017 	ldw	fp,0(sp)
    b720:	dec00204 	addi	sp,sp,8
    b724:	f800283a 	ret

0000b728 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b728:	defffe04 	addi	sp,sp,-8
    b72c:	dfc00115 	stw	ra,4(sp)
    b730:	df000015 	stw	fp,0(sp)
    b734:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    b738:	01000074 	movhi	r4,1
    b73c:	21040004 	addi	r4,r4,4096
    b740:	000b883a 	mov	r5,zero
    b744:	000d883a 	mov	r6,zero
    b748:	01c0fa04 	movi	r7,1000
    b74c:	000b7d80 	call	b7d8 <alt_avalon_timer_sc_init>
}
    b750:	e037883a 	mov	sp,fp
    b754:	dfc00117 	ldw	ra,4(sp)
    b758:	df000017 	ldw	fp,0(sp)
    b75c:	dec00204 	addi	sp,sp,8
    b760:	f800283a 	ret

0000b764 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b764:	defffa04 	addi	sp,sp,-24
    b768:	dfc00515 	stw	ra,20(sp)
    b76c:	df000415 	stw	fp,16(sp)
    b770:	df000404 	addi	fp,sp,16
    b774:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b778:	0007883a 	mov	r3,zero
    b77c:	e0bfff17 	ldw	r2,-4(fp)
    b780:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b784:	e0bfff17 	ldw	r2,-4(fp)
    b788:	10800104 	addi	r2,r2,4
    b78c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b790:	0005303a 	rdctl	r2,status
    b794:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b798:	e0fffd17 	ldw	r3,-12(fp)
    b79c:	00bfff84 	movi	r2,-2
    b7a0:	1884703a 	and	r2,r3,r2
    b7a4:	1001703a 	wrctl	status,r2
  
  return context;
    b7a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b7ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    b7b0:	000bcb00 	call	bcb0 <alt_tick>
    b7b4:	e0bffc17 	ldw	r2,-16(fp)
    b7b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7bc:	e0bffe17 	ldw	r2,-8(fp)
    b7c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b7c4:	e037883a 	mov	sp,fp
    b7c8:	dfc00117 	ldw	ra,4(sp)
    b7cc:	df000017 	ldw	fp,0(sp)
    b7d0:	dec00204 	addi	sp,sp,8
    b7d4:	f800283a 	ret

0000b7d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b7d8:	defff804 	addi	sp,sp,-32
    b7dc:	dfc00715 	stw	ra,28(sp)
    b7e0:	df000615 	stw	fp,24(sp)
    b7e4:	df000604 	addi	fp,sp,24
    b7e8:	e13ffc15 	stw	r4,-16(fp)
    b7ec:	e17ffd15 	stw	r5,-12(fp)
    b7f0:	e1bffe15 	stw	r6,-8(fp)
    b7f4:	e1ffff15 	stw	r7,-4(fp)
    b7f8:	e0bfff17 	ldw	r2,-4(fp)
    b7fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b800:	00800074 	movhi	r2,1
    b804:	10b55104 	addi	r2,r2,-10940
    b808:	10800017 	ldw	r2,0(r2)
    b80c:	1000041e 	bne	r2,zero,b820 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    b810:	00800074 	movhi	r2,1
    b814:	10b55104 	addi	r2,r2,-10940
    b818:	e0fffb17 	ldw	r3,-20(fp)
    b81c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b820:	e0bffc17 	ldw	r2,-16(fp)
    b824:	10800104 	addi	r2,r2,4
    b828:	00c001c4 	movi	r3,7
    b82c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b830:	d8000015 	stw	zero,0(sp)
    b834:	e13ffd17 	ldw	r4,-12(fp)
    b838:	e17ffe17 	ldw	r5,-8(fp)
    b83c:	01800074 	movhi	r6,1
    b840:	31add904 	addi	r6,r6,-18588
    b844:	e1fffc17 	ldw	r7,-16(fp)
    b848:	000b9500 	call	b950 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b84c:	e037883a 	mov	sp,fp
    b850:	dfc00117 	ldw	ra,4(sp)
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00204 	addi	sp,sp,8
    b85c:	f800283a 	ret

0000b860 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b860:	deffff04 	addi	sp,sp,-4
    b864:	df000015 	stw	fp,0(sp)
    b868:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b86c:	e037883a 	mov	sp,fp
    b870:	df000017 	ldw	fp,0(sp)
    b874:	dec00104 	addi	sp,sp,4
    b878:	f800283a 	ret

0000b87c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b87c:	defffd04 	addi	sp,sp,-12
    b880:	dfc00215 	stw	ra,8(sp)
    b884:	df000115 	stw	fp,4(sp)
    b888:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b88c:	00800074 	movhi	r2,1
    b890:	10b04a04 	addi	r2,r2,-16088
    b894:	e0bfff15 	stw	r2,-4(fp)
    b898:	00000606 	br	b8b4 <_do_ctors+0x38>
        (*ctor) (); 
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	10800017 	ldw	r2,0(r2)
    b8a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b8a8:	e0bfff17 	ldw	r2,-4(fp)
    b8ac:	10bfff04 	addi	r2,r2,-4
    b8b0:	e0bfff15 	stw	r2,-4(fp)
    b8b4:	e0ffff17 	ldw	r3,-4(fp)
    b8b8:	00800074 	movhi	r2,1
    b8bc:	10b04b04 	addi	r2,r2,-16084
    b8c0:	18bff62e 	bgeu	r3,r2,b89c <_do_ctors+0x20>
        (*ctor) (); 
}
    b8c4:	e037883a 	mov	sp,fp
    b8c8:	dfc00117 	ldw	ra,4(sp)
    b8cc:	df000017 	ldw	fp,0(sp)
    b8d0:	dec00204 	addi	sp,sp,8
    b8d4:	f800283a 	ret

0000b8d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b8d8:	defffd04 	addi	sp,sp,-12
    b8dc:	dfc00215 	stw	ra,8(sp)
    b8e0:	df000115 	stw	fp,4(sp)
    b8e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b8e8:	00800074 	movhi	r2,1
    b8ec:	10b04a04 	addi	r2,r2,-16088
    b8f0:	e0bfff15 	stw	r2,-4(fp)
    b8f4:	00000606 	br	b910 <_do_dtors+0x38>
        (*dtor) (); 
    b8f8:	e0bfff17 	ldw	r2,-4(fp)
    b8fc:	10800017 	ldw	r2,0(r2)
    b900:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b904:	e0bfff17 	ldw	r2,-4(fp)
    b908:	10bfff04 	addi	r2,r2,-4
    b90c:	e0bfff15 	stw	r2,-4(fp)
    b910:	e0ffff17 	ldw	r3,-4(fp)
    b914:	00800074 	movhi	r2,1
    b918:	10b04b04 	addi	r2,r2,-16084
    b91c:	18bff62e 	bgeu	r3,r2,b8f8 <_do_dtors+0x20>
        (*dtor) (); 
}
    b920:	e037883a 	mov	sp,fp
    b924:	dfc00117 	ldw	ra,4(sp)
    b928:	df000017 	ldw	fp,0(sp)
    b92c:	dec00204 	addi	sp,sp,8
    b930:	f800283a 	ret

0000b934 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b934:	deffff04 	addi	sp,sp,-4
    b938:	df000015 	stw	fp,0(sp)
    b93c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b940:	e037883a 	mov	sp,fp
    b944:	df000017 	ldw	fp,0(sp)
    b948:	dec00104 	addi	sp,sp,4
    b94c:	f800283a 	ret

0000b950 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b950:	defff904 	addi	sp,sp,-28
    b954:	dfc00615 	stw	ra,24(sp)
    b958:	df000515 	stw	fp,20(sp)
    b95c:	df000504 	addi	fp,sp,20
    b960:	e13ffc15 	stw	r4,-16(fp)
    b964:	e17ffd15 	stw	r5,-12(fp)
    b968:	e1bffe15 	stw	r6,-8(fp)
    b96c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b970:	e0800217 	ldw	r2,8(fp)
    b974:	d8800015 	stw	r2,0(sp)
    b978:	e13ffc17 	ldw	r4,-16(fp)
    b97c:	e17ffd17 	ldw	r5,-12(fp)
    b980:	e1bffe17 	ldw	r6,-8(fp)
    b984:	e1ffff17 	ldw	r7,-4(fp)
    b988:	000bb280 	call	bb28 <alt_iic_isr_register>
}  
    b98c:	e037883a 	mov	sp,fp
    b990:	dfc00117 	ldw	ra,4(sp)
    b994:	df000017 	ldw	fp,0(sp)
    b998:	dec00204 	addi	sp,sp,8
    b99c:	f800283a 	ret

0000b9a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b9a0:	defff904 	addi	sp,sp,-28
    b9a4:	df000615 	stw	fp,24(sp)
    b9a8:	df000604 	addi	fp,sp,24
    b9ac:	e13ffe15 	stw	r4,-8(fp)
    b9b0:	e17fff15 	stw	r5,-4(fp)
    b9b4:	e0bfff17 	ldw	r2,-4(fp)
    b9b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9bc:	0005303a 	rdctl	r2,status
    b9c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9c4:	e0fffb17 	ldw	r3,-20(fp)
    b9c8:	00bfff84 	movi	r2,-2
    b9cc:	1884703a 	and	r2,r3,r2
    b9d0:	1001703a 	wrctl	status,r2
  
  return context;
    b9d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b9d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    b9dc:	e0bffa17 	ldw	r2,-24(fp)
    b9e0:	00c00044 	movi	r3,1
    b9e4:	1884983a 	sll	r2,r3,r2
    b9e8:	1007883a 	mov	r3,r2
    b9ec:	00800074 	movhi	r2,1
    b9f0:	10b55004 	addi	r2,r2,-10944
    b9f4:	10800017 	ldw	r2,0(r2)
    b9f8:	1886b03a 	or	r3,r3,r2
    b9fc:	00800074 	movhi	r2,1
    ba00:	10b55004 	addi	r2,r2,-10944
    ba04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ba08:	00800074 	movhi	r2,1
    ba0c:	10b55004 	addi	r2,r2,-10944
    ba10:	10800017 	ldw	r2,0(r2)
    ba14:	100170fa 	wrctl	ienable,r2
    ba18:	e0bffc17 	ldw	r2,-16(fp)
    ba1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba20:	e0bffd17 	ldw	r2,-12(fp)
    ba24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    ba2c:	e037883a 	mov	sp,fp
    ba30:	df000017 	ldw	fp,0(sp)
    ba34:	dec00104 	addi	sp,sp,4
    ba38:	f800283a 	ret

0000ba3c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ba3c:	defff904 	addi	sp,sp,-28
    ba40:	df000615 	stw	fp,24(sp)
    ba44:	df000604 	addi	fp,sp,24
    ba48:	e13ffe15 	stw	r4,-8(fp)
    ba4c:	e17fff15 	stw	r5,-4(fp)
    ba50:	e0bfff17 	ldw	r2,-4(fp)
    ba54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba58:	0005303a 	rdctl	r2,status
    ba5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba60:	e0fffb17 	ldw	r3,-20(fp)
    ba64:	00bfff84 	movi	r2,-2
    ba68:	1884703a 	and	r2,r3,r2
    ba6c:	1001703a 	wrctl	status,r2
  
  return context;
    ba70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ba74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ba78:	e0bffa17 	ldw	r2,-24(fp)
    ba7c:	00c00044 	movi	r3,1
    ba80:	1884983a 	sll	r2,r3,r2
    ba84:	0084303a 	nor	r2,zero,r2
    ba88:	1007883a 	mov	r3,r2
    ba8c:	00800074 	movhi	r2,1
    ba90:	10b55004 	addi	r2,r2,-10944
    ba94:	10800017 	ldw	r2,0(r2)
    ba98:	1886703a 	and	r3,r3,r2
    ba9c:	00800074 	movhi	r2,1
    baa0:	10b55004 	addi	r2,r2,-10944
    baa4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    baa8:	00800074 	movhi	r2,1
    baac:	10b55004 	addi	r2,r2,-10944
    bab0:	10800017 	ldw	r2,0(r2)
    bab4:	100170fa 	wrctl	ienable,r2
    bab8:	e0bffc17 	ldw	r2,-16(fp)
    babc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bac0:	e0bffd17 	ldw	r2,-12(fp)
    bac4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bac8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    bacc:	e037883a 	mov	sp,fp
    bad0:	df000017 	ldw	fp,0(sp)
    bad4:	dec00104 	addi	sp,sp,4
    bad8:	f800283a 	ret

0000badc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    badc:	defffc04 	addi	sp,sp,-16
    bae0:	df000315 	stw	fp,12(sp)
    bae4:	df000304 	addi	fp,sp,12
    bae8:	e13ffe15 	stw	r4,-8(fp)
    baec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    baf0:	000530fa 	rdctl	r2,ienable
    baf4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    baf8:	e0bfff17 	ldw	r2,-4(fp)
    bafc:	00c00044 	movi	r3,1
    bb00:	1884983a 	sll	r2,r3,r2
    bb04:	1007883a 	mov	r3,r2
    bb08:	e0bffd17 	ldw	r2,-12(fp)
    bb0c:	1884703a 	and	r2,r3,r2
    bb10:	1004c03a 	cmpne	r2,r2,zero
    bb14:	10803fcc 	andi	r2,r2,255
}
    bb18:	e037883a 	mov	sp,fp
    bb1c:	df000017 	ldw	fp,0(sp)
    bb20:	dec00104 	addi	sp,sp,4
    bb24:	f800283a 	ret

0000bb28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bb28:	defff504 	addi	sp,sp,-44
    bb2c:	dfc00a15 	stw	ra,40(sp)
    bb30:	df000915 	stw	fp,36(sp)
    bb34:	df000904 	addi	fp,sp,36
    bb38:	e13ffc15 	stw	r4,-16(fp)
    bb3c:	e17ffd15 	stw	r5,-12(fp)
    bb40:	e1bffe15 	stw	r6,-8(fp)
    bb44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    bb48:	00bffa84 	movi	r2,-22
    bb4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bb50:	e0bffd17 	ldw	r2,-12(fp)
    bb54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bb58:	e0bff817 	ldw	r2,-32(fp)
    bb5c:	10800808 	cmpgei	r2,r2,32
    bb60:	1000271e 	bne	r2,zero,bc00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb64:	0005303a 	rdctl	r2,status
    bb68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb6c:	e0fffa17 	ldw	r3,-24(fp)
    bb70:	00bfff84 	movi	r2,-2
    bb74:	1884703a 	and	r2,r3,r2
    bb78:	1001703a 	wrctl	status,r2
  
  return context;
    bb7c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bb80:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    bb84:	00c00074 	movhi	r3,1
    bb88:	18f55d04 	addi	r3,r3,-10892
    bb8c:	e0bff817 	ldw	r2,-32(fp)
    bb90:	100490fa 	slli	r2,r2,3
    bb94:	1885883a 	add	r2,r3,r2
    bb98:	e0fffe17 	ldw	r3,-8(fp)
    bb9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    bba0:	00c00074 	movhi	r3,1
    bba4:	18f55d04 	addi	r3,r3,-10892
    bba8:	e0bff817 	ldw	r2,-32(fp)
    bbac:	100490fa 	slli	r2,r2,3
    bbb0:	1885883a 	add	r2,r3,r2
    bbb4:	10800104 	addi	r2,r2,4
    bbb8:	e0ffff17 	ldw	r3,-4(fp)
    bbbc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bbc0:	e0bffe17 	ldw	r2,-8(fp)
    bbc4:	10000526 	beq	r2,zero,bbdc <alt_iic_isr_register+0xb4>
    bbc8:	e0bff817 	ldw	r2,-32(fp)
    bbcc:	e13ffc17 	ldw	r4,-16(fp)
    bbd0:	100b883a 	mov	r5,r2
    bbd4:	000b9a00 	call	b9a0 <alt_ic_irq_enable>
    bbd8:	00000406 	br	bbec <alt_iic_isr_register+0xc4>
    bbdc:	e0bff817 	ldw	r2,-32(fp)
    bbe0:	e13ffc17 	ldw	r4,-16(fp)
    bbe4:	100b883a 	mov	r5,r2
    bbe8:	000ba3c0 	call	ba3c <alt_ic_irq_disable>
    bbec:	e0bff715 	stw	r2,-36(fp)
    bbf0:	e0bff917 	ldw	r2,-28(fp)
    bbf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbf8:	e0bffb17 	ldw	r2,-20(fp)
    bbfc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bc00:	e0bff717 	ldw	r2,-36(fp)
}
    bc04:	e037883a 	mov	sp,fp
    bc08:	dfc00117 	ldw	ra,4(sp)
    bc0c:	df000017 	ldw	fp,0(sp)
    bc10:	dec00204 	addi	sp,sp,8
    bc14:	f800283a 	ret

0000bc18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bc18:	defffa04 	addi	sp,sp,-24
    bc1c:	df000515 	stw	fp,20(sp)
    bc20:	df000504 	addi	fp,sp,20
    bc24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc28:	0005303a 	rdctl	r2,status
    bc2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc30:	e0fffc17 	ldw	r3,-16(fp)
    bc34:	00bfff84 	movi	r2,-2
    bc38:	1884703a 	and	r2,r3,r2
    bc3c:	1001703a 	wrctl	status,r2
  
  return context;
    bc40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bc44:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    bc48:	e0bfff17 	ldw	r2,-4(fp)
    bc4c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bc50:	e0bffd17 	ldw	r2,-12(fp)
    bc54:	10800017 	ldw	r2,0(r2)
    bc58:	e0fffd17 	ldw	r3,-12(fp)
    bc5c:	18c00117 	ldw	r3,4(r3)
    bc60:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    bc64:	e0bffd17 	ldw	r2,-12(fp)
    bc68:	10800117 	ldw	r2,4(r2)
    bc6c:	e0fffd17 	ldw	r3,-12(fp)
    bc70:	18c00017 	ldw	r3,0(r3)
    bc74:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bc78:	e0bffd17 	ldw	r2,-12(fp)
    bc7c:	e0fffd17 	ldw	r3,-12(fp)
    bc80:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    bc84:	e0bffd17 	ldw	r2,-12(fp)
    bc88:	e0fffd17 	ldw	r3,-12(fp)
    bc8c:	10c00015 	stw	r3,0(r2)
    bc90:	e0bffb17 	ldw	r2,-20(fp)
    bc94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc98:	e0bffe17 	ldw	r2,-8(fp)
    bc9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bca0:	e037883a 	mov	sp,fp
    bca4:	df000017 	ldw	fp,0(sp)
    bca8:	dec00104 	addi	sp,sp,4
    bcac:	f800283a 	ret

0000bcb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bcb0:	defffb04 	addi	sp,sp,-20
    bcb4:	dfc00415 	stw	ra,16(sp)
    bcb8:	df000315 	stw	fp,12(sp)
    bcbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bcc0:	d0a00c17 	ldw	r2,-32720(gp)
    bcc4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bcc8:	d0a29117 	ldw	r2,-30140(gp)
    bccc:	10800044 	addi	r2,r2,1
    bcd0:	d0a29115 	stw	r2,-30140(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bcd4:	00002e06 	br	bd90 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    bcd8:	e0bffd17 	ldw	r2,-12(fp)
    bcdc:	10800017 	ldw	r2,0(r2)
    bce0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bce4:	e0bffd17 	ldw	r2,-12(fp)
    bce8:	10800403 	ldbu	r2,16(r2)
    bcec:	10803fcc 	andi	r2,r2,255
    bcf0:	10000426 	beq	r2,zero,bd04 <alt_tick+0x54>
    bcf4:	d0a29117 	ldw	r2,-30140(gp)
    bcf8:	1000021e 	bne	r2,zero,bd04 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    bcfc:	e0bffd17 	ldw	r2,-12(fp)
    bd00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    bd04:	e0bffd17 	ldw	r2,-12(fp)
    bd08:	10800217 	ldw	r2,8(r2)
    bd0c:	d0e29117 	ldw	r3,-30140(gp)
    bd10:	18801d36 	bltu	r3,r2,bd88 <alt_tick+0xd8>
    bd14:	e0bffd17 	ldw	r2,-12(fp)
    bd18:	10800403 	ldbu	r2,16(r2)
    bd1c:	10803fcc 	andi	r2,r2,255
    bd20:	1000191e 	bne	r2,zero,bd88 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    bd24:	e0bffd17 	ldw	r2,-12(fp)
    bd28:	10c00317 	ldw	r3,12(r2)
    bd2c:	e0bffd17 	ldw	r2,-12(fp)
    bd30:	10800517 	ldw	r2,20(r2)
    bd34:	1009883a 	mov	r4,r2
    bd38:	183ee83a 	callr	r3
    bd3c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bd40:	e0bfff17 	ldw	r2,-4(fp)
    bd44:	1000031e 	bne	r2,zero,bd54 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    bd48:	e13ffd17 	ldw	r4,-12(fp)
    bd4c:	000bc180 	call	bc18 <alt_alarm_stop>
    bd50:	00000d06 	br	bd88 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    bd54:	e0bffd17 	ldw	r2,-12(fp)
    bd58:	10c00217 	ldw	r3,8(r2)
    bd5c:	e0bfff17 	ldw	r2,-4(fp)
    bd60:	1887883a 	add	r3,r3,r2
    bd64:	e0bffd17 	ldw	r2,-12(fp)
    bd68:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    bd6c:	e0bffd17 	ldw	r2,-12(fp)
    bd70:	10c00217 	ldw	r3,8(r2)
    bd74:	d0a29117 	ldw	r2,-30140(gp)
    bd78:	1880032e 	bgeu	r3,r2,bd88 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    bd7c:	e0bffd17 	ldw	r2,-12(fp)
    bd80:	00c00044 	movi	r3,1
    bd84:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    bd88:	e0bffe17 	ldw	r2,-8(fp)
    bd8c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bd90:	e0fffd17 	ldw	r3,-12(fp)
    bd94:	d0a00c04 	addi	r2,gp,-32720
    bd98:	18bfcf1e 	bne	r3,r2,bcd8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    bd9c:	0001883a 	nop
}
    bda0:	e037883a 	mov	sp,fp
    bda4:	dfc00117 	ldw	ra,4(sp)
    bda8:	df000017 	ldw	fp,0(sp)
    bdac:	dec00204 	addi	sp,sp,8
    bdb0:	f800283a 	ret

0000bdb4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    bdb4:	deffff04 	addi	sp,sp,-4
    bdb8:	df000015 	stw	fp,0(sp)
    bdbc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    bdc0:	000170fa 	wrctl	ienable,zero
}
    bdc4:	e037883a 	mov	sp,fp
    bdc8:	df000017 	ldw	fp,0(sp)
    bdcc:	dec00104 	addi	sp,sp,4
    bdd0:	f800283a 	ret

0000bdd4 <atexit>:
    bdd4:	200b883a 	mov	r5,r4
    bdd8:	000d883a 	mov	r6,zero
    bddc:	0009883a 	mov	r4,zero
    bde0:	000f883a 	mov	r7,zero
    bde4:	000be201 	jmpi	be20 <__register_exitproc>

0000bde8 <exit>:
    bde8:	defffe04 	addi	sp,sp,-8
    bdec:	000b883a 	mov	r5,zero
    bdf0:	dc000015 	stw	r16,0(sp)
    bdf4:	dfc00115 	stw	ra,4(sp)
    bdf8:	2021883a 	mov	r16,r4
    bdfc:	000bf500 	call	bf50 <__call_exitprocs>
    be00:	00800074 	movhi	r2,1
    be04:	10b2c104 	addi	r2,r2,-13564
    be08:	11000017 	ldw	r4,0(r2)
    be0c:	20800f17 	ldw	r2,60(r4)
    be10:	10000126 	beq	r2,zero,be18 <exit+0x30>
    be14:	103ee83a 	callr	r2
    be18:	8009883a 	mov	r4,r16
    be1c:	000c0f00 	call	c0f0 <_exit>

0000be20 <__register_exitproc>:
    be20:	defffa04 	addi	sp,sp,-24
    be24:	00800074 	movhi	r2,1
    be28:	10b2c104 	addi	r2,r2,-13564
    be2c:	dc000315 	stw	r16,12(sp)
    be30:	14000017 	ldw	r16,0(r2)
    be34:	dc400415 	stw	r17,16(sp)
    be38:	dfc00515 	stw	ra,20(sp)
    be3c:	80805217 	ldw	r2,328(r16)
    be40:	2023883a 	mov	r17,r4
    be44:	10003e26 	beq	r2,zero,bf40 <__register_exitproc+0x120>
    be48:	10c00117 	ldw	r3,4(r2)
    be4c:	020007c4 	movi	r8,31
    be50:	40c0180e 	bge	r8,r3,beb4 <__register_exitproc+0x94>
    be54:	00800034 	movhi	r2,0
    be58:	10800004 	addi	r2,r2,0
    be5c:	1000061e 	bne	r2,zero,be78 <__register_exitproc+0x58>
    be60:	00bfffc4 	movi	r2,-1
    be64:	dfc00517 	ldw	ra,20(sp)
    be68:	dc400417 	ldw	r17,16(sp)
    be6c:	dc000317 	ldw	r16,12(sp)
    be70:	dec00604 	addi	sp,sp,24
    be74:	f800283a 	ret
    be78:	01006404 	movi	r4,400
    be7c:	d9400015 	stw	r5,0(sp)
    be80:	d9800115 	stw	r6,4(sp)
    be84:	d9c00215 	stw	r7,8(sp)
    be88:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    be8c:	d9400017 	ldw	r5,0(sp)
    be90:	d9800117 	ldw	r6,4(sp)
    be94:	d9c00217 	ldw	r7,8(sp)
    be98:	103ff126 	beq	r2,zero,be60 <__register_exitproc+0x40>
    be9c:	80c05217 	ldw	r3,328(r16)
    bea0:	10000115 	stw	zero,4(r2)
    bea4:	10c00015 	stw	r3,0(r2)
    bea8:	80805215 	stw	r2,328(r16)
    beac:	10006215 	stw	zero,392(r2)
    beb0:	10006315 	stw	zero,396(r2)
    beb4:	10c00117 	ldw	r3,4(r2)
    beb8:	88000d1e 	bne	r17,zero,bef0 <__register_exitproc+0xd0>
    bebc:	19000084 	addi	r4,r3,2
    bec0:	2109883a 	add	r4,r4,r4
    bec4:	18c00044 	addi	r3,r3,1
    bec8:	2109883a 	add	r4,r4,r4
    becc:	1109883a 	add	r4,r2,r4
    bed0:	10c00115 	stw	r3,4(r2)
    bed4:	0005883a 	mov	r2,zero
    bed8:	21400015 	stw	r5,0(r4)
    bedc:	dfc00517 	ldw	ra,20(sp)
    bee0:	dc400417 	ldw	r17,16(sp)
    bee4:	dc000317 	ldw	r16,12(sp)
    bee8:	dec00604 	addi	sp,sp,24
    beec:	f800283a 	ret
    bef0:	02400044 	movi	r9,1
    bef4:	12806217 	ldw	r10,392(r2)
    bef8:	48d2983a 	sll	r9,r9,r3
    befc:	19000804 	addi	r4,r3,32
    bf00:	18d1883a 	add	r8,r3,r3
    bf04:	2109883a 	add	r4,r4,r4
    bf08:	4211883a 	add	r8,r8,r8
    bf0c:	2109883a 	add	r4,r4,r4
    bf10:	1109883a 	add	r4,r2,r4
    bf14:	1211883a 	add	r8,r2,r8
    bf18:	5254b03a 	or	r10,r10,r9
    bf1c:	21c02215 	stw	r7,136(r4)
    bf20:	41802215 	stw	r6,136(r8)
    bf24:	12806215 	stw	r10,392(r2)
    bf28:	01000084 	movi	r4,2
    bf2c:	893fe31e 	bne	r17,r4,bebc <__register_exitproc+0x9c>
    bf30:	11006317 	ldw	r4,396(r2)
    bf34:	2252b03a 	or	r9,r4,r9
    bf38:	12406315 	stw	r9,396(r2)
    bf3c:	003fdf06 	br	bebc <__register_exitproc+0x9c>
    bf40:	00800074 	movhi	r2,1
    bf44:	10b59d04 	addi	r2,r2,-10636
    bf48:	80805215 	stw	r2,328(r16)
    bf4c:	003fbe06 	br	be48 <__register_exitproc+0x28>

0000bf50 <__call_exitprocs>:
    bf50:	00800074 	movhi	r2,1
    bf54:	10b2c104 	addi	r2,r2,-13564
    bf58:	10800017 	ldw	r2,0(r2)
    bf5c:	defff304 	addi	sp,sp,-52
    bf60:	df000b15 	stw	fp,44(sp)
    bf64:	d8800015 	stw	r2,0(sp)
    bf68:	10805204 	addi	r2,r2,328
    bf6c:	dd400815 	stw	r21,32(sp)
    bf70:	dfc00c15 	stw	ra,48(sp)
    bf74:	ddc00a15 	stw	r23,40(sp)
    bf78:	dd800915 	stw	r22,36(sp)
    bf7c:	dd000715 	stw	r20,28(sp)
    bf80:	dcc00615 	stw	r19,24(sp)
    bf84:	dc800515 	stw	r18,20(sp)
    bf88:	dc400415 	stw	r17,16(sp)
    bf8c:	dc000315 	stw	r16,12(sp)
    bf90:	d9000115 	stw	r4,4(sp)
    bf94:	2839883a 	mov	fp,r5
    bf98:	d8800215 	stw	r2,8(sp)
    bf9c:	057fffc4 	movi	r21,-1
    bfa0:	d8800017 	ldw	r2,0(sp)
    bfa4:	ddc00217 	ldw	r23,8(sp)
    bfa8:	14805217 	ldw	r18,328(r2)
    bfac:	90001726 	beq	r18,zero,c00c <__call_exitprocs+0xbc>
    bfb0:	94400117 	ldw	r17,4(r18)
    bfb4:	8c3fffc4 	addi	r16,r17,-1
    bfb8:	80001116 	blt	r16,zero,c000 <__call_exitprocs+0xb0>
    bfbc:	8c400044 	addi	r17,r17,1
    bfc0:	8427883a 	add	r19,r16,r16
    bfc4:	8c63883a 	add	r17,r17,r17
    bfc8:	95802204 	addi	r22,r18,136
    bfcc:	9ce7883a 	add	r19,r19,r19
    bfd0:	8c63883a 	add	r17,r17,r17
    bfd4:	b4e7883a 	add	r19,r22,r19
    bfd8:	9463883a 	add	r17,r18,r17
    bfdc:	e0001726 	beq	fp,zero,c03c <__call_exitprocs+0xec>
    bfe0:	8c87c83a 	sub	r3,r17,r18
    bfe4:	b0c7883a 	add	r3,r22,r3
    bfe8:	18c01e17 	ldw	r3,120(r3)
    bfec:	1f001326 	beq	r3,fp,c03c <__call_exitprocs+0xec>
    bff0:	843fffc4 	addi	r16,r16,-1
    bff4:	9cffff04 	addi	r19,r19,-4
    bff8:	8c7fff04 	addi	r17,r17,-4
    bffc:	857ff71e 	bne	r16,r21,bfdc <__call_exitprocs+0x8c>
    c000:	00800034 	movhi	r2,0
    c004:	10800004 	addi	r2,r2,0
    c008:	10002a1e 	bne	r2,zero,c0b4 <__call_exitprocs+0x164>
    c00c:	dfc00c17 	ldw	ra,48(sp)
    c010:	df000b17 	ldw	fp,44(sp)
    c014:	ddc00a17 	ldw	r23,40(sp)
    c018:	dd800917 	ldw	r22,36(sp)
    c01c:	dd400817 	ldw	r21,32(sp)
    c020:	dd000717 	ldw	r20,28(sp)
    c024:	dcc00617 	ldw	r19,24(sp)
    c028:	dc800517 	ldw	r18,20(sp)
    c02c:	dc400417 	ldw	r17,16(sp)
    c030:	dc000317 	ldw	r16,12(sp)
    c034:	dec00d04 	addi	sp,sp,52
    c038:	f800283a 	ret
    c03c:	91000117 	ldw	r4,4(r18)
    c040:	88c00017 	ldw	r3,0(r17)
    c044:	213fffc4 	addi	r4,r4,-1
    c048:	24001526 	beq	r4,r16,c0a0 <__call_exitprocs+0x150>
    c04c:	88000015 	stw	zero,0(r17)
    c050:	183fe726 	beq	r3,zero,bff0 <__call_exitprocs+0xa0>
    c054:	00800044 	movi	r2,1
    c058:	1408983a 	sll	r4,r2,r16
    c05c:	91406217 	ldw	r5,392(r18)
    c060:	95000117 	ldw	r20,4(r18)
    c064:	214a703a 	and	r5,r4,r5
    c068:	28000b26 	beq	r5,zero,c098 <__call_exitprocs+0x148>
    c06c:	91406317 	ldw	r5,396(r18)
    c070:	2148703a 	and	r4,r4,r5
    c074:	20000c1e 	bne	r4,zero,c0a8 <__call_exitprocs+0x158>
    c078:	99400017 	ldw	r5,0(r19)
    c07c:	d9000117 	ldw	r4,4(sp)
    c080:	183ee83a 	callr	r3
    c084:	90c00117 	ldw	r3,4(r18)
    c088:	1d3fc51e 	bne	r3,r20,bfa0 <__call_exitprocs+0x50>
    c08c:	b8c00017 	ldw	r3,0(r23)
    c090:	1cbfd726 	beq	r3,r18,bff0 <__call_exitprocs+0xa0>
    c094:	003fc206 	br	bfa0 <__call_exitprocs+0x50>
    c098:	183ee83a 	callr	r3
    c09c:	003ff906 	br	c084 <__call_exitprocs+0x134>
    c0a0:	94000115 	stw	r16,4(r18)
    c0a4:	003fea06 	br	c050 <__call_exitprocs+0x100>
    c0a8:	99000017 	ldw	r4,0(r19)
    c0ac:	183ee83a 	callr	r3
    c0b0:	003ff406 	br	c084 <__call_exitprocs+0x134>
    c0b4:	90c00117 	ldw	r3,4(r18)
    c0b8:	1800071e 	bne	r3,zero,c0d8 <__call_exitprocs+0x188>
    c0bc:	90c00017 	ldw	r3,0(r18)
    c0c0:	18000926 	beq	r3,zero,c0e8 <__call_exitprocs+0x198>
    c0c4:	9009883a 	mov	r4,r18
    c0c8:	b8c00015 	stw	r3,0(r23)
    c0cc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c0d0:	bc800017 	ldw	r18,0(r23)
    c0d4:	003fb506 	br	bfac <__call_exitprocs+0x5c>
    c0d8:	90c00017 	ldw	r3,0(r18)
    c0dc:	902f883a 	mov	r23,r18
    c0e0:	1825883a 	mov	r18,r3
    c0e4:	003fb106 	br	bfac <__call_exitprocs+0x5c>
    c0e8:	0007883a 	mov	r3,zero
    c0ec:	003ffb06 	br	c0dc <__call_exitprocs+0x18c>

0000c0f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c0f0:	defffc04 	addi	sp,sp,-16
    c0f4:	df000315 	stw	fp,12(sp)
    c0f8:	df000304 	addi	fp,sp,12
    c0fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c100:	0001883a 	nop
    c104:	e0bfff17 	ldw	r2,-4(fp)
    c108:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    c10c:	e0bffd17 	ldw	r2,-12(fp)
    c110:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c114:	e0bffe17 	ldw	r2,-8(fp)
    c118:	10000226 	beq	r2,zero,c124 <_exit+0x34>
    ALT_SIM_FAIL();
    c11c:	002af070 	cmpltui	zero,zero,43969
    c120:	00000106 	br	c128 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    c124:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c128:	003fff06 	br	c128 <_exit+0x38>
