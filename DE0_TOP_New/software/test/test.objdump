
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000414c memsz 0x0000414c flags r-x
    LOAD off    0x0000516c vaddr 0x0000c16c paddr 0x0000cb54 align 2**12
         filesz 0x000009e8 memsz 0x000009e8 flags rw-
    LOAD off    0x0000653c vaddr 0x0000d53c paddr 0x0000d53c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f8c  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  0000c144  0000c144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000009e8  0000c16c  0000cb54  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000d53c  0000d53c  0000653c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000007b0  00000000  00000000  00005b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000148e0  00000000  00000000  00006328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004b2e  00000000  00000000  0001ac08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005c8a  00000000  00000000  0001f736  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000c70  00000000  00000000  000253c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001cd9  00000000  00000000  00026030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005138  00000000  00000000  00027d09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002ce44  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000350  00000000  00000000  0002ce58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002f03f  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0002f042  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002f04e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002f04f  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  0002f054  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  0002f058  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000009  00000000  00000000  0002f05c  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000030  00000000  00000000  0002f065  2**0
                  CONTENTS, READONLY
 25 .jdi          00003a0e  00000000  00000000  0002f095  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000268db  00000000  00000000  00032aa3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000c144 l    d  .rodata	00000000 .rodata
0000c16c l    d  .rwdata	00000000 .rwdata
0000d53c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0000c16c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009d68 l     F .text	00000008 __fp_lock
00009d70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ad70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ae8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000aeb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000afb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b0ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b198 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000cb44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b5cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b77c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000ac0c g     F .text	00000064 _isatty_r
0000b2bc g     F .text	0000005c alt_main
0000822c g     F .text	00000084 _puts_r
0000d58c g     O .bss	00000100 alt_irq
0000ac70 g     F .text	0000006c _lseek_r
0000cb54 g       *ABS*	00000000 __flash_rwdata_start
0000d81c g       *ABS*	00000000 __alt_heap_start
0000a920 g     F .text	0000005c __sseek
00009e0c g     F .text	0000010c __sinit
00009d84 g     F .text	00000078 __sfmoreglue
0000b338 g     F .text	00000020 __malloc_unlock
000091f0 g     F .text	0000018c memmove
00009dfc g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000aba4 g     F .text	00000068 _fstat_r
0000d548 g     O .bss	00000004 errno
0000d550 g     O .bss	00000004 alt_argv
00014b1c g       *ABS*	00000000 _gp
0000c99c g     O .rwdata	00000180 alt_fd_list
000090b0 g     F .text	00000140 memcpy
00009d78 g     F .text	0000000c _cleanup_r
0000c144 g       *ABS*	00000000 __DTOR_END__
000082b0 g     F .text	00000014 puts
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b008 g     F .text	000000a4 isatty
0000d544 g     O .bss	00000004 __malloc_top_pad
00008350 g     F .text	000004e4 __sfvwrite_r
00009978 g     F .text	00000064 _sbrk_r
0000acdc g     F .text	0000006c _read_r
0000cb3c g     O .rwdata	00000004 alt_max_fd
0000aa54 g     F .text	0000013c _fclose_r
00009d38 g     F .text	00000030 fflush
0000d540 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b1e8 g     F .text	000000d4 lseek
0000cb1c g     O .rwdata	00000004 _global_impure_ptr
0000937c g     F .text	000005fc _realloc_r
0000d81c g       *ABS*	00000000 __bss_end
0000bb40 g     F .text	000000f0 alt_iic_isr_register
0000bcc8 g     F .text	00000104 alt_tick
0000a024 g     F .text	00000018 __fp_lock_all
0000baf4 g     F .text	0000004c alt_ic_irq_enabled
0000bc30 g     F .text	00000098 alt_alarm_stop
0000d558 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000cc alt_irq_handler
0000c974 g     O .rwdata	00000028 alt_dev_null
0000b878 g     F .text	0000001c alt_dcache_flush_all
0000cb54 g       *ABS*	00000000 __ram_rwdata_end
0000cb34 g     O .rwdata	00000008 alt_dev_list
0000b61c g     F .text	000000f0 write
0000c16c g       *ABS*	00000000 __ram_rodata_end
0000af08 g     F .text	000000b0 fstat
0000d81c g       *ABS*	00000000 end
0000c144 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000b7f0 g     F .text	00000088 alt_avalon_timer_sc_init
0000a014 g     F .text	00000004 __sfp_lock_acquire
00008fb8 g     F .text	000000f8 memchr
0000a190 g     F .text	000002d0 _free_r
0000bf68 g     F .text	000001a0 __call_exitprocs
0000cb24 g     O .rwdata	00000004 __malloc_sbrk_base
000081b8 g     F .text	0000003c _start
0000d55c g     O .bss	00000004 _alt_tick_rate
0000d560 g     O .bss	00000004 _alt_nticks
0000b3a8 g     F .text	000000f4 read
0000b740 g     F .text	0000003c alt_sys_init
0000be38 g     F .text	00000130 __register_exitproc
0000ad48 g     F .text	00000028 __mulsi3
0000c16c g       *ABS*	00000000 __ram_rwdata_start
0000c144 g       *ABS*	00000000 __ram_rodata_start
0000d564 g     O .bss	00000028 __malloc_current_mallinfo
0000a9f0 g     F .text	00000064 _close_r
0000d81c g       *ABS*	00000000 __alt_stack_base
000099dc g     F .text	00000174 __swsetup_r
00009f18 g     F .text	000000fc __sfp
0000c56c g     O .rwdata	00000408 __malloc_av_
0000a020 g     F .text	00000004 __sinit_lock_release
0000a844 g     F .text	00000054 __sread
0000b318 g     F .text	00000020 __malloc_lock
0000b51c g     F .text	000000b0 sbrk
00009b50 g     F .text	000001e8 _fflush_r
0000d53c g       *ABS*	00000000 __bss_start
0000a768 g     F .text	000000dc memset
000081f4 g     F .text	00000038 main
0000d554 g     O .bss	00000004 alt_envp
0000d53c g     O .bss	00000004 __malloc_max_total_mem
0000a97c g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000ab90 g     F .text	00000014 fclose
0000d68c g     O .bss	00000190 _atexit0
00008834 g     F .text	00000784 _malloc_r
0000cb40 g     O .rwdata	00000004 alt_errno
0000a460 g     F .text	000000a8 _fwalk
0000a054 g     F .text	0000013c _malloc_trim_r
0000c144 g       *ABS*	00000000 __CTOR_END__
0000c144 g       *ABS*	00000000 __flash_rodata_start
0000c144 g       *ABS*	00000000 __DTOR_LIST__
0000b70c g     F .text	00000034 alt_irq_init
0000b49c g     F .text	00000080 alt_release_fd
0000bdec g     F .text	00000014 atexit
0000a984 g     F .text	0000006c _write_r
0000cb20 g     O .rwdata	00000004 _impure_ptr
0000d54c g     O .bss	00000004 alt_argc
0000b8f0 g     F .text	0000005c _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000a03c g     F .text	00000018 __fp_unlock_all
0000cb2c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b968 g     F .text	00000050 alt_ic_isr_register
0000cb54 g       *ABS*	00000000 _edata
0000d81c g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
0000ba54 g     F .text	000000a0 alt_ic_irq_disable
0000a898 g     F .text	00000088 __swrite
0000cb28 g     O .rwdata	00000004 __malloc_trim_threshold
0000bdcc g     F .text	00000020 altera_nios2_qsys_irq_init
0000be00 g     F .text	00000038 exit
0000a508 g     F .text	000000b8 _fwalk_reent
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a018 g     F .text	00000004 __sfp_lock_release
0000c108 g     F .text	0000003c _exit
0000a5c0 g     F .text	000001a8 __smakebuf_r
000082c4 g     F .text	0000008c strlen
0000b94c g     F .text	0000001c alt_icache_flush_all
0000cb48 g     O .rwdata	00000004 alt_priority_mask
0000b9b8 g     F .text	0000009c alt_ic_irq_enable
0000cb4c g     O .rwdata	00000008 alt_alarm_list
0000b894 g     F .text	0000005c _do_ctors
0000adc0 g     F .text	000000cc close
0000b118 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0000a01c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606e14 	ori	at,at,33208
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f56304 	addi	r3,r3,-10868
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21356304 	addi	r4,r4,-10868
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d692c714 	ori	gp,gp,19228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10b54f14 	ori	r2,r2,54588

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18f60714 	ori	r3,r3,55324

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	000b1180 	call	b118 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	000b2bc0 	call	b2bc <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <main>:

#include <stdio.h>

int main()
{
    81f4:	defffd04 	addi	sp,sp,-12
    81f8:	dfc00215 	stw	ra,8(sp)
    81fc:	df000115 	stw	fp,4(sp)
    8200:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
    8204:	01000074 	movhi	r4,1
    8208:	21305104 	addi	r4,r4,-16060
    820c:	00082b00 	call	82b0 <puts>

  int i = 0;
    8210:	e03fff15 	stw	zero,-4(fp)
  return 0;
    8214:	0005883a 	mov	r2,zero
}
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

0000822c <_puts_r>:
    822c:	defff604 	addi	sp,sp,-40
    8230:	dc400815 	stw	r17,32(sp)
    8234:	2023883a 	mov	r17,r4
    8238:	2809883a 	mov	r4,r5
    823c:	dc000715 	stw	r16,28(sp)
    8240:	dfc00915 	stw	ra,36(sp)
    8244:	2821883a 	mov	r16,r5
    8248:	00082c40 	call	82c4 <strlen>
    824c:	10c00044 	addi	r3,r2,1
    8250:	d8800115 	stw	r2,4(sp)
    8254:	89400217 	ldw	r5,8(r17)
    8258:	00800074 	movhi	r2,1
    825c:	10b05604 	addi	r2,r2,-16040
    8260:	d8800215 	stw	r2,8(sp)
    8264:	00800044 	movi	r2,1
    8268:	d8800315 	stw	r2,12(sp)
    826c:	8809883a 	mov	r4,r17
    8270:	00800084 	movi	r2,2
    8274:	d9800404 	addi	r6,sp,16
    8278:	dc000015 	stw	r16,0(sp)
    827c:	d8c00615 	stw	r3,24(sp)
    8280:	dec00415 	stw	sp,16(sp)
    8284:	d8800515 	stw	r2,20(sp)
    8288:	00083500 	call	8350 <__sfvwrite_r>
    828c:	1000061e 	bne	r2,zero,82a8 <_puts_r+0x7c>
    8290:	00800284 	movi	r2,10
    8294:	dfc00917 	ldw	ra,36(sp)
    8298:	dc400817 	ldw	r17,32(sp)
    829c:	dc000717 	ldw	r16,28(sp)
    82a0:	dec00a04 	addi	sp,sp,40
    82a4:	f800283a 	ret
    82a8:	00bfffc4 	movi	r2,-1
    82ac:	003ff906 	br	8294 <_puts_r+0x68>

000082b0 <puts>:
    82b0:	00800074 	movhi	r2,1
    82b4:	10b2c804 	addi	r2,r2,-13536
    82b8:	200b883a 	mov	r5,r4
    82bc:	11000017 	ldw	r4,0(r2)
    82c0:	000822c1 	jmpi	822c <_puts_r>

000082c4 <strlen>:
    82c4:	208000cc 	andi	r2,r4,3
    82c8:	10001f1e 	bne	r2,zero,8348 <strlen+0x84>
    82cc:	20800017 	ldw	r2,0(r4)
    82d0:	01ffbff4 	movhi	r7,65279
    82d4:	39ffbfc4 	addi	r7,r7,-257
    82d8:	01a02074 	movhi	r6,32897
    82dc:	31a02004 	addi	r6,r6,-32640
    82e0:	11c7883a 	add	r3,r2,r7
    82e4:	0084303a 	nor	r2,zero,r2
    82e8:	1886703a 	and	r3,r3,r2
    82ec:	1986703a 	and	r3,r3,r6
    82f0:	2005883a 	mov	r2,r4
    82f4:	1800101e 	bne	r3,zero,8338 <strlen+0x74>
    82f8:	10800104 	addi	r2,r2,4
    82fc:	10c00017 	ldw	r3,0(r2)
    8300:	19cb883a 	add	r5,r3,r7
    8304:	00c6303a 	nor	r3,zero,r3
    8308:	28c6703a 	and	r3,r5,r3
    830c:	1986703a 	and	r3,r3,r6
    8310:	1800091e 	bne	r3,zero,8338 <strlen+0x74>
    8314:	10800104 	addi	r2,r2,4
    8318:	10c00017 	ldw	r3,0(r2)
    831c:	19cb883a 	add	r5,r3,r7
    8320:	00c6303a 	nor	r3,zero,r3
    8324:	28c6703a 	and	r3,r5,r3
    8328:	1986703a 	and	r3,r3,r6
    832c:	183ff226 	beq	r3,zero,82f8 <strlen+0x34>
    8330:	00000106 	br	8338 <strlen+0x74>
    8334:	10800044 	addi	r2,r2,1
    8338:	10c00007 	ldb	r3,0(r2)
    833c:	183ffd1e 	bne	r3,zero,8334 <strlen+0x70>
    8340:	1105c83a 	sub	r2,r2,r4
    8344:	f800283a 	ret
    8348:	2005883a 	mov	r2,r4
    834c:	003ffa06 	br	8338 <strlen+0x74>

00008350 <__sfvwrite_r>:
    8350:	30800217 	ldw	r2,8(r6)
    8354:	defff504 	addi	sp,sp,-44
    8358:	dd400615 	stw	r21,24(sp)
    835c:	dd000515 	stw	r20,20(sp)
    8360:	dc000115 	stw	r16,4(sp)
    8364:	dfc00a15 	stw	ra,40(sp)
    8368:	df000915 	stw	fp,36(sp)
    836c:	ddc00815 	stw	r23,32(sp)
    8370:	dd800715 	stw	r22,28(sp)
    8374:	dcc00415 	stw	r19,16(sp)
    8378:	dc800315 	stw	r18,12(sp)
    837c:	dc400215 	stw	r17,8(sp)
    8380:	3029883a 	mov	r20,r6
    8384:	202b883a 	mov	r21,r4
    8388:	2821883a 	mov	r16,r5
    838c:	10002126 	beq	r2,zero,8414 <__sfvwrite_r+0xc4>
    8390:	2880030b 	ldhu	r2,12(r5)
    8394:	10c0020c 	andi	r3,r2,8
    8398:	18ffffcc 	andi	r3,r3,65535
    839c:	18e0001c 	xori	r3,r3,32768
    83a0:	18e00004 	addi	r3,r3,-32768
    83a4:	18002826 	beq	r3,zero,8448 <__sfvwrite_r+0xf8>
    83a8:	28c00417 	ldw	r3,16(r5)
    83ac:	18002626 	beq	r3,zero,8448 <__sfvwrite_r+0xf8>
    83b0:	10c0008c 	andi	r3,r2,2
    83b4:	18ffffcc 	andi	r3,r3,65535
    83b8:	18e0001c 	xori	r3,r3,32768
    83bc:	18e00004 	addi	r3,r3,-32768
    83c0:	a4400017 	ldw	r17,0(r20)
    83c4:	18002b26 	beq	r3,zero,8474 <__sfvwrite_r+0x124>
    83c8:	0027883a 	mov	r19,zero
    83cc:	0025883a 	mov	r18,zero
    83d0:	05810004 	movi	r22,1024
    83d4:	980d883a 	mov	r6,r19
    83d8:	a809883a 	mov	r4,r21
    83dc:	90004f26 	beq	r18,zero,851c <__sfvwrite_r+0x1cc>
    83e0:	900f883a 	mov	r7,r18
    83e4:	81400717 	ldw	r5,28(r16)
    83e8:	b480012e 	bgeu	r22,r18,83f0 <__sfvwrite_r+0xa0>
    83ec:	01c10004 	movi	r7,1024
    83f0:	80800917 	ldw	r2,36(r16)
    83f4:	103ee83a 	callr	r2
    83f8:	0080540e 	bge	zero,r2,854c <__sfvwrite_r+0x1fc>
    83fc:	a0c00217 	ldw	r3,8(r20)
    8400:	98a7883a 	add	r19,r19,r2
    8404:	90a5c83a 	sub	r18,r18,r2
    8408:	1885c83a 	sub	r2,r3,r2
    840c:	a0800215 	stw	r2,8(r20)
    8410:	103ff01e 	bne	r2,zero,83d4 <__sfvwrite_r+0x84>
    8414:	0005883a 	mov	r2,zero
    8418:	dfc00a17 	ldw	ra,40(sp)
    841c:	df000917 	ldw	fp,36(sp)
    8420:	ddc00817 	ldw	r23,32(sp)
    8424:	dd800717 	ldw	r22,28(sp)
    8428:	dd400617 	ldw	r21,24(sp)
    842c:	dd000517 	ldw	r20,20(sp)
    8430:	dcc00417 	ldw	r19,16(sp)
    8434:	dc800317 	ldw	r18,12(sp)
    8438:	dc400217 	ldw	r17,8(sp)
    843c:	dc000117 	ldw	r16,4(sp)
    8440:	dec00b04 	addi	sp,sp,44
    8444:	f800283a 	ret
    8448:	a809883a 	mov	r4,r21
    844c:	800b883a 	mov	r5,r16
    8450:	00099dc0 	call	99dc <__swsetup_r>
    8454:	1000f01e 	bne	r2,zero,8818 <__sfvwrite_r+0x4c8>
    8458:	8080030b 	ldhu	r2,12(r16)
    845c:	a4400017 	ldw	r17,0(r20)
    8460:	10c0008c 	andi	r3,r2,2
    8464:	18ffffcc 	andi	r3,r3,65535
    8468:	18e0001c 	xori	r3,r3,32768
    846c:	18e00004 	addi	r3,r3,-32768
    8470:	183fd51e 	bne	r3,zero,83c8 <__sfvwrite_r+0x78>
    8474:	10c0004c 	andi	r3,r2,1
    8478:	002d883a 	mov	r22,zero
    847c:	1800381e 	bne	r3,zero,8560 <__sfvwrite_r+0x210>
    8480:	0025883a 	mov	r18,zero
    8484:	90002126 	beq	r18,zero,850c <__sfvwrite_r+0x1bc>
    8488:	10c0800c 	andi	r3,r2,512
    848c:	18ffffcc 	andi	r3,r3,65535
    8490:	18e0001c 	xori	r3,r3,32768
    8494:	18e00004 	addi	r3,r3,-32768
    8498:	84c00217 	ldw	r19,8(r16)
    849c:	18006b26 	beq	r3,zero,864c <__sfvwrite_r+0x2fc>
    84a0:	980f883a 	mov	r7,r19
    84a4:	94c08636 	bltu	r18,r19,86c0 <__sfvwrite_r+0x370>
    84a8:	10c1200c 	andi	r3,r2,1152
    84ac:	18009f1e 	bne	r3,zero,872c <__sfvwrite_r+0x3dc>
    84b0:	81000017 	ldw	r4,0(r16)
    84b4:	982f883a 	mov	r23,r19
    84b8:	9039883a 	mov	fp,r18
    84bc:	9027883a 	mov	r19,r18
    84c0:	380d883a 	mov	r6,r7
    84c4:	b00b883a 	mov	r5,r22
    84c8:	d9c00015 	stw	r7,0(sp)
    84cc:	00091f00 	call	91f0 <memmove>
    84d0:	d9c00017 	ldw	r7,0(sp)
    84d4:	81000217 	ldw	r4,8(r16)
    84d8:	80800017 	ldw	r2,0(r16)
    84dc:	25efc83a 	sub	r23,r4,r23
    84e0:	11cf883a 	add	r7,r2,r7
    84e4:	85c00215 	stw	r23,8(r16)
    84e8:	81c00015 	stw	r7,0(r16)
    84ec:	a0800217 	ldw	r2,8(r20)
    84f0:	b72d883a 	add	r22,r22,fp
    84f4:	9725c83a 	sub	r18,r18,fp
    84f8:	14e7c83a 	sub	r19,r2,r19
    84fc:	a4c00215 	stw	r19,8(r20)
    8500:	983fc426 	beq	r19,zero,8414 <__sfvwrite_r+0xc4>
    8504:	8080030b 	ldhu	r2,12(r16)
    8508:	903fdf1e 	bne	r18,zero,8488 <__sfvwrite_r+0x138>
    850c:	8d800017 	ldw	r22,0(r17)
    8510:	8c800117 	ldw	r18,4(r17)
    8514:	8c400204 	addi	r17,r17,8
    8518:	003fda06 	br	8484 <__sfvwrite_r+0x134>
    851c:	8cc00017 	ldw	r19,0(r17)
    8520:	8c800117 	ldw	r18,4(r17)
    8524:	8c400204 	addi	r17,r17,8
    8528:	003faa06 	br	83d4 <__sfvwrite_r+0x84>
    852c:	000937c0 	call	937c <_realloc_r>
    8530:	102f883a 	mov	r23,r2
    8534:	10009f1e 	bne	r2,zero,87b4 <__sfvwrite_r+0x464>
    8538:	81400417 	ldw	r5,16(r16)
    853c:	a809883a 	mov	r4,r21
    8540:	000a1900 	call	a190 <_free_r>
    8544:	00800304 	movi	r2,12
    8548:	a8800015 	stw	r2,0(r21)
    854c:	80c0030b 	ldhu	r3,12(r16)
    8550:	00bfffc4 	movi	r2,-1
    8554:	18c01014 	ori	r3,r3,64
    8558:	80c0030d 	sth	r3,12(r16)
    855c:	003fae06 	br	8418 <__sfvwrite_r+0xc8>
    8560:	0007883a 	mov	r3,zero
    8564:	0039883a 	mov	fp,zero
    8568:	0025883a 	mov	r18,zero
    856c:	90001e26 	beq	r18,zero,85e8 <__sfvwrite_r+0x298>
    8570:	18006526 	beq	r3,zero,8708 <__sfvwrite_r+0x3b8>
    8574:	b02f883a 	mov	r23,r22
    8578:	9580012e 	bgeu	r18,r22,8580 <__sfvwrite_r+0x230>
    857c:	902f883a 	mov	r23,r18
    8580:	81000017 	ldw	r4,0(r16)
    8584:	80800417 	ldw	r2,16(r16)
    8588:	84c00217 	ldw	r19,8(r16)
    858c:	81c00517 	ldw	r7,20(r16)
    8590:	1100022e 	bgeu	r2,r4,859c <__sfvwrite_r+0x24c>
    8594:	99e7883a 	add	r19,r19,r7
    8598:	9dc01816 	blt	r19,r23,85fc <__sfvwrite_r+0x2ac>
    859c:	b9c03b16 	blt	r23,r7,868c <__sfvwrite_r+0x33c>
    85a0:	80800917 	ldw	r2,36(r16)
    85a4:	81400717 	ldw	r5,28(r16)
    85a8:	a809883a 	mov	r4,r21
    85ac:	d8c00015 	stw	r3,0(sp)
    85b0:	e00d883a 	mov	r6,fp
    85b4:	103ee83a 	callr	r2
    85b8:	1027883a 	mov	r19,r2
    85bc:	d8c00017 	ldw	r3,0(sp)
    85c0:	00bfe20e 	bge	zero,r2,854c <__sfvwrite_r+0x1fc>
    85c4:	b4edc83a 	sub	r22,r22,r19
    85c8:	b0001a26 	beq	r22,zero,8634 <__sfvwrite_r+0x2e4>
    85cc:	a0800217 	ldw	r2,8(r20)
    85d0:	e4f9883a 	add	fp,fp,r19
    85d4:	94e5c83a 	sub	r18,r18,r19
    85d8:	14e7c83a 	sub	r19,r2,r19
    85dc:	a4c00215 	stw	r19,8(r20)
    85e0:	983f8c26 	beq	r19,zero,8414 <__sfvwrite_r+0xc4>
    85e4:	903fe21e 	bne	r18,zero,8570 <__sfvwrite_r+0x220>
    85e8:	8f000017 	ldw	fp,0(r17)
    85ec:	8c800117 	ldw	r18,4(r17)
    85f0:	0007883a 	mov	r3,zero
    85f4:	8c400204 	addi	r17,r17,8
    85f8:	003fdc06 	br	856c <__sfvwrite_r+0x21c>
    85fc:	e00b883a 	mov	r5,fp
    8600:	980d883a 	mov	r6,r19
    8604:	d8c00015 	stw	r3,0(sp)
    8608:	00091f00 	call	91f0 <memmove>
    860c:	80800017 	ldw	r2,0(r16)
    8610:	a809883a 	mov	r4,r21
    8614:	800b883a 	mov	r5,r16
    8618:	14c5883a 	add	r2,r2,r19
    861c:	80800015 	stw	r2,0(r16)
    8620:	0009b500 	call	9b50 <_fflush_r>
    8624:	d8c00017 	ldw	r3,0(sp)
    8628:	103fc81e 	bne	r2,zero,854c <__sfvwrite_r+0x1fc>
    862c:	b4edc83a 	sub	r22,r22,r19
    8630:	b03fe61e 	bne	r22,zero,85cc <__sfvwrite_r+0x27c>
    8634:	a809883a 	mov	r4,r21
    8638:	800b883a 	mov	r5,r16
    863c:	0009b500 	call	9b50 <_fflush_r>
    8640:	103fc21e 	bne	r2,zero,854c <__sfvwrite_r+0x1fc>
    8644:	0007883a 	mov	r3,zero
    8648:	003fe006 	br	85cc <__sfvwrite_r+0x27c>
    864c:	81000017 	ldw	r4,0(r16)
    8650:	80800417 	ldw	r2,16(r16)
    8654:	1100022e 	bgeu	r2,r4,8660 <__sfvwrite_r+0x310>
    8658:	9839883a 	mov	fp,r19
    865c:	9c806036 	bltu	r19,r18,87e0 <__sfvwrite_r+0x490>
    8660:	81c00517 	ldw	r7,20(r16)
    8664:	91c01c36 	bltu	r18,r7,86d8 <__sfvwrite_r+0x388>
    8668:	80800917 	ldw	r2,36(r16)
    866c:	81400717 	ldw	r5,28(r16)
    8670:	a809883a 	mov	r4,r21
    8674:	b00d883a 	mov	r6,r22
    8678:	103ee83a 	callr	r2
    867c:	1027883a 	mov	r19,r2
    8680:	00bfb20e 	bge	zero,r2,854c <__sfvwrite_r+0x1fc>
    8684:	1039883a 	mov	fp,r2
    8688:	003f9806 	br	84ec <__sfvwrite_r+0x19c>
    868c:	b80d883a 	mov	r6,r23
    8690:	e00b883a 	mov	r5,fp
    8694:	d8c00015 	stw	r3,0(sp)
    8698:	00091f00 	call	91f0 <memmove>
    869c:	80800217 	ldw	r2,8(r16)
    86a0:	81000017 	ldw	r4,0(r16)
    86a4:	b827883a 	mov	r19,r23
    86a8:	15c5c83a 	sub	r2,r2,r23
    86ac:	25ef883a 	add	r23,r4,r23
    86b0:	80800215 	stw	r2,8(r16)
    86b4:	85c00015 	stw	r23,0(r16)
    86b8:	d8c00017 	ldw	r3,0(sp)
    86bc:	003fc106 	br	85c4 <__sfvwrite_r+0x274>
    86c0:	81000017 	ldw	r4,0(r16)
    86c4:	902f883a 	mov	r23,r18
    86c8:	9039883a 	mov	fp,r18
    86cc:	9027883a 	mov	r19,r18
    86d0:	900f883a 	mov	r7,r18
    86d4:	003f7a06 	br	84c0 <__sfvwrite_r+0x170>
    86d8:	b00b883a 	mov	r5,r22
    86dc:	900d883a 	mov	r6,r18
    86e0:	00091f00 	call	91f0 <memmove>
    86e4:	80c00217 	ldw	r3,8(r16)
    86e8:	80800017 	ldw	r2,0(r16)
    86ec:	9027883a 	mov	r19,r18
    86f0:	1c87c83a 	sub	r3,r3,r18
    86f4:	1485883a 	add	r2,r2,r18
    86f8:	80c00215 	stw	r3,8(r16)
    86fc:	80800015 	stw	r2,0(r16)
    8700:	9039883a 	mov	fp,r18
    8704:	003f7906 	br	84ec <__sfvwrite_r+0x19c>
    8708:	e009883a 	mov	r4,fp
    870c:	01400284 	movi	r5,10
    8710:	900d883a 	mov	r6,r18
    8714:	0008fb80 	call	8fb8 <memchr>
    8718:	10003c26 	beq	r2,zero,880c <__sfvwrite_r+0x4bc>
    871c:	15800044 	addi	r22,r2,1
    8720:	b72dc83a 	sub	r22,r22,fp
    8724:	00c00044 	movi	r3,1
    8728:	003f9206 	br	8574 <__sfvwrite_r+0x224>
    872c:	81000517 	ldw	r4,20(r16)
    8730:	81400417 	ldw	r5,16(r16)
    8734:	80c00017 	ldw	r3,0(r16)
    8738:	210d883a 	add	r6,r4,r4
    873c:	3109883a 	add	r4,r6,r4
    8740:	2026d7fa 	srli	r19,r4,31
    8744:	1979c83a 	sub	fp,r3,r5
    8748:	e1800044 	addi	r6,fp,1
    874c:	9909883a 	add	r4,r19,r4
    8750:	2027d07a 	srai	r19,r4,1
    8754:	3489883a 	add	r4,r6,r18
    8758:	980d883a 	mov	r6,r19
    875c:	9900022e 	bgeu	r19,r4,8768 <__sfvwrite_r+0x418>
    8760:	2027883a 	mov	r19,r4
    8764:	200d883a 	mov	r6,r4
    8768:	1081000c 	andi	r2,r2,1024
    876c:	10bfffcc 	andi	r2,r2,65535
    8770:	10a0001c 	xori	r2,r2,32768
    8774:	10a00004 	addi	r2,r2,-32768
    8778:	a809883a 	mov	r4,r21
    877c:	103f6b26 	beq	r2,zero,852c <__sfvwrite_r+0x1dc>
    8780:	300b883a 	mov	r5,r6
    8784:	00088340 	call	8834 <_malloc_r>
    8788:	102f883a 	mov	r23,r2
    878c:	103f6d26 	beq	r2,zero,8544 <__sfvwrite_r+0x1f4>
    8790:	81400417 	ldw	r5,16(r16)
    8794:	1009883a 	mov	r4,r2
    8798:	e00d883a 	mov	r6,fp
    879c:	00090b00 	call	90b0 <memcpy>
    87a0:	8080030b 	ldhu	r2,12(r16)
    87a4:	00fedfc4 	movi	r3,-1153
    87a8:	10c4703a 	and	r2,r2,r3
    87ac:	10802014 	ori	r2,r2,128
    87b0:	8080030d 	sth	r2,12(r16)
    87b4:	bf09883a 	add	r4,r23,fp
    87b8:	9f07c83a 	sub	r3,r19,fp
    87bc:	85c00415 	stw	r23,16(r16)
    87c0:	84c00515 	stw	r19,20(r16)
    87c4:	81000015 	stw	r4,0(r16)
    87c8:	902f883a 	mov	r23,r18
    87cc:	80c00215 	stw	r3,8(r16)
    87d0:	9039883a 	mov	fp,r18
    87d4:	9027883a 	mov	r19,r18
    87d8:	900f883a 	mov	r7,r18
    87dc:	003f3806 	br	84c0 <__sfvwrite_r+0x170>
    87e0:	b00b883a 	mov	r5,r22
    87e4:	980d883a 	mov	r6,r19
    87e8:	00091f00 	call	91f0 <memmove>
    87ec:	80800017 	ldw	r2,0(r16)
    87f0:	a809883a 	mov	r4,r21
    87f4:	800b883a 	mov	r5,r16
    87f8:	14c5883a 	add	r2,r2,r19
    87fc:	80800015 	stw	r2,0(r16)
    8800:	0009b500 	call	9b50 <_fflush_r>
    8804:	103f3926 	beq	r2,zero,84ec <__sfvwrite_r+0x19c>
    8808:	003f5006 	br	854c <__sfvwrite_r+0x1fc>
    880c:	95800044 	addi	r22,r18,1
    8810:	00c00044 	movi	r3,1
    8814:	003f5706 	br	8574 <__sfvwrite_r+0x224>
    8818:	80c0030b 	ldhu	r3,12(r16)
    881c:	00bfffc4 	movi	r2,-1
    8820:	18c01014 	ori	r3,r3,64
    8824:	80c0030d 	sth	r3,12(r16)
    8828:	00c00244 	movi	r3,9
    882c:	a8c00015 	stw	r3,0(r21)
    8830:	003ef906 	br	8418 <__sfvwrite_r+0xc8>

00008834 <_malloc_r>:
    8834:	defff604 	addi	sp,sp,-40
    8838:	dc800215 	stw	r18,8(sp)
    883c:	dfc00915 	stw	ra,36(sp)
    8840:	df000815 	stw	fp,32(sp)
    8844:	ddc00715 	stw	r23,28(sp)
    8848:	dd800615 	stw	r22,24(sp)
    884c:	dd400515 	stw	r21,20(sp)
    8850:	dd000415 	stw	r20,16(sp)
    8854:	dcc00315 	stw	r19,12(sp)
    8858:	dc400115 	stw	r17,4(sp)
    885c:	dc000015 	stw	r16,0(sp)
    8860:	288002c4 	addi	r2,r5,11
    8864:	00c00584 	movi	r3,22
    8868:	2025883a 	mov	r18,r4
    886c:	18802b2e 	bgeu	r3,r2,891c <_malloc_r+0xe8>
    8870:	047ffe04 	movi	r17,-8
    8874:	1462703a 	and	r17,r2,r17
    8878:	88002a16 	blt	r17,zero,8924 <_malloc_r+0xf0>
    887c:	89402936 	bltu	r17,r5,8924 <_malloc_r+0xf0>
    8880:	9009883a 	mov	r4,r18
    8884:	000b3180 	call	b318 <__malloc_lock>
    8888:	00807dc4 	movi	r2,503
    888c:	14402936 	bltu	r2,r17,8934 <_malloc_r+0x100>
    8890:	8808d0fa 	srli	r4,r17,3
    8894:	04c00074 	movhi	r19,1
    8898:	9cf15b04 	addi	r19,r19,-14996
    889c:	2105883a 	add	r2,r4,r4
    88a0:	1085883a 	add	r2,r2,r2
    88a4:	1085883a 	add	r2,r2,r2
    88a8:	9885883a 	add	r2,r19,r2
    88ac:	14000317 	ldw	r16,12(r2)
    88b0:	80815526 	beq	r16,r2,8e08 <_malloc_r+0x5d4>
    88b4:	81000117 	ldw	r4,4(r16)
    88b8:	00bfff04 	movi	r2,-4
    88bc:	80c00317 	ldw	r3,12(r16)
    88c0:	2084703a 	and	r2,r4,r2
    88c4:	8085883a 	add	r2,r16,r2
    88c8:	11800117 	ldw	r6,4(r2)
    88cc:	81400217 	ldw	r5,8(r16)
    88d0:	9009883a 	mov	r4,r18
    88d4:	31800054 	ori	r6,r6,1
    88d8:	11800115 	stw	r6,4(r2)
    88dc:	28c00315 	stw	r3,12(r5)
    88e0:	19400215 	stw	r5,8(r3)
    88e4:	000b3380 	call	b338 <__malloc_unlock>
    88e8:	80800204 	addi	r2,r16,8
    88ec:	dfc00917 	ldw	ra,36(sp)
    88f0:	df000817 	ldw	fp,32(sp)
    88f4:	ddc00717 	ldw	r23,28(sp)
    88f8:	dd800617 	ldw	r22,24(sp)
    88fc:	dd400517 	ldw	r21,20(sp)
    8900:	dd000417 	ldw	r20,16(sp)
    8904:	dcc00317 	ldw	r19,12(sp)
    8908:	dc800217 	ldw	r18,8(sp)
    890c:	dc400117 	ldw	r17,4(sp)
    8910:	dc000017 	ldw	r16,0(sp)
    8914:	dec00a04 	addi	sp,sp,40
    8918:	f800283a 	ret
    891c:	04400404 	movi	r17,16
    8920:	897fd72e 	bgeu	r17,r5,8880 <_malloc_r+0x4c>
    8924:	00800304 	movi	r2,12
    8928:	90800015 	stw	r2,0(r18)
    892c:	0005883a 	mov	r2,zero
    8930:	003fee06 	br	88ec <_malloc_r+0xb8>
    8934:	8808d27a 	srli	r4,r17,9
    8938:	20007126 	beq	r4,zero,8b00 <_malloc_r+0x2cc>
    893c:	00800104 	movi	r2,4
    8940:	1100eb36 	bltu	r2,r4,8cf0 <_malloc_r+0x4bc>
    8944:	8808d1ba 	srli	r4,r17,6
    8948:	21000e04 	addi	r4,r4,56
    894c:	210b883a 	add	r5,r4,r4
    8950:	294b883a 	add	r5,r5,r5
    8954:	294b883a 	add	r5,r5,r5
    8958:	04c00074 	movhi	r19,1
    895c:	9cf15b04 	addi	r19,r19,-14996
    8960:	994b883a 	add	r5,r19,r5
    8964:	2c000317 	ldw	r16,12(r5)
    8968:	2c000e26 	beq	r5,r16,89a4 <_malloc_r+0x170>
    896c:	80c00117 	ldw	r3,4(r16)
    8970:	01ffff04 	movi	r7,-4
    8974:	018003c4 	movi	r6,15
    8978:	19c6703a 	and	r3,r3,r7
    897c:	1c45c83a 	sub	r2,r3,r17
    8980:	30800716 	blt	r6,r2,89a0 <_malloc_r+0x16c>
    8984:	1000610e 	bge	r2,zero,8b0c <_malloc_r+0x2d8>
    8988:	84000317 	ldw	r16,12(r16)
    898c:	2c000526 	beq	r5,r16,89a4 <_malloc_r+0x170>
    8990:	80c00117 	ldw	r3,4(r16)
    8994:	19c6703a 	and	r3,r3,r7
    8998:	1c45c83a 	sub	r2,r3,r17
    899c:	30bff90e 	bge	r6,r2,8984 <_malloc_r+0x150>
    89a0:	213fffc4 	addi	r4,r4,-1
    89a4:	21000044 	addi	r4,r4,1
    89a8:	9c000417 	ldw	r16,16(r19)
    89ac:	00c00074 	movhi	r3,1
    89b0:	18f15b04 	addi	r3,r3,-14996
    89b4:	1a400204 	addi	r9,r3,8
    89b8:	8240ff26 	beq	r16,r9,8db8 <_malloc_r+0x584>
    89bc:	81400117 	ldw	r5,4(r16)
    89c0:	00bfff04 	movi	r2,-4
    89c4:	018003c4 	movi	r6,15
    89c8:	2884703a 	and	r2,r5,r2
    89cc:	144bc83a 	sub	r5,r2,r17
    89d0:	3140ea16 	blt	r6,r5,8d7c <_malloc_r+0x548>
    89d4:	1a400515 	stw	r9,20(r3)
    89d8:	1a400415 	stw	r9,16(r3)
    89dc:	2800570e 	bge	r5,zero,8b3c <_malloc_r+0x308>
    89e0:	01407fc4 	movi	r5,511
    89e4:	2880ca36 	bltu	r5,r2,8d10 <_malloc_r+0x4dc>
    89e8:	1004d0fa 	srli	r2,r2,3
    89ec:	02000044 	movi	r8,1
    89f0:	19c00117 	ldw	r7,4(r3)
    89f4:	108b883a 	add	r5,r2,r2
    89f8:	294b883a 	add	r5,r5,r5
    89fc:	1005d0ba 	srai	r2,r2,2
    8a00:	294b883a 	add	r5,r5,r5
    8a04:	28cb883a 	add	r5,r5,r3
    8a08:	29800217 	ldw	r6,8(r5)
    8a0c:	4084983a 	sll	r2,r8,r2
    8a10:	81400315 	stw	r5,12(r16)
    8a14:	81800215 	stw	r6,8(r16)
    8a18:	11c4b03a 	or	r2,r2,r7
    8a1c:	18800115 	stw	r2,4(r3)
    8a20:	2c000215 	stw	r16,8(r5)
    8a24:	34000315 	stw	r16,12(r6)
    8a28:	200bd0ba 	srai	r5,r4,2
    8a2c:	00c00044 	movi	r3,1
    8a30:	194a983a 	sll	r5,r3,r5
    8a34:	11404936 	bltu	r2,r5,8b5c <_malloc_r+0x328>
    8a38:	1146703a 	and	r3,r2,r5
    8a3c:	18000a1e 	bne	r3,zero,8a68 <_malloc_r+0x234>
    8a40:	00ffff04 	movi	r3,-4
    8a44:	294b883a 	add	r5,r5,r5
    8a48:	20c8703a 	and	r4,r4,r3
    8a4c:	1146703a 	and	r3,r2,r5
    8a50:	21000104 	addi	r4,r4,4
    8a54:	1800041e 	bne	r3,zero,8a68 <_malloc_r+0x234>
    8a58:	294b883a 	add	r5,r5,r5
    8a5c:	1146703a 	and	r3,r2,r5
    8a60:	21000104 	addi	r4,r4,4
    8a64:	183ffc26 	beq	r3,zero,8a58 <_malloc_r+0x224>
    8a68:	023fff04 	movi	r8,-4
    8a6c:	01c003c4 	movi	r7,15
    8a70:	2105883a 	add	r2,r4,r4
    8a74:	1085883a 	add	r2,r2,r2
    8a78:	1085883a 	add	r2,r2,r2
    8a7c:	9899883a 	add	r12,r19,r2
    8a80:	62800304 	addi	r10,r12,12
    8a84:	2017883a 	mov	r11,r4
    8a88:	54000017 	ldw	r16,0(r10)
    8a8c:	51bffd04 	addi	r6,r10,-12
    8a90:	8180041e 	bne	r16,r6,8aa4 <_malloc_r+0x270>
    8a94:	0000ca06 	br	8dc0 <_malloc_r+0x58c>
    8a98:	10001c0e 	bge	r2,zero,8b0c <_malloc_r+0x2d8>
    8a9c:	84000317 	ldw	r16,12(r16)
    8aa0:	8180c726 	beq	r16,r6,8dc0 <_malloc_r+0x58c>
    8aa4:	80c00117 	ldw	r3,4(r16)
    8aa8:	1a06703a 	and	r3,r3,r8
    8aac:	1c45c83a 	sub	r2,r3,r17
    8ab0:	38bff90e 	bge	r7,r2,8a98 <_malloc_r+0x264>
    8ab4:	81000317 	ldw	r4,12(r16)
    8ab8:	81400217 	ldw	r5,8(r16)
    8abc:	8447883a 	add	r3,r16,r17
    8ac0:	8c400054 	ori	r17,r17,1
    8ac4:	29000315 	stw	r4,12(r5)
    8ac8:	21400215 	stw	r5,8(r4)
    8acc:	84400115 	stw	r17,4(r16)
    8ad0:	1889883a 	add	r4,r3,r2
    8ad4:	11400054 	ori	r5,r2,1
    8ad8:	98c00515 	stw	r3,20(r19)
    8adc:	98c00415 	stw	r3,16(r19)
    8ae0:	20800015 	stw	r2,0(r4)
    8ae4:	1a400315 	stw	r9,12(r3)
    8ae8:	1a400215 	stw	r9,8(r3)
    8aec:	19400115 	stw	r5,4(r3)
    8af0:	9009883a 	mov	r4,r18
    8af4:	000b3380 	call	b338 <__malloc_unlock>
    8af8:	80800204 	addi	r2,r16,8
    8afc:	003f7b06 	br	88ec <_malloc_r+0xb8>
    8b00:	8808d0fa 	srli	r4,r17,3
    8b04:	210b883a 	add	r5,r4,r4
    8b08:	003f9106 	br	8950 <_malloc_r+0x11c>
    8b0c:	80c7883a 	add	r3,r16,r3
    8b10:	19400117 	ldw	r5,4(r3)
    8b14:	80800317 	ldw	r2,12(r16)
    8b18:	81000217 	ldw	r4,8(r16)
    8b1c:	29400054 	ori	r5,r5,1
    8b20:	19400115 	stw	r5,4(r3)
    8b24:	20800315 	stw	r2,12(r4)
    8b28:	11000215 	stw	r4,8(r2)
    8b2c:	9009883a 	mov	r4,r18
    8b30:	000b3380 	call	b338 <__malloc_unlock>
    8b34:	80800204 	addi	r2,r16,8
    8b38:	003f6c06 	br	88ec <_malloc_r+0xb8>
    8b3c:	8085883a 	add	r2,r16,r2
    8b40:	10c00117 	ldw	r3,4(r2)
    8b44:	9009883a 	mov	r4,r18
    8b48:	18c00054 	ori	r3,r3,1
    8b4c:	10c00115 	stw	r3,4(r2)
    8b50:	000b3380 	call	b338 <__malloc_unlock>
    8b54:	80800204 	addi	r2,r16,8
    8b58:	003f6406 	br	88ec <_malloc_r+0xb8>
    8b5c:	9c000217 	ldw	r16,8(r19)
    8b60:	00bfff04 	movi	r2,-4
    8b64:	85400117 	ldw	r21,4(r16)
    8b68:	a8aa703a 	and	r21,r21,r2
    8b6c:	ac400336 	bltu	r21,r17,8b7c <_malloc_r+0x348>
    8b70:	ac45c83a 	sub	r2,r21,r17
    8b74:	00c003c4 	movi	r3,15
    8b78:	18805316 	blt	r3,r2,8cc8 <_malloc_r+0x494>
    8b7c:	d5e28a17 	ldw	r23,-30168(gp)
    8b80:	d0e00217 	ldw	r3,-32760(gp)
    8b84:	00bfffc4 	movi	r2,-1
    8b88:	8579883a 	add	fp,r16,r21
    8b8c:	8def883a 	add	r23,r17,r23
    8b90:	1880d226 	beq	r3,r2,8edc <_malloc_r+0x6a8>
    8b94:	bdc403c4 	addi	r23,r23,4111
    8b98:	00bc0004 	movi	r2,-4096
    8b9c:	b8ae703a 	and	r23,r23,r2
    8ba0:	9009883a 	mov	r4,r18
    8ba4:	b80b883a 	mov	r5,r23
    8ba8:	00099780 	call	9978 <_sbrk_r>
    8bac:	1029883a 	mov	r20,r2
    8bb0:	00bfffc4 	movi	r2,-1
    8bb4:	a080d126 	beq	r20,r2,8efc <_malloc_r+0x6c8>
    8bb8:	a7009f36 	bltu	r20,fp,8e38 <_malloc_r+0x604>
    8bbc:	05800074 	movhi	r22,1
    8bc0:	b5b55904 	addi	r22,r22,-10908
    8bc4:	b0800017 	ldw	r2,0(r22)
    8bc8:	b885883a 	add	r2,r23,r2
    8bcc:	b0800015 	stw	r2,0(r22)
    8bd0:	e500cf26 	beq	fp,r20,8f10 <_malloc_r+0x6dc>
    8bd4:	d1200217 	ldw	r4,-32760(gp)
    8bd8:	00ffffc4 	movi	r3,-1
    8bdc:	20c0e026 	beq	r4,r3,8f60 <_malloc_r+0x72c>
    8be0:	a739c83a 	sub	fp,r20,fp
    8be4:	1705883a 	add	r2,r2,fp
    8be8:	b0800015 	stw	r2,0(r22)
    8bec:	a08001cc 	andi	r2,r20,7
    8bf0:	1000a526 	beq	r2,zero,8e88 <_malloc_r+0x654>
    8bf4:	a0a9c83a 	sub	r20,r20,r2
    8bf8:	00c40204 	movi	r3,4104
    8bfc:	a5000204 	addi	r20,r20,8
    8c00:	1885c83a 	sub	r2,r3,r2
    8c04:	a5c7883a 	add	r3,r20,r23
    8c08:	18c3ffcc 	andi	r3,r3,4095
    8c0c:	10efc83a 	sub	r23,r2,r3
    8c10:	9009883a 	mov	r4,r18
    8c14:	b80b883a 	mov	r5,r23
    8c18:	00099780 	call	9978 <_sbrk_r>
    8c1c:	00ffffc4 	movi	r3,-1
    8c20:	10c0cc26 	beq	r2,r3,8f54 <_malloc_r+0x720>
    8c24:	1505c83a 	sub	r2,r2,r20
    8c28:	b887883a 	add	r3,r23,r2
    8c2c:	18c00054 	ori	r3,r3,1
    8c30:	b0800017 	ldw	r2,0(r22)
    8c34:	9d000215 	stw	r20,8(r19)
    8c38:	a0c00115 	stw	r3,4(r20)
    8c3c:	b885883a 	add	r2,r23,r2
    8c40:	b0800015 	stw	r2,0(r22)
    8c44:	84c00e26 	beq	r16,r19,8c80 <_malloc_r+0x44c>
    8c48:	00c003c4 	movi	r3,15
    8c4c:	1d40902e 	bgeu	r3,r21,8e90 <_malloc_r+0x65c>
    8c50:	ad7ffd04 	addi	r21,r21,-12
    8c54:	013ffe04 	movi	r4,-8
    8c58:	a908703a 	and	r4,r21,r4
    8c5c:	810b883a 	add	r5,r16,r4
    8c60:	01800144 	movi	r6,5
    8c64:	29800115 	stw	r6,4(r5)
    8c68:	29800215 	stw	r6,8(r5)
    8c6c:	81400117 	ldw	r5,4(r16)
    8c70:	2940004c 	andi	r5,r5,1
    8c74:	214ab03a 	or	r5,r4,r5
    8c78:	81400115 	stw	r5,4(r16)
    8c7c:	1900ae36 	bltu	r3,r4,8f38 <_malloc_r+0x704>
    8c80:	d0e28917 	ldw	r3,-30172(gp)
    8c84:	1880012e 	bgeu	r3,r2,8c8c <_malloc_r+0x458>
    8c88:	d0a28915 	stw	r2,-30172(gp)
    8c8c:	d0e28817 	ldw	r3,-30176(gp)
    8c90:	9c000217 	ldw	r16,8(r19)
    8c94:	1880012e 	bgeu	r3,r2,8c9c <_malloc_r+0x468>
    8c98:	d0a28815 	stw	r2,-30176(gp)
    8c9c:	80c00117 	ldw	r3,4(r16)
    8ca0:	00bfff04 	movi	r2,-4
    8ca4:	1886703a 	and	r3,r3,r2
    8ca8:	1c45c83a 	sub	r2,r3,r17
    8cac:	1c400236 	bltu	r3,r17,8cb8 <_malloc_r+0x484>
    8cb0:	00c003c4 	movi	r3,15
    8cb4:	18800416 	blt	r3,r2,8cc8 <_malloc_r+0x494>
    8cb8:	9009883a 	mov	r4,r18
    8cbc:	000b3380 	call	b338 <__malloc_unlock>
    8cc0:	0005883a 	mov	r2,zero
    8cc4:	003f0906 	br	88ec <_malloc_r+0xb8>
    8cc8:	88c00054 	ori	r3,r17,1
    8ccc:	10800054 	ori	r2,r2,1
    8cd0:	80c00115 	stw	r3,4(r16)
    8cd4:	8463883a 	add	r17,r16,r17
    8cd8:	88800115 	stw	r2,4(r17)
    8cdc:	9009883a 	mov	r4,r18
    8ce0:	9c400215 	stw	r17,8(r19)
    8ce4:	000b3380 	call	b338 <__malloc_unlock>
    8ce8:	80800204 	addi	r2,r16,8
    8cec:	003eff06 	br	88ec <_malloc_r+0xb8>
    8cf0:	00800504 	movi	r2,20
    8cf4:	1100492e 	bgeu	r2,r4,8e1c <_malloc_r+0x5e8>
    8cf8:	00801504 	movi	r2,84
    8cfc:	11005c36 	bltu	r2,r4,8e70 <_malloc_r+0x63c>
    8d00:	8808d33a 	srli	r4,r17,12
    8d04:	21001b84 	addi	r4,r4,110
    8d08:	210b883a 	add	r5,r4,r4
    8d0c:	003f1006 	br	8950 <_malloc_r+0x11c>
    8d10:	1006d27a 	srli	r3,r2,9
    8d14:	01400104 	movi	r5,4
    8d18:	28c0432e 	bgeu	r5,r3,8e28 <_malloc_r+0x5f4>
    8d1c:	01400504 	movi	r5,20
    8d20:	28c07036 	bltu	r5,r3,8ee4 <_malloc_r+0x6b0>
    8d24:	194016c4 	addi	r5,r3,91
    8d28:	294d883a 	add	r6,r5,r5
    8d2c:	318d883a 	add	r6,r6,r6
    8d30:	318d883a 	add	r6,r6,r6
    8d34:	998d883a 	add	r6,r19,r6
    8d38:	30c00217 	ldw	r3,8(r6)
    8d3c:	01c00074 	movhi	r7,1
    8d40:	39f15b04 	addi	r7,r7,-14996
    8d44:	19805726 	beq	r3,r6,8ea4 <_malloc_r+0x670>
    8d48:	01ffff04 	movi	r7,-4
    8d4c:	19400117 	ldw	r5,4(r3)
    8d50:	29ca703a 	and	r5,r5,r7
    8d54:	1140022e 	bgeu	r2,r5,8d60 <_malloc_r+0x52c>
    8d58:	18c00217 	ldw	r3,8(r3)
    8d5c:	30fffb1e 	bne	r6,r3,8d4c <_malloc_r+0x518>
    8d60:	19400317 	ldw	r5,12(r3)
    8d64:	98800117 	ldw	r2,4(r19)
    8d68:	81400315 	stw	r5,12(r16)
    8d6c:	80c00215 	stw	r3,8(r16)
    8d70:	2c000215 	stw	r16,8(r5)
    8d74:	1c000315 	stw	r16,12(r3)
    8d78:	003f2b06 	br	8a28 <_malloc_r+0x1f4>
    8d7c:	8445883a 	add	r2,r16,r17
    8d80:	8c400054 	ori	r17,r17,1
    8d84:	18800515 	stw	r2,20(r3)
    8d88:	18800415 	stw	r2,16(r3)
    8d8c:	29000054 	ori	r4,r5,1
    8d90:	1147883a 	add	r3,r2,r5
    8d94:	84400115 	stw	r17,4(r16)
    8d98:	11000115 	stw	r4,4(r2)
    8d9c:	12400315 	stw	r9,12(r2)
    8da0:	12400215 	stw	r9,8(r2)
    8da4:	19400015 	stw	r5,0(r3)
    8da8:	9009883a 	mov	r4,r18
    8dac:	000b3380 	call	b338 <__malloc_unlock>
    8db0:	80800204 	addi	r2,r16,8
    8db4:	003ecd06 	br	88ec <_malloc_r+0xb8>
    8db8:	18800117 	ldw	r2,4(r3)
    8dbc:	003f1a06 	br	8a28 <_malloc_r+0x1f4>
    8dc0:	5ac00044 	addi	r11,r11,1
    8dc4:	588000cc 	andi	r2,r11,3
    8dc8:	52800204 	addi	r10,r10,8
    8dcc:	103f2e1e 	bne	r2,zero,8a88 <_malloc_r+0x254>
    8dd0:	20c000cc 	andi	r3,r4,3
    8dd4:	60bffe04 	addi	r2,r12,-8
    8dd8:	18006f26 	beq	r3,zero,8f98 <_malloc_r+0x764>
    8ddc:	63000017 	ldw	r12,0(r12)
    8de0:	213fffc4 	addi	r4,r4,-1
    8de4:	60bffa26 	beq	r12,r2,8dd0 <_malloc_r+0x59c>
    8de8:	98800117 	ldw	r2,4(r19)
    8dec:	294b883a 	add	r5,r5,r5
    8df0:	117f5a36 	bltu	r2,r5,8b5c <_malloc_r+0x328>
    8df4:	283f5926 	beq	r5,zero,8b5c <_malloc_r+0x328>
    8df8:	1146703a 	and	r3,r2,r5
    8dfc:	18001626 	beq	r3,zero,8e58 <_malloc_r+0x624>
    8e00:	5809883a 	mov	r4,r11
    8e04:	003f1a06 	br	8a70 <_malloc_r+0x23c>
    8e08:	80800204 	addi	r2,r16,8
    8e0c:	84000517 	ldw	r16,20(r16)
    8e10:	143ea81e 	bne	r2,r16,88b4 <_malloc_r+0x80>
    8e14:	21000084 	addi	r4,r4,2
    8e18:	003ee306 	br	89a8 <_malloc_r+0x174>
    8e1c:	210016c4 	addi	r4,r4,91
    8e20:	210b883a 	add	r5,r4,r4
    8e24:	003eca06 	br	8950 <_malloc_r+0x11c>
    8e28:	100ad1ba 	srli	r5,r2,6
    8e2c:	29400e04 	addi	r5,r5,56
    8e30:	294d883a 	add	r6,r5,r5
    8e34:	003fbd06 	br	8d2c <_malloc_r+0x4f8>
    8e38:	84ff6026 	beq	r16,r19,8bbc <_malloc_r+0x388>
    8e3c:	00800074 	movhi	r2,1
    8e40:	10b15b04 	addi	r2,r2,-14996
    8e44:	14000217 	ldw	r16,8(r2)
    8e48:	00bfff04 	movi	r2,-4
    8e4c:	80c00117 	ldw	r3,4(r16)
    8e50:	1886703a 	and	r3,r3,r2
    8e54:	003f9406 	br	8ca8 <_malloc_r+0x474>
    8e58:	294b883a 	add	r5,r5,r5
    8e5c:	1146703a 	and	r3,r2,r5
    8e60:	5ac00104 	addi	r11,r11,4
    8e64:	183ffc26 	beq	r3,zero,8e58 <_malloc_r+0x624>
    8e68:	5809883a 	mov	r4,r11
    8e6c:	003f0006 	br	8a70 <_malloc_r+0x23c>
    8e70:	00805504 	movi	r2,340
    8e74:	11001336 	bltu	r2,r4,8ec4 <_malloc_r+0x690>
    8e78:	8808d3fa 	srli	r4,r17,15
    8e7c:	21001dc4 	addi	r4,r4,119
    8e80:	210b883a 	add	r5,r4,r4
    8e84:	003eb206 	br	8950 <_malloc_r+0x11c>
    8e88:	00840004 	movi	r2,4096
    8e8c:	003f5d06 	br	8c04 <_malloc_r+0x3d0>
    8e90:	00800044 	movi	r2,1
    8e94:	a0800115 	stw	r2,4(r20)
    8e98:	a021883a 	mov	r16,r20
    8e9c:	0007883a 	mov	r3,zero
    8ea0:	003f8106 	br	8ca8 <_malloc_r+0x474>
    8ea4:	280bd0ba 	srai	r5,r5,2
    8ea8:	01800044 	movi	r6,1
    8eac:	38800117 	ldw	r2,4(r7)
    8eb0:	314c983a 	sll	r6,r6,r5
    8eb4:	180b883a 	mov	r5,r3
    8eb8:	3084b03a 	or	r2,r6,r2
    8ebc:	38800115 	stw	r2,4(r7)
    8ec0:	003fa906 	br	8d68 <_malloc_r+0x534>
    8ec4:	00815504 	movi	r2,1364
    8ec8:	11001836 	bltu	r2,r4,8f2c <_malloc_r+0x6f8>
    8ecc:	8808d4ba 	srli	r4,r17,18
    8ed0:	21001f04 	addi	r4,r4,124
    8ed4:	210b883a 	add	r5,r4,r4
    8ed8:	003e9d06 	br	8950 <_malloc_r+0x11c>
    8edc:	bdc00404 	addi	r23,r23,16
    8ee0:	003f2f06 	br	8ba0 <_malloc_r+0x36c>
    8ee4:	01401504 	movi	r5,84
    8ee8:	28c01f36 	bltu	r5,r3,8f68 <_malloc_r+0x734>
    8eec:	100ad33a 	srli	r5,r2,12
    8ef0:	29401b84 	addi	r5,r5,110
    8ef4:	294d883a 	add	r6,r5,r5
    8ef8:	003f8c06 	br	8d2c <_malloc_r+0x4f8>
    8efc:	9c000217 	ldw	r16,8(r19)
    8f00:	00bfff04 	movi	r2,-4
    8f04:	80c00117 	ldw	r3,4(r16)
    8f08:	1886703a 	and	r3,r3,r2
    8f0c:	003f6606 	br	8ca8 <_malloc_r+0x474>
    8f10:	e0c3ffcc 	andi	r3,fp,4095
    8f14:	183f2f1e 	bne	r3,zero,8bd4 <_malloc_r+0x3a0>
    8f18:	98c00217 	ldw	r3,8(r19)
    8f1c:	bd49883a 	add	r4,r23,r21
    8f20:	21000054 	ori	r4,r4,1
    8f24:	19000115 	stw	r4,4(r3)
    8f28:	003f5506 	br	8c80 <_malloc_r+0x44c>
    8f2c:	01403f04 	movi	r5,252
    8f30:	01001f84 	movi	r4,126
    8f34:	003e8606 	br	8950 <_malloc_r+0x11c>
    8f38:	9009883a 	mov	r4,r18
    8f3c:	81400204 	addi	r5,r16,8
    8f40:	000a1900 	call	a190 <_free_r>
    8f44:	00800074 	movhi	r2,1
    8f48:	10b55904 	addi	r2,r2,-10908
    8f4c:	10800017 	ldw	r2,0(r2)
    8f50:	003f4b06 	br	8c80 <_malloc_r+0x44c>
    8f54:	00c00044 	movi	r3,1
    8f58:	002f883a 	mov	r23,zero
    8f5c:	003f3406 	br	8c30 <_malloc_r+0x3fc>
    8f60:	d5200215 	stw	r20,-32760(gp)
    8f64:	003f2106 	br	8bec <_malloc_r+0x3b8>
    8f68:	01405504 	movi	r5,340
    8f6c:	28c00436 	bltu	r5,r3,8f80 <_malloc_r+0x74c>
    8f70:	100ad3fa 	srli	r5,r2,15
    8f74:	29401dc4 	addi	r5,r5,119
    8f78:	294d883a 	add	r6,r5,r5
    8f7c:	003f6b06 	br	8d2c <_malloc_r+0x4f8>
    8f80:	01415504 	movi	r5,1364
    8f84:	28c00936 	bltu	r5,r3,8fac <_malloc_r+0x778>
    8f88:	100ad4ba 	srli	r5,r2,18
    8f8c:	29401f04 	addi	r5,r5,124
    8f90:	294d883a 	add	r6,r5,r5
    8f94:	003f6506 	br	8d2c <_malloc_r+0x4f8>
    8f98:	98800117 	ldw	r2,4(r19)
    8f9c:	0146303a 	nor	r3,zero,r5
    8fa0:	1884703a 	and	r2,r3,r2
    8fa4:	98800115 	stw	r2,4(r19)
    8fa8:	003f9006 	br	8dec <_malloc_r+0x5b8>
    8fac:	01803f04 	movi	r6,252
    8fb0:	01401f84 	movi	r5,126
    8fb4:	003f5d06 	br	8d2c <_malloc_r+0x4f8>

00008fb8 <memchr>:
    8fb8:	008000c4 	movi	r2,3
    8fbc:	29403fcc 	andi	r5,r5,255
    8fc0:	1180282e 	bgeu	r2,r6,9064 <memchr+0xac>
    8fc4:	2086703a 	and	r3,r4,r2
    8fc8:	1800351e 	bne	r3,zero,90a0 <memchr+0xe8>
    8fcc:	2816923a 	slli	r11,r5,8
    8fd0:	2093883a 	add	r9,r4,r2
    8fd4:	22000084 	addi	r8,r4,2
    8fd8:	5957883a 	add	r11,r11,r5
    8fdc:	5816923a 	slli	r11,r11,8
    8fe0:	20c00044 	addi	r3,r4,1
    8fe4:	037fbff4 	movhi	r13,65279
    8fe8:	6b7fbfc4 	addi	r13,r13,-257
    8fec:	5957883a 	add	r11,r11,r5
    8ff0:	5816923a 	slli	r11,r11,8
    8ff4:	03202074 	movhi	r12,32897
    8ff8:	63202004 	addi	r12,r12,-32640
    8ffc:	101d883a 	mov	r14,r2
    9000:	5957883a 	add	r11,r11,r5
    9004:	21c00017 	ldw	r7,0(r4)
    9008:	31bfff04 	addi	r6,r6,-4
    900c:	1805883a 	mov	r2,r3
    9010:	3acef03a 	xor	r7,r7,r11
    9014:	3b55883a 	add	r10,r7,r13
    9018:	01ce303a 	nor	r7,zero,r7
    901c:	51ce703a 	and	r7,r10,r7
    9020:	3b0e703a 	and	r7,r7,r12
    9024:	38000a26 	beq	r7,zero,9050 <memchr+0x98>
    9028:	21c00003 	ldbu	r7,0(r4)
    902c:	39401e26 	beq	r7,r5,90a8 <memchr+0xf0>
    9030:	19c00003 	ldbu	r7,0(r3)
    9034:	39401926 	beq	r7,r5,909c <memchr+0xe4>
    9038:	41c00003 	ldbu	r7,0(r8)
    903c:	4005883a 	mov	r2,r8
    9040:	39401626 	beq	r7,r5,909c <memchr+0xe4>
    9044:	49c00003 	ldbu	r7,0(r9)
    9048:	4805883a 	mov	r2,r9
    904c:	39401326 	beq	r7,r5,909c <memchr+0xe4>
    9050:	21000104 	addi	r4,r4,4
    9054:	4a400104 	addi	r9,r9,4
    9058:	42000104 	addi	r8,r8,4
    905c:	18c00104 	addi	r3,r3,4
    9060:	71bfe836 	bltu	r14,r6,9004 <memchr+0x4c>
    9064:	2005883a 	mov	r2,r4
    9068:	30000a26 	beq	r6,zero,9094 <memchr+0xdc>
    906c:	10c00003 	ldbu	r3,0(r2)
    9070:	19400a26 	beq	r3,r5,909c <memchr+0xe4>
    9074:	10c00044 	addi	r3,r2,1
    9078:	118d883a 	add	r6,r2,r6
    907c:	00000306 	br	908c <memchr+0xd4>
    9080:	11000003 	ldbu	r4,0(r2)
    9084:	18c00044 	addi	r3,r3,1
    9088:	21400426 	beq	r4,r5,909c <memchr+0xe4>
    908c:	1805883a 	mov	r2,r3
    9090:	19bffb1e 	bne	r3,r6,9080 <memchr+0xc8>
    9094:	0005883a 	mov	r2,zero
    9098:	f800283a 	ret
    909c:	f800283a 	ret
    90a0:	2005883a 	mov	r2,r4
    90a4:	003ff106 	br	906c <memchr+0xb4>
    90a8:	2005883a 	mov	r2,r4
    90ac:	f800283a 	ret

000090b0 <memcpy>:
    90b0:	defffb04 	addi	sp,sp,-20
    90b4:	dc000015 	stw	r16,0(sp)
    90b8:	dfc00415 	stw	ra,16(sp)
    90bc:	dcc00315 	stw	r19,12(sp)
    90c0:	dc800215 	stw	r18,8(sp)
    90c4:	dc400115 	stw	r17,4(sp)
    90c8:	00c003c4 	movi	r3,15
    90cc:	2021883a 	mov	r16,r4
    90d0:	3005883a 	mov	r2,r6
    90d4:	1980032e 	bgeu	r3,r6,90e4 <memcpy+0x34>
    90d8:	2906b03a 	or	r3,r5,r4
    90dc:	18c000cc 	andi	r3,r3,3
    90e0:	18001026 	beq	r3,zero,9124 <memcpy+0x74>
    90e4:	8007883a 	mov	r3,r16
    90e8:	288f883a 	add	r7,r5,r2
    90ec:	10000526 	beq	r2,zero,9104 <memcpy+0x54>
    90f0:	29800003 	ldbu	r6,0(r5)
    90f4:	18c00044 	addi	r3,r3,1
    90f8:	29400044 	addi	r5,r5,1
    90fc:	19bfffc5 	stb	r6,-1(r3)
    9100:	29fffb1e 	bne	r5,r7,90f0 <memcpy+0x40>
    9104:	8005883a 	mov	r2,r16
    9108:	dfc00417 	ldw	ra,16(sp)
    910c:	dcc00317 	ldw	r19,12(sp)
    9110:	dc800217 	ldw	r18,8(sp)
    9114:	dc400117 	ldw	r17,4(sp)
    9118:	dc000017 	ldw	r16,0(sp)
    911c:	dec00504 	addi	sp,sp,20
    9120:	f800283a 	ret
    9124:	32bffc04 	addi	r10,r6,-16
    9128:	5014d13a 	srli	r10,r10,4
    912c:	20800404 	addi	r2,r4,16
    9130:	2007883a 	mov	r3,r4
    9134:	5008913a 	slli	r4,r10,4
    9138:	280f883a 	mov	r7,r5
    913c:	1105883a 	add	r2,r2,r4
    9140:	3a000017 	ldw	r8,0(r7)
    9144:	18c00404 	addi	r3,r3,16
    9148:	39c00404 	addi	r7,r7,16
    914c:	1a3ffc15 	stw	r8,-16(r3)
    9150:	3a3ffd17 	ldw	r8,-12(r7)
    9154:	1a3ffd15 	stw	r8,-12(r3)
    9158:	3a3ffe17 	ldw	r8,-8(r7)
    915c:	1a3ffe15 	stw	r8,-8(r3)
    9160:	3a3fff17 	ldw	r8,-4(r7)
    9164:	1a3fff15 	stw	r8,-4(r3)
    9168:	18bff51e 	bne	r3,r2,9140 <memcpy+0x90>
    916c:	52800044 	addi	r10,r10,1
    9170:	5014913a 	slli	r10,r10,4
    9174:	308003cc 	andi	r2,r6,15
    9178:	010000c4 	movi	r4,3
    917c:	8287883a 	add	r3,r16,r10
    9180:	2a95883a 	add	r10,r5,r10
    9184:	2080182e 	bgeu	r4,r2,91e8 <memcpy+0x138>
    9188:	147fff04 	addi	r17,r2,-4
    918c:	8808d0ba 	srli	r4,r17,2
    9190:	1a400104 	addi	r9,r3,4
    9194:	180d883a 	mov	r6,r3
    9198:	2105883a 	add	r2,r4,r4
    919c:	1085883a 	add	r2,r2,r2
    91a0:	4893883a 	add	r9,r9,r2
    91a4:	500f883a 	mov	r7,r10
    91a8:	3a000017 	ldw	r8,0(r7)
    91ac:	31800104 	addi	r6,r6,4
    91b0:	39c00104 	addi	r7,r7,4
    91b4:	323fff15 	stw	r8,-4(r6)
    91b8:	327ffb1e 	bne	r6,r9,91a8 <memcpy+0xf8>
    91bc:	20800044 	addi	r2,r4,1
    91c0:	1085883a 	add	r2,r2,r2
    91c4:	1085883a 	add	r2,r2,r2
    91c8:	017fff04 	movi	r5,-4
    91cc:	18a5883a 	add	r18,r3,r2
    91d0:	50a7883a 	add	r19,r10,r2
    91d4:	000ad480 	call	ad48 <__mulsi3>
    91d8:	1445883a 	add	r2,r2,r17
    91dc:	980b883a 	mov	r5,r19
    91e0:	9007883a 	mov	r3,r18
    91e4:	003fc006 	br	90e8 <memcpy+0x38>
    91e8:	500b883a 	mov	r5,r10
    91ec:	003fbe06 	br	90e8 <memcpy+0x38>

000091f0 <memmove>:
    91f0:	defffb04 	addi	sp,sp,-20
    91f4:	dc000015 	stw	r16,0(sp)
    91f8:	dfc00415 	stw	ra,16(sp)
    91fc:	dcc00315 	stw	r19,12(sp)
    9200:	dc800215 	stw	r18,8(sp)
    9204:	dc400115 	stw	r17,4(sp)
    9208:	2021883a 	mov	r16,r4
    920c:	300f883a 	mov	r7,r6
    9210:	2900122e 	bgeu	r5,r4,925c <memmove+0x6c>
    9214:	2987883a 	add	r3,r5,r6
    9218:	20c0102e 	bgeu	r4,r3,925c <memmove+0x6c>
    921c:	218b883a 	add	r5,r4,r6
    9220:	1989c83a 	sub	r4,r3,r6
    9224:	30000526 	beq	r6,zero,923c <memmove+0x4c>
    9228:	18ffffc4 	addi	r3,r3,-1
    922c:	18800003 	ldbu	r2,0(r3)
    9230:	297fffc4 	addi	r5,r5,-1
    9234:	28800005 	stb	r2,0(r5)
    9238:	193ffb1e 	bne	r3,r4,9228 <memmove+0x38>
    923c:	8005883a 	mov	r2,r16
    9240:	dfc00417 	ldw	ra,16(sp)
    9244:	dcc00317 	ldw	r19,12(sp)
    9248:	dc800217 	ldw	r18,8(sp)
    924c:	dc400117 	ldw	r17,4(sp)
    9250:	dc000017 	ldw	r16,0(sp)
    9254:	dec00504 	addi	sp,sp,20
    9258:	f800283a 	ret
    925c:	008003c4 	movi	r2,15
    9260:	1180422e 	bgeu	r2,r6,936c <memmove+0x17c>
    9264:	2c04b03a 	or	r2,r5,r16
    9268:	108000cc 	andi	r2,r2,3
    926c:	10003f1e 	bne	r2,zero,936c <memmove+0x17c>
    9270:	32bffc04 	addi	r10,r6,-16
    9274:	5014d13a 	srli	r10,r10,4
    9278:	81000404 	addi	r4,r16,16
    927c:	8007883a 	mov	r3,r16
    9280:	5004913a 	slli	r2,r10,4
    9284:	280f883a 	mov	r7,r5
    9288:	2089883a 	add	r4,r4,r2
    928c:	38800017 	ldw	r2,0(r7)
    9290:	18c00404 	addi	r3,r3,16
    9294:	39c00404 	addi	r7,r7,16
    9298:	18bffc15 	stw	r2,-16(r3)
    929c:	38bffd17 	ldw	r2,-12(r7)
    92a0:	18bffd15 	stw	r2,-12(r3)
    92a4:	38bffe17 	ldw	r2,-8(r7)
    92a8:	18bffe15 	stw	r2,-8(r3)
    92ac:	38bfff17 	ldw	r2,-4(r7)
    92b0:	18bfff15 	stw	r2,-4(r3)
    92b4:	193ff51e 	bne	r3,r4,928c <memmove+0x9c>
    92b8:	52800044 	addi	r10,r10,1
    92bc:	5014913a 	slli	r10,r10,4
    92c0:	31c003cc 	andi	r7,r6,15
    92c4:	008000c4 	movi	r2,3
    92c8:	8287883a 	add	r3,r16,r10
    92cc:	2a95883a 	add	r10,r5,r10
    92d0:	11c0282e 	bgeu	r2,r7,9374 <memmove+0x184>
    92d4:	3c7fff04 	addi	r17,r7,-4
    92d8:	8808d0ba 	srli	r4,r17,2
    92dc:	1a400104 	addi	r9,r3,4
    92e0:	180d883a 	mov	r6,r3
    92e4:	2105883a 	add	r2,r4,r4
    92e8:	1085883a 	add	r2,r2,r2
    92ec:	4893883a 	add	r9,r9,r2
    92f0:	5005883a 	mov	r2,r10
    92f4:	12000017 	ldw	r8,0(r2)
    92f8:	31800104 	addi	r6,r6,4
    92fc:	10800104 	addi	r2,r2,4
    9300:	323fff15 	stw	r8,-4(r6)
    9304:	327ffb1e 	bne	r6,r9,92f4 <memmove+0x104>
    9308:	20800044 	addi	r2,r4,1
    930c:	1085883a 	add	r2,r2,r2
    9310:	1085883a 	add	r2,r2,r2
    9314:	017fff04 	movi	r5,-4
    9318:	18a5883a 	add	r18,r3,r2
    931c:	50a7883a 	add	r19,r10,r2
    9320:	000ad480 	call	ad48 <__mulsi3>
    9324:	144f883a 	add	r7,r2,r17
    9328:	980b883a 	mov	r5,r19
    932c:	9007883a 	mov	r3,r18
    9330:	383fc226 	beq	r7,zero,923c <memmove+0x4c>
    9334:	19cf883a 	add	r7,r3,r7
    9338:	29800003 	ldbu	r6,0(r5)
    933c:	18c00044 	addi	r3,r3,1
    9340:	29400044 	addi	r5,r5,1
    9344:	19bfffc5 	stb	r6,-1(r3)
    9348:	19fffb1e 	bne	r3,r7,9338 <memmove+0x148>
    934c:	8005883a 	mov	r2,r16
    9350:	dfc00417 	ldw	ra,16(sp)
    9354:	dcc00317 	ldw	r19,12(sp)
    9358:	dc800217 	ldw	r18,8(sp)
    935c:	dc400117 	ldw	r17,4(sp)
    9360:	dc000017 	ldw	r16,0(sp)
    9364:	dec00504 	addi	sp,sp,20
    9368:	f800283a 	ret
    936c:	8007883a 	mov	r3,r16
    9370:	003fef06 	br	9330 <memmove+0x140>
    9374:	500b883a 	mov	r5,r10
    9378:	003fed06 	br	9330 <memmove+0x140>

0000937c <_realloc_r>:
    937c:	defff504 	addi	sp,sp,-44
    9380:	dd400615 	stw	r21,24(sp)
    9384:	dc800315 	stw	r18,12(sp)
    9388:	dc000115 	stw	r16,4(sp)
    938c:	dfc00a15 	stw	ra,40(sp)
    9390:	df000915 	stw	fp,36(sp)
    9394:	ddc00815 	stw	r23,32(sp)
    9398:	dd800715 	stw	r22,28(sp)
    939c:	dd000515 	stw	r20,20(sp)
    93a0:	dcc00415 	stw	r19,16(sp)
    93a4:	dc400215 	stw	r17,8(sp)
    93a8:	2821883a 	mov	r16,r5
    93ac:	202b883a 	mov	r21,r4
    93b0:	3025883a 	mov	r18,r6
    93b4:	28009626 	beq	r5,zero,9610 <_realloc_r+0x294>
    93b8:	000b3180 	call	b318 <__malloc_lock>
    93bc:	80bfff17 	ldw	r2,-4(r16)
    93c0:	04ffff04 	movi	r19,-4
    93c4:	90c002c4 	addi	r3,r18,11
    93c8:	01000584 	movi	r4,22
    93cc:	85bffe04 	addi	r22,r16,-8
    93d0:	14e6703a 	and	r19,r2,r19
    93d4:	20c0372e 	bgeu	r4,r3,94b4 <_realloc_r+0x138>
    93d8:	047ffe04 	movi	r17,-8
    93dc:	1c62703a 	and	r17,r3,r17
    93e0:	8807883a 	mov	r3,r17
    93e4:	88005a16 	blt	r17,zero,9550 <_realloc_r+0x1d4>
    93e8:	8c805936 	bltu	r17,r18,9550 <_realloc_r+0x1d4>
    93ec:	98c0340e 	bge	r19,r3,94c0 <_realloc_r+0x144>
    93f0:	07000074 	movhi	fp,1
    93f4:	e7315b04 	addi	fp,fp,-14996
    93f8:	e1400217 	ldw	r5,8(fp)
    93fc:	b4c9883a 	add	r4,r22,r19
    9400:	29009026 	beq	r5,r4,9644 <_realloc_r+0x2c8>
    9404:	21800117 	ldw	r6,4(r4)
    9408:	01ffff84 	movi	r7,-2
    940c:	31ce703a 	and	r7,r6,r7
    9410:	21cf883a 	add	r7,r4,r7
    9414:	39c00117 	ldw	r7,4(r7)
    9418:	39c0004c 	andi	r7,r7,1
    941c:	38004326 	beq	r7,zero,952c <_realloc_r+0x1b0>
    9420:	000d883a 	mov	r6,zero
    9424:	0009883a 	mov	r4,zero
    9428:	1080004c 	andi	r2,r2,1
    942c:	10005a1e 	bne	r2,zero,9598 <_realloc_r+0x21c>
    9430:	85fffe17 	ldw	r23,-8(r16)
    9434:	00bfff04 	movi	r2,-4
    9438:	b5efc83a 	sub	r23,r22,r23
    943c:	b9c00117 	ldw	r7,4(r23)
    9440:	388e703a 	and	r7,r7,r2
    9444:	3ccf883a 	add	r7,r7,r19
    9448:	20005226 	beq	r4,zero,9594 <_realloc_r+0x218>
    944c:	31e9883a 	add	r20,r6,r7
    9450:	2140c726 	beq	r4,r5,9770 <_realloc_r+0x3f4>
    9454:	a0c04f16 	blt	r20,r3,9594 <_realloc_r+0x218>
    9458:	20800317 	ldw	r2,12(r4)
    945c:	20c00217 	ldw	r3,8(r4)
    9460:	99bfff04 	addi	r6,r19,-4
    9464:	01000904 	movi	r4,36
    9468:	18800315 	stw	r2,12(r3)
    946c:	10c00215 	stw	r3,8(r2)
    9470:	b8c00217 	ldw	r3,8(r23)
    9474:	b8800317 	ldw	r2,12(r23)
    9478:	bc800204 	addi	r18,r23,8
    947c:	18800315 	stw	r2,12(r3)
    9480:	10c00215 	stw	r3,8(r2)
    9484:	2180ed36 	bltu	r4,r6,983c <_realloc_r+0x4c0>
    9488:	008004c4 	movi	r2,19
    948c:	11809b2e 	bgeu	r2,r6,96fc <_realloc_r+0x380>
    9490:	80800017 	ldw	r2,0(r16)
    9494:	b8800215 	stw	r2,8(r23)
    9498:	80800117 	ldw	r2,4(r16)
    949c:	b8800315 	stw	r2,12(r23)
    94a0:	008006c4 	movi	r2,27
    94a4:	1180f936 	bltu	r2,r6,988c <_realloc_r+0x510>
    94a8:	b8800404 	addi	r2,r23,16
    94ac:	80c00204 	addi	r3,r16,8
    94b0:	00009406 	br	9704 <_realloc_r+0x388>
    94b4:	00c00404 	movi	r3,16
    94b8:	1823883a 	mov	r17,r3
    94bc:	003fca06 	br	93e8 <_realloc_r+0x6c>
    94c0:	9829883a 	mov	r20,r19
    94c4:	a447c83a 	sub	r3,r20,r17
    94c8:	010003c4 	movi	r4,15
    94cc:	1080004c 	andi	r2,r2,1
    94d0:	20c02336 	bltu	r4,r3,9560 <_realloc_r+0x1e4>
    94d4:	1504b03a 	or	r2,r2,r20
    94d8:	b0800115 	stw	r2,4(r22)
    94dc:	b52d883a 	add	r22,r22,r20
    94e0:	b0800117 	ldw	r2,4(r22)
    94e4:	10800054 	ori	r2,r2,1
    94e8:	b0800115 	stw	r2,4(r22)
    94ec:	a809883a 	mov	r4,r21
    94f0:	000b3380 	call	b338 <__malloc_unlock>
    94f4:	8025883a 	mov	r18,r16
    94f8:	9005883a 	mov	r2,r18
    94fc:	dfc00a17 	ldw	ra,40(sp)
    9500:	df000917 	ldw	fp,36(sp)
    9504:	ddc00817 	ldw	r23,32(sp)
    9508:	dd800717 	ldw	r22,28(sp)
    950c:	dd400617 	ldw	r21,24(sp)
    9510:	dd000517 	ldw	r20,20(sp)
    9514:	dcc00417 	ldw	r19,16(sp)
    9518:	dc800317 	ldw	r18,12(sp)
    951c:	dc400217 	ldw	r17,8(sp)
    9520:	dc000117 	ldw	r16,4(sp)
    9524:	dec00b04 	addi	sp,sp,44
    9528:	f800283a 	ret
    952c:	01ffff04 	movi	r7,-4
    9530:	31cc703a 	and	r6,r6,r7
    9534:	34e9883a 	add	r20,r6,r19
    9538:	a0ffbb16 	blt	r20,r3,9428 <_realloc_r+0xac>
    953c:	20c00317 	ldw	r3,12(r4)
    9540:	21000217 	ldw	r4,8(r4)
    9544:	20c00315 	stw	r3,12(r4)
    9548:	19000215 	stw	r4,8(r3)
    954c:	003fdd06 	br	94c4 <_realloc_r+0x148>
    9550:	00800304 	movi	r2,12
    9554:	a8800015 	stw	r2,0(r21)
    9558:	0025883a 	mov	r18,zero
    955c:	003fe606 	br	94f8 <_realloc_r+0x17c>
    9560:	1444b03a 	or	r2,r2,r17
    9564:	b0800115 	stw	r2,4(r22)
    9568:	b44b883a 	add	r5,r22,r17
    956c:	18800054 	ori	r2,r3,1
    9570:	28800115 	stw	r2,4(r5)
    9574:	28c7883a 	add	r3,r5,r3
    9578:	18800117 	ldw	r2,4(r3)
    957c:	a809883a 	mov	r4,r21
    9580:	29400204 	addi	r5,r5,8
    9584:	10800054 	ori	r2,r2,1
    9588:	18800115 	stw	r2,4(r3)
    958c:	000a1900 	call	a190 <_free_r>
    9590:	003fd606 	br	94ec <_realloc_r+0x170>
    9594:	38c0330e 	bge	r7,r3,9664 <_realloc_r+0x2e8>
    9598:	900b883a 	mov	r5,r18
    959c:	a809883a 	mov	r4,r21
    95a0:	00088340 	call	8834 <_malloc_r>
    95a4:	1025883a 	mov	r18,r2
    95a8:	10001626 	beq	r2,zero,9604 <_realloc_r+0x288>
    95ac:	80bfff17 	ldw	r2,-4(r16)
    95b0:	00ffff84 	movi	r3,-2
    95b4:	913ffe04 	addi	r4,r18,-8
    95b8:	10c6703a 	and	r3,r2,r3
    95bc:	b0c7883a 	add	r3,r22,r3
    95c0:	20c09926 	beq	r4,r3,9828 <_realloc_r+0x4ac>
    95c4:	99bfff04 	addi	r6,r19,-4
    95c8:	00800904 	movi	r2,36
    95cc:	11806436 	bltu	r2,r6,9760 <_realloc_r+0x3e4>
    95d0:	00c004c4 	movi	r3,19
    95d4:	19804036 	bltu	r3,r6,96d8 <_realloc_r+0x35c>
    95d8:	9005883a 	mov	r2,r18
    95dc:	8007883a 	mov	r3,r16
    95e0:	19000017 	ldw	r4,0(r3)
    95e4:	11000015 	stw	r4,0(r2)
    95e8:	19000117 	ldw	r4,4(r3)
    95ec:	11000115 	stw	r4,4(r2)
    95f0:	18c00217 	ldw	r3,8(r3)
    95f4:	10c00215 	stw	r3,8(r2)
    95f8:	a809883a 	mov	r4,r21
    95fc:	800b883a 	mov	r5,r16
    9600:	000a1900 	call	a190 <_free_r>
    9604:	a809883a 	mov	r4,r21
    9608:	000b3380 	call	b338 <__malloc_unlock>
    960c:	003fba06 	br	94f8 <_realloc_r+0x17c>
    9610:	300b883a 	mov	r5,r6
    9614:	dfc00a17 	ldw	ra,40(sp)
    9618:	df000917 	ldw	fp,36(sp)
    961c:	ddc00817 	ldw	r23,32(sp)
    9620:	dd800717 	ldw	r22,28(sp)
    9624:	dd400617 	ldw	r21,24(sp)
    9628:	dd000517 	ldw	r20,20(sp)
    962c:	dcc00417 	ldw	r19,16(sp)
    9630:	dc800317 	ldw	r18,12(sp)
    9634:	dc400217 	ldw	r17,8(sp)
    9638:	dc000117 	ldw	r16,4(sp)
    963c:	dec00b04 	addi	sp,sp,44
    9640:	00088341 	jmpi	8834 <_malloc_r>
    9644:	29800117 	ldw	r6,4(r5)
    9648:	013fff04 	movi	r4,-4
    964c:	89c00404 	addi	r7,r17,16
    9650:	310c703a 	and	r6,r6,r4
    9654:	34c9883a 	add	r4,r6,r19
    9658:	21c0340e 	bge	r4,r7,972c <_realloc_r+0x3b0>
    965c:	2809883a 	mov	r4,r5
    9660:	003f7106 	br	9428 <_realloc_r+0xac>
    9664:	b8800317 	ldw	r2,12(r23)
    9668:	b8c00217 	ldw	r3,8(r23)
    966c:	99bfff04 	addi	r6,r19,-4
    9670:	01000904 	movi	r4,36
    9674:	18800315 	stw	r2,12(r3)
    9678:	10c00215 	stw	r3,8(r2)
    967c:	bc800204 	addi	r18,r23,8
    9680:	21807836 	bltu	r4,r6,9864 <_realloc_r+0x4e8>
    9684:	008004c4 	movi	r2,19
    9688:	1180732e 	bgeu	r2,r6,9858 <_realloc_r+0x4dc>
    968c:	80800017 	ldw	r2,0(r16)
    9690:	b8800215 	stw	r2,8(r23)
    9694:	80800117 	ldw	r2,4(r16)
    9698:	b8800315 	stw	r2,12(r23)
    969c:	008006c4 	movi	r2,27
    96a0:	11808936 	bltu	r2,r6,98c8 <_realloc_r+0x54c>
    96a4:	b8800404 	addi	r2,r23,16
    96a8:	80c00204 	addi	r3,r16,8
    96ac:	19000017 	ldw	r4,0(r3)
    96b0:	9021883a 	mov	r16,r18
    96b4:	3829883a 	mov	r20,r7
    96b8:	11000015 	stw	r4,0(r2)
    96bc:	19000117 	ldw	r4,4(r3)
    96c0:	b82d883a 	mov	r22,r23
    96c4:	11000115 	stw	r4,4(r2)
    96c8:	18c00217 	ldw	r3,8(r3)
    96cc:	10c00215 	stw	r3,8(r2)
    96d0:	b8800117 	ldw	r2,4(r23)
    96d4:	003f7b06 	br	94c4 <_realloc_r+0x148>
    96d8:	80c00017 	ldw	r3,0(r16)
    96dc:	90c00015 	stw	r3,0(r18)
    96e0:	80c00117 	ldw	r3,4(r16)
    96e4:	90c00115 	stw	r3,4(r18)
    96e8:	00c006c4 	movi	r3,27
    96ec:	19804636 	bltu	r3,r6,9808 <_realloc_r+0x48c>
    96f0:	90800204 	addi	r2,r18,8
    96f4:	80c00204 	addi	r3,r16,8
    96f8:	003fb906 	br	95e0 <_realloc_r+0x264>
    96fc:	9005883a 	mov	r2,r18
    9700:	8007883a 	mov	r3,r16
    9704:	19000017 	ldw	r4,0(r3)
    9708:	9021883a 	mov	r16,r18
    970c:	b82d883a 	mov	r22,r23
    9710:	11000015 	stw	r4,0(r2)
    9714:	19000117 	ldw	r4,4(r3)
    9718:	11000115 	stw	r4,4(r2)
    971c:	18c00217 	ldw	r3,8(r3)
    9720:	10c00215 	stw	r3,8(r2)
    9724:	b8800117 	ldw	r2,4(r23)
    9728:	003f6606 	br	94c4 <_realloc_r+0x148>
    972c:	2445c83a 	sub	r2,r4,r17
    9730:	b46d883a 	add	r22,r22,r17
    9734:	10800054 	ori	r2,r2,1
    9738:	b0800115 	stw	r2,4(r22)
    973c:	80bfff17 	ldw	r2,-4(r16)
    9740:	a809883a 	mov	r4,r21
    9744:	e5800215 	stw	r22,8(fp)
    9748:	1080004c 	andi	r2,r2,1
    974c:	88a2b03a 	or	r17,r17,r2
    9750:	847fff15 	stw	r17,-4(r16)
    9754:	000b3380 	call	b338 <__malloc_unlock>
    9758:	8025883a 	mov	r18,r16
    975c:	003f6606 	br	94f8 <_realloc_r+0x17c>
    9760:	9009883a 	mov	r4,r18
    9764:	800b883a 	mov	r5,r16
    9768:	00091f00 	call	91f0 <memmove>
    976c:	003fa206 	br	95f8 <_realloc_r+0x27c>
    9770:	88800404 	addi	r2,r17,16
    9774:	a0bf8716 	blt	r20,r2,9594 <_realloc_r+0x218>
    9778:	b8800317 	ldw	r2,12(r23)
    977c:	b8c00217 	ldw	r3,8(r23)
    9780:	99bfff04 	addi	r6,r19,-4
    9784:	01000904 	movi	r4,36
    9788:	18800315 	stw	r2,12(r3)
    978c:	10c00215 	stw	r3,8(r2)
    9790:	bc800204 	addi	r18,r23,8
    9794:	21806536 	bltu	r4,r6,992c <_realloc_r+0x5b0>
    9798:	008004c4 	movi	r2,19
    979c:	1180592e 	bgeu	r2,r6,9904 <_realloc_r+0x588>
    97a0:	80800017 	ldw	r2,0(r16)
    97a4:	b8800215 	stw	r2,8(r23)
    97a8:	80800117 	ldw	r2,4(r16)
    97ac:	b8800315 	stw	r2,12(r23)
    97b0:	008006c4 	movi	r2,27
    97b4:	11806136 	bltu	r2,r6,993c <_realloc_r+0x5c0>
    97b8:	b8800404 	addi	r2,r23,16
    97bc:	80c00204 	addi	r3,r16,8
    97c0:	19000017 	ldw	r4,0(r3)
    97c4:	11000015 	stw	r4,0(r2)
    97c8:	19000117 	ldw	r4,4(r3)
    97cc:	11000115 	stw	r4,4(r2)
    97d0:	18c00217 	ldw	r3,8(r3)
    97d4:	10c00215 	stw	r3,8(r2)
    97d8:	a447c83a 	sub	r3,r20,r17
    97dc:	bc45883a 	add	r2,r23,r17
    97e0:	18c00054 	ori	r3,r3,1
    97e4:	10c00115 	stw	r3,4(r2)
    97e8:	b8c00117 	ldw	r3,4(r23)
    97ec:	e0800215 	stw	r2,8(fp)
    97f0:	a809883a 	mov	r4,r21
    97f4:	1880004c 	andi	r2,r3,1
    97f8:	88a2b03a 	or	r17,r17,r2
    97fc:	bc400115 	stw	r17,4(r23)
    9800:	000b3380 	call	b338 <__malloc_unlock>
    9804:	003f3c06 	br	94f8 <_realloc_r+0x17c>
    9808:	80c00217 	ldw	r3,8(r16)
    980c:	90c00215 	stw	r3,8(r18)
    9810:	80c00317 	ldw	r3,12(r16)
    9814:	90c00315 	stw	r3,12(r18)
    9818:	30802426 	beq	r6,r2,98ac <_realloc_r+0x530>
    981c:	90800404 	addi	r2,r18,16
    9820:	80c00404 	addi	r3,r16,16
    9824:	003f6e06 	br	95e0 <_realloc_r+0x264>
    9828:	953fff17 	ldw	r20,-4(r18)
    982c:	00ffff04 	movi	r3,-4
    9830:	a0e8703a 	and	r20,r20,r3
    9834:	a4e9883a 	add	r20,r20,r19
    9838:	003f2206 	br	94c4 <_realloc_r+0x148>
    983c:	800b883a 	mov	r5,r16
    9840:	9009883a 	mov	r4,r18
    9844:	00091f00 	call	91f0 <memmove>
    9848:	9021883a 	mov	r16,r18
    984c:	b8800117 	ldw	r2,4(r23)
    9850:	b82d883a 	mov	r22,r23
    9854:	003f1b06 	br	94c4 <_realloc_r+0x148>
    9858:	9005883a 	mov	r2,r18
    985c:	8007883a 	mov	r3,r16
    9860:	003f9206 	br	96ac <_realloc_r+0x330>
    9864:	800b883a 	mov	r5,r16
    9868:	9009883a 	mov	r4,r18
    986c:	d9c00015 	stw	r7,0(sp)
    9870:	00091f00 	call	91f0 <memmove>
    9874:	d9c00017 	ldw	r7,0(sp)
    9878:	9021883a 	mov	r16,r18
    987c:	b8800117 	ldw	r2,4(r23)
    9880:	3829883a 	mov	r20,r7
    9884:	b82d883a 	mov	r22,r23
    9888:	003f0e06 	br	94c4 <_realloc_r+0x148>
    988c:	80800217 	ldw	r2,8(r16)
    9890:	b8800415 	stw	r2,16(r23)
    9894:	80800317 	ldw	r2,12(r16)
    9898:	b8800515 	stw	r2,20(r23)
    989c:	31001226 	beq	r6,r4,98e8 <_realloc_r+0x56c>
    98a0:	b8800604 	addi	r2,r23,24
    98a4:	80c00404 	addi	r3,r16,16
    98a8:	003f9606 	br	9704 <_realloc_r+0x388>
    98ac:	81000417 	ldw	r4,16(r16)
    98b0:	90800604 	addi	r2,r18,24
    98b4:	80c00604 	addi	r3,r16,24
    98b8:	91000415 	stw	r4,16(r18)
    98bc:	81000517 	ldw	r4,20(r16)
    98c0:	91000515 	stw	r4,20(r18)
    98c4:	003f4606 	br	95e0 <_realloc_r+0x264>
    98c8:	80800217 	ldw	r2,8(r16)
    98cc:	b8800415 	stw	r2,16(r23)
    98d0:	80800317 	ldw	r2,12(r16)
    98d4:	b8800515 	stw	r2,20(r23)
    98d8:	31000d26 	beq	r6,r4,9910 <_realloc_r+0x594>
    98dc:	b8800604 	addi	r2,r23,24
    98e0:	80c00404 	addi	r3,r16,16
    98e4:	003f7106 	br	96ac <_realloc_r+0x330>
    98e8:	81000417 	ldw	r4,16(r16)
    98ec:	b8800804 	addi	r2,r23,32
    98f0:	80c00604 	addi	r3,r16,24
    98f4:	b9000615 	stw	r4,24(r23)
    98f8:	81000517 	ldw	r4,20(r16)
    98fc:	b9000715 	stw	r4,28(r23)
    9900:	003f8006 	br	9704 <_realloc_r+0x388>
    9904:	9005883a 	mov	r2,r18
    9908:	8007883a 	mov	r3,r16
    990c:	003fac06 	br	97c0 <_realloc_r+0x444>
    9910:	81000417 	ldw	r4,16(r16)
    9914:	b8800804 	addi	r2,r23,32
    9918:	80c00604 	addi	r3,r16,24
    991c:	b9000615 	stw	r4,24(r23)
    9920:	81000517 	ldw	r4,20(r16)
    9924:	b9000715 	stw	r4,28(r23)
    9928:	003f6006 	br	96ac <_realloc_r+0x330>
    992c:	9009883a 	mov	r4,r18
    9930:	800b883a 	mov	r5,r16
    9934:	00091f00 	call	91f0 <memmove>
    9938:	003fa706 	br	97d8 <_realloc_r+0x45c>
    993c:	80800217 	ldw	r2,8(r16)
    9940:	b8800415 	stw	r2,16(r23)
    9944:	80800317 	ldw	r2,12(r16)
    9948:	b8800515 	stw	r2,20(r23)
    994c:	31000326 	beq	r6,r4,995c <_realloc_r+0x5e0>
    9950:	b8800604 	addi	r2,r23,24
    9954:	80c00404 	addi	r3,r16,16
    9958:	003f9906 	br	97c0 <_realloc_r+0x444>
    995c:	81000417 	ldw	r4,16(r16)
    9960:	b8800804 	addi	r2,r23,32
    9964:	80c00604 	addi	r3,r16,24
    9968:	b9000615 	stw	r4,24(r23)
    996c:	81000517 	ldw	r4,20(r16)
    9970:	b9000715 	stw	r4,28(r23)
    9974:	003f9206 	br	97c0 <_realloc_r+0x444>

00009978 <_sbrk_r>:
    9978:	defffd04 	addi	sp,sp,-12
    997c:	dc400115 	stw	r17,4(sp)
    9980:	dc000015 	stw	r16,0(sp)
    9984:	2023883a 	mov	r17,r4
    9988:	04000074 	movhi	r16,1
    998c:	84355204 	addi	r16,r16,-10936
    9990:	2809883a 	mov	r4,r5
    9994:	dfc00215 	stw	ra,8(sp)
    9998:	80000015 	stw	zero,0(r16)
    999c:	000b51c0 	call	b51c <sbrk>
    99a0:	00ffffc4 	movi	r3,-1
    99a4:	10c00526 	beq	r2,r3,99bc <_sbrk_r+0x44>
    99a8:	dfc00217 	ldw	ra,8(sp)
    99ac:	dc400117 	ldw	r17,4(sp)
    99b0:	dc000017 	ldw	r16,0(sp)
    99b4:	dec00304 	addi	sp,sp,12
    99b8:	f800283a 	ret
    99bc:	80c00017 	ldw	r3,0(r16)
    99c0:	183ff926 	beq	r3,zero,99a8 <_sbrk_r+0x30>
    99c4:	88c00015 	stw	r3,0(r17)
    99c8:	dfc00217 	ldw	ra,8(sp)
    99cc:	dc400117 	ldw	r17,4(sp)
    99d0:	dc000017 	ldw	r16,0(sp)
    99d4:	dec00304 	addi	sp,sp,12
    99d8:	f800283a 	ret

000099dc <__swsetup_r>:
    99dc:	00800074 	movhi	r2,1
    99e0:	10b2c804 	addi	r2,r2,-13536
    99e4:	10800017 	ldw	r2,0(r2)
    99e8:	defffd04 	addi	sp,sp,-12
    99ec:	dc400115 	stw	r17,4(sp)
    99f0:	dc000015 	stw	r16,0(sp)
    99f4:	dfc00215 	stw	ra,8(sp)
    99f8:	2023883a 	mov	r17,r4
    99fc:	2821883a 	mov	r16,r5
    9a00:	10000226 	beq	r2,zero,9a0c <__swsetup_r+0x30>
    9a04:	10c00e17 	ldw	r3,56(r2)
    9a08:	18003d26 	beq	r3,zero,9b00 <__swsetup_r+0x124>
    9a0c:	8080030b 	ldhu	r2,12(r16)
    9a10:	10c0020c 	andi	r3,r2,8
    9a14:	18ffffcc 	andi	r3,r3,65535
    9a18:	18e0001c 	xori	r3,r3,32768
    9a1c:	18e00004 	addi	r3,r3,-32768
    9a20:	18001226 	beq	r3,zero,9a6c <__swsetup_r+0x90>
    9a24:	80c00417 	ldw	r3,16(r16)
    9a28:	18001f26 	beq	r3,zero,9aa8 <__swsetup_r+0xcc>
    9a2c:	1100004c 	andi	r4,r2,1
    9a30:	2000261e 	bne	r4,zero,9acc <__swsetup_r+0xf0>
    9a34:	1080008c 	andi	r2,r2,2
    9a38:	10bfffcc 	andi	r2,r2,65535
    9a3c:	10a0001c 	xori	r2,r2,32768
    9a40:	10a00004 	addi	r2,r2,-32768
    9a44:	1000311e 	bne	r2,zero,9b0c <__swsetup_r+0x130>
    9a48:	80800517 	ldw	r2,20(r16)
    9a4c:	80800215 	stw	r2,8(r16)
    9a50:	18002326 	beq	r3,zero,9ae0 <__swsetup_r+0x104>
    9a54:	0005883a 	mov	r2,zero
    9a58:	dfc00217 	ldw	ra,8(sp)
    9a5c:	dc400117 	ldw	r17,4(sp)
    9a60:	dc000017 	ldw	r16,0(sp)
    9a64:	dec00304 	addi	sp,sp,12
    9a68:	f800283a 	ret
    9a6c:	10c0040c 	andi	r3,r2,16
    9a70:	18ffffcc 	andi	r3,r3,65535
    9a74:	18e0001c 	xori	r3,r3,32768
    9a78:	18e00004 	addi	r3,r3,-32768
    9a7c:	18001e26 	beq	r3,zero,9af8 <__swsetup_r+0x11c>
    9a80:	10c0010c 	andi	r3,r2,4
    9a84:	18ffffcc 	andi	r3,r3,65535
    9a88:	18e0001c 	xori	r3,r3,32768
    9a8c:	18e00004 	addi	r3,r3,-32768
    9a90:	1800211e 	bne	r3,zero,9b18 <__swsetup_r+0x13c>
    9a94:	80c00417 	ldw	r3,16(r16)
    9a98:	11400214 	ori	r5,r2,8
    9a9c:	8140030d 	sth	r5,12(r16)
    9aa0:	2805883a 	mov	r2,r5
    9aa4:	183fe11e 	bne	r3,zero,9a2c <__swsetup_r+0x50>
    9aa8:	1140a00c 	andi	r5,r2,640
    9aac:	01008004 	movi	r4,512
    9ab0:	293fde26 	beq	r5,r4,9a2c <__swsetup_r+0x50>
    9ab4:	8809883a 	mov	r4,r17
    9ab8:	800b883a 	mov	r5,r16
    9abc:	000a5c00 	call	a5c0 <__smakebuf_r>
    9ac0:	8080030b 	ldhu	r2,12(r16)
    9ac4:	80c00417 	ldw	r3,16(r16)
    9ac8:	003fd806 	br	9a2c <__swsetup_r+0x50>
    9acc:	80800517 	ldw	r2,20(r16)
    9ad0:	80000215 	stw	zero,8(r16)
    9ad4:	0085c83a 	sub	r2,zero,r2
    9ad8:	80800615 	stw	r2,24(r16)
    9adc:	183fdd1e 	bne	r3,zero,9a54 <__swsetup_r+0x78>
    9ae0:	8080030b 	ldhu	r2,12(r16)
    9ae4:	1080200c 	andi	r2,r2,128
    9ae8:	10bfffcc 	andi	r2,r2,65535
    9aec:	10a0001c 	xori	r2,r2,32768
    9af0:	10a00004 	addi	r2,r2,-32768
    9af4:	103fd826 	beq	r2,zero,9a58 <__swsetup_r+0x7c>
    9af8:	00bfffc4 	movi	r2,-1
    9afc:	003fd606 	br	9a58 <__swsetup_r+0x7c>
    9b00:	1009883a 	mov	r4,r2
    9b04:	0009e0c0 	call	9e0c <__sinit>
    9b08:	003fc006 	br	9a0c <__swsetup_r+0x30>
    9b0c:	0005883a 	mov	r2,zero
    9b10:	80800215 	stw	r2,8(r16)
    9b14:	003fce06 	br	9a50 <__swsetup_r+0x74>
    9b18:	81400c17 	ldw	r5,48(r16)
    9b1c:	28000626 	beq	r5,zero,9b38 <__swsetup_r+0x15c>
    9b20:	80c01004 	addi	r3,r16,64
    9b24:	28c00326 	beq	r5,r3,9b34 <__swsetup_r+0x158>
    9b28:	8809883a 	mov	r4,r17
    9b2c:	000a1900 	call	a190 <_free_r>
    9b30:	8080030b 	ldhu	r2,12(r16)
    9b34:	80000c15 	stw	zero,48(r16)
    9b38:	80c00417 	ldw	r3,16(r16)
    9b3c:	013ff6c4 	movi	r4,-37
    9b40:	2084703a 	and	r2,r4,r2
    9b44:	80000115 	stw	zero,4(r16)
    9b48:	80c00015 	stw	r3,0(r16)
    9b4c:	003fd206 	br	9a98 <__swsetup_r+0xbc>

00009b50 <_fflush_r>:
    9b50:	defffb04 	addi	sp,sp,-20
    9b54:	dcc00315 	stw	r19,12(sp)
    9b58:	dc400115 	stw	r17,4(sp)
    9b5c:	dfc00415 	stw	ra,16(sp)
    9b60:	dc800215 	stw	r18,8(sp)
    9b64:	dc000015 	stw	r16,0(sp)
    9b68:	2027883a 	mov	r19,r4
    9b6c:	2823883a 	mov	r17,r5
    9b70:	20000226 	beq	r4,zero,9b7c <_fflush_r+0x2c>
    9b74:	20800e17 	ldw	r2,56(r4)
    9b78:	10005726 	beq	r2,zero,9cd8 <_fflush_r+0x188>
    9b7c:	8880030b 	ldhu	r2,12(r17)
    9b80:	10c0020c 	andi	r3,r2,8
    9b84:	18ffffcc 	andi	r3,r3,65535
    9b88:	18e0001c 	xori	r3,r3,32768
    9b8c:	18e00004 	addi	r3,r3,-32768
    9b90:	1800311e 	bne	r3,zero,9c58 <_fflush_r+0x108>
    9b94:	89000117 	ldw	r4,4(r17)
    9b98:	10c20014 	ori	r3,r2,2048
    9b9c:	88c0030d 	sth	r3,12(r17)
    9ba0:	180b883a 	mov	r5,r3
    9ba4:	0100520e 	bge	zero,r4,9cf0 <_fflush_r+0x1a0>
    9ba8:	88c00a17 	ldw	r3,40(r17)
    9bac:	18002226 	beq	r3,zero,9c38 <_fflush_r+0xe8>
    9bb0:	1084000c 	andi	r2,r2,4096
    9bb4:	10bfffcc 	andi	r2,r2,65535
    9bb8:	10a0001c 	xori	r2,r2,32768
    9bbc:	10a00004 	addi	r2,r2,-32768
    9bc0:	10004e26 	beq	r2,zero,9cfc <_fflush_r+0x1ac>
    9bc4:	8c001417 	ldw	r16,80(r17)
    9bc8:	2940010c 	andi	r5,r5,4
    9bcc:	297fffcc 	andi	r5,r5,65535
    9bd0:	2960001c 	xori	r5,r5,32768
    9bd4:	29600004 	addi	r5,r5,-32768
    9bd8:	28000626 	beq	r5,zero,9bf4 <_fflush_r+0xa4>
    9bdc:	89000117 	ldw	r4,4(r17)
    9be0:	88800c17 	ldw	r2,48(r17)
    9be4:	8121c83a 	sub	r16,r16,r4
    9be8:	10000226 	beq	r2,zero,9bf4 <_fflush_r+0xa4>
    9bec:	88800f17 	ldw	r2,60(r17)
    9bf0:	80a1c83a 	sub	r16,r16,r2
    9bf4:	89400717 	ldw	r5,28(r17)
    9bf8:	9809883a 	mov	r4,r19
    9bfc:	800d883a 	mov	r6,r16
    9c00:	000f883a 	mov	r7,zero
    9c04:	183ee83a 	callr	r3
    9c08:	8080281e 	bne	r16,r2,9cac <_fflush_r+0x15c>
    9c0c:	8880030b 	ldhu	r2,12(r17)
    9c10:	88c00417 	ldw	r3,16(r17)
    9c14:	88000115 	stw	zero,4(r17)
    9c18:	113dffcc 	andi	r4,r2,63487
    9c1c:	1084000c 	andi	r2,r2,4096
    9c20:	10bfffcc 	andi	r2,r2,65535
    9c24:	10a0001c 	xori	r2,r2,32768
    9c28:	8900030d 	sth	r4,12(r17)
    9c2c:	88c00015 	stw	r3,0(r17)
    9c30:	10a00004 	addi	r2,r2,-32768
    9c34:	10002c1e 	bne	r2,zero,9ce8 <_fflush_r+0x198>
    9c38:	0005883a 	mov	r2,zero
    9c3c:	dfc00417 	ldw	ra,16(sp)
    9c40:	dcc00317 	ldw	r19,12(sp)
    9c44:	dc800217 	ldw	r18,8(sp)
    9c48:	dc400117 	ldw	r17,4(sp)
    9c4c:	dc000017 	ldw	r16,0(sp)
    9c50:	dec00504 	addi	sp,sp,20
    9c54:	f800283a 	ret
    9c58:	8c800417 	ldw	r18,16(r17)
    9c5c:	903ff626 	beq	r18,zero,9c38 <_fflush_r+0xe8>
    9c60:	8c000017 	ldw	r16,0(r17)
    9c64:	108000cc 	andi	r2,r2,3
    9c68:	8c800015 	stw	r18,0(r17)
    9c6c:	84a1c83a 	sub	r16,r16,r18
    9c70:	10001b1e 	bne	r2,zero,9ce0 <_fflush_r+0x190>
    9c74:	88800517 	ldw	r2,20(r17)
    9c78:	88800215 	stw	r2,8(r17)
    9c7c:	04000316 	blt	zero,r16,9c8c <_fflush_r+0x13c>
    9c80:	003fed06 	br	9c38 <_fflush_r+0xe8>
    9c84:	90a5883a 	add	r18,r18,r2
    9c88:	043feb0e 	bge	zero,r16,9c38 <_fflush_r+0xe8>
    9c8c:	88800917 	ldw	r2,36(r17)
    9c90:	89400717 	ldw	r5,28(r17)
    9c94:	800f883a 	mov	r7,r16
    9c98:	900d883a 	mov	r6,r18
    9c9c:	9809883a 	mov	r4,r19
    9ca0:	103ee83a 	callr	r2
    9ca4:	80a1c83a 	sub	r16,r16,r2
    9ca8:	00bff616 	blt	zero,r2,9c84 <_fflush_r+0x134>
    9cac:	88c0030b 	ldhu	r3,12(r17)
    9cb0:	00bfffc4 	movi	r2,-1
    9cb4:	18c01014 	ori	r3,r3,64
    9cb8:	88c0030d 	sth	r3,12(r17)
    9cbc:	dfc00417 	ldw	ra,16(sp)
    9cc0:	dcc00317 	ldw	r19,12(sp)
    9cc4:	dc800217 	ldw	r18,8(sp)
    9cc8:	dc400117 	ldw	r17,4(sp)
    9ccc:	dc000017 	ldw	r16,0(sp)
    9cd0:	dec00504 	addi	sp,sp,20
    9cd4:	f800283a 	ret
    9cd8:	0009e0c0 	call	9e0c <__sinit>
    9cdc:	003fa706 	br	9b7c <_fflush_r+0x2c>
    9ce0:	0005883a 	mov	r2,zero
    9ce4:	003fe406 	br	9c78 <_fflush_r+0x128>
    9ce8:	8c001415 	stw	r16,80(r17)
    9cec:	003fd206 	br	9c38 <_fflush_r+0xe8>
    9cf0:	88c00f17 	ldw	r3,60(r17)
    9cf4:	00ffac16 	blt	zero,r3,9ba8 <_fflush_r+0x58>
    9cf8:	003fcf06 	br	9c38 <_fflush_r+0xe8>
    9cfc:	89400717 	ldw	r5,28(r17)
    9d00:	9809883a 	mov	r4,r19
    9d04:	000d883a 	mov	r6,zero
    9d08:	01c00044 	movi	r7,1
    9d0c:	183ee83a 	callr	r3
    9d10:	1021883a 	mov	r16,r2
    9d14:	00bfffc4 	movi	r2,-1
    9d18:	80800326 	beq	r16,r2,9d28 <_fflush_r+0x1d8>
    9d1c:	8940030b 	ldhu	r5,12(r17)
    9d20:	88c00a17 	ldw	r3,40(r17)
    9d24:	003fa806 	br	9bc8 <_fflush_r+0x78>
    9d28:	98c00017 	ldw	r3,0(r19)
    9d2c:	00800744 	movi	r2,29
    9d30:	18bfde1e 	bne	r3,r2,9cac <_fflush_r+0x15c>
    9d34:	003fc006 	br	9c38 <_fflush_r+0xe8>

00009d38 <fflush>:
    9d38:	200b883a 	mov	r5,r4
    9d3c:	20000426 	beq	r4,zero,9d50 <fflush+0x18>
    9d40:	00800074 	movhi	r2,1
    9d44:	10b2c804 	addi	r2,r2,-13536
    9d48:	11000017 	ldw	r4,0(r2)
    9d4c:	0009b501 	jmpi	9b50 <_fflush_r>
    9d50:	00800074 	movhi	r2,1
    9d54:	10b2c704 	addi	r2,r2,-13540
    9d58:	11000017 	ldw	r4,0(r2)
    9d5c:	01400074 	movhi	r5,1
    9d60:	2966d404 	addi	r5,r5,-25776
    9d64:	000a5081 	jmpi	a508 <_fwalk_reent>

00009d68 <__fp_lock>:
    9d68:	0005883a 	mov	r2,zero
    9d6c:	f800283a 	ret

00009d70 <__fp_unlock>:
    9d70:	0005883a 	mov	r2,zero
    9d74:	f800283a 	ret

00009d78 <_cleanup_r>:
    9d78:	01400074 	movhi	r5,1
    9d7c:	296ae404 	addi	r5,r5,-21616
    9d80:	000a4601 	jmpi	a460 <_fwalk>

00009d84 <__sfmoreglue>:
    9d84:	defffc04 	addi	sp,sp,-16
    9d88:	dc800215 	stw	r18,8(sp)
    9d8c:	2825883a 	mov	r18,r5
    9d90:	dc000015 	stw	r16,0(sp)
    9d94:	01401704 	movi	r5,92
    9d98:	2021883a 	mov	r16,r4
    9d9c:	9009883a 	mov	r4,r18
    9da0:	dfc00315 	stw	ra,12(sp)
    9da4:	dc400115 	stw	r17,4(sp)
    9da8:	000ad480 	call	ad48 <__mulsi3>
    9dac:	8009883a 	mov	r4,r16
    9db0:	11400304 	addi	r5,r2,12
    9db4:	1023883a 	mov	r17,r2
    9db8:	00088340 	call	8834 <_malloc_r>
    9dbc:	1021883a 	mov	r16,r2
    9dc0:	10000726 	beq	r2,zero,9de0 <__sfmoreglue+0x5c>
    9dc4:	11000304 	addi	r4,r2,12
    9dc8:	10000015 	stw	zero,0(r2)
    9dcc:	14800115 	stw	r18,4(r2)
    9dd0:	11000215 	stw	r4,8(r2)
    9dd4:	000b883a 	mov	r5,zero
    9dd8:	880d883a 	mov	r6,r17
    9ddc:	000a7680 	call	a768 <memset>
    9de0:	8005883a 	mov	r2,r16
    9de4:	dfc00317 	ldw	ra,12(sp)
    9de8:	dc800217 	ldw	r18,8(sp)
    9dec:	dc400117 	ldw	r17,4(sp)
    9df0:	dc000017 	ldw	r16,0(sp)
    9df4:	dec00404 	addi	sp,sp,16
    9df8:	f800283a 	ret

00009dfc <_cleanup>:
    9dfc:	00800074 	movhi	r2,1
    9e00:	10b2c704 	addi	r2,r2,-13540
    9e04:	11000017 	ldw	r4,0(r2)
    9e08:	0009d781 	jmpi	9d78 <_cleanup_r>

00009e0c <__sinit>:
    9e0c:	20800e17 	ldw	r2,56(r4)
    9e10:	1000401e 	bne	r2,zero,9f14 <__sinit+0x108>
    9e14:	21400117 	ldw	r5,4(r4)
    9e18:	01800074 	movhi	r6,1
    9e1c:	31a75e04 	addi	r6,r6,-25224
    9e20:	20c00217 	ldw	r3,8(r4)
    9e24:	21800f15 	stw	r6,60(r4)
    9e28:	2080bb04 	addi	r2,r4,748
    9e2c:	02400044 	movi	r9,1
    9e30:	018000c4 	movi	r6,3
    9e34:	2180b915 	stw	r6,740(r4)
    9e38:	2080ba15 	stw	r2,744(r4)
    9e3c:	22400e15 	stw	r9,56(r4)
    9e40:	20800317 	ldw	r2,12(r4)
    9e44:	2000b815 	stw	zero,736(r4)
    9e48:	02000074 	movhi	r8,1
    9e4c:	422a1104 	addi	r8,r8,-22460
    9e50:	01c00074 	movhi	r7,1
    9e54:	39ea2604 	addi	r7,r7,-22376
    9e58:	01800074 	movhi	r6,1
    9e5c:	31aa4804 	addi	r6,r6,-22240
    9e60:	01000074 	movhi	r4,1
    9e64:	212a5f04 	addi	r4,r4,-22148
    9e68:	02800104 	movi	r10,4
    9e6c:	28000015 	stw	zero,0(r5)
    9e70:	28000115 	stw	zero,4(r5)
    9e74:	28000215 	stw	zero,8(r5)
    9e78:	2a80030d 	sth	r10,12(r5)
    9e7c:	2800038d 	sth	zero,14(r5)
    9e80:	28000415 	stw	zero,16(r5)
    9e84:	28000515 	stw	zero,20(r5)
    9e88:	28000615 	stw	zero,24(r5)
    9e8c:	29400715 	stw	r5,28(r5)
    9e90:	2a000815 	stw	r8,32(r5)
    9e94:	29c00915 	stw	r7,36(r5)
    9e98:	29800a15 	stw	r6,40(r5)
    9e9c:	29000b15 	stw	r4,44(r5)
    9ea0:	01400284 	movi	r5,10
    9ea4:	18000015 	stw	zero,0(r3)
    9ea8:	18000115 	stw	zero,4(r3)
    9eac:	18000215 	stw	zero,8(r3)
    9eb0:	1940030d 	sth	r5,12(r3)
    9eb4:	1a40038d 	sth	r9,14(r3)
    9eb8:	18000415 	stw	zero,16(r3)
    9ebc:	18000515 	stw	zero,20(r3)
    9ec0:	18000615 	stw	zero,24(r3)
    9ec4:	18c00715 	stw	r3,28(r3)
    9ec8:	1a000815 	stw	r8,32(r3)
    9ecc:	19c00915 	stw	r7,36(r3)
    9ed0:	19800a15 	stw	r6,40(r3)
    9ed4:	19000b15 	stw	r4,44(r3)
    9ed8:	00c00484 	movi	r3,18
    9edc:	10c0030d 	sth	r3,12(r2)
    9ee0:	00c00084 	movi	r3,2
    9ee4:	10000015 	stw	zero,0(r2)
    9ee8:	10000115 	stw	zero,4(r2)
    9eec:	10000215 	stw	zero,8(r2)
    9ef0:	10c0038d 	sth	r3,14(r2)
    9ef4:	10000415 	stw	zero,16(r2)
    9ef8:	10000515 	stw	zero,20(r2)
    9efc:	10000615 	stw	zero,24(r2)
    9f00:	10800715 	stw	r2,28(r2)
    9f04:	12000815 	stw	r8,32(r2)
    9f08:	11c00915 	stw	r7,36(r2)
    9f0c:	11800a15 	stw	r6,40(r2)
    9f10:	11000b15 	stw	r4,44(r2)
    9f14:	f800283a 	ret

00009f18 <__sfp>:
    9f18:	defffc04 	addi	sp,sp,-16
    9f1c:	00800074 	movhi	r2,1
    9f20:	10b2c704 	addi	r2,r2,-13540
    9f24:	dc400115 	stw	r17,4(sp)
    9f28:	14400017 	ldw	r17,0(r2)
    9f2c:	dc800215 	stw	r18,8(sp)
    9f30:	dfc00315 	stw	ra,12(sp)
    9f34:	88800e17 	ldw	r2,56(r17)
    9f38:	dc000015 	stw	r16,0(sp)
    9f3c:	2025883a 	mov	r18,r4
    9f40:	10002826 	beq	r2,zero,9fe4 <__sfp+0xcc>
    9f44:	8c40b804 	addi	r17,r17,736
    9f48:	043fffc4 	movi	r16,-1
    9f4c:	89400117 	ldw	r5,4(r17)
    9f50:	88800217 	ldw	r2,8(r17)
    9f54:	297fffc4 	addi	r5,r5,-1
    9f58:	28000a16 	blt	r5,zero,9f84 <__sfp+0x6c>
    9f5c:	10c0030f 	ldh	r3,12(r2)
    9f60:	18000c26 	beq	r3,zero,9f94 <__sfp+0x7c>
    9f64:	10c01a04 	addi	r3,r2,104
    9f68:	00000206 	br	9f74 <__sfp+0x5c>
    9f6c:	19bfe90f 	ldh	r6,-92(r3)
    9f70:	30000826 	beq	r6,zero,9f94 <__sfp+0x7c>
    9f74:	297fffc4 	addi	r5,r5,-1
    9f78:	18bffd04 	addi	r2,r3,-12
    9f7c:	18c01704 	addi	r3,r3,92
    9f80:	2c3ffa1e 	bne	r5,r16,9f6c <__sfp+0x54>
    9f84:	88800017 	ldw	r2,0(r17)
    9f88:	10001926 	beq	r2,zero,9ff0 <__sfp+0xd8>
    9f8c:	1023883a 	mov	r17,r2
    9f90:	003fee06 	br	9f4c <__sfp+0x34>
    9f94:	00ffffc4 	movi	r3,-1
    9f98:	10c0038d 	sth	r3,14(r2)
    9f9c:	00c00044 	movi	r3,1
    9fa0:	10c0030d 	sth	r3,12(r2)
    9fa4:	10000015 	stw	zero,0(r2)
    9fa8:	10000215 	stw	zero,8(r2)
    9fac:	10000115 	stw	zero,4(r2)
    9fb0:	10000415 	stw	zero,16(r2)
    9fb4:	10000515 	stw	zero,20(r2)
    9fb8:	10000615 	stw	zero,24(r2)
    9fbc:	10000c15 	stw	zero,48(r2)
    9fc0:	10000d15 	stw	zero,52(r2)
    9fc4:	10001115 	stw	zero,68(r2)
    9fc8:	10001215 	stw	zero,72(r2)
    9fcc:	dfc00317 	ldw	ra,12(sp)
    9fd0:	dc800217 	ldw	r18,8(sp)
    9fd4:	dc400117 	ldw	r17,4(sp)
    9fd8:	dc000017 	ldw	r16,0(sp)
    9fdc:	dec00404 	addi	sp,sp,16
    9fe0:	f800283a 	ret
    9fe4:	8809883a 	mov	r4,r17
    9fe8:	0009e0c0 	call	9e0c <__sinit>
    9fec:	003fd506 	br	9f44 <__sfp+0x2c>
    9ff0:	9009883a 	mov	r4,r18
    9ff4:	01400104 	movi	r5,4
    9ff8:	0009d840 	call	9d84 <__sfmoreglue>
    9ffc:	88800015 	stw	r2,0(r17)
    a000:	103fe21e 	bne	r2,zero,9f8c <__sfp+0x74>
    a004:	00800304 	movi	r2,12
    a008:	90800015 	stw	r2,0(r18)
    a00c:	0005883a 	mov	r2,zero
    a010:	003fee06 	br	9fcc <__sfp+0xb4>

0000a014 <__sfp_lock_acquire>:
    a014:	f800283a 	ret

0000a018 <__sfp_lock_release>:
    a018:	f800283a 	ret

0000a01c <__sinit_lock_acquire>:
    a01c:	f800283a 	ret

0000a020 <__sinit_lock_release>:
    a020:	f800283a 	ret

0000a024 <__fp_lock_all>:
    a024:	00800074 	movhi	r2,1
    a028:	10b2c804 	addi	r2,r2,-13536
    a02c:	11000017 	ldw	r4,0(r2)
    a030:	01400074 	movhi	r5,1
    a034:	29675a04 	addi	r5,r5,-25240
    a038:	000a4601 	jmpi	a460 <_fwalk>

0000a03c <__fp_unlock_all>:
    a03c:	00800074 	movhi	r2,1
    a040:	10b2c804 	addi	r2,r2,-13536
    a044:	11000017 	ldw	r4,0(r2)
    a048:	01400074 	movhi	r5,1
    a04c:	29675c04 	addi	r5,r5,-25232
    a050:	000a4601 	jmpi	a460 <_fwalk>

0000a054 <_malloc_trim_r>:
    a054:	defffb04 	addi	sp,sp,-20
    a058:	dcc00315 	stw	r19,12(sp)
    a05c:	dc800215 	stw	r18,8(sp)
    a060:	dc400115 	stw	r17,4(sp)
    a064:	dc000015 	stw	r16,0(sp)
    a068:	2827883a 	mov	r19,r5
    a06c:	dfc00415 	stw	ra,16(sp)
    a070:	04400074 	movhi	r17,1
    a074:	8c715b04 	addi	r17,r17,-14996
    a078:	2021883a 	mov	r16,r4
    a07c:	000b3180 	call	b318 <__malloc_lock>
    a080:	88800217 	ldw	r2,8(r17)
    a084:	14800117 	ldw	r18,4(r2)
    a088:	00bfff04 	movi	r2,-4
    a08c:	90a4703a 	and	r18,r18,r2
    a090:	9083fbc4 	addi	r2,r18,4079
    a094:	14e7c83a 	sub	r19,r2,r19
    a098:	9826d33a 	srli	r19,r19,12
    a09c:	0083ffc4 	movi	r2,4095
    a0a0:	9cffffc4 	addi	r19,r19,-1
    a0a4:	9826933a 	slli	r19,r19,12
    a0a8:	14c0060e 	bge	r2,r19,a0c4 <_malloc_trim_r+0x70>
    a0ac:	8009883a 	mov	r4,r16
    a0b0:	000b883a 	mov	r5,zero
    a0b4:	00099780 	call	9978 <_sbrk_r>
    a0b8:	88c00217 	ldw	r3,8(r17)
    a0bc:	1c87883a 	add	r3,r3,r18
    a0c0:	10c00a26 	beq	r2,r3,a0ec <_malloc_trim_r+0x98>
    a0c4:	8009883a 	mov	r4,r16
    a0c8:	000b3380 	call	b338 <__malloc_unlock>
    a0cc:	0005883a 	mov	r2,zero
    a0d0:	dfc00417 	ldw	ra,16(sp)
    a0d4:	dcc00317 	ldw	r19,12(sp)
    a0d8:	dc800217 	ldw	r18,8(sp)
    a0dc:	dc400117 	ldw	r17,4(sp)
    a0e0:	dc000017 	ldw	r16,0(sp)
    a0e4:	dec00504 	addi	sp,sp,20
    a0e8:	f800283a 	ret
    a0ec:	8009883a 	mov	r4,r16
    a0f0:	04cbc83a 	sub	r5,zero,r19
    a0f4:	00099780 	call	9978 <_sbrk_r>
    a0f8:	00ffffc4 	movi	r3,-1
    a0fc:	10c01326 	beq	r2,r3,a14c <_malloc_trim_r+0xf8>
    a100:	00800074 	movhi	r2,1
    a104:	10b55904 	addi	r2,r2,-10908
    a108:	11000017 	ldw	r4,0(r2)
    a10c:	88c00217 	ldw	r3,8(r17)
    a110:	94e5c83a 	sub	r18,r18,r19
    a114:	94800054 	ori	r18,r18,1
    a118:	24e7c83a 	sub	r19,r4,r19
    a11c:	1c800115 	stw	r18,4(r3)
    a120:	8009883a 	mov	r4,r16
    a124:	14c00015 	stw	r19,0(r2)
    a128:	000b3380 	call	b338 <__malloc_unlock>
    a12c:	00800044 	movi	r2,1
    a130:	dfc00417 	ldw	ra,16(sp)
    a134:	dcc00317 	ldw	r19,12(sp)
    a138:	dc800217 	ldw	r18,8(sp)
    a13c:	dc400117 	ldw	r17,4(sp)
    a140:	dc000017 	ldw	r16,0(sp)
    a144:	dec00504 	addi	sp,sp,20
    a148:	f800283a 	ret
    a14c:	8009883a 	mov	r4,r16
    a150:	000b883a 	mov	r5,zero
    a154:	00099780 	call	9978 <_sbrk_r>
    a158:	88c00217 	ldw	r3,8(r17)
    a15c:	014003c4 	movi	r5,15
    a160:	10c9c83a 	sub	r4,r2,r3
    a164:	293fd70e 	bge	r5,r4,a0c4 <_malloc_trim_r+0x70>
    a168:	01400074 	movhi	r5,1
    a16c:	2972c904 	addi	r5,r5,-13532
    a170:	29400017 	ldw	r5,0(r5)
    a174:	21000054 	ori	r4,r4,1
    a178:	19000115 	stw	r4,4(r3)
    a17c:	1145c83a 	sub	r2,r2,r5
    a180:	01400074 	movhi	r5,1
    a184:	29755904 	addi	r5,r5,-10908
    a188:	28800015 	stw	r2,0(r5)
    a18c:	003fcd06 	br	a0c4 <_malloc_trim_r+0x70>

0000a190 <_free_r>:
    a190:	defffd04 	addi	sp,sp,-12
    a194:	dc400115 	stw	r17,4(sp)
    a198:	dc000015 	stw	r16,0(sp)
    a19c:	dfc00215 	stw	ra,8(sp)
    a1a0:	2821883a 	mov	r16,r5
    a1a4:	2023883a 	mov	r17,r4
    a1a8:	28004b26 	beq	r5,zero,a2d8 <_free_r+0x148>
    a1ac:	000b3180 	call	b318 <__malloc_lock>
    a1b0:	823fff17 	ldw	r8,-4(r16)
    a1b4:	00bfff84 	movi	r2,-2
    a1b8:	81bffe04 	addi	r6,r16,-8
    a1bc:	4084703a 	and	r2,r8,r2
    a1c0:	3087883a 	add	r3,r6,r2
    a1c4:	01400074 	movhi	r5,1
    a1c8:	29715b04 	addi	r5,r5,-14996
    a1cc:	1a400117 	ldw	r9,4(r3)
    a1d0:	29000217 	ldw	r4,8(r5)
    a1d4:	01ffff04 	movi	r7,-4
    a1d8:	49ce703a 	and	r7,r9,r7
    a1dc:	20c06526 	beq	r4,r3,a374 <_free_r+0x1e4>
    a1e0:	19c00115 	stw	r7,4(r3)
    a1e4:	4200004c 	andi	r8,r8,1
    a1e8:	40003026 	beq	r8,zero,a2ac <_free_r+0x11c>
    a1ec:	0009883a 	mov	r4,zero
    a1f0:	19d1883a 	add	r8,r3,r7
    a1f4:	42000117 	ldw	r8,4(r8)
    a1f8:	4200004c 	andi	r8,r8,1
    a1fc:	4000061e 	bne	r8,zero,a218 <_free_r+0x88>
    a200:	11c5883a 	add	r2,r2,r7
    a204:	19c00217 	ldw	r7,8(r3)
    a208:	20004e26 	beq	r4,zero,a344 <_free_r+0x1b4>
    a20c:	18c00317 	ldw	r3,12(r3)
    a210:	38c00315 	stw	r3,12(r7)
    a214:	19c00215 	stw	r7,8(r3)
    a218:	11c00054 	ori	r7,r2,1
    a21c:	3087883a 	add	r3,r6,r2
    a220:	31c00115 	stw	r7,4(r6)
    a224:	18800015 	stw	r2,0(r3)
    a228:	20001a1e 	bne	r4,zero,a294 <_free_r+0x104>
    a22c:	00c07fc4 	movi	r3,511
    a230:	18802e2e 	bgeu	r3,r2,a2ec <_free_r+0x15c>
    a234:	1006d27a 	srli	r3,r2,9
    a238:	01000104 	movi	r4,4
    a23c:	20c06636 	bltu	r4,r3,a3d8 <_free_r+0x248>
    a240:	1008d1ba 	srli	r4,r2,6
    a244:	21000e04 	addi	r4,r4,56
    a248:	210f883a 	add	r7,r4,r4
    a24c:	39cf883a 	add	r7,r7,r7
    a250:	39cf883a 	add	r7,r7,r7
    a254:	29cf883a 	add	r7,r5,r7
    a258:	38c00217 	ldw	r3,8(r7)
    a25c:	01400074 	movhi	r5,1
    a260:	29715b04 	addi	r5,r5,-14996
    a264:	19c06126 	beq	r3,r7,a3ec <_free_r+0x25c>
    a268:	013fff04 	movi	r4,-4
    a26c:	19400117 	ldw	r5,4(r3)
    a270:	290a703a 	and	r5,r5,r4
    a274:	1140022e 	bgeu	r2,r5,a280 <_free_r+0xf0>
    a278:	18c00217 	ldw	r3,8(r3)
    a27c:	38fffb1e 	bne	r7,r3,a26c <_free_r+0xdc>
    a280:	18800317 	ldw	r2,12(r3)
    a284:	30800315 	stw	r2,12(r6)
    a288:	30c00215 	stw	r3,8(r6)
    a28c:	11800215 	stw	r6,8(r2)
    a290:	19800315 	stw	r6,12(r3)
    a294:	8809883a 	mov	r4,r17
    a298:	dfc00217 	ldw	ra,8(sp)
    a29c:	dc400117 	ldw	r17,4(sp)
    a2a0:	dc000017 	ldw	r16,0(sp)
    a2a4:	dec00304 	addi	sp,sp,12
    a2a8:	000b3381 	jmpi	b338 <__malloc_unlock>
    a2ac:	813ffe17 	ldw	r4,-8(r16)
    a2b0:	2a400204 	addi	r9,r5,8
    a2b4:	310dc83a 	sub	r6,r6,r4
    a2b8:	32000217 	ldw	r8,8(r6)
    a2bc:	1105883a 	add	r2,r2,r4
    a2c0:	42404326 	beq	r8,r9,a3d0 <_free_r+0x240>
    a2c4:	32400317 	ldw	r9,12(r6)
    a2c8:	0009883a 	mov	r4,zero
    a2cc:	42400315 	stw	r9,12(r8)
    a2d0:	4a000215 	stw	r8,8(r9)
    a2d4:	003fc606 	br	a1f0 <_free_r+0x60>
    a2d8:	dfc00217 	ldw	ra,8(sp)
    a2dc:	dc400117 	ldw	r17,4(sp)
    a2e0:	dc000017 	ldw	r16,0(sp)
    a2e4:	dec00304 	addi	sp,sp,12
    a2e8:	f800283a 	ret
    a2ec:	1004d0fa 	srli	r2,r2,3
    a2f0:	02000044 	movi	r8,1
    a2f4:	29c00117 	ldw	r7,4(r5)
    a2f8:	1087883a 	add	r3,r2,r2
    a2fc:	18c7883a 	add	r3,r3,r3
    a300:	1005d0ba 	srai	r2,r2,2
    a304:	18c7883a 	add	r3,r3,r3
    a308:	28c7883a 	add	r3,r5,r3
    a30c:	19000217 	ldw	r4,8(r3)
    a310:	4084983a 	sll	r2,r8,r2
    a314:	30c00315 	stw	r3,12(r6)
    a318:	31000215 	stw	r4,8(r6)
    a31c:	11c4b03a 	or	r2,r2,r7
    a320:	21800315 	stw	r6,12(r4)
    a324:	8809883a 	mov	r4,r17
    a328:	28800115 	stw	r2,4(r5)
    a32c:	19800215 	stw	r6,8(r3)
    a330:	dfc00217 	ldw	ra,8(sp)
    a334:	dc400117 	ldw	r17,4(sp)
    a338:	dc000017 	ldw	r16,0(sp)
    a33c:	dec00304 	addi	sp,sp,12
    a340:	000b3381 	jmpi	b338 <__malloc_unlock>
    a344:	02000074 	movhi	r8,1
    a348:	42315d04 	addi	r8,r8,-14988
    a34c:	3a3faf1e 	bne	r7,r8,a20c <_free_r+0x7c>
    a350:	29800515 	stw	r6,20(r5)
    a354:	29800415 	stw	r6,16(r5)
    a358:	11000054 	ori	r4,r2,1
    a35c:	3087883a 	add	r3,r6,r2
    a360:	31c00315 	stw	r7,12(r6)
    a364:	31c00215 	stw	r7,8(r6)
    a368:	31000115 	stw	r4,4(r6)
    a36c:	18800015 	stw	r2,0(r3)
    a370:	003fc806 	br	a294 <_free_r+0x104>
    a374:	4200004c 	andi	r8,r8,1
    a378:	3885883a 	add	r2,r7,r2
    a37c:	4000071e 	bne	r8,zero,a39c <_free_r+0x20c>
    a380:	81fffe17 	ldw	r7,-8(r16)
    a384:	31cdc83a 	sub	r6,r6,r7
    a388:	30c00317 	ldw	r3,12(r6)
    a38c:	31000217 	ldw	r4,8(r6)
    a390:	11c5883a 	add	r2,r2,r7
    a394:	20c00315 	stw	r3,12(r4)
    a398:	19000215 	stw	r4,8(r3)
    a39c:	00c00074 	movhi	r3,1
    a3a0:	18f2ca04 	addi	r3,r3,-13528
    a3a4:	18c00017 	ldw	r3,0(r3)
    a3a8:	11000054 	ori	r4,r2,1
    a3ac:	31000115 	stw	r4,4(r6)
    a3b0:	29800215 	stw	r6,8(r5)
    a3b4:	10ffb736 	bltu	r2,r3,a294 <_free_r+0x104>
    a3b8:	00800074 	movhi	r2,1
    a3bc:	10b55104 	addi	r2,r2,-10940
    a3c0:	11400017 	ldw	r5,0(r2)
    a3c4:	8809883a 	mov	r4,r17
    a3c8:	000a0540 	call	a054 <_malloc_trim_r>
    a3cc:	003fb106 	br	a294 <_free_r+0x104>
    a3d0:	01000044 	movi	r4,1
    a3d4:	003f8606 	br	a1f0 <_free_r+0x60>
    a3d8:	01000504 	movi	r4,20
    a3dc:	20c00b36 	bltu	r4,r3,a40c <_free_r+0x27c>
    a3e0:	190016c4 	addi	r4,r3,91
    a3e4:	210f883a 	add	r7,r4,r4
    a3e8:	003f9806 	br	a24c <_free_r+0xbc>
    a3ec:	2009d0ba 	srai	r4,r4,2
    a3f0:	00800044 	movi	r2,1
    a3f4:	29c00117 	ldw	r7,4(r5)
    a3f8:	1108983a 	sll	r4,r2,r4
    a3fc:	1805883a 	mov	r2,r3
    a400:	21c8b03a 	or	r4,r4,r7
    a404:	29000115 	stw	r4,4(r5)
    a408:	003f9e06 	br	a284 <_free_r+0xf4>
    a40c:	01001504 	movi	r4,84
    a410:	20c00436 	bltu	r4,r3,a424 <_free_r+0x294>
    a414:	1008d33a 	srli	r4,r2,12
    a418:	21001b84 	addi	r4,r4,110
    a41c:	210f883a 	add	r7,r4,r4
    a420:	003f8a06 	br	a24c <_free_r+0xbc>
    a424:	01005504 	movi	r4,340
    a428:	20c00436 	bltu	r4,r3,a43c <_free_r+0x2ac>
    a42c:	1008d3fa 	srli	r4,r2,15
    a430:	21001dc4 	addi	r4,r4,119
    a434:	210f883a 	add	r7,r4,r4
    a438:	003f8406 	br	a24c <_free_r+0xbc>
    a43c:	01015504 	movi	r4,1364
    a440:	20c00436 	bltu	r4,r3,a454 <_free_r+0x2c4>
    a444:	1008d4ba 	srli	r4,r2,18
    a448:	21001f04 	addi	r4,r4,124
    a44c:	210f883a 	add	r7,r4,r4
    a450:	003f7e06 	br	a24c <_free_r+0xbc>
    a454:	01c03f04 	movi	r7,252
    a458:	01001f84 	movi	r4,126
    a45c:	003f7b06 	br	a24c <_free_r+0xbc>

0000a460 <_fwalk>:
    a460:	defff904 	addi	sp,sp,-28
    a464:	dcc00315 	stw	r19,12(sp)
    a468:	24c0b804 	addi	r19,r4,736
    a46c:	dd400515 	stw	r21,20(sp)
    a470:	dd000415 	stw	r20,16(sp)
    a474:	dfc00615 	stw	ra,24(sp)
    a478:	dc800215 	stw	r18,8(sp)
    a47c:	dc400115 	stw	r17,4(sp)
    a480:	dc000015 	stw	r16,0(sp)
    a484:	282b883a 	mov	r21,r5
    a488:	0029883a 	mov	r20,zero
    a48c:	000a0140 	call	a014 <__sfp_lock_acquire>
    a490:	98001226 	beq	r19,zero,a4dc <_fwalk+0x7c>
    a494:	04bfffc4 	movi	r18,-1
    a498:	9c400117 	ldw	r17,4(r19)
    a49c:	9c000217 	ldw	r16,8(r19)
    a4a0:	8c7fffc4 	addi	r17,r17,-1
    a4a4:	88000b16 	blt	r17,zero,a4d4 <_fwalk+0x74>
    a4a8:	84000304 	addi	r16,r16,12
    a4ac:	80c0000f 	ldh	r3,0(r16)
    a4b0:	8c7fffc4 	addi	r17,r17,-1
    a4b4:	813ffd04 	addi	r4,r16,-12
    a4b8:	18000426 	beq	r3,zero,a4cc <_fwalk+0x6c>
    a4bc:	80c0008f 	ldh	r3,2(r16)
    a4c0:	1c800226 	beq	r3,r18,a4cc <_fwalk+0x6c>
    a4c4:	a83ee83a 	callr	r21
    a4c8:	a0a8b03a 	or	r20,r20,r2
    a4cc:	84001704 	addi	r16,r16,92
    a4d0:	8cbff61e 	bne	r17,r18,a4ac <_fwalk+0x4c>
    a4d4:	9cc00017 	ldw	r19,0(r19)
    a4d8:	983fef1e 	bne	r19,zero,a498 <_fwalk+0x38>
    a4dc:	000a0180 	call	a018 <__sfp_lock_release>
    a4e0:	a005883a 	mov	r2,r20
    a4e4:	dfc00617 	ldw	ra,24(sp)
    a4e8:	dd400517 	ldw	r21,20(sp)
    a4ec:	dd000417 	ldw	r20,16(sp)
    a4f0:	dcc00317 	ldw	r19,12(sp)
    a4f4:	dc800217 	ldw	r18,8(sp)
    a4f8:	dc400117 	ldw	r17,4(sp)
    a4fc:	dc000017 	ldw	r16,0(sp)
    a500:	dec00704 	addi	sp,sp,28
    a504:	f800283a 	ret

0000a508 <_fwalk_reent>:
    a508:	defff804 	addi	sp,sp,-32
    a50c:	dcc00315 	stw	r19,12(sp)
    a510:	24c0b804 	addi	r19,r4,736
    a514:	dd800615 	stw	r22,24(sp)
    a518:	dd400515 	stw	r21,20(sp)
    a51c:	dd000415 	stw	r20,16(sp)
    a520:	dfc00715 	stw	ra,28(sp)
    a524:	dc800215 	stw	r18,8(sp)
    a528:	dc400115 	stw	r17,4(sp)
    a52c:	dc000015 	stw	r16,0(sp)
    a530:	2029883a 	mov	r20,r4
    a534:	282b883a 	mov	r21,r5
    a538:	002d883a 	mov	r22,zero
    a53c:	000a0140 	call	a014 <__sfp_lock_acquire>
    a540:	98001326 	beq	r19,zero,a590 <_fwalk_reent+0x88>
    a544:	04bfffc4 	movi	r18,-1
    a548:	9c400117 	ldw	r17,4(r19)
    a54c:	9c000217 	ldw	r16,8(r19)
    a550:	8c7fffc4 	addi	r17,r17,-1
    a554:	88000c16 	blt	r17,zero,a588 <_fwalk_reent+0x80>
    a558:	84000304 	addi	r16,r16,12
    a55c:	80c0000f 	ldh	r3,0(r16)
    a560:	8c7fffc4 	addi	r17,r17,-1
    a564:	817ffd04 	addi	r5,r16,-12
    a568:	18000526 	beq	r3,zero,a580 <_fwalk_reent+0x78>
    a56c:	80c0008f 	ldh	r3,2(r16)
    a570:	a009883a 	mov	r4,r20
    a574:	1c800226 	beq	r3,r18,a580 <_fwalk_reent+0x78>
    a578:	a83ee83a 	callr	r21
    a57c:	b0acb03a 	or	r22,r22,r2
    a580:	84001704 	addi	r16,r16,92
    a584:	8cbff51e 	bne	r17,r18,a55c <_fwalk_reent+0x54>
    a588:	9cc00017 	ldw	r19,0(r19)
    a58c:	983fee1e 	bne	r19,zero,a548 <_fwalk_reent+0x40>
    a590:	000a0180 	call	a018 <__sfp_lock_release>
    a594:	b005883a 	mov	r2,r22
    a598:	dfc00717 	ldw	ra,28(sp)
    a59c:	dd800617 	ldw	r22,24(sp)
    a5a0:	dd400517 	ldw	r21,20(sp)
    a5a4:	dd000417 	ldw	r20,16(sp)
    a5a8:	dcc00317 	ldw	r19,12(sp)
    a5ac:	dc800217 	ldw	r18,8(sp)
    a5b0:	dc400117 	ldw	r17,4(sp)
    a5b4:	dc000017 	ldw	r16,0(sp)
    a5b8:	dec00804 	addi	sp,sp,32
    a5bc:	f800283a 	ret

0000a5c0 <__smakebuf_r>:
    a5c0:	2880030b 	ldhu	r2,12(r5)
    a5c4:	deffed04 	addi	sp,sp,-76
    a5c8:	dc401015 	stw	r17,64(sp)
    a5cc:	10c0008c 	andi	r3,r2,2
    a5d0:	18ffffcc 	andi	r3,r3,65535
    a5d4:	18e0001c 	xori	r3,r3,32768
    a5d8:	dc000f15 	stw	r16,60(sp)
    a5dc:	dfc01215 	stw	ra,72(sp)
    a5e0:	dc801115 	stw	r18,68(sp)
    a5e4:	18e00004 	addi	r3,r3,-32768
    a5e8:	2821883a 	mov	r16,r5
    a5ec:	2023883a 	mov	r17,r4
    a5f0:	1800381e 	bne	r3,zero,a6d4 <__smakebuf_r+0x114>
    a5f4:	2940038f 	ldh	r5,14(r5)
    a5f8:	28002d16 	blt	r5,zero,a6b0 <__smakebuf_r+0xf0>
    a5fc:	d80d883a 	mov	r6,sp
    a600:	000aba40 	call	aba4 <_fstat_r>
    a604:	10002916 	blt	r2,zero,a6ac <__smakebuf_r+0xec>
    a608:	d8800117 	ldw	r2,4(sp)
    a60c:	00e00014 	movui	r3,32768
    a610:	10bc000c 	andi	r2,r2,61440
    a614:	10c03c26 	beq	r2,r3,a708 <__smakebuf_r+0x148>
    a618:	80c0030b 	ldhu	r3,12(r16)
    a61c:	18c20014 	ori	r3,r3,2048
    a620:	80c0030d 	sth	r3,12(r16)
    a624:	00c80004 	movi	r3,8192
    a628:	10c00c1e 	bne	r2,r3,a65c <__smakebuf_r+0x9c>
    a62c:	8140038f 	ldh	r5,14(r16)
    a630:	8809883a 	mov	r4,r17
    a634:	000ac0c0 	call	ac0c <_isatty_r>
    a638:	10000826 	beq	r2,zero,a65c <__smakebuf_r+0x9c>
    a63c:	80c0030b 	ldhu	r3,12(r16)
    a640:	808010c4 	addi	r2,r16,67
    a644:	80800015 	stw	r2,0(r16)
    a648:	18c00054 	ori	r3,r3,1
    a64c:	80800415 	stw	r2,16(r16)
    a650:	00800044 	movi	r2,1
    a654:	80c0030d 	sth	r3,12(r16)
    a658:	80800515 	stw	r2,20(r16)
    a65c:	04810004 	movi	r18,1024
    a660:	8809883a 	mov	r4,r17
    a664:	900b883a 	mov	r5,r18
    a668:	00088340 	call	8834 <_malloc_r>
    a66c:	10003026 	beq	r2,zero,a730 <__smakebuf_r+0x170>
    a670:	80c0030b 	ldhu	r3,12(r16)
    a674:	01000074 	movhi	r4,1
    a678:	21275e04 	addi	r4,r4,-25224
    a67c:	89000f15 	stw	r4,60(r17)
    a680:	18c02014 	ori	r3,r3,128
    a684:	80c0030d 	sth	r3,12(r16)
    a688:	80800015 	stw	r2,0(r16)
    a68c:	80800415 	stw	r2,16(r16)
    a690:	84800515 	stw	r18,20(r16)
    a694:	dfc01217 	ldw	ra,72(sp)
    a698:	dc801117 	ldw	r18,68(sp)
    a69c:	dc401017 	ldw	r17,64(sp)
    a6a0:	dc000f17 	ldw	r16,60(sp)
    a6a4:	dec01304 	addi	sp,sp,76
    a6a8:	f800283a 	ret
    a6ac:	8080030b 	ldhu	r2,12(r16)
    a6b0:	10c0200c 	andi	r3,r2,128
    a6b4:	18ffffcc 	andi	r3,r3,65535
    a6b8:	18e0001c 	xori	r3,r3,32768
    a6bc:	18e00004 	addi	r3,r3,-32768
    a6c0:	18000f1e 	bne	r3,zero,a700 <__smakebuf_r+0x140>
    a6c4:	04810004 	movi	r18,1024
    a6c8:	10820014 	ori	r2,r2,2048
    a6cc:	8080030d 	sth	r2,12(r16)
    a6d0:	003fe306 	br	a660 <__smakebuf_r+0xa0>
    a6d4:	288010c4 	addi	r2,r5,67
    a6d8:	28800015 	stw	r2,0(r5)
    a6dc:	28800415 	stw	r2,16(r5)
    a6e0:	00800044 	movi	r2,1
    a6e4:	28800515 	stw	r2,20(r5)
    a6e8:	dfc01217 	ldw	ra,72(sp)
    a6ec:	dc801117 	ldw	r18,68(sp)
    a6f0:	dc401017 	ldw	r17,64(sp)
    a6f4:	dc000f17 	ldw	r16,60(sp)
    a6f8:	dec01304 	addi	sp,sp,76
    a6fc:	f800283a 	ret
    a700:	04801004 	movi	r18,64
    a704:	003ff006 	br	a6c8 <__smakebuf_r+0x108>
    a708:	81000a17 	ldw	r4,40(r16)
    a70c:	00c00074 	movhi	r3,1
    a710:	18ea4804 	addi	r3,r3,-22240
    a714:	20ffc01e 	bne	r4,r3,a618 <__smakebuf_r+0x58>
    a718:	8080030b 	ldhu	r2,12(r16)
    a71c:	00c10004 	movi	r3,1024
    a720:	80c01315 	stw	r3,76(r16)
    a724:	10c4b03a 	or	r2,r2,r3
    a728:	8080030d 	sth	r2,12(r16)
    a72c:	003fcb06 	br	a65c <__smakebuf_r+0x9c>
    a730:	8080030b 	ldhu	r2,12(r16)
    a734:	10c0800c 	andi	r3,r2,512
    a738:	18ffffcc 	andi	r3,r3,65535
    a73c:	18e0001c 	xori	r3,r3,32768
    a740:	18e00004 	addi	r3,r3,-32768
    a744:	183fd31e 	bne	r3,zero,a694 <__smakebuf_r+0xd4>
    a748:	10800094 	ori	r2,r2,2
    a74c:	80c010c4 	addi	r3,r16,67
    a750:	8080030d 	sth	r2,12(r16)
    a754:	00800044 	movi	r2,1
    a758:	80c00015 	stw	r3,0(r16)
    a75c:	80c00415 	stw	r3,16(r16)
    a760:	80800515 	stw	r2,20(r16)
    a764:	003fcb06 	br	a694 <__smakebuf_r+0xd4>

0000a768 <memset>:
    a768:	00c000c4 	movi	r3,3
    a76c:	2005883a 	mov	r2,r4
    a770:	29403fcc 	andi	r5,r5,255
    a774:	19802d2e 	bgeu	r3,r6,a82c <memset+0xc4>
    a778:	20c6703a 	and	r3,r4,r3
    a77c:	18002e1e 	bne	r3,zero,a838 <memset+0xd0>
    a780:	2806923a 	slli	r3,r5,8
    a784:	010003c4 	movi	r4,15
    a788:	3011883a 	mov	r8,r6
    a78c:	1946b03a 	or	r3,r3,r5
    a790:	180e943a 	slli	r7,r3,16
    a794:	38ceb03a 	or	r7,r7,r3
    a798:	1007883a 	mov	r3,r2
    a79c:	21800f2e 	bgeu	r4,r6,a7dc <memset+0x74>
    a7a0:	19c00015 	stw	r7,0(r3)
    a7a4:	19c00115 	stw	r7,4(r3)
    a7a8:	19c00215 	stw	r7,8(r3)
    a7ac:	19c00315 	stw	r7,12(r3)
    a7b0:	423ffc04 	addi	r8,r8,-16
    a7b4:	18c00404 	addi	r3,r3,16
    a7b8:	223ff936 	bltu	r4,r8,a7a0 <memset+0x38>
    a7bc:	30fffc04 	addi	r3,r6,-16
    a7c0:	1806d13a 	srli	r3,r3,4
    a7c4:	318003cc 	andi	r6,r6,15
    a7c8:	010000c4 	movi	r4,3
    a7cc:	18c00044 	addi	r3,r3,1
    a7d0:	1806913a 	slli	r3,r3,4
    a7d4:	10c7883a 	add	r3,r2,r3
    a7d8:	21800e2e 	bgeu	r4,r6,a814 <memset+0xac>
    a7dc:	1813883a 	mov	r9,r3
    a7e0:	3011883a 	mov	r8,r6
    a7e4:	010000c4 	movi	r4,3
    a7e8:	49c00015 	stw	r7,0(r9)
    a7ec:	423fff04 	addi	r8,r8,-4
    a7f0:	4a400104 	addi	r9,r9,4
    a7f4:	223ffc36 	bltu	r4,r8,a7e8 <memset+0x80>
    a7f8:	313fff04 	addi	r4,r6,-4
    a7fc:	2008d0ba 	srli	r4,r4,2
    a800:	318000cc 	andi	r6,r6,3
    a804:	21000044 	addi	r4,r4,1
    a808:	2109883a 	add	r4,r4,r4
    a80c:	2109883a 	add	r4,r4,r4
    a810:	1907883a 	add	r3,r3,r4
    a814:	30000a26 	beq	r6,zero,a840 <memset+0xd8>
    a818:	198d883a 	add	r6,r3,r6
    a81c:	19400005 	stb	r5,0(r3)
    a820:	18c00044 	addi	r3,r3,1
    a824:	19bffd1e 	bne	r3,r6,a81c <memset+0xb4>
    a828:	f800283a 	ret
    a82c:	2007883a 	mov	r3,r4
    a830:	303ff91e 	bne	r6,zero,a818 <memset+0xb0>
    a834:	00000206 	br	a840 <memset+0xd8>
    a838:	2007883a 	mov	r3,r4
    a83c:	003ff606 	br	a818 <memset+0xb0>
    a840:	f800283a 	ret

0000a844 <__sread>:
    a844:	defffe04 	addi	sp,sp,-8
    a848:	dc000015 	stw	r16,0(sp)
    a84c:	2821883a 	mov	r16,r5
    a850:	2940038f 	ldh	r5,14(r5)
    a854:	dfc00115 	stw	ra,4(sp)
    a858:	000acdc0 	call	acdc <_read_r>
    a85c:	10000716 	blt	r2,zero,a87c <__sread+0x38>
    a860:	80c01417 	ldw	r3,80(r16)
    a864:	1887883a 	add	r3,r3,r2
    a868:	80c01415 	stw	r3,80(r16)
    a86c:	dfc00117 	ldw	ra,4(sp)
    a870:	dc000017 	ldw	r16,0(sp)
    a874:	dec00204 	addi	sp,sp,8
    a878:	f800283a 	ret
    a87c:	80c0030b 	ldhu	r3,12(r16)
    a880:	18fbffcc 	andi	r3,r3,61439
    a884:	80c0030d 	sth	r3,12(r16)
    a888:	dfc00117 	ldw	ra,4(sp)
    a88c:	dc000017 	ldw	r16,0(sp)
    a890:	dec00204 	addi	sp,sp,8
    a894:	f800283a 	ret

0000a898 <__swrite>:
    a898:	2880030b 	ldhu	r2,12(r5)
    a89c:	defffb04 	addi	sp,sp,-20
    a8a0:	dcc00315 	stw	r19,12(sp)
    a8a4:	10c0400c 	andi	r3,r2,256
    a8a8:	18ffffcc 	andi	r3,r3,65535
    a8ac:	18e0001c 	xori	r3,r3,32768
    a8b0:	dc800215 	stw	r18,8(sp)
    a8b4:	dc400115 	stw	r17,4(sp)
    a8b8:	dc000015 	stw	r16,0(sp)
    a8bc:	dfc00415 	stw	ra,16(sp)
    a8c0:	18e00004 	addi	r3,r3,-32768
    a8c4:	2821883a 	mov	r16,r5
    a8c8:	2027883a 	mov	r19,r4
    a8cc:	3025883a 	mov	r18,r6
    a8d0:	3823883a 	mov	r17,r7
    a8d4:	18000526 	beq	r3,zero,a8ec <__swrite+0x54>
    a8d8:	2940038f 	ldh	r5,14(r5)
    a8dc:	000d883a 	mov	r6,zero
    a8e0:	01c00084 	movi	r7,2
    a8e4:	000ac700 	call	ac70 <_lseek_r>
    a8e8:	8080030b 	ldhu	r2,12(r16)
    a8ec:	8140038f 	ldh	r5,14(r16)
    a8f0:	10bbffcc 	andi	r2,r2,61439
    a8f4:	9809883a 	mov	r4,r19
    a8f8:	900d883a 	mov	r6,r18
    a8fc:	880f883a 	mov	r7,r17
    a900:	8080030d 	sth	r2,12(r16)
    a904:	dfc00417 	ldw	ra,16(sp)
    a908:	dcc00317 	ldw	r19,12(sp)
    a90c:	dc800217 	ldw	r18,8(sp)
    a910:	dc400117 	ldw	r17,4(sp)
    a914:	dc000017 	ldw	r16,0(sp)
    a918:	dec00504 	addi	sp,sp,20
    a91c:	000a9841 	jmpi	a984 <_write_r>

0000a920 <__sseek>:
    a920:	defffe04 	addi	sp,sp,-8
    a924:	dc000015 	stw	r16,0(sp)
    a928:	2821883a 	mov	r16,r5
    a92c:	2940038f 	ldh	r5,14(r5)
    a930:	dfc00115 	stw	ra,4(sp)
    a934:	000ac700 	call	ac70 <_lseek_r>
    a938:	00ffffc4 	movi	r3,-1
    a93c:	10c00826 	beq	r2,r3,a960 <__sseek+0x40>
    a940:	80c0030b 	ldhu	r3,12(r16)
    a944:	80801415 	stw	r2,80(r16)
    a948:	18c40014 	ori	r3,r3,4096
    a94c:	80c0030d 	sth	r3,12(r16)
    a950:	dfc00117 	ldw	ra,4(sp)
    a954:	dc000017 	ldw	r16,0(sp)
    a958:	dec00204 	addi	sp,sp,8
    a95c:	f800283a 	ret
    a960:	80c0030b 	ldhu	r3,12(r16)
    a964:	18fbffcc 	andi	r3,r3,61439
    a968:	80c0030d 	sth	r3,12(r16)
    a96c:	dfc00117 	ldw	ra,4(sp)
    a970:	dc000017 	ldw	r16,0(sp)
    a974:	dec00204 	addi	sp,sp,8
    a978:	f800283a 	ret

0000a97c <__sclose>:
    a97c:	2940038f 	ldh	r5,14(r5)
    a980:	000a9f01 	jmpi	a9f0 <_close_r>

0000a984 <_write_r>:
    a984:	defffd04 	addi	sp,sp,-12
    a988:	dc400115 	stw	r17,4(sp)
    a98c:	dc000015 	stw	r16,0(sp)
    a990:	2023883a 	mov	r17,r4
    a994:	04000074 	movhi	r16,1
    a998:	84355204 	addi	r16,r16,-10936
    a99c:	2809883a 	mov	r4,r5
    a9a0:	300b883a 	mov	r5,r6
    a9a4:	380d883a 	mov	r6,r7
    a9a8:	dfc00215 	stw	ra,8(sp)
    a9ac:	80000015 	stw	zero,0(r16)
    a9b0:	000b61c0 	call	b61c <write>
    a9b4:	00ffffc4 	movi	r3,-1
    a9b8:	10c00526 	beq	r2,r3,a9d0 <_write_r+0x4c>
    a9bc:	dfc00217 	ldw	ra,8(sp)
    a9c0:	dc400117 	ldw	r17,4(sp)
    a9c4:	dc000017 	ldw	r16,0(sp)
    a9c8:	dec00304 	addi	sp,sp,12
    a9cc:	f800283a 	ret
    a9d0:	80c00017 	ldw	r3,0(r16)
    a9d4:	183ff926 	beq	r3,zero,a9bc <_write_r+0x38>
    a9d8:	88c00015 	stw	r3,0(r17)
    a9dc:	dfc00217 	ldw	ra,8(sp)
    a9e0:	dc400117 	ldw	r17,4(sp)
    a9e4:	dc000017 	ldw	r16,0(sp)
    a9e8:	dec00304 	addi	sp,sp,12
    a9ec:	f800283a 	ret

0000a9f0 <_close_r>:
    a9f0:	defffd04 	addi	sp,sp,-12
    a9f4:	dc400115 	stw	r17,4(sp)
    a9f8:	dc000015 	stw	r16,0(sp)
    a9fc:	2023883a 	mov	r17,r4
    aa00:	04000074 	movhi	r16,1
    aa04:	84355204 	addi	r16,r16,-10936
    aa08:	2809883a 	mov	r4,r5
    aa0c:	dfc00215 	stw	ra,8(sp)
    aa10:	80000015 	stw	zero,0(r16)
    aa14:	000adc00 	call	adc0 <close>
    aa18:	00ffffc4 	movi	r3,-1
    aa1c:	10c00526 	beq	r2,r3,aa34 <_close_r+0x44>
    aa20:	dfc00217 	ldw	ra,8(sp)
    aa24:	dc400117 	ldw	r17,4(sp)
    aa28:	dc000017 	ldw	r16,0(sp)
    aa2c:	dec00304 	addi	sp,sp,12
    aa30:	f800283a 	ret
    aa34:	80c00017 	ldw	r3,0(r16)
    aa38:	183ff926 	beq	r3,zero,aa20 <_close_r+0x30>
    aa3c:	88c00015 	stw	r3,0(r17)
    aa40:	dfc00217 	ldw	ra,8(sp)
    aa44:	dc400117 	ldw	r17,4(sp)
    aa48:	dc000017 	ldw	r16,0(sp)
    aa4c:	dec00304 	addi	sp,sp,12
    aa50:	f800283a 	ret

0000aa54 <_fclose_r>:
    aa54:	defffc04 	addi	sp,sp,-16
    aa58:	dc400115 	stw	r17,4(sp)
    aa5c:	dc000015 	stw	r16,0(sp)
    aa60:	dfc00315 	stw	ra,12(sp)
    aa64:	dc800215 	stw	r18,8(sp)
    aa68:	2821883a 	mov	r16,r5
    aa6c:	2023883a 	mov	r17,r4
    aa70:	28003426 	beq	r5,zero,ab44 <_fclose_r+0xf0>
    aa74:	000a0140 	call	a014 <__sfp_lock_acquire>
    aa78:	88000226 	beq	r17,zero,aa84 <_fclose_r+0x30>
    aa7c:	88800e17 	ldw	r2,56(r17)
    aa80:	10003826 	beq	r2,zero,ab64 <_fclose_r+0x110>
    aa84:	8080030f 	ldh	r2,12(r16)
    aa88:	10002526 	beq	r2,zero,ab20 <_fclose_r+0xcc>
    aa8c:	8809883a 	mov	r4,r17
    aa90:	800b883a 	mov	r5,r16
    aa94:	0009b500 	call	9b50 <_fflush_r>
    aa98:	1025883a 	mov	r18,r2
    aa9c:	80800b17 	ldw	r2,44(r16)
    aaa0:	10000426 	beq	r2,zero,aab4 <_fclose_r+0x60>
    aaa4:	81400717 	ldw	r5,28(r16)
    aaa8:	8809883a 	mov	r4,r17
    aaac:	103ee83a 	callr	r2
    aab0:	10003516 	blt	r2,zero,ab88 <_fclose_r+0x134>
    aab4:	8080030b 	ldhu	r2,12(r16)
    aab8:	1080200c 	andi	r2,r2,128
    aabc:	10bfffcc 	andi	r2,r2,65535
    aac0:	10a0001c 	xori	r2,r2,32768
    aac4:	10a00004 	addi	r2,r2,-32768
    aac8:	10002b1e 	bne	r2,zero,ab78 <_fclose_r+0x124>
    aacc:	81400c17 	ldw	r5,48(r16)
    aad0:	28000526 	beq	r5,zero,aae8 <_fclose_r+0x94>
    aad4:	80801004 	addi	r2,r16,64
    aad8:	28800226 	beq	r5,r2,aae4 <_fclose_r+0x90>
    aadc:	8809883a 	mov	r4,r17
    aae0:	000a1900 	call	a190 <_free_r>
    aae4:	80000c15 	stw	zero,48(r16)
    aae8:	81401117 	ldw	r5,68(r16)
    aaec:	28000326 	beq	r5,zero,aafc <_fclose_r+0xa8>
    aaf0:	8809883a 	mov	r4,r17
    aaf4:	000a1900 	call	a190 <_free_r>
    aaf8:	80001115 	stw	zero,68(r16)
    aafc:	8000030d 	sth	zero,12(r16)
    ab00:	000a0180 	call	a018 <__sfp_lock_release>
    ab04:	9005883a 	mov	r2,r18
    ab08:	dfc00317 	ldw	ra,12(sp)
    ab0c:	dc800217 	ldw	r18,8(sp)
    ab10:	dc400117 	ldw	r17,4(sp)
    ab14:	dc000017 	ldw	r16,0(sp)
    ab18:	dec00404 	addi	sp,sp,16
    ab1c:	f800283a 	ret
    ab20:	000a0180 	call	a018 <__sfp_lock_release>
    ab24:	0025883a 	mov	r18,zero
    ab28:	9005883a 	mov	r2,r18
    ab2c:	dfc00317 	ldw	ra,12(sp)
    ab30:	dc800217 	ldw	r18,8(sp)
    ab34:	dc400117 	ldw	r17,4(sp)
    ab38:	dc000017 	ldw	r16,0(sp)
    ab3c:	dec00404 	addi	sp,sp,16
    ab40:	f800283a 	ret
    ab44:	0025883a 	mov	r18,zero
    ab48:	9005883a 	mov	r2,r18
    ab4c:	dfc00317 	ldw	ra,12(sp)
    ab50:	dc800217 	ldw	r18,8(sp)
    ab54:	dc400117 	ldw	r17,4(sp)
    ab58:	dc000017 	ldw	r16,0(sp)
    ab5c:	dec00404 	addi	sp,sp,16
    ab60:	f800283a 	ret
    ab64:	8809883a 	mov	r4,r17
    ab68:	0009e0c0 	call	9e0c <__sinit>
    ab6c:	8080030f 	ldh	r2,12(r16)
    ab70:	103fc61e 	bne	r2,zero,aa8c <_fclose_r+0x38>
    ab74:	003fea06 	br	ab20 <_fclose_r+0xcc>
    ab78:	81400417 	ldw	r5,16(r16)
    ab7c:	8809883a 	mov	r4,r17
    ab80:	000a1900 	call	a190 <_free_r>
    ab84:	003fd106 	br	aacc <_fclose_r+0x78>
    ab88:	04bfffc4 	movi	r18,-1
    ab8c:	003fc906 	br	aab4 <_fclose_r+0x60>

0000ab90 <fclose>:
    ab90:	00800074 	movhi	r2,1
    ab94:	10b2c804 	addi	r2,r2,-13536
    ab98:	200b883a 	mov	r5,r4
    ab9c:	11000017 	ldw	r4,0(r2)
    aba0:	000aa541 	jmpi	aa54 <_fclose_r>

0000aba4 <_fstat_r>:
    aba4:	defffd04 	addi	sp,sp,-12
    aba8:	dc400115 	stw	r17,4(sp)
    abac:	dc000015 	stw	r16,0(sp)
    abb0:	2023883a 	mov	r17,r4
    abb4:	04000074 	movhi	r16,1
    abb8:	84355204 	addi	r16,r16,-10936
    abbc:	2809883a 	mov	r4,r5
    abc0:	300b883a 	mov	r5,r6
    abc4:	dfc00215 	stw	ra,8(sp)
    abc8:	80000015 	stw	zero,0(r16)
    abcc:	000af080 	call	af08 <fstat>
    abd0:	00ffffc4 	movi	r3,-1
    abd4:	10c00526 	beq	r2,r3,abec <_fstat_r+0x48>
    abd8:	dfc00217 	ldw	ra,8(sp)
    abdc:	dc400117 	ldw	r17,4(sp)
    abe0:	dc000017 	ldw	r16,0(sp)
    abe4:	dec00304 	addi	sp,sp,12
    abe8:	f800283a 	ret
    abec:	80c00017 	ldw	r3,0(r16)
    abf0:	183ff926 	beq	r3,zero,abd8 <_fstat_r+0x34>
    abf4:	88c00015 	stw	r3,0(r17)
    abf8:	dfc00217 	ldw	ra,8(sp)
    abfc:	dc400117 	ldw	r17,4(sp)
    ac00:	dc000017 	ldw	r16,0(sp)
    ac04:	dec00304 	addi	sp,sp,12
    ac08:	f800283a 	ret

0000ac0c <_isatty_r>:
    ac0c:	defffd04 	addi	sp,sp,-12
    ac10:	dc400115 	stw	r17,4(sp)
    ac14:	dc000015 	stw	r16,0(sp)
    ac18:	2023883a 	mov	r17,r4
    ac1c:	04000074 	movhi	r16,1
    ac20:	84355204 	addi	r16,r16,-10936
    ac24:	2809883a 	mov	r4,r5
    ac28:	dfc00215 	stw	ra,8(sp)
    ac2c:	80000015 	stw	zero,0(r16)
    ac30:	000b0080 	call	b008 <isatty>
    ac34:	00ffffc4 	movi	r3,-1
    ac38:	10c00526 	beq	r2,r3,ac50 <_isatty_r+0x44>
    ac3c:	dfc00217 	ldw	ra,8(sp)
    ac40:	dc400117 	ldw	r17,4(sp)
    ac44:	dc000017 	ldw	r16,0(sp)
    ac48:	dec00304 	addi	sp,sp,12
    ac4c:	f800283a 	ret
    ac50:	80c00017 	ldw	r3,0(r16)
    ac54:	183ff926 	beq	r3,zero,ac3c <_isatty_r+0x30>
    ac58:	88c00015 	stw	r3,0(r17)
    ac5c:	dfc00217 	ldw	ra,8(sp)
    ac60:	dc400117 	ldw	r17,4(sp)
    ac64:	dc000017 	ldw	r16,0(sp)
    ac68:	dec00304 	addi	sp,sp,12
    ac6c:	f800283a 	ret

0000ac70 <_lseek_r>:
    ac70:	defffd04 	addi	sp,sp,-12
    ac74:	dc400115 	stw	r17,4(sp)
    ac78:	dc000015 	stw	r16,0(sp)
    ac7c:	2023883a 	mov	r17,r4
    ac80:	04000074 	movhi	r16,1
    ac84:	84355204 	addi	r16,r16,-10936
    ac88:	2809883a 	mov	r4,r5
    ac8c:	300b883a 	mov	r5,r6
    ac90:	380d883a 	mov	r6,r7
    ac94:	dfc00215 	stw	ra,8(sp)
    ac98:	80000015 	stw	zero,0(r16)
    ac9c:	000b1e80 	call	b1e8 <lseek>
    aca0:	00ffffc4 	movi	r3,-1
    aca4:	10c00526 	beq	r2,r3,acbc <_lseek_r+0x4c>
    aca8:	dfc00217 	ldw	ra,8(sp)
    acac:	dc400117 	ldw	r17,4(sp)
    acb0:	dc000017 	ldw	r16,0(sp)
    acb4:	dec00304 	addi	sp,sp,12
    acb8:	f800283a 	ret
    acbc:	80c00017 	ldw	r3,0(r16)
    acc0:	183ff926 	beq	r3,zero,aca8 <_lseek_r+0x38>
    acc4:	88c00015 	stw	r3,0(r17)
    acc8:	dfc00217 	ldw	ra,8(sp)
    accc:	dc400117 	ldw	r17,4(sp)
    acd0:	dc000017 	ldw	r16,0(sp)
    acd4:	dec00304 	addi	sp,sp,12
    acd8:	f800283a 	ret

0000acdc <_read_r>:
    acdc:	defffd04 	addi	sp,sp,-12
    ace0:	dc400115 	stw	r17,4(sp)
    ace4:	dc000015 	stw	r16,0(sp)
    ace8:	2023883a 	mov	r17,r4
    acec:	04000074 	movhi	r16,1
    acf0:	84355204 	addi	r16,r16,-10936
    acf4:	2809883a 	mov	r4,r5
    acf8:	300b883a 	mov	r5,r6
    acfc:	380d883a 	mov	r6,r7
    ad00:	dfc00215 	stw	ra,8(sp)
    ad04:	80000015 	stw	zero,0(r16)
    ad08:	000b3a80 	call	b3a8 <read>
    ad0c:	00ffffc4 	movi	r3,-1
    ad10:	10c00526 	beq	r2,r3,ad28 <_read_r+0x4c>
    ad14:	dfc00217 	ldw	ra,8(sp)
    ad18:	dc400117 	ldw	r17,4(sp)
    ad1c:	dc000017 	ldw	r16,0(sp)
    ad20:	dec00304 	addi	sp,sp,12
    ad24:	f800283a 	ret
    ad28:	80c00017 	ldw	r3,0(r16)
    ad2c:	183ff926 	beq	r3,zero,ad14 <_read_r+0x38>
    ad30:	88c00015 	stw	r3,0(r17)
    ad34:	dfc00217 	ldw	ra,8(sp)
    ad38:	dc400117 	ldw	r17,4(sp)
    ad3c:	dc000017 	ldw	r16,0(sp)
    ad40:	dec00304 	addi	sp,sp,12
    ad44:	f800283a 	ret

0000ad48 <__mulsi3>:
    ad48:	0005883a 	mov	r2,zero
    ad4c:	20000726 	beq	r4,zero,ad6c <__mulsi3+0x24>
    ad50:	20c0004c 	andi	r3,r4,1
    ad54:	2008d07a 	srli	r4,r4,1
    ad58:	18000126 	beq	r3,zero,ad60 <__mulsi3+0x18>
    ad5c:	1145883a 	add	r2,r2,r5
    ad60:	294b883a 	add	r5,r5,r5
    ad64:	203ffa1e 	bne	r4,zero,ad50 <__mulsi3+0x8>
    ad68:	f800283a 	ret
    ad6c:	f800283a 	ret

0000ad70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad70:	defffe04 	addi	sp,sp,-8
    ad74:	dfc00115 	stw	ra,4(sp)
    ad78:	df000015 	stw	fp,0(sp)
    ad7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ad80:	00800074 	movhi	r2,1
    ad84:	10b2d004 	addi	r2,r2,-13504
    ad88:	10800017 	ldw	r2,0(r2)
    ad8c:	10000526 	beq	r2,zero,ada4 <alt_get_errno+0x34>
    ad90:	00800074 	movhi	r2,1
    ad94:	10b2d004 	addi	r2,r2,-13504
    ad98:	10800017 	ldw	r2,0(r2)
    ad9c:	103ee83a 	callr	r2
    ada0:	00000206 	br	adac <alt_get_errno+0x3c>
    ada4:	00800074 	movhi	r2,1
    ada8:	10b55204 	addi	r2,r2,-10936
}
    adac:	e037883a 	mov	sp,fp
    adb0:	dfc00117 	ldw	ra,4(sp)
    adb4:	df000017 	ldw	fp,0(sp)
    adb8:	dec00204 	addi	sp,sp,8
    adbc:	f800283a 	ret

0000adc0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    adc0:	defffb04 	addi	sp,sp,-20
    adc4:	dfc00415 	stw	ra,16(sp)
    adc8:	df000315 	stw	fp,12(sp)
    adcc:	df000304 	addi	fp,sp,12
    add0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    add4:	e0bfff17 	ldw	r2,-4(fp)
    add8:	10000716 	blt	r2,zero,adf8 <close+0x38>
    addc:	e13fff17 	ldw	r4,-4(fp)
    ade0:	01400304 	movi	r5,12
    ade4:	000ad480 	call	ad48 <__mulsi3>
    ade8:	00c00074 	movhi	r3,1
    adec:	18f26704 	addi	r3,r3,-13924
    adf0:	10c5883a 	add	r2,r2,r3
    adf4:	00000106 	br	adfc <close+0x3c>
    adf8:	0005883a 	mov	r2,zero
    adfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ae00:	e0bffd17 	ldw	r2,-12(fp)
    ae04:	10001826 	beq	r2,zero,ae68 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ae08:	e0bffd17 	ldw	r2,-12(fp)
    ae0c:	10800017 	ldw	r2,0(r2)
    ae10:	10800417 	ldw	r2,16(r2)
    ae14:	10000626 	beq	r2,zero,ae30 <close+0x70>
    ae18:	e0bffd17 	ldw	r2,-12(fp)
    ae1c:	10800017 	ldw	r2,0(r2)
    ae20:	10800417 	ldw	r2,16(r2)
    ae24:	e13ffd17 	ldw	r4,-12(fp)
    ae28:	103ee83a 	callr	r2
    ae2c:	00000106 	br	ae34 <close+0x74>
    ae30:	0005883a 	mov	r2,zero
    ae34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ae38:	e13fff17 	ldw	r4,-4(fp)
    ae3c:	000b49c0 	call	b49c <alt_release_fd>
    if (rval < 0)
    ae40:	e0bffe17 	ldw	r2,-8(fp)
    ae44:	1000060e 	bge	r2,zero,ae60 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ae48:	000ad700 	call	ad70 <alt_get_errno>
    ae4c:	e0fffe17 	ldw	r3,-8(fp)
    ae50:	00c7c83a 	sub	r3,zero,r3
    ae54:	10c00015 	stw	r3,0(r2)
      return -1;
    ae58:	00bfffc4 	movi	r2,-1
    ae5c:	00000606 	br	ae78 <close+0xb8>
    }
    return 0;
    ae60:	0005883a 	mov	r2,zero
    ae64:	00000406 	br	ae78 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ae68:	000ad700 	call	ad70 <alt_get_errno>
    ae6c:	00c01444 	movi	r3,81
    ae70:	10c00015 	stw	r3,0(r2)
    return -1;
    ae74:	00bfffc4 	movi	r2,-1
  }
}
    ae78:	e037883a 	mov	sp,fp
    ae7c:	dfc00117 	ldw	ra,4(sp)
    ae80:	df000017 	ldw	fp,0(sp)
    ae84:	dec00204 	addi	sp,sp,8
    ae88:	f800283a 	ret

0000ae8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ae8c:	defffc04 	addi	sp,sp,-16
    ae90:	df000315 	stw	fp,12(sp)
    ae94:	df000304 	addi	fp,sp,12
    ae98:	e13ffd15 	stw	r4,-12(fp)
    ae9c:	e17ffe15 	stw	r5,-8(fp)
    aea0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    aea4:	e0bfff17 	ldw	r2,-4(fp)
}
    aea8:	e037883a 	mov	sp,fp
    aeac:	df000017 	ldw	fp,0(sp)
    aeb0:	dec00104 	addi	sp,sp,4
    aeb4:	f800283a 	ret

0000aeb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aeb8:	defffe04 	addi	sp,sp,-8
    aebc:	dfc00115 	stw	ra,4(sp)
    aec0:	df000015 	stw	fp,0(sp)
    aec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aec8:	00800074 	movhi	r2,1
    aecc:	10b2d004 	addi	r2,r2,-13504
    aed0:	10800017 	ldw	r2,0(r2)
    aed4:	10000526 	beq	r2,zero,aeec <alt_get_errno+0x34>
    aed8:	00800074 	movhi	r2,1
    aedc:	10b2d004 	addi	r2,r2,-13504
    aee0:	10800017 	ldw	r2,0(r2)
    aee4:	103ee83a 	callr	r2
    aee8:	00000206 	br	aef4 <alt_get_errno+0x3c>
    aeec:	00800074 	movhi	r2,1
    aef0:	10b55204 	addi	r2,r2,-10936
}
    aef4:	e037883a 	mov	sp,fp
    aef8:	dfc00117 	ldw	ra,4(sp)
    aefc:	df000017 	ldw	fp,0(sp)
    af00:	dec00204 	addi	sp,sp,8
    af04:	f800283a 	ret

0000af08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    af08:	defffb04 	addi	sp,sp,-20
    af0c:	dfc00415 	stw	ra,16(sp)
    af10:	df000315 	stw	fp,12(sp)
    af14:	df000304 	addi	fp,sp,12
    af18:	e13ffe15 	stw	r4,-8(fp)
    af1c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    af20:	e0bffe17 	ldw	r2,-8(fp)
    af24:	10000716 	blt	r2,zero,af44 <fstat+0x3c>
    af28:	e13ffe17 	ldw	r4,-8(fp)
    af2c:	01400304 	movi	r5,12
    af30:	000ad480 	call	ad48 <__mulsi3>
    af34:	00c00074 	movhi	r3,1
    af38:	18f26704 	addi	r3,r3,-13924
    af3c:	10c5883a 	add	r2,r2,r3
    af40:	00000106 	br	af48 <fstat+0x40>
    af44:	0005883a 	mov	r2,zero
    af48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    af4c:	e0bffd17 	ldw	r2,-12(fp)
    af50:	10001026 	beq	r2,zero,af94 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    af54:	e0bffd17 	ldw	r2,-12(fp)
    af58:	10800017 	ldw	r2,0(r2)
    af5c:	10800817 	ldw	r2,32(r2)
    af60:	10000726 	beq	r2,zero,af80 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
    af64:	e0bffd17 	ldw	r2,-12(fp)
    af68:	10800017 	ldw	r2,0(r2)
    af6c:	10800817 	ldw	r2,32(r2)
    af70:	e13ffd17 	ldw	r4,-12(fp)
    af74:	e17fff17 	ldw	r5,-4(fp)
    af78:	103ee83a 	callr	r2
    af7c:	00000906 	br	afa4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    af80:	e0bfff17 	ldw	r2,-4(fp)
    af84:	00c80004 	movi	r3,8192
    af88:	10c00115 	stw	r3,4(r2)
      return 0;
    af8c:	0005883a 	mov	r2,zero
    af90:	00000406 	br	afa4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af94:	000aeb80 	call	aeb8 <alt_get_errno>
    af98:	00c01444 	movi	r3,81
    af9c:	10c00015 	stw	r3,0(r2)
    return -1;
    afa0:	00bfffc4 	movi	r2,-1
  }
}
    afa4:	e037883a 	mov	sp,fp
    afa8:	dfc00117 	ldw	ra,4(sp)
    afac:	df000017 	ldw	fp,0(sp)
    afb0:	dec00204 	addi	sp,sp,8
    afb4:	f800283a 	ret

0000afb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    afb8:	defffe04 	addi	sp,sp,-8
    afbc:	dfc00115 	stw	ra,4(sp)
    afc0:	df000015 	stw	fp,0(sp)
    afc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    afc8:	00800074 	movhi	r2,1
    afcc:	10b2d004 	addi	r2,r2,-13504
    afd0:	10800017 	ldw	r2,0(r2)
    afd4:	10000526 	beq	r2,zero,afec <alt_get_errno+0x34>
    afd8:	00800074 	movhi	r2,1
    afdc:	10b2d004 	addi	r2,r2,-13504
    afe0:	10800017 	ldw	r2,0(r2)
    afe4:	103ee83a 	callr	r2
    afe8:	00000206 	br	aff4 <alt_get_errno+0x3c>
    afec:	00800074 	movhi	r2,1
    aff0:	10b55204 	addi	r2,r2,-10936
}
    aff4:	e037883a 	mov	sp,fp
    aff8:	dfc00117 	ldw	ra,4(sp)
    affc:	df000017 	ldw	fp,0(sp)
    b000:	dec00204 	addi	sp,sp,8
    b004:	f800283a 	ret

0000b008 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b008:	deffed04 	addi	sp,sp,-76
    b00c:	dfc01215 	stw	ra,72(sp)
    b010:	df001115 	stw	fp,68(sp)
    b014:	df001104 	addi	fp,sp,68
    b018:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b01c:	e0bfff17 	ldw	r2,-4(fp)
    b020:	10000716 	blt	r2,zero,b040 <isatty+0x38>
    b024:	e13fff17 	ldw	r4,-4(fp)
    b028:	01400304 	movi	r5,12
    b02c:	000ad480 	call	ad48 <__mulsi3>
    b030:	00c00074 	movhi	r3,1
    b034:	18f26704 	addi	r3,r3,-13924
    b038:	10c5883a 	add	r2,r2,r3
    b03c:	00000106 	br	b044 <isatty+0x3c>
    b040:	0005883a 	mov	r2,zero
    b044:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b048:	e0bfef17 	ldw	r2,-68(fp)
    b04c:	10000e26 	beq	r2,zero,b088 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b050:	e0bfef17 	ldw	r2,-68(fp)
    b054:	10800017 	ldw	r2,0(r2)
    b058:	10800817 	ldw	r2,32(r2)
    b05c:	1000021e 	bne	r2,zero,b068 <isatty+0x60>
    {
      return 1;
    b060:	00800044 	movi	r2,1
    b064:	00000c06 	br	b098 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b068:	e0bff004 	addi	r2,fp,-64
    b06c:	e13fff17 	ldw	r4,-4(fp)
    b070:	100b883a 	mov	r5,r2
    b074:	000af080 	call	af08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b078:	e0bff117 	ldw	r2,-60(fp)
    b07c:	10880020 	cmpeqi	r2,r2,8192
    b080:	10803fcc 	andi	r2,r2,255
    b084:	00000406 	br	b098 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b088:	000afb80 	call	afb8 <alt_get_errno>
    b08c:	00c01444 	movi	r3,81
    b090:	10c00015 	stw	r3,0(r2)
    return 0;
    b094:	0005883a 	mov	r2,zero
  }
}
    b098:	e037883a 	mov	sp,fp
    b09c:	dfc00117 	ldw	ra,4(sp)
    b0a0:	df000017 	ldw	fp,0(sp)
    b0a4:	dec00204 	addi	sp,sp,8
    b0a8:	f800283a 	ret

0000b0ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b0ac:	defffc04 	addi	sp,sp,-16
    b0b0:	df000315 	stw	fp,12(sp)
    b0b4:	df000304 	addi	fp,sp,12
    b0b8:	e13ffd15 	stw	r4,-12(fp)
    b0bc:	e17ffe15 	stw	r5,-8(fp)
    b0c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b0c4:	e0fffe17 	ldw	r3,-8(fp)
    b0c8:	e0bffd17 	ldw	r2,-12(fp)
    b0cc:	18800e26 	beq	r3,r2,b108 <alt_load_section+0x5c>
  {
    while( to != end )
    b0d0:	00000a06 	br	b0fc <alt_load_section+0x50>
    {
      *to++ = *from++;
    b0d4:	e0bffd17 	ldw	r2,-12(fp)
    b0d8:	10c00017 	ldw	r3,0(r2)
    b0dc:	e0bffe17 	ldw	r2,-8(fp)
    b0e0:	10c00015 	stw	r3,0(r2)
    b0e4:	e0bffe17 	ldw	r2,-8(fp)
    b0e8:	10800104 	addi	r2,r2,4
    b0ec:	e0bffe15 	stw	r2,-8(fp)
    b0f0:	e0bffd17 	ldw	r2,-12(fp)
    b0f4:	10800104 	addi	r2,r2,4
    b0f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b0fc:	e0fffe17 	ldw	r3,-8(fp)
    b100:	e0bfff17 	ldw	r2,-4(fp)
    b104:	18bff31e 	bne	r3,r2,b0d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b108:	e037883a 	mov	sp,fp
    b10c:	df000017 	ldw	fp,0(sp)
    b110:	dec00104 	addi	sp,sp,4
    b114:	f800283a 	ret

0000b118 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b118:	defffe04 	addi	sp,sp,-8
    b11c:	dfc00115 	stw	ra,4(sp)
    b120:	df000015 	stw	fp,0(sp)
    b124:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b128:	01000074 	movhi	r4,1
    b12c:	2132d504 	addi	r4,r4,-13484
    b130:	01400074 	movhi	r5,1
    b134:	29705b04 	addi	r5,r5,-16020
    b138:	01800074 	movhi	r6,1
    b13c:	31b2d504 	addi	r6,r6,-13484
    b140:	000b0ac0 	call	b0ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b144:	01000074 	movhi	r4,1
    b148:	21200804 	addi	r4,r4,-32736
    b14c:	01400074 	movhi	r5,1
    b150:	29600804 	addi	r5,r5,-32736
    b154:	01800074 	movhi	r6,1
    b158:	31a06e04 	addi	r6,r6,-32328
    b15c:	000b0ac0 	call	b0ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b160:	01000074 	movhi	r4,1
    b164:	21305104 	addi	r4,r4,-16060
    b168:	01400074 	movhi	r5,1
    b16c:	29705104 	addi	r5,r5,-16060
    b170:	01800074 	movhi	r6,1
    b174:	31b05b04 	addi	r6,r6,-16020
    b178:	000b0ac0 	call	b0ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b17c:	000b8780 	call	b878 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b180:	000b94c0 	call	b94c <alt_icache_flush_all>
}
    b184:	e037883a 	mov	sp,fp
    b188:	dfc00117 	ldw	ra,4(sp)
    b18c:	df000017 	ldw	fp,0(sp)
    b190:	dec00204 	addi	sp,sp,8
    b194:	f800283a 	ret

0000b198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b198:	defffe04 	addi	sp,sp,-8
    b19c:	dfc00115 	stw	ra,4(sp)
    b1a0:	df000015 	stw	fp,0(sp)
    b1a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b1a8:	00800074 	movhi	r2,1
    b1ac:	10b2d004 	addi	r2,r2,-13504
    b1b0:	10800017 	ldw	r2,0(r2)
    b1b4:	10000526 	beq	r2,zero,b1cc <alt_get_errno+0x34>
    b1b8:	00800074 	movhi	r2,1
    b1bc:	10b2d004 	addi	r2,r2,-13504
    b1c0:	10800017 	ldw	r2,0(r2)
    b1c4:	103ee83a 	callr	r2
    b1c8:	00000206 	br	b1d4 <alt_get_errno+0x3c>
    b1cc:	00800074 	movhi	r2,1
    b1d0:	10b55204 	addi	r2,r2,-10936
}
    b1d4:	e037883a 	mov	sp,fp
    b1d8:	dfc00117 	ldw	ra,4(sp)
    b1dc:	df000017 	ldw	fp,0(sp)
    b1e0:	dec00204 	addi	sp,sp,8
    b1e4:	f800283a 	ret

0000b1e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b1e8:	defff904 	addi	sp,sp,-28
    b1ec:	dfc00615 	stw	ra,24(sp)
    b1f0:	df000515 	stw	fp,20(sp)
    b1f4:	df000504 	addi	fp,sp,20
    b1f8:	e13ffd15 	stw	r4,-12(fp)
    b1fc:	e17ffe15 	stw	r5,-8(fp)
    b200:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b204:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b208:	e0bffd17 	ldw	r2,-12(fp)
    b20c:	10000716 	blt	r2,zero,b22c <lseek+0x44>
    b210:	e13ffd17 	ldw	r4,-12(fp)
    b214:	01400304 	movi	r5,12
    b218:	000ad480 	call	ad48 <__mulsi3>
    b21c:	00c00074 	movhi	r3,1
    b220:	18f26704 	addi	r3,r3,-13924
    b224:	10c5883a 	add	r2,r2,r3
    b228:	00000106 	br	b230 <lseek+0x48>
    b22c:	0005883a 	mov	r2,zero
    b230:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b234:	e0bffc17 	ldw	r2,-16(fp)
    b238:	10001026 	beq	r2,zero,b27c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b23c:	e0bffc17 	ldw	r2,-16(fp)
    b240:	10800017 	ldw	r2,0(r2)
    b244:	10800717 	ldw	r2,28(r2)
    b248:	10000926 	beq	r2,zero,b270 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b24c:	e0bffc17 	ldw	r2,-16(fp)
    b250:	10800017 	ldw	r2,0(r2)
    b254:	10800717 	ldw	r2,28(r2)
    b258:	e13ffc17 	ldw	r4,-16(fp)
    b25c:	e17ffe17 	ldw	r5,-8(fp)
    b260:	e1bfff17 	ldw	r6,-4(fp)
    b264:	103ee83a 	callr	r2
    b268:	e0bffb15 	stw	r2,-20(fp)
    b26c:	00000506 	br	b284 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b270:	00bfde84 	movi	r2,-134
    b274:	e0bffb15 	stw	r2,-20(fp)
    b278:	00000206 	br	b284 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
    b27c:	00bfebc4 	movi	r2,-81
    b280:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b284:	e0bffb17 	ldw	r2,-20(fp)
    b288:	1000060e 	bge	r2,zero,b2a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    b28c:	000b1980 	call	b198 <alt_get_errno>
    b290:	e0fffb17 	ldw	r3,-20(fp)
    b294:	00c7c83a 	sub	r3,zero,r3
    b298:	10c00015 	stw	r3,0(r2)
    rc = -1;
    b29c:	00bfffc4 	movi	r2,-1
    b2a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b2a4:	e0bffb17 	ldw	r2,-20(fp)
}
    b2a8:	e037883a 	mov	sp,fp
    b2ac:	dfc00117 	ldw	ra,4(sp)
    b2b0:	df000017 	ldw	fp,0(sp)
    b2b4:	dec00204 	addi	sp,sp,8
    b2b8:	f800283a 	ret

0000b2bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b2bc:	defffd04 	addi	sp,sp,-12
    b2c0:	dfc00215 	stw	ra,8(sp)
    b2c4:	df000115 	stw	fp,4(sp)
    b2c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b2cc:	0009883a 	mov	r4,zero
    b2d0:	000b70c0 	call	b70c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b2d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b2d8:	000b7400 	call	b740 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b2dc:	000b8940 	call	b894 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b2e0:	01000074 	movhi	r4,1
    b2e4:	212e3c04 	addi	r4,r4,-18192
    b2e8:	000bdec0 	call	bdec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b2ec:	d1228c17 	ldw	r4,-30160(gp)
    b2f0:	d0e28d17 	ldw	r3,-30156(gp)
    b2f4:	d0a28e17 	ldw	r2,-30152(gp)
    b2f8:	180b883a 	mov	r5,r3
    b2fc:	100d883a 	mov	r6,r2
    b300:	00081f40 	call	81f4 <main>
    b304:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b308:	01000044 	movi	r4,1
    b30c:	000adc00 	call	adc0 <close>
  exit (result);
    b310:	e13fff17 	ldw	r4,-4(fp)
    b314:	000be000 	call	be00 <exit>

0000b318 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b318:	defffe04 	addi	sp,sp,-8
    b31c:	df000115 	stw	fp,4(sp)
    b320:	df000104 	addi	fp,sp,4
    b324:	e13fff15 	stw	r4,-4(fp)
}
    b328:	e037883a 	mov	sp,fp
    b32c:	df000017 	ldw	fp,0(sp)
    b330:	dec00104 	addi	sp,sp,4
    b334:	f800283a 	ret

0000b338 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b338:	defffe04 	addi	sp,sp,-8
    b33c:	df000115 	stw	fp,4(sp)
    b340:	df000104 	addi	fp,sp,4
    b344:	e13fff15 	stw	r4,-4(fp)
}
    b348:	e037883a 	mov	sp,fp
    b34c:	df000017 	ldw	fp,0(sp)
    b350:	dec00104 	addi	sp,sp,4
    b354:	f800283a 	ret

0000b358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b358:	defffe04 	addi	sp,sp,-8
    b35c:	dfc00115 	stw	ra,4(sp)
    b360:	df000015 	stw	fp,0(sp)
    b364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b368:	00800074 	movhi	r2,1
    b36c:	10b2d004 	addi	r2,r2,-13504
    b370:	10800017 	ldw	r2,0(r2)
    b374:	10000526 	beq	r2,zero,b38c <alt_get_errno+0x34>
    b378:	00800074 	movhi	r2,1
    b37c:	10b2d004 	addi	r2,r2,-13504
    b380:	10800017 	ldw	r2,0(r2)
    b384:	103ee83a 	callr	r2
    b388:	00000206 	br	b394 <alt_get_errno+0x3c>
    b38c:	00800074 	movhi	r2,1
    b390:	10b55204 	addi	r2,r2,-10936
}
    b394:	e037883a 	mov	sp,fp
    b398:	dfc00117 	ldw	ra,4(sp)
    b39c:	df000017 	ldw	fp,0(sp)
    b3a0:	dec00204 	addi	sp,sp,8
    b3a4:	f800283a 	ret

0000b3a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b3a8:	defff904 	addi	sp,sp,-28
    b3ac:	dfc00615 	stw	ra,24(sp)
    b3b0:	df000515 	stw	fp,20(sp)
    b3b4:	df000504 	addi	fp,sp,20
    b3b8:	e13ffd15 	stw	r4,-12(fp)
    b3bc:	e17ffe15 	stw	r5,-8(fp)
    b3c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b3c4:	e0bffd17 	ldw	r2,-12(fp)
    b3c8:	10000716 	blt	r2,zero,b3e8 <read+0x40>
    b3cc:	e13ffd17 	ldw	r4,-12(fp)
    b3d0:	01400304 	movi	r5,12
    b3d4:	000ad480 	call	ad48 <__mulsi3>
    b3d8:	00c00074 	movhi	r3,1
    b3dc:	18f26704 	addi	r3,r3,-13924
    b3e0:	10c5883a 	add	r2,r2,r3
    b3e4:	00000106 	br	b3ec <read+0x44>
    b3e8:	0005883a 	mov	r2,zero
    b3ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b3f0:	e0bffb17 	ldw	r2,-20(fp)
    b3f4:	10002026 	beq	r2,zero,b478 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b3f8:	e0bffb17 	ldw	r2,-20(fp)
    b3fc:	10800217 	ldw	r2,8(r2)
    b400:	108000cc 	andi	r2,r2,3
    b404:	10800060 	cmpeqi	r2,r2,1
    b408:	1000171e 	bne	r2,zero,b468 <read+0xc0>
        (fd->dev->read))
    b40c:	e0bffb17 	ldw	r2,-20(fp)
    b410:	10800017 	ldw	r2,0(r2)
    b414:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b418:	10001326 	beq	r2,zero,b468 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b41c:	e0bffb17 	ldw	r2,-20(fp)
    b420:	10800017 	ldw	r2,0(r2)
    b424:	10c00517 	ldw	r3,20(r2)
    b428:	e0bfff17 	ldw	r2,-4(fp)
    b42c:	e13ffb17 	ldw	r4,-20(fp)
    b430:	e17ffe17 	ldw	r5,-8(fp)
    b434:	100d883a 	mov	r6,r2
    b438:	183ee83a 	callr	r3
    b43c:	e0bffc15 	stw	r2,-16(fp)
    b440:	e0bffc17 	ldw	r2,-16(fp)
    b444:	1000060e 	bge	r2,zero,b460 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    b448:	000b3580 	call	b358 <alt_get_errno>
    b44c:	e0fffc17 	ldw	r3,-16(fp)
    b450:	00c7c83a 	sub	r3,zero,r3
    b454:	10c00015 	stw	r3,0(r2)
          return -1;
    b458:	00bfffc4 	movi	r2,-1
    b45c:	00000a06 	br	b488 <read+0xe0>
        }
        return rval;
    b460:	e0bffc17 	ldw	r2,-16(fp)
    b464:	00000806 	br	b488 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b468:	000b3580 	call	b358 <alt_get_errno>
    b46c:	00c00344 	movi	r3,13
    b470:	10c00015 	stw	r3,0(r2)
    b474:	00000306 	br	b484 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b478:	000b3580 	call	b358 <alt_get_errno>
    b47c:	00c01444 	movi	r3,81
    b480:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b484:	00bfffc4 	movi	r2,-1
}
    b488:	e037883a 	mov	sp,fp
    b48c:	dfc00117 	ldw	ra,4(sp)
    b490:	df000017 	ldw	fp,0(sp)
    b494:	dec00204 	addi	sp,sp,8
    b498:	f800283a 	ret

0000b49c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b49c:	defffc04 	addi	sp,sp,-16
    b4a0:	dfc00315 	stw	ra,12(sp)
    b4a4:	df000215 	stw	fp,8(sp)
    b4a8:	dc000115 	stw	r16,4(sp)
    b4ac:	df000104 	addi	fp,sp,4
    b4b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b4b4:	e0bfff17 	ldw	r2,-4(fp)
    b4b8:	108000d0 	cmplti	r2,r2,3
    b4bc:	1000111e 	bne	r2,zero,b504 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    b4c0:	04000074 	movhi	r16,1
    b4c4:	84326704 	addi	r16,r16,-13924
    b4c8:	e0bfff17 	ldw	r2,-4(fp)
    b4cc:	1009883a 	mov	r4,r2
    b4d0:	01400304 	movi	r5,12
    b4d4:	000ad480 	call	ad48 <__mulsi3>
    b4d8:	8085883a 	add	r2,r16,r2
    b4dc:	10800204 	addi	r2,r2,8
    b4e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b4e4:	04000074 	movhi	r16,1
    b4e8:	84326704 	addi	r16,r16,-13924
    b4ec:	e0bfff17 	ldw	r2,-4(fp)
    b4f0:	1009883a 	mov	r4,r2
    b4f4:	01400304 	movi	r5,12
    b4f8:	000ad480 	call	ad48 <__mulsi3>
    b4fc:	8085883a 	add	r2,r16,r2
    b500:	10000015 	stw	zero,0(r2)
  }
}
    b504:	e037883a 	mov	sp,fp
    b508:	dfc00217 	ldw	ra,8(sp)
    b50c:	df000117 	ldw	fp,4(sp)
    b510:	dc000017 	ldw	r16,0(sp)
    b514:	dec00304 	addi	sp,sp,12
    b518:	f800283a 	ret

0000b51c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b51c:	defff904 	addi	sp,sp,-28
    b520:	df000615 	stw	fp,24(sp)
    b524:	df000604 	addi	fp,sp,24
    b528:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b52c:	0005303a 	rdctl	r2,status
    b530:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b534:	e0fffc17 	ldw	r3,-16(fp)
    b538:	00bfff84 	movi	r2,-2
    b53c:	1884703a 	and	r2,r3,r2
    b540:	1001703a 	wrctl	status,r2
  
  return context;
    b544:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b548:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b54c:	d0a00a17 	ldw	r2,-32728(gp)
    b550:	10c000c4 	addi	r3,r2,3
    b554:	00bfff04 	movi	r2,-4
    b558:	1884703a 	and	r2,r3,r2
    b55c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b560:	d0e00a17 	ldw	r3,-32728(gp)
    b564:	e0bfff17 	ldw	r2,-4(fp)
    b568:	1885883a 	add	r2,r3,r2
    b56c:	00c00074 	movhi	r3,1
    b570:	18c00004 	addi	r3,r3,0
    b574:	1880062e 	bgeu	r3,r2,b590 <sbrk+0x74>
    b578:	e0bffa17 	ldw	r2,-24(fp)
    b57c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b580:	e0bffd17 	ldw	r2,-12(fp)
    b584:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b588:	00bfffc4 	movi	r2,-1
    b58c:	00000b06 	br	b5bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b590:	d0a00a17 	ldw	r2,-32728(gp)
    b594:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    b598:	d0e00a17 	ldw	r3,-32728(gp)
    b59c:	e0bfff17 	ldw	r2,-4(fp)
    b5a0:	1885883a 	add	r2,r3,r2
    b5a4:	d0a00a15 	stw	r2,-32728(gp)
    b5a8:	e0bffa17 	ldw	r2,-24(fp)
    b5ac:	e0bffe15 	stw	r2,-8(fp)
    b5b0:	e0bffe17 	ldw	r2,-8(fp)
    b5b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b5b8:	e0bffb17 	ldw	r2,-20(fp)
} 
    b5bc:	e037883a 	mov	sp,fp
    b5c0:	df000017 	ldw	fp,0(sp)
    b5c4:	dec00104 	addi	sp,sp,4
    b5c8:	f800283a 	ret

0000b5cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5cc:	defffe04 	addi	sp,sp,-8
    b5d0:	dfc00115 	stw	ra,4(sp)
    b5d4:	df000015 	stw	fp,0(sp)
    b5d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b5dc:	00800074 	movhi	r2,1
    b5e0:	10b2d004 	addi	r2,r2,-13504
    b5e4:	10800017 	ldw	r2,0(r2)
    b5e8:	10000526 	beq	r2,zero,b600 <alt_get_errno+0x34>
    b5ec:	00800074 	movhi	r2,1
    b5f0:	10b2d004 	addi	r2,r2,-13504
    b5f4:	10800017 	ldw	r2,0(r2)
    b5f8:	103ee83a 	callr	r2
    b5fc:	00000206 	br	b608 <alt_get_errno+0x3c>
    b600:	00800074 	movhi	r2,1
    b604:	10b55204 	addi	r2,r2,-10936
}
    b608:	e037883a 	mov	sp,fp
    b60c:	dfc00117 	ldw	ra,4(sp)
    b610:	df000017 	ldw	fp,0(sp)
    b614:	dec00204 	addi	sp,sp,8
    b618:	f800283a 	ret

0000b61c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b61c:	defff904 	addi	sp,sp,-28
    b620:	dfc00615 	stw	ra,24(sp)
    b624:	df000515 	stw	fp,20(sp)
    b628:	df000504 	addi	fp,sp,20
    b62c:	e13ffd15 	stw	r4,-12(fp)
    b630:	e17ffe15 	stw	r5,-8(fp)
    b634:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b638:	e0bffd17 	ldw	r2,-12(fp)
    b63c:	10000716 	blt	r2,zero,b65c <write+0x40>
    b640:	e13ffd17 	ldw	r4,-12(fp)
    b644:	01400304 	movi	r5,12
    b648:	000ad480 	call	ad48 <__mulsi3>
    b64c:	00c00074 	movhi	r3,1
    b650:	18f26704 	addi	r3,r3,-13924
    b654:	10c5883a 	add	r2,r2,r3
    b658:	00000106 	br	b660 <write+0x44>
    b65c:	0005883a 	mov	r2,zero
    b660:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b664:	e0bffb17 	ldw	r2,-20(fp)
    b668:	10001f26 	beq	r2,zero,b6e8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b66c:	e0bffb17 	ldw	r2,-20(fp)
    b670:	10800217 	ldw	r2,8(r2)
    b674:	108000cc 	andi	r2,r2,3
    b678:	10001726 	beq	r2,zero,b6d8 <write+0xbc>
    b67c:	e0bffb17 	ldw	r2,-20(fp)
    b680:	10800017 	ldw	r2,0(r2)
    b684:	10800617 	ldw	r2,24(r2)
    b688:	10001326 	beq	r2,zero,b6d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b68c:	e0bffb17 	ldw	r2,-20(fp)
    b690:	10800017 	ldw	r2,0(r2)
    b694:	10c00617 	ldw	r3,24(r2)
    b698:	e0bfff17 	ldw	r2,-4(fp)
    b69c:	e13ffb17 	ldw	r4,-20(fp)
    b6a0:	e17ffe17 	ldw	r5,-8(fp)
    b6a4:	100d883a 	mov	r6,r2
    b6a8:	183ee83a 	callr	r3
    b6ac:	e0bffc15 	stw	r2,-16(fp)
    b6b0:	e0bffc17 	ldw	r2,-16(fp)
    b6b4:	1000060e 	bge	r2,zero,b6d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b6b8:	000b5cc0 	call	b5cc <alt_get_errno>
    b6bc:	e0fffc17 	ldw	r3,-16(fp)
    b6c0:	00c7c83a 	sub	r3,zero,r3
    b6c4:	10c00015 	stw	r3,0(r2)
        return -1;
    b6c8:	00bfffc4 	movi	r2,-1
    b6cc:	00000a06 	br	b6f8 <write+0xdc>
      }
      return rval;
    b6d0:	e0bffc17 	ldw	r2,-16(fp)
    b6d4:	00000806 	br	b6f8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b6d8:	000b5cc0 	call	b5cc <alt_get_errno>
    b6dc:	00c00344 	movi	r3,13
    b6e0:	10c00015 	stw	r3,0(r2)
    b6e4:	00000306 	br	b6f4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b6e8:	000b5cc0 	call	b5cc <alt_get_errno>
    b6ec:	00c01444 	movi	r3,81
    b6f0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b6f4:	00bfffc4 	movi	r2,-1
}
    b6f8:	e037883a 	mov	sp,fp
    b6fc:	dfc00117 	ldw	ra,4(sp)
    b700:	df000017 	ldw	fp,0(sp)
    b704:	dec00204 	addi	sp,sp,8
    b708:	f800283a 	ret

0000b70c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b70c:	defffd04 	addi	sp,sp,-12
    b710:	dfc00215 	stw	ra,8(sp)
    b714:	df000115 	stw	fp,4(sp)
    b718:	df000104 	addi	fp,sp,4
    b71c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    b720:	000bdcc0 	call	bdcc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b724:	00800044 	movi	r2,1
    b728:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b72c:	e037883a 	mov	sp,fp
    b730:	dfc00117 	ldw	ra,4(sp)
    b734:	df000017 	ldw	fp,0(sp)
    b738:	dec00204 	addi	sp,sp,8
    b73c:	f800283a 	ret

0000b740 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b740:	defffe04 	addi	sp,sp,-8
    b744:	dfc00115 	stw	ra,4(sp)
    b748:	df000015 	stw	fp,0(sp)
    b74c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    b750:	01000074 	movhi	r4,1
    b754:	21040004 	addi	r4,r4,4096
    b758:	000b883a 	mov	r5,zero
    b75c:	000d883a 	mov	r6,zero
    b760:	01c0fa04 	movi	r7,1000
    b764:	000b7f00 	call	b7f0 <alt_avalon_timer_sc_init>
}
    b768:	e037883a 	mov	sp,fp
    b76c:	dfc00117 	ldw	ra,4(sp)
    b770:	df000017 	ldw	fp,0(sp)
    b774:	dec00204 	addi	sp,sp,8
    b778:	f800283a 	ret

0000b77c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b77c:	defffa04 	addi	sp,sp,-24
    b780:	dfc00515 	stw	ra,20(sp)
    b784:	df000415 	stw	fp,16(sp)
    b788:	df000404 	addi	fp,sp,16
    b78c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b790:	0007883a 	mov	r3,zero
    b794:	e0bfff17 	ldw	r2,-4(fp)
    b798:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b79c:	e0bfff17 	ldw	r2,-4(fp)
    b7a0:	10800104 	addi	r2,r2,4
    b7a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7a8:	0005303a 	rdctl	r2,status
    b7ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7b0:	e0fffd17 	ldw	r3,-12(fp)
    b7b4:	00bfff84 	movi	r2,-2
    b7b8:	1884703a 	and	r2,r3,r2
    b7bc:	1001703a 	wrctl	status,r2
  
  return context;
    b7c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b7c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    b7c8:	000bcc80 	call	bcc8 <alt_tick>
    b7cc:	e0bffc17 	ldw	r2,-16(fp)
    b7d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7d4:	e0bffe17 	ldw	r2,-8(fp)
    b7d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b7dc:	e037883a 	mov	sp,fp
    b7e0:	dfc00117 	ldw	ra,4(sp)
    b7e4:	df000017 	ldw	fp,0(sp)
    b7e8:	dec00204 	addi	sp,sp,8
    b7ec:	f800283a 	ret

0000b7f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b7f0:	defff804 	addi	sp,sp,-32
    b7f4:	dfc00715 	stw	ra,28(sp)
    b7f8:	df000615 	stw	fp,24(sp)
    b7fc:	df000604 	addi	fp,sp,24
    b800:	e13ffc15 	stw	r4,-16(fp)
    b804:	e17ffd15 	stw	r5,-12(fp)
    b808:	e1bffe15 	stw	r6,-8(fp)
    b80c:	e1ffff15 	stw	r7,-4(fp)
    b810:	e0bfff17 	ldw	r2,-4(fp)
    b814:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b818:	00800074 	movhi	r2,1
    b81c:	10b55704 	addi	r2,r2,-10916
    b820:	10800017 	ldw	r2,0(r2)
    b824:	1000041e 	bne	r2,zero,b838 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    b828:	00800074 	movhi	r2,1
    b82c:	10b55704 	addi	r2,r2,-10916
    b830:	e0fffb17 	ldw	r3,-20(fp)
    b834:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b838:	e0bffc17 	ldw	r2,-16(fp)
    b83c:	10800104 	addi	r2,r2,4
    b840:	00c001c4 	movi	r3,7
    b844:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b848:	d8000015 	stw	zero,0(sp)
    b84c:	e13ffd17 	ldw	r4,-12(fp)
    b850:	e17ffe17 	ldw	r5,-8(fp)
    b854:	01800074 	movhi	r6,1
    b858:	31addf04 	addi	r6,r6,-18564
    b85c:	e1fffc17 	ldw	r7,-16(fp)
    b860:	000b9680 	call	b968 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b864:	e037883a 	mov	sp,fp
    b868:	dfc00117 	ldw	ra,4(sp)
    b86c:	df000017 	ldw	fp,0(sp)
    b870:	dec00204 	addi	sp,sp,8
    b874:	f800283a 	ret

0000b878 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b878:	deffff04 	addi	sp,sp,-4
    b87c:	df000015 	stw	fp,0(sp)
    b880:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b884:	e037883a 	mov	sp,fp
    b888:	df000017 	ldw	fp,0(sp)
    b88c:	dec00104 	addi	sp,sp,4
    b890:	f800283a 	ret

0000b894 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b894:	defffd04 	addi	sp,sp,-12
    b898:	dfc00215 	stw	ra,8(sp)
    b89c:	df000115 	stw	fp,4(sp)
    b8a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b8a4:	00800074 	movhi	r2,1
    b8a8:	10b05004 	addi	r2,r2,-16064
    b8ac:	e0bfff15 	stw	r2,-4(fp)
    b8b0:	00000606 	br	b8cc <_do_ctors+0x38>
        (*ctor) (); 
    b8b4:	e0bfff17 	ldw	r2,-4(fp)
    b8b8:	10800017 	ldw	r2,0(r2)
    b8bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b8c0:	e0bfff17 	ldw	r2,-4(fp)
    b8c4:	10bfff04 	addi	r2,r2,-4
    b8c8:	e0bfff15 	stw	r2,-4(fp)
    b8cc:	e0ffff17 	ldw	r3,-4(fp)
    b8d0:	00800074 	movhi	r2,1
    b8d4:	10b05104 	addi	r2,r2,-16060
    b8d8:	18bff62e 	bgeu	r3,r2,b8b4 <_do_ctors+0x20>
        (*ctor) (); 
}
    b8dc:	e037883a 	mov	sp,fp
    b8e0:	dfc00117 	ldw	ra,4(sp)
    b8e4:	df000017 	ldw	fp,0(sp)
    b8e8:	dec00204 	addi	sp,sp,8
    b8ec:	f800283a 	ret

0000b8f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b8f0:	defffd04 	addi	sp,sp,-12
    b8f4:	dfc00215 	stw	ra,8(sp)
    b8f8:	df000115 	stw	fp,4(sp)
    b8fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b900:	00800074 	movhi	r2,1
    b904:	10b05004 	addi	r2,r2,-16064
    b908:	e0bfff15 	stw	r2,-4(fp)
    b90c:	00000606 	br	b928 <_do_dtors+0x38>
        (*dtor) (); 
    b910:	e0bfff17 	ldw	r2,-4(fp)
    b914:	10800017 	ldw	r2,0(r2)
    b918:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b91c:	e0bfff17 	ldw	r2,-4(fp)
    b920:	10bfff04 	addi	r2,r2,-4
    b924:	e0bfff15 	stw	r2,-4(fp)
    b928:	e0ffff17 	ldw	r3,-4(fp)
    b92c:	00800074 	movhi	r2,1
    b930:	10b05104 	addi	r2,r2,-16060
    b934:	18bff62e 	bgeu	r3,r2,b910 <_do_dtors+0x20>
        (*dtor) (); 
}
    b938:	e037883a 	mov	sp,fp
    b93c:	dfc00117 	ldw	ra,4(sp)
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00204 	addi	sp,sp,8
    b948:	f800283a 	ret

0000b94c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b94c:	deffff04 	addi	sp,sp,-4
    b950:	df000015 	stw	fp,0(sp)
    b954:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b958:	e037883a 	mov	sp,fp
    b95c:	df000017 	ldw	fp,0(sp)
    b960:	dec00104 	addi	sp,sp,4
    b964:	f800283a 	ret

0000b968 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b968:	defff904 	addi	sp,sp,-28
    b96c:	dfc00615 	stw	ra,24(sp)
    b970:	df000515 	stw	fp,20(sp)
    b974:	df000504 	addi	fp,sp,20
    b978:	e13ffc15 	stw	r4,-16(fp)
    b97c:	e17ffd15 	stw	r5,-12(fp)
    b980:	e1bffe15 	stw	r6,-8(fp)
    b984:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b988:	e0800217 	ldw	r2,8(fp)
    b98c:	d8800015 	stw	r2,0(sp)
    b990:	e13ffc17 	ldw	r4,-16(fp)
    b994:	e17ffd17 	ldw	r5,-12(fp)
    b998:	e1bffe17 	ldw	r6,-8(fp)
    b99c:	e1ffff17 	ldw	r7,-4(fp)
    b9a0:	000bb400 	call	bb40 <alt_iic_isr_register>
}  
    b9a4:	e037883a 	mov	sp,fp
    b9a8:	dfc00117 	ldw	ra,4(sp)
    b9ac:	df000017 	ldw	fp,0(sp)
    b9b0:	dec00204 	addi	sp,sp,8
    b9b4:	f800283a 	ret

0000b9b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b9b8:	defff904 	addi	sp,sp,-28
    b9bc:	df000615 	stw	fp,24(sp)
    b9c0:	df000604 	addi	fp,sp,24
    b9c4:	e13ffe15 	stw	r4,-8(fp)
    b9c8:	e17fff15 	stw	r5,-4(fp)
    b9cc:	e0bfff17 	ldw	r2,-4(fp)
    b9d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9d4:	0005303a 	rdctl	r2,status
    b9d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9dc:	e0fffb17 	ldw	r3,-20(fp)
    b9e0:	00bfff84 	movi	r2,-2
    b9e4:	1884703a 	and	r2,r3,r2
    b9e8:	1001703a 	wrctl	status,r2
  
  return context;
    b9ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b9f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    b9f4:	e0bffa17 	ldw	r2,-24(fp)
    b9f8:	00c00044 	movi	r3,1
    b9fc:	1884983a 	sll	r2,r3,r2
    ba00:	1007883a 	mov	r3,r2
    ba04:	00800074 	movhi	r2,1
    ba08:	10b55604 	addi	r2,r2,-10920
    ba0c:	10800017 	ldw	r2,0(r2)
    ba10:	1886b03a 	or	r3,r3,r2
    ba14:	00800074 	movhi	r2,1
    ba18:	10b55604 	addi	r2,r2,-10920
    ba1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ba20:	00800074 	movhi	r2,1
    ba24:	10b55604 	addi	r2,r2,-10920
    ba28:	10800017 	ldw	r2,0(r2)
    ba2c:	100170fa 	wrctl	ienable,r2
    ba30:	e0bffc17 	ldw	r2,-16(fp)
    ba34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba38:	e0bffd17 	ldw	r2,-12(fp)
    ba3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    ba44:	e037883a 	mov	sp,fp
    ba48:	df000017 	ldw	fp,0(sp)
    ba4c:	dec00104 	addi	sp,sp,4
    ba50:	f800283a 	ret

0000ba54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ba54:	defff904 	addi	sp,sp,-28
    ba58:	df000615 	stw	fp,24(sp)
    ba5c:	df000604 	addi	fp,sp,24
    ba60:	e13ffe15 	stw	r4,-8(fp)
    ba64:	e17fff15 	stw	r5,-4(fp)
    ba68:	e0bfff17 	ldw	r2,-4(fp)
    ba6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba70:	0005303a 	rdctl	r2,status
    ba74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba78:	e0fffb17 	ldw	r3,-20(fp)
    ba7c:	00bfff84 	movi	r2,-2
    ba80:	1884703a 	and	r2,r3,r2
    ba84:	1001703a 	wrctl	status,r2
  
  return context;
    ba88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ba8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ba90:	e0bffa17 	ldw	r2,-24(fp)
    ba94:	00c00044 	movi	r3,1
    ba98:	1884983a 	sll	r2,r3,r2
    ba9c:	0084303a 	nor	r2,zero,r2
    baa0:	1007883a 	mov	r3,r2
    baa4:	00800074 	movhi	r2,1
    baa8:	10b55604 	addi	r2,r2,-10920
    baac:	10800017 	ldw	r2,0(r2)
    bab0:	1886703a 	and	r3,r3,r2
    bab4:	00800074 	movhi	r2,1
    bab8:	10b55604 	addi	r2,r2,-10920
    babc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bac0:	00800074 	movhi	r2,1
    bac4:	10b55604 	addi	r2,r2,-10920
    bac8:	10800017 	ldw	r2,0(r2)
    bacc:	100170fa 	wrctl	ienable,r2
    bad0:	e0bffc17 	ldw	r2,-16(fp)
    bad4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bad8:	e0bffd17 	ldw	r2,-12(fp)
    badc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bae0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    bae4:	e037883a 	mov	sp,fp
    bae8:	df000017 	ldw	fp,0(sp)
    baec:	dec00104 	addi	sp,sp,4
    baf0:	f800283a 	ret

0000baf4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    baf4:	defffc04 	addi	sp,sp,-16
    baf8:	df000315 	stw	fp,12(sp)
    bafc:	df000304 	addi	fp,sp,12
    bb00:	e13ffe15 	stw	r4,-8(fp)
    bb04:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    bb08:	000530fa 	rdctl	r2,ienable
    bb0c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    bb10:	e0bfff17 	ldw	r2,-4(fp)
    bb14:	00c00044 	movi	r3,1
    bb18:	1884983a 	sll	r2,r3,r2
    bb1c:	1007883a 	mov	r3,r2
    bb20:	e0bffd17 	ldw	r2,-12(fp)
    bb24:	1884703a 	and	r2,r3,r2
    bb28:	1004c03a 	cmpne	r2,r2,zero
    bb2c:	10803fcc 	andi	r2,r2,255
}
    bb30:	e037883a 	mov	sp,fp
    bb34:	df000017 	ldw	fp,0(sp)
    bb38:	dec00104 	addi	sp,sp,4
    bb3c:	f800283a 	ret

0000bb40 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bb40:	defff504 	addi	sp,sp,-44
    bb44:	dfc00a15 	stw	ra,40(sp)
    bb48:	df000915 	stw	fp,36(sp)
    bb4c:	df000904 	addi	fp,sp,36
    bb50:	e13ffc15 	stw	r4,-16(fp)
    bb54:	e17ffd15 	stw	r5,-12(fp)
    bb58:	e1bffe15 	stw	r6,-8(fp)
    bb5c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    bb60:	00bffa84 	movi	r2,-22
    bb64:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bb68:	e0bffd17 	ldw	r2,-12(fp)
    bb6c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bb70:	e0bff817 	ldw	r2,-32(fp)
    bb74:	10800808 	cmpgei	r2,r2,32
    bb78:	1000271e 	bne	r2,zero,bc18 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb7c:	0005303a 	rdctl	r2,status
    bb80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb84:	e0fffa17 	ldw	r3,-24(fp)
    bb88:	00bfff84 	movi	r2,-2
    bb8c:	1884703a 	and	r2,r3,r2
    bb90:	1001703a 	wrctl	status,r2
  
  return context;
    bb94:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bb98:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    bb9c:	00c00074 	movhi	r3,1
    bba0:	18f56304 	addi	r3,r3,-10868
    bba4:	e0bff817 	ldw	r2,-32(fp)
    bba8:	100490fa 	slli	r2,r2,3
    bbac:	1885883a 	add	r2,r3,r2
    bbb0:	e0fffe17 	ldw	r3,-8(fp)
    bbb4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    bbb8:	00c00074 	movhi	r3,1
    bbbc:	18f56304 	addi	r3,r3,-10868
    bbc0:	e0bff817 	ldw	r2,-32(fp)
    bbc4:	100490fa 	slli	r2,r2,3
    bbc8:	1885883a 	add	r2,r3,r2
    bbcc:	10800104 	addi	r2,r2,4
    bbd0:	e0ffff17 	ldw	r3,-4(fp)
    bbd4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bbd8:	e0bffe17 	ldw	r2,-8(fp)
    bbdc:	10000526 	beq	r2,zero,bbf4 <alt_iic_isr_register+0xb4>
    bbe0:	e0bff817 	ldw	r2,-32(fp)
    bbe4:	e13ffc17 	ldw	r4,-16(fp)
    bbe8:	100b883a 	mov	r5,r2
    bbec:	000b9b80 	call	b9b8 <alt_ic_irq_enable>
    bbf0:	00000406 	br	bc04 <alt_iic_isr_register+0xc4>
    bbf4:	e0bff817 	ldw	r2,-32(fp)
    bbf8:	e13ffc17 	ldw	r4,-16(fp)
    bbfc:	100b883a 	mov	r5,r2
    bc00:	000ba540 	call	ba54 <alt_ic_irq_disable>
    bc04:	e0bff715 	stw	r2,-36(fp)
    bc08:	e0bff917 	ldw	r2,-28(fp)
    bc0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc10:	e0bffb17 	ldw	r2,-20(fp)
    bc14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bc18:	e0bff717 	ldw	r2,-36(fp)
}
    bc1c:	e037883a 	mov	sp,fp
    bc20:	dfc00117 	ldw	ra,4(sp)
    bc24:	df000017 	ldw	fp,0(sp)
    bc28:	dec00204 	addi	sp,sp,8
    bc2c:	f800283a 	ret

0000bc30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bc30:	defffa04 	addi	sp,sp,-24
    bc34:	df000515 	stw	fp,20(sp)
    bc38:	df000504 	addi	fp,sp,20
    bc3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc40:	0005303a 	rdctl	r2,status
    bc44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc48:	e0fffc17 	ldw	r3,-16(fp)
    bc4c:	00bfff84 	movi	r2,-2
    bc50:	1884703a 	and	r2,r3,r2
    bc54:	1001703a 	wrctl	status,r2
  
  return context;
    bc58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bc5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    bc60:	e0bfff17 	ldw	r2,-4(fp)
    bc64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bc68:	e0bffd17 	ldw	r2,-12(fp)
    bc6c:	10800017 	ldw	r2,0(r2)
    bc70:	e0fffd17 	ldw	r3,-12(fp)
    bc74:	18c00117 	ldw	r3,4(r3)
    bc78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    bc7c:	e0bffd17 	ldw	r2,-12(fp)
    bc80:	10800117 	ldw	r2,4(r2)
    bc84:	e0fffd17 	ldw	r3,-12(fp)
    bc88:	18c00017 	ldw	r3,0(r3)
    bc8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bc90:	e0bffd17 	ldw	r2,-12(fp)
    bc94:	e0fffd17 	ldw	r3,-12(fp)
    bc98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    bc9c:	e0bffd17 	ldw	r2,-12(fp)
    bca0:	e0fffd17 	ldw	r3,-12(fp)
    bca4:	10c00015 	stw	r3,0(r2)
    bca8:	e0bffb17 	ldw	r2,-20(fp)
    bcac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bcb0:	e0bffe17 	ldw	r2,-8(fp)
    bcb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bcb8:	e037883a 	mov	sp,fp
    bcbc:	df000017 	ldw	fp,0(sp)
    bcc0:	dec00104 	addi	sp,sp,4
    bcc4:	f800283a 	ret

0000bcc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bcc8:	defffb04 	addi	sp,sp,-20
    bccc:	dfc00415 	stw	ra,16(sp)
    bcd0:	df000315 	stw	fp,12(sp)
    bcd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bcd8:	d0a00c17 	ldw	r2,-32720(gp)
    bcdc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bce0:	d0a29117 	ldw	r2,-30140(gp)
    bce4:	10800044 	addi	r2,r2,1
    bce8:	d0a29115 	stw	r2,-30140(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bcec:	00002e06 	br	bda8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    bcf0:	e0bffd17 	ldw	r2,-12(fp)
    bcf4:	10800017 	ldw	r2,0(r2)
    bcf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bcfc:	e0bffd17 	ldw	r2,-12(fp)
    bd00:	10800403 	ldbu	r2,16(r2)
    bd04:	10803fcc 	andi	r2,r2,255
    bd08:	10000426 	beq	r2,zero,bd1c <alt_tick+0x54>
    bd0c:	d0a29117 	ldw	r2,-30140(gp)
    bd10:	1000021e 	bne	r2,zero,bd1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    bd14:	e0bffd17 	ldw	r2,-12(fp)
    bd18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    bd1c:	e0bffd17 	ldw	r2,-12(fp)
    bd20:	10800217 	ldw	r2,8(r2)
    bd24:	d0e29117 	ldw	r3,-30140(gp)
    bd28:	18801d36 	bltu	r3,r2,bda0 <alt_tick+0xd8>
    bd2c:	e0bffd17 	ldw	r2,-12(fp)
    bd30:	10800403 	ldbu	r2,16(r2)
    bd34:	10803fcc 	andi	r2,r2,255
    bd38:	1000191e 	bne	r2,zero,bda0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    bd3c:	e0bffd17 	ldw	r2,-12(fp)
    bd40:	10c00317 	ldw	r3,12(r2)
    bd44:	e0bffd17 	ldw	r2,-12(fp)
    bd48:	10800517 	ldw	r2,20(r2)
    bd4c:	1009883a 	mov	r4,r2
    bd50:	183ee83a 	callr	r3
    bd54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bd58:	e0bfff17 	ldw	r2,-4(fp)
    bd5c:	1000031e 	bne	r2,zero,bd6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    bd60:	e13ffd17 	ldw	r4,-12(fp)
    bd64:	000bc300 	call	bc30 <alt_alarm_stop>
    bd68:	00000d06 	br	bda0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    bd6c:	e0bffd17 	ldw	r2,-12(fp)
    bd70:	10c00217 	ldw	r3,8(r2)
    bd74:	e0bfff17 	ldw	r2,-4(fp)
    bd78:	1887883a 	add	r3,r3,r2
    bd7c:	e0bffd17 	ldw	r2,-12(fp)
    bd80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    bd84:	e0bffd17 	ldw	r2,-12(fp)
    bd88:	10c00217 	ldw	r3,8(r2)
    bd8c:	d0a29117 	ldw	r2,-30140(gp)
    bd90:	1880032e 	bgeu	r3,r2,bda0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    bd94:	e0bffd17 	ldw	r2,-12(fp)
    bd98:	00c00044 	movi	r3,1
    bd9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    bda0:	e0bffe17 	ldw	r2,-8(fp)
    bda4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bda8:	e0fffd17 	ldw	r3,-12(fp)
    bdac:	d0a00c04 	addi	r2,gp,-32720
    bdb0:	18bfcf1e 	bne	r3,r2,bcf0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    bdb4:	0001883a 	nop
}
    bdb8:	e037883a 	mov	sp,fp
    bdbc:	dfc00117 	ldw	ra,4(sp)
    bdc0:	df000017 	ldw	fp,0(sp)
    bdc4:	dec00204 	addi	sp,sp,8
    bdc8:	f800283a 	ret

0000bdcc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    bdcc:	deffff04 	addi	sp,sp,-4
    bdd0:	df000015 	stw	fp,0(sp)
    bdd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    bdd8:	000170fa 	wrctl	ienable,zero
}
    bddc:	e037883a 	mov	sp,fp
    bde0:	df000017 	ldw	fp,0(sp)
    bde4:	dec00104 	addi	sp,sp,4
    bde8:	f800283a 	ret

0000bdec <atexit>:
    bdec:	200b883a 	mov	r5,r4
    bdf0:	000d883a 	mov	r6,zero
    bdf4:	0009883a 	mov	r4,zero
    bdf8:	000f883a 	mov	r7,zero
    bdfc:	000be381 	jmpi	be38 <__register_exitproc>

0000be00 <exit>:
    be00:	defffe04 	addi	sp,sp,-8
    be04:	000b883a 	mov	r5,zero
    be08:	dc000015 	stw	r16,0(sp)
    be0c:	dfc00115 	stw	ra,4(sp)
    be10:	2021883a 	mov	r16,r4
    be14:	000bf680 	call	bf68 <__call_exitprocs>
    be18:	00800074 	movhi	r2,1
    be1c:	10b2c704 	addi	r2,r2,-13540
    be20:	11000017 	ldw	r4,0(r2)
    be24:	20800f17 	ldw	r2,60(r4)
    be28:	10000126 	beq	r2,zero,be30 <exit+0x30>
    be2c:	103ee83a 	callr	r2
    be30:	8009883a 	mov	r4,r16
    be34:	000c1080 	call	c108 <_exit>

0000be38 <__register_exitproc>:
    be38:	defffa04 	addi	sp,sp,-24
    be3c:	00800074 	movhi	r2,1
    be40:	10b2c704 	addi	r2,r2,-13540
    be44:	dc000315 	stw	r16,12(sp)
    be48:	14000017 	ldw	r16,0(r2)
    be4c:	dc400415 	stw	r17,16(sp)
    be50:	dfc00515 	stw	ra,20(sp)
    be54:	80805217 	ldw	r2,328(r16)
    be58:	2023883a 	mov	r17,r4
    be5c:	10003e26 	beq	r2,zero,bf58 <__register_exitproc+0x120>
    be60:	10c00117 	ldw	r3,4(r2)
    be64:	020007c4 	movi	r8,31
    be68:	40c0180e 	bge	r8,r3,becc <__register_exitproc+0x94>
    be6c:	00800034 	movhi	r2,0
    be70:	10800004 	addi	r2,r2,0
    be74:	1000061e 	bne	r2,zero,be90 <__register_exitproc+0x58>
    be78:	00bfffc4 	movi	r2,-1
    be7c:	dfc00517 	ldw	ra,20(sp)
    be80:	dc400417 	ldw	r17,16(sp)
    be84:	dc000317 	ldw	r16,12(sp)
    be88:	dec00604 	addi	sp,sp,24
    be8c:	f800283a 	ret
    be90:	01006404 	movi	r4,400
    be94:	d9400015 	stw	r5,0(sp)
    be98:	d9800115 	stw	r6,4(sp)
    be9c:	d9c00215 	stw	r7,8(sp)
    bea0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    bea4:	d9400017 	ldw	r5,0(sp)
    bea8:	d9800117 	ldw	r6,4(sp)
    beac:	d9c00217 	ldw	r7,8(sp)
    beb0:	103ff126 	beq	r2,zero,be78 <__register_exitproc+0x40>
    beb4:	80c05217 	ldw	r3,328(r16)
    beb8:	10000115 	stw	zero,4(r2)
    bebc:	10c00015 	stw	r3,0(r2)
    bec0:	80805215 	stw	r2,328(r16)
    bec4:	10006215 	stw	zero,392(r2)
    bec8:	10006315 	stw	zero,396(r2)
    becc:	10c00117 	ldw	r3,4(r2)
    bed0:	88000d1e 	bne	r17,zero,bf08 <__register_exitproc+0xd0>
    bed4:	19000084 	addi	r4,r3,2
    bed8:	2109883a 	add	r4,r4,r4
    bedc:	18c00044 	addi	r3,r3,1
    bee0:	2109883a 	add	r4,r4,r4
    bee4:	1109883a 	add	r4,r2,r4
    bee8:	10c00115 	stw	r3,4(r2)
    beec:	0005883a 	mov	r2,zero
    bef0:	21400015 	stw	r5,0(r4)
    bef4:	dfc00517 	ldw	ra,20(sp)
    bef8:	dc400417 	ldw	r17,16(sp)
    befc:	dc000317 	ldw	r16,12(sp)
    bf00:	dec00604 	addi	sp,sp,24
    bf04:	f800283a 	ret
    bf08:	02400044 	movi	r9,1
    bf0c:	12806217 	ldw	r10,392(r2)
    bf10:	48d2983a 	sll	r9,r9,r3
    bf14:	19000804 	addi	r4,r3,32
    bf18:	18d1883a 	add	r8,r3,r3
    bf1c:	2109883a 	add	r4,r4,r4
    bf20:	4211883a 	add	r8,r8,r8
    bf24:	2109883a 	add	r4,r4,r4
    bf28:	1109883a 	add	r4,r2,r4
    bf2c:	1211883a 	add	r8,r2,r8
    bf30:	5254b03a 	or	r10,r10,r9
    bf34:	21c02215 	stw	r7,136(r4)
    bf38:	41802215 	stw	r6,136(r8)
    bf3c:	12806215 	stw	r10,392(r2)
    bf40:	01000084 	movi	r4,2
    bf44:	893fe31e 	bne	r17,r4,bed4 <__register_exitproc+0x9c>
    bf48:	11006317 	ldw	r4,396(r2)
    bf4c:	2252b03a 	or	r9,r4,r9
    bf50:	12406315 	stw	r9,396(r2)
    bf54:	003fdf06 	br	bed4 <__register_exitproc+0x9c>
    bf58:	00800074 	movhi	r2,1
    bf5c:	10b5a304 	addi	r2,r2,-10612
    bf60:	80805215 	stw	r2,328(r16)
    bf64:	003fbe06 	br	be60 <__register_exitproc+0x28>

0000bf68 <__call_exitprocs>:
    bf68:	00800074 	movhi	r2,1
    bf6c:	10b2c704 	addi	r2,r2,-13540
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	defff304 	addi	sp,sp,-52
    bf78:	df000b15 	stw	fp,44(sp)
    bf7c:	d8800015 	stw	r2,0(sp)
    bf80:	10805204 	addi	r2,r2,328
    bf84:	dd400815 	stw	r21,32(sp)
    bf88:	dfc00c15 	stw	ra,48(sp)
    bf8c:	ddc00a15 	stw	r23,40(sp)
    bf90:	dd800915 	stw	r22,36(sp)
    bf94:	dd000715 	stw	r20,28(sp)
    bf98:	dcc00615 	stw	r19,24(sp)
    bf9c:	dc800515 	stw	r18,20(sp)
    bfa0:	dc400415 	stw	r17,16(sp)
    bfa4:	dc000315 	stw	r16,12(sp)
    bfa8:	d9000115 	stw	r4,4(sp)
    bfac:	2839883a 	mov	fp,r5
    bfb0:	d8800215 	stw	r2,8(sp)
    bfb4:	057fffc4 	movi	r21,-1
    bfb8:	d8800017 	ldw	r2,0(sp)
    bfbc:	ddc00217 	ldw	r23,8(sp)
    bfc0:	14805217 	ldw	r18,328(r2)
    bfc4:	90001726 	beq	r18,zero,c024 <__call_exitprocs+0xbc>
    bfc8:	94400117 	ldw	r17,4(r18)
    bfcc:	8c3fffc4 	addi	r16,r17,-1
    bfd0:	80001116 	blt	r16,zero,c018 <__call_exitprocs+0xb0>
    bfd4:	8c400044 	addi	r17,r17,1
    bfd8:	8427883a 	add	r19,r16,r16
    bfdc:	8c63883a 	add	r17,r17,r17
    bfe0:	95802204 	addi	r22,r18,136
    bfe4:	9ce7883a 	add	r19,r19,r19
    bfe8:	8c63883a 	add	r17,r17,r17
    bfec:	b4e7883a 	add	r19,r22,r19
    bff0:	9463883a 	add	r17,r18,r17
    bff4:	e0001726 	beq	fp,zero,c054 <__call_exitprocs+0xec>
    bff8:	8c87c83a 	sub	r3,r17,r18
    bffc:	b0c7883a 	add	r3,r22,r3
    c000:	18c01e17 	ldw	r3,120(r3)
    c004:	1f001326 	beq	r3,fp,c054 <__call_exitprocs+0xec>
    c008:	843fffc4 	addi	r16,r16,-1
    c00c:	9cffff04 	addi	r19,r19,-4
    c010:	8c7fff04 	addi	r17,r17,-4
    c014:	857ff71e 	bne	r16,r21,bff4 <__call_exitprocs+0x8c>
    c018:	00800034 	movhi	r2,0
    c01c:	10800004 	addi	r2,r2,0
    c020:	10002a1e 	bne	r2,zero,c0cc <__call_exitprocs+0x164>
    c024:	dfc00c17 	ldw	ra,48(sp)
    c028:	df000b17 	ldw	fp,44(sp)
    c02c:	ddc00a17 	ldw	r23,40(sp)
    c030:	dd800917 	ldw	r22,36(sp)
    c034:	dd400817 	ldw	r21,32(sp)
    c038:	dd000717 	ldw	r20,28(sp)
    c03c:	dcc00617 	ldw	r19,24(sp)
    c040:	dc800517 	ldw	r18,20(sp)
    c044:	dc400417 	ldw	r17,16(sp)
    c048:	dc000317 	ldw	r16,12(sp)
    c04c:	dec00d04 	addi	sp,sp,52
    c050:	f800283a 	ret
    c054:	91000117 	ldw	r4,4(r18)
    c058:	88c00017 	ldw	r3,0(r17)
    c05c:	213fffc4 	addi	r4,r4,-1
    c060:	24001526 	beq	r4,r16,c0b8 <__call_exitprocs+0x150>
    c064:	88000015 	stw	zero,0(r17)
    c068:	183fe726 	beq	r3,zero,c008 <__call_exitprocs+0xa0>
    c06c:	00800044 	movi	r2,1
    c070:	1408983a 	sll	r4,r2,r16
    c074:	91406217 	ldw	r5,392(r18)
    c078:	95000117 	ldw	r20,4(r18)
    c07c:	214a703a 	and	r5,r4,r5
    c080:	28000b26 	beq	r5,zero,c0b0 <__call_exitprocs+0x148>
    c084:	91406317 	ldw	r5,396(r18)
    c088:	2148703a 	and	r4,r4,r5
    c08c:	20000c1e 	bne	r4,zero,c0c0 <__call_exitprocs+0x158>
    c090:	99400017 	ldw	r5,0(r19)
    c094:	d9000117 	ldw	r4,4(sp)
    c098:	183ee83a 	callr	r3
    c09c:	90c00117 	ldw	r3,4(r18)
    c0a0:	1d3fc51e 	bne	r3,r20,bfb8 <__call_exitprocs+0x50>
    c0a4:	b8c00017 	ldw	r3,0(r23)
    c0a8:	1cbfd726 	beq	r3,r18,c008 <__call_exitprocs+0xa0>
    c0ac:	003fc206 	br	bfb8 <__call_exitprocs+0x50>
    c0b0:	183ee83a 	callr	r3
    c0b4:	003ff906 	br	c09c <__call_exitprocs+0x134>
    c0b8:	94000115 	stw	r16,4(r18)
    c0bc:	003fea06 	br	c068 <__call_exitprocs+0x100>
    c0c0:	99000017 	ldw	r4,0(r19)
    c0c4:	183ee83a 	callr	r3
    c0c8:	003ff406 	br	c09c <__call_exitprocs+0x134>
    c0cc:	90c00117 	ldw	r3,4(r18)
    c0d0:	1800071e 	bne	r3,zero,c0f0 <__call_exitprocs+0x188>
    c0d4:	90c00017 	ldw	r3,0(r18)
    c0d8:	18000926 	beq	r3,zero,c100 <__call_exitprocs+0x198>
    c0dc:	9009883a 	mov	r4,r18
    c0e0:	b8c00015 	stw	r3,0(r23)
    c0e4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c0e8:	bc800017 	ldw	r18,0(r23)
    c0ec:	003fb506 	br	bfc4 <__call_exitprocs+0x5c>
    c0f0:	90c00017 	ldw	r3,0(r18)
    c0f4:	902f883a 	mov	r23,r18
    c0f8:	1825883a 	mov	r18,r3
    c0fc:	003fb106 	br	bfc4 <__call_exitprocs+0x5c>
    c100:	0007883a 	mov	r3,zero
    c104:	003ffb06 	br	c0f4 <__call_exitprocs+0x18c>

0000c108 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c108:	defffc04 	addi	sp,sp,-16
    c10c:	df000315 	stw	fp,12(sp)
    c110:	df000304 	addi	fp,sp,12
    c114:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c118:	0001883a 	nop
    c11c:	e0bfff17 	ldw	r2,-4(fp)
    c120:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    c124:	e0bffd17 	ldw	r2,-12(fp)
    c128:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c12c:	e0bffe17 	ldw	r2,-8(fp)
    c130:	10000226 	beq	r2,zero,c13c <_exit+0x34>
    ALT_SIM_FAIL();
    c134:	002af070 	cmpltui	zero,zero,43969
    c138:	00000106 	br	c140 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    c13c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c140:	003fff06 	br	c140 <_exit+0x38>
