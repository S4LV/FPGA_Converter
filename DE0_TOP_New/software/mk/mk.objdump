
mk.elf:     file format elf32-littlenios2
mk.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005448 memsz 0x00005448 flags r-x
    LOAD off    0x00006468 vaddr 0x00025468 paddr 0x00026eb0 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x000088f8 vaddr 0x000288f8 paddr 0x000288f8 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005260  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00025418  00025418  00006418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00025468  00026eb0  00006468  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  000288f8  000288f8  000088f8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007eb0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000930  00000000  00000000  00007ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017540  00000000  00000000  00008808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005983  00000000  00000000  0001fd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006b13  00000000  00000000  000256cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f98  00000000  00000000  0002c1e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020ee  00000000  00000000  0002d178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000055d7  00000000  00000000  0002f266  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00034840  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00034850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00036f67  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00036f6a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00036f76  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00036f77  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00036f78  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00036f83  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00036f8e  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000009  00000000  00000000  00036f99  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000030  00000000  00000000  00036fa2  2**0
                  CONTENTS, READONLY
 25 .jdi          00005000  00000000  00000000  00036fd2  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00026b63  00000000  00000000  0003bfd2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
00025418 l    d  .rodata	00000000 .rodata
00025468 l    d  .rwdata	00000000 .rwdata
000288f8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mk_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00025468 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021d64 l     F .text	00000008 __fp_lock
00021d6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022e88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00022eb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00022fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000230a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023370 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00026ea0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000235e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023724 l     F .text	00000038 alt_dev_reg
00025e18 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000239f8 l     F .text	00000204 altera_avalon_jtag_uart_irq
00023bfc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024394 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024820 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024978 l     F .text	00000050 alt_get_errno
000249c8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00022c08 g     F .text	00000064 _isatty_r
000232b8 g     F .text	00000078 alt_main
00020228 g     F .text	00000084 _puts_r
00028948 g     O .bss	00000100 alt_irq
00022c6c g     F .text	0000006c _lseek_r
00026eb0 g       *ABS*	00000000 __flash_rwdata_start
00028bd8 g       *ABS*	00000000 __alt_heap_start
0002291c g     F .text	0000005c __sseek
00021e08 g     F .text	0000010c __sinit
00021d80 g     F .text	00000078 __sfmoreglue
00023350 g     F .text	00000020 __malloc_unlock
000211ec g     F .text	0000018c memmove
00021df8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022ba0 g     F .text	00000068 _fstat_r
00028904 g     O .bss	00000004 errno
0002890c g     O .bss	00000004 alt_argv
0002ee78 g       *ABS*	00000000 _gp
00025c98 g     O .rwdata	00000180 alt_fd_list
00024dcc g     F .text	00000090 alt_find_dev
000210ac g     F .text	00000140 memcpy
00021d74 g     F .text	0000000c _cleanup_r
00024900 g     F .text	00000078 alt_io_redirect
00025418 g       *ABS*	00000000 __DTOR_END__
000202ac g     F .text	00000014 puts
00023dfc g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00023004 g     F .text	000000a4 isatty
00028900 g     O .bss	00000004 __malloc_top_pad
0002034c g     F .text	000004e4 __sfvwrite_r
00021974 g     F .text	00000064 _sbrk_r
00022cd8 g     F .text	0000006c _read_r
00026e98 g     O .rwdata	00000004 alt_max_fd
00022a50 g     F .text	0000013c _fclose_r
00021d34 g     F .text	00000030 fflush
000288fc g     O .bss	00000004 __malloc_max_sbrked_mem
000231e4 g     F .text	000000d4 lseek
00026e78 g     O .rwdata	00000004 _global_impure_ptr
00021378 g     F .text	000005fc _realloc_r
00028bd8 g       *ABS*	00000000 __bss_end
00024730 g     F .text	000000f0 alt_iic_isr_register
00024ca8 g     F .text	00000104 alt_tick
00022020 g     F .text	00000018 __fp_lock_all
000246e4 g     F .text	0000004c alt_ic_irq_enabled
00024c10 g     F .text	00000098 alt_alarm_stop
00028914 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
00025c70 g     O .rwdata	00000028 alt_dev_null
00024378 g     F .text	0000001c alt_dcache_flush_all
00026eb0 g       *ABS*	00000000 __ram_rwdata_end
00026e90 g     O .rwdata	00000008 alt_dev_list
00023634 g     F .text	000000f0 write
00025468 g       *ABS*	00000000 __ram_rodata_end
00022f04 g     F .text	000000b0 fstat
00028bd8 g       *ABS*	00000000 end
00023938 g     F .text	000000c0 altera_avalon_jtag_uart_init
00025418 g       *ABS*	00000000 __CTOR_LIST__
0002a000 g       *ABS*	00000000 __alt_stack_pointer
00024014 g     F .text	00000224 altera_avalon_jtag_uart_write
00022010 g     F .text	00000004 __sfp_lock_acquire
00020fb4 g     F .text	000000f8 memchr
0002218c g     F .text	000002d0 _free_r
0002523c g     F .text	000001a0 __call_exitprocs
00026e80 g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
00028918 g     O .bss	00000004 _alt_tick_rate
0002891c g     O .bss	00000004 _alt_nticks
000233c0 g     F .text	000000f4 read
00023790 g     F .text	00000044 alt_sys_init
0002510c g     F .text	00000130 __register_exitproc
00023ca0 g     F .text	00000068 altera_avalon_jtag_uart_close
00022d44 g     F .text	00000028 __mulsi3
00025468 g       *ABS*	00000000 __ram_rwdata_start
00025418 g       *ABS*	00000000 __ram_rodata_start
00028920 g     O .bss	00000028 __malloc_current_mallinfo
000237d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024f70 g     F .text	000000d4 alt_get_fd
000229ec g     F .text	00000064 _close_r
00025090 g     F .text	0000007c memcmp
00023894 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00028bd8 g       *ABS*	00000000 __alt_stack_base
000238e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000219d8 g     F .text	00000174 __swsetup_r
00021f14 g     F .text	000000fc __sfp
00025868 g     O .rwdata	00000408 __malloc_av_
0002201c g     F .text	00000004 __sinit_lock_release
00022840 g     F .text	00000054 __sread
00024e5c g     F .text	00000114 alt_find_file
000243e4 g     F .text	000000a0 alt_dev_llist_insert
00023330 g     F .text	00000020 __malloc_lock
00023534 g     F .text	000000b0 sbrk
00021b4c g     F .text	000001e8 _fflush_r
000288f8 g       *ABS*	00000000 __bss_start
00022764 g     F .text	000000dc memset
000201f4 g     F .text	00000034 main
00028910 g     O .bss	00000004 alt_envp
000288f8 g     O .bss	00000004 __malloc_max_total_mem
00023834 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022978 g     F .text	00000008 __sclose
0002a000 g       *ABS*	00000000 __alt_heap_limit
00022b8c g     F .text	00000014 fclose
00028a48 g     O .bss	00000190 _atexit0
00020830 g     F .text	00000784 _malloc_r
00026e9c g     O .rwdata	00000004 alt_errno
0002245c g     F .text	000000a8 _fwalk
00022050 g     F .text	0000013c _malloc_trim_r
00025418 g       *ABS*	00000000 __CTOR_END__
00025418 g       *ABS*	00000000 __flash_rodata_start
00025418 g       *ABS*	00000000 __DTOR_LIST__
0002375c g     F .text	00000034 alt_irq_init
000234b4 g     F .text	00000080 alt_release_fd
00025044 g     F .text	00000014 atexit
00022980 g     F .text	0000006c _write_r
00026e7c g     O .rwdata	00000004 _impure_ptr
00028908 g     O .bss	00000004 alt_argc
000244e0 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00022038 g     F .text	00000018 __fp_unlock_all
00026e88 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024558 g     F .text	00000050 alt_ic_isr_register
00026eb0 g       *ABS*	00000000 _edata
00028bd8 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
00023d08 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00024644 g     F .text	000000a0 alt_ic_irq_disable
00022894 g     F .text	00000088 __swrite
00026e84 g     O .rwdata	00000004 __malloc_trim_threshold
00024dac g     F .text	00000020 altera_nios2_qsys_irq_init
00025058 g     F .text	00000038 exit
00022504 g     F .text	000000b8 _fwalk_reent
0002a000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00022014 g     F .text	00000004 __sfp_lock_release
000253dc g     F .text	0000003c _exit
00024238 g     F .text	00000140 alt_alarm_start
000225bc g     F .text	000001a8 __smakebuf_r
000202c0 g     F .text	0000008c strlen
00024ab8 g     F .text	00000158 open
0002453c g     F .text	0000001c alt_icache_flush_all
00026ea4 g     O .rwdata	00000004 alt_priority_mask
000245a8 g     F .text	0000009c alt_ic_irq_enable
00026ea8 g     O .rwdata	00000008 alt_alarm_list
00024484 g     F .text	0000005c _do_ctors
00022dbc g     F .text	000000cc close
00023114 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00022018 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18e25204 	addi	r3,r3,-30392
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	21225204 	addi	r4,r4,-30392
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   201c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201c4:	d6bb9e14 	ori	gp,gp,61048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201cc:	10a23e14 	ori	r2,r2,35064

    movhi r3, %hi(__bss_end)
   201d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201d4:	18e2f614 	ori	r3,r3,35800

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	00231140 	call	23114 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	00232b80 	call	232b8 <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <main>:
 */

#include <stdio.h>

int main()
{
   201f4:	defffe04 	addi	sp,sp,-8
   201f8:	dfc00115 	stw	ra,4(sp)
   201fc:	df000015 	stw	fp,0(sp)
   20200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   20204:	010000b4 	movhi	r4,2
   20208:	21150604 	addi	r4,r4,21528
   2020c:	00202ac0 	call	202ac <puts>

  return 0;
   20210:	0005883a 	mov	r2,zero
}
   20214:	e037883a 	mov	sp,fp
   20218:	dfc00117 	ldw	ra,4(sp)
   2021c:	df000017 	ldw	fp,0(sp)
   20220:	dec00204 	addi	sp,sp,8
   20224:	f800283a 	ret

00020228 <_puts_r>:
   20228:	defff604 	addi	sp,sp,-40
   2022c:	dc400815 	stw	r17,32(sp)
   20230:	2023883a 	mov	r17,r4
   20234:	2809883a 	mov	r4,r5
   20238:	dc000715 	stw	r16,28(sp)
   2023c:	dfc00915 	stw	ra,36(sp)
   20240:	2821883a 	mov	r16,r5
   20244:	00202c00 	call	202c0 <strlen>
   20248:	10c00044 	addi	r3,r2,1
   2024c:	d8800115 	stw	r2,4(sp)
   20250:	89400217 	ldw	r5,8(r17)
   20254:	008000b4 	movhi	r2,2
   20258:	10950b04 	addi	r2,r2,21548
   2025c:	d8800215 	stw	r2,8(sp)
   20260:	00800044 	movi	r2,1
   20264:	d8800315 	stw	r2,12(sp)
   20268:	8809883a 	mov	r4,r17
   2026c:	00800084 	movi	r2,2
   20270:	d9800404 	addi	r6,sp,16
   20274:	dc000015 	stw	r16,0(sp)
   20278:	d8c00615 	stw	r3,24(sp)
   2027c:	dec00415 	stw	sp,16(sp)
   20280:	d8800515 	stw	r2,20(sp)
   20284:	002034c0 	call	2034c <__sfvwrite_r>
   20288:	1000061e 	bne	r2,zero,202a4 <_puts_r+0x7c>
   2028c:	00800284 	movi	r2,10
   20290:	dfc00917 	ldw	ra,36(sp)
   20294:	dc400817 	ldw	r17,32(sp)
   20298:	dc000717 	ldw	r16,28(sp)
   2029c:	dec00a04 	addi	sp,sp,40
   202a0:	f800283a 	ret
   202a4:	00bfffc4 	movi	r2,-1
   202a8:	003ff906 	br	20290 <_puts_r+0x68>

000202ac <puts>:
   202ac:	008000b4 	movhi	r2,2
   202b0:	109b9f04 	addi	r2,r2,28284
   202b4:	200b883a 	mov	r5,r4
   202b8:	11000017 	ldw	r4,0(r2)
   202bc:	00202281 	jmpi	20228 <_puts_r>

000202c0 <strlen>:
   202c0:	208000cc 	andi	r2,r4,3
   202c4:	10001f1e 	bne	r2,zero,20344 <strlen+0x84>
   202c8:	20800017 	ldw	r2,0(r4)
   202cc:	01ffbff4 	movhi	r7,65279
   202d0:	39ffbfc4 	addi	r7,r7,-257
   202d4:	01a02074 	movhi	r6,32897
   202d8:	31a02004 	addi	r6,r6,-32640
   202dc:	11c7883a 	add	r3,r2,r7
   202e0:	0084303a 	nor	r2,zero,r2
   202e4:	1886703a 	and	r3,r3,r2
   202e8:	1986703a 	and	r3,r3,r6
   202ec:	2005883a 	mov	r2,r4
   202f0:	1800101e 	bne	r3,zero,20334 <strlen+0x74>
   202f4:	10800104 	addi	r2,r2,4
   202f8:	10c00017 	ldw	r3,0(r2)
   202fc:	19cb883a 	add	r5,r3,r7
   20300:	00c6303a 	nor	r3,zero,r3
   20304:	28c6703a 	and	r3,r5,r3
   20308:	1986703a 	and	r3,r3,r6
   2030c:	1800091e 	bne	r3,zero,20334 <strlen+0x74>
   20310:	10800104 	addi	r2,r2,4
   20314:	10c00017 	ldw	r3,0(r2)
   20318:	19cb883a 	add	r5,r3,r7
   2031c:	00c6303a 	nor	r3,zero,r3
   20320:	28c6703a 	and	r3,r5,r3
   20324:	1986703a 	and	r3,r3,r6
   20328:	183ff226 	beq	r3,zero,202f4 <strlen+0x34>
   2032c:	00000106 	br	20334 <strlen+0x74>
   20330:	10800044 	addi	r2,r2,1
   20334:	10c00007 	ldb	r3,0(r2)
   20338:	183ffd1e 	bne	r3,zero,20330 <strlen+0x70>
   2033c:	1105c83a 	sub	r2,r2,r4
   20340:	f800283a 	ret
   20344:	2005883a 	mov	r2,r4
   20348:	003ffa06 	br	20334 <strlen+0x74>

0002034c <__sfvwrite_r>:
   2034c:	30800217 	ldw	r2,8(r6)
   20350:	defff504 	addi	sp,sp,-44
   20354:	dd400615 	stw	r21,24(sp)
   20358:	dd000515 	stw	r20,20(sp)
   2035c:	dc000115 	stw	r16,4(sp)
   20360:	dfc00a15 	stw	ra,40(sp)
   20364:	df000915 	stw	fp,36(sp)
   20368:	ddc00815 	stw	r23,32(sp)
   2036c:	dd800715 	stw	r22,28(sp)
   20370:	dcc00415 	stw	r19,16(sp)
   20374:	dc800315 	stw	r18,12(sp)
   20378:	dc400215 	stw	r17,8(sp)
   2037c:	3029883a 	mov	r20,r6
   20380:	202b883a 	mov	r21,r4
   20384:	2821883a 	mov	r16,r5
   20388:	10002126 	beq	r2,zero,20410 <__sfvwrite_r+0xc4>
   2038c:	2880030b 	ldhu	r2,12(r5)
   20390:	10c0020c 	andi	r3,r2,8
   20394:	18ffffcc 	andi	r3,r3,65535
   20398:	18e0001c 	xori	r3,r3,32768
   2039c:	18e00004 	addi	r3,r3,-32768
   203a0:	18002826 	beq	r3,zero,20444 <__sfvwrite_r+0xf8>
   203a4:	28c00417 	ldw	r3,16(r5)
   203a8:	18002626 	beq	r3,zero,20444 <__sfvwrite_r+0xf8>
   203ac:	10c0008c 	andi	r3,r2,2
   203b0:	18ffffcc 	andi	r3,r3,65535
   203b4:	18e0001c 	xori	r3,r3,32768
   203b8:	18e00004 	addi	r3,r3,-32768
   203bc:	a4400017 	ldw	r17,0(r20)
   203c0:	18002b26 	beq	r3,zero,20470 <__sfvwrite_r+0x124>
   203c4:	0027883a 	mov	r19,zero
   203c8:	0025883a 	mov	r18,zero
   203cc:	05810004 	movi	r22,1024
   203d0:	980d883a 	mov	r6,r19
   203d4:	a809883a 	mov	r4,r21
   203d8:	90004f26 	beq	r18,zero,20518 <__sfvwrite_r+0x1cc>
   203dc:	900f883a 	mov	r7,r18
   203e0:	81400717 	ldw	r5,28(r16)
   203e4:	b480012e 	bgeu	r22,r18,203ec <__sfvwrite_r+0xa0>
   203e8:	01c10004 	movi	r7,1024
   203ec:	80800917 	ldw	r2,36(r16)
   203f0:	103ee83a 	callr	r2
   203f4:	0080540e 	bge	zero,r2,20548 <__sfvwrite_r+0x1fc>
   203f8:	a0c00217 	ldw	r3,8(r20)
   203fc:	98a7883a 	add	r19,r19,r2
   20400:	90a5c83a 	sub	r18,r18,r2
   20404:	1885c83a 	sub	r2,r3,r2
   20408:	a0800215 	stw	r2,8(r20)
   2040c:	103ff01e 	bne	r2,zero,203d0 <__sfvwrite_r+0x84>
   20410:	0005883a 	mov	r2,zero
   20414:	dfc00a17 	ldw	ra,40(sp)
   20418:	df000917 	ldw	fp,36(sp)
   2041c:	ddc00817 	ldw	r23,32(sp)
   20420:	dd800717 	ldw	r22,28(sp)
   20424:	dd400617 	ldw	r21,24(sp)
   20428:	dd000517 	ldw	r20,20(sp)
   2042c:	dcc00417 	ldw	r19,16(sp)
   20430:	dc800317 	ldw	r18,12(sp)
   20434:	dc400217 	ldw	r17,8(sp)
   20438:	dc000117 	ldw	r16,4(sp)
   2043c:	dec00b04 	addi	sp,sp,44
   20440:	f800283a 	ret
   20444:	a809883a 	mov	r4,r21
   20448:	800b883a 	mov	r5,r16
   2044c:	00219d80 	call	219d8 <__swsetup_r>
   20450:	1000f01e 	bne	r2,zero,20814 <__sfvwrite_r+0x4c8>
   20454:	8080030b 	ldhu	r2,12(r16)
   20458:	a4400017 	ldw	r17,0(r20)
   2045c:	10c0008c 	andi	r3,r2,2
   20460:	18ffffcc 	andi	r3,r3,65535
   20464:	18e0001c 	xori	r3,r3,32768
   20468:	18e00004 	addi	r3,r3,-32768
   2046c:	183fd51e 	bne	r3,zero,203c4 <__sfvwrite_r+0x78>
   20470:	10c0004c 	andi	r3,r2,1
   20474:	002d883a 	mov	r22,zero
   20478:	1800381e 	bne	r3,zero,2055c <__sfvwrite_r+0x210>
   2047c:	0025883a 	mov	r18,zero
   20480:	90002126 	beq	r18,zero,20508 <__sfvwrite_r+0x1bc>
   20484:	10c0800c 	andi	r3,r2,512
   20488:	18ffffcc 	andi	r3,r3,65535
   2048c:	18e0001c 	xori	r3,r3,32768
   20490:	18e00004 	addi	r3,r3,-32768
   20494:	84c00217 	ldw	r19,8(r16)
   20498:	18006b26 	beq	r3,zero,20648 <__sfvwrite_r+0x2fc>
   2049c:	980f883a 	mov	r7,r19
   204a0:	94c08636 	bltu	r18,r19,206bc <__sfvwrite_r+0x370>
   204a4:	10c1200c 	andi	r3,r2,1152
   204a8:	18009f1e 	bne	r3,zero,20728 <__sfvwrite_r+0x3dc>
   204ac:	81000017 	ldw	r4,0(r16)
   204b0:	982f883a 	mov	r23,r19
   204b4:	9039883a 	mov	fp,r18
   204b8:	9027883a 	mov	r19,r18
   204bc:	380d883a 	mov	r6,r7
   204c0:	b00b883a 	mov	r5,r22
   204c4:	d9c00015 	stw	r7,0(sp)
   204c8:	00211ec0 	call	211ec <memmove>
   204cc:	d9c00017 	ldw	r7,0(sp)
   204d0:	81000217 	ldw	r4,8(r16)
   204d4:	80800017 	ldw	r2,0(r16)
   204d8:	25efc83a 	sub	r23,r4,r23
   204dc:	11cf883a 	add	r7,r2,r7
   204e0:	85c00215 	stw	r23,8(r16)
   204e4:	81c00015 	stw	r7,0(r16)
   204e8:	a0800217 	ldw	r2,8(r20)
   204ec:	b72d883a 	add	r22,r22,fp
   204f0:	9725c83a 	sub	r18,r18,fp
   204f4:	14e7c83a 	sub	r19,r2,r19
   204f8:	a4c00215 	stw	r19,8(r20)
   204fc:	983fc426 	beq	r19,zero,20410 <__sfvwrite_r+0xc4>
   20500:	8080030b 	ldhu	r2,12(r16)
   20504:	903fdf1e 	bne	r18,zero,20484 <__sfvwrite_r+0x138>
   20508:	8d800017 	ldw	r22,0(r17)
   2050c:	8c800117 	ldw	r18,4(r17)
   20510:	8c400204 	addi	r17,r17,8
   20514:	003fda06 	br	20480 <__sfvwrite_r+0x134>
   20518:	8cc00017 	ldw	r19,0(r17)
   2051c:	8c800117 	ldw	r18,4(r17)
   20520:	8c400204 	addi	r17,r17,8
   20524:	003faa06 	br	203d0 <__sfvwrite_r+0x84>
   20528:	00213780 	call	21378 <_realloc_r>
   2052c:	102f883a 	mov	r23,r2
   20530:	10009f1e 	bne	r2,zero,207b0 <__sfvwrite_r+0x464>
   20534:	81400417 	ldw	r5,16(r16)
   20538:	a809883a 	mov	r4,r21
   2053c:	002218c0 	call	2218c <_free_r>
   20540:	00800304 	movi	r2,12
   20544:	a8800015 	stw	r2,0(r21)
   20548:	80c0030b 	ldhu	r3,12(r16)
   2054c:	00bfffc4 	movi	r2,-1
   20550:	18c01014 	ori	r3,r3,64
   20554:	80c0030d 	sth	r3,12(r16)
   20558:	003fae06 	br	20414 <__sfvwrite_r+0xc8>
   2055c:	0007883a 	mov	r3,zero
   20560:	0039883a 	mov	fp,zero
   20564:	0025883a 	mov	r18,zero
   20568:	90001e26 	beq	r18,zero,205e4 <__sfvwrite_r+0x298>
   2056c:	18006526 	beq	r3,zero,20704 <__sfvwrite_r+0x3b8>
   20570:	b02f883a 	mov	r23,r22
   20574:	9580012e 	bgeu	r18,r22,2057c <__sfvwrite_r+0x230>
   20578:	902f883a 	mov	r23,r18
   2057c:	81000017 	ldw	r4,0(r16)
   20580:	80800417 	ldw	r2,16(r16)
   20584:	84c00217 	ldw	r19,8(r16)
   20588:	81c00517 	ldw	r7,20(r16)
   2058c:	1100022e 	bgeu	r2,r4,20598 <__sfvwrite_r+0x24c>
   20590:	99e7883a 	add	r19,r19,r7
   20594:	9dc01816 	blt	r19,r23,205f8 <__sfvwrite_r+0x2ac>
   20598:	b9c03b16 	blt	r23,r7,20688 <__sfvwrite_r+0x33c>
   2059c:	80800917 	ldw	r2,36(r16)
   205a0:	81400717 	ldw	r5,28(r16)
   205a4:	a809883a 	mov	r4,r21
   205a8:	d8c00015 	stw	r3,0(sp)
   205ac:	e00d883a 	mov	r6,fp
   205b0:	103ee83a 	callr	r2
   205b4:	1027883a 	mov	r19,r2
   205b8:	d8c00017 	ldw	r3,0(sp)
   205bc:	00bfe20e 	bge	zero,r2,20548 <__sfvwrite_r+0x1fc>
   205c0:	b4edc83a 	sub	r22,r22,r19
   205c4:	b0001a26 	beq	r22,zero,20630 <__sfvwrite_r+0x2e4>
   205c8:	a0800217 	ldw	r2,8(r20)
   205cc:	e4f9883a 	add	fp,fp,r19
   205d0:	94e5c83a 	sub	r18,r18,r19
   205d4:	14e7c83a 	sub	r19,r2,r19
   205d8:	a4c00215 	stw	r19,8(r20)
   205dc:	983f8c26 	beq	r19,zero,20410 <__sfvwrite_r+0xc4>
   205e0:	903fe21e 	bne	r18,zero,2056c <__sfvwrite_r+0x220>
   205e4:	8f000017 	ldw	fp,0(r17)
   205e8:	8c800117 	ldw	r18,4(r17)
   205ec:	0007883a 	mov	r3,zero
   205f0:	8c400204 	addi	r17,r17,8
   205f4:	003fdc06 	br	20568 <__sfvwrite_r+0x21c>
   205f8:	e00b883a 	mov	r5,fp
   205fc:	980d883a 	mov	r6,r19
   20600:	d8c00015 	stw	r3,0(sp)
   20604:	00211ec0 	call	211ec <memmove>
   20608:	80800017 	ldw	r2,0(r16)
   2060c:	a809883a 	mov	r4,r21
   20610:	800b883a 	mov	r5,r16
   20614:	14c5883a 	add	r2,r2,r19
   20618:	80800015 	stw	r2,0(r16)
   2061c:	0021b4c0 	call	21b4c <_fflush_r>
   20620:	d8c00017 	ldw	r3,0(sp)
   20624:	103fc81e 	bne	r2,zero,20548 <__sfvwrite_r+0x1fc>
   20628:	b4edc83a 	sub	r22,r22,r19
   2062c:	b03fe61e 	bne	r22,zero,205c8 <__sfvwrite_r+0x27c>
   20630:	a809883a 	mov	r4,r21
   20634:	800b883a 	mov	r5,r16
   20638:	0021b4c0 	call	21b4c <_fflush_r>
   2063c:	103fc21e 	bne	r2,zero,20548 <__sfvwrite_r+0x1fc>
   20640:	0007883a 	mov	r3,zero
   20644:	003fe006 	br	205c8 <__sfvwrite_r+0x27c>
   20648:	81000017 	ldw	r4,0(r16)
   2064c:	80800417 	ldw	r2,16(r16)
   20650:	1100022e 	bgeu	r2,r4,2065c <__sfvwrite_r+0x310>
   20654:	9839883a 	mov	fp,r19
   20658:	9c806036 	bltu	r19,r18,207dc <__sfvwrite_r+0x490>
   2065c:	81c00517 	ldw	r7,20(r16)
   20660:	91c01c36 	bltu	r18,r7,206d4 <__sfvwrite_r+0x388>
   20664:	80800917 	ldw	r2,36(r16)
   20668:	81400717 	ldw	r5,28(r16)
   2066c:	a809883a 	mov	r4,r21
   20670:	b00d883a 	mov	r6,r22
   20674:	103ee83a 	callr	r2
   20678:	1027883a 	mov	r19,r2
   2067c:	00bfb20e 	bge	zero,r2,20548 <__sfvwrite_r+0x1fc>
   20680:	1039883a 	mov	fp,r2
   20684:	003f9806 	br	204e8 <__sfvwrite_r+0x19c>
   20688:	b80d883a 	mov	r6,r23
   2068c:	e00b883a 	mov	r5,fp
   20690:	d8c00015 	stw	r3,0(sp)
   20694:	00211ec0 	call	211ec <memmove>
   20698:	80800217 	ldw	r2,8(r16)
   2069c:	81000017 	ldw	r4,0(r16)
   206a0:	b827883a 	mov	r19,r23
   206a4:	15c5c83a 	sub	r2,r2,r23
   206a8:	25ef883a 	add	r23,r4,r23
   206ac:	80800215 	stw	r2,8(r16)
   206b0:	85c00015 	stw	r23,0(r16)
   206b4:	d8c00017 	ldw	r3,0(sp)
   206b8:	003fc106 	br	205c0 <__sfvwrite_r+0x274>
   206bc:	81000017 	ldw	r4,0(r16)
   206c0:	902f883a 	mov	r23,r18
   206c4:	9039883a 	mov	fp,r18
   206c8:	9027883a 	mov	r19,r18
   206cc:	900f883a 	mov	r7,r18
   206d0:	003f7a06 	br	204bc <__sfvwrite_r+0x170>
   206d4:	b00b883a 	mov	r5,r22
   206d8:	900d883a 	mov	r6,r18
   206dc:	00211ec0 	call	211ec <memmove>
   206e0:	80c00217 	ldw	r3,8(r16)
   206e4:	80800017 	ldw	r2,0(r16)
   206e8:	9027883a 	mov	r19,r18
   206ec:	1c87c83a 	sub	r3,r3,r18
   206f0:	1485883a 	add	r2,r2,r18
   206f4:	80c00215 	stw	r3,8(r16)
   206f8:	80800015 	stw	r2,0(r16)
   206fc:	9039883a 	mov	fp,r18
   20700:	003f7906 	br	204e8 <__sfvwrite_r+0x19c>
   20704:	e009883a 	mov	r4,fp
   20708:	01400284 	movi	r5,10
   2070c:	900d883a 	mov	r6,r18
   20710:	0020fb40 	call	20fb4 <memchr>
   20714:	10003c26 	beq	r2,zero,20808 <__sfvwrite_r+0x4bc>
   20718:	15800044 	addi	r22,r2,1
   2071c:	b72dc83a 	sub	r22,r22,fp
   20720:	00c00044 	movi	r3,1
   20724:	003f9206 	br	20570 <__sfvwrite_r+0x224>
   20728:	81000517 	ldw	r4,20(r16)
   2072c:	81400417 	ldw	r5,16(r16)
   20730:	80c00017 	ldw	r3,0(r16)
   20734:	210d883a 	add	r6,r4,r4
   20738:	3109883a 	add	r4,r6,r4
   2073c:	2026d7fa 	srli	r19,r4,31
   20740:	1979c83a 	sub	fp,r3,r5
   20744:	e1800044 	addi	r6,fp,1
   20748:	9909883a 	add	r4,r19,r4
   2074c:	2027d07a 	srai	r19,r4,1
   20750:	3489883a 	add	r4,r6,r18
   20754:	980d883a 	mov	r6,r19
   20758:	9900022e 	bgeu	r19,r4,20764 <__sfvwrite_r+0x418>
   2075c:	2027883a 	mov	r19,r4
   20760:	200d883a 	mov	r6,r4
   20764:	1081000c 	andi	r2,r2,1024
   20768:	10bfffcc 	andi	r2,r2,65535
   2076c:	10a0001c 	xori	r2,r2,32768
   20770:	10a00004 	addi	r2,r2,-32768
   20774:	a809883a 	mov	r4,r21
   20778:	103f6b26 	beq	r2,zero,20528 <__sfvwrite_r+0x1dc>
   2077c:	300b883a 	mov	r5,r6
   20780:	00208300 	call	20830 <_malloc_r>
   20784:	102f883a 	mov	r23,r2
   20788:	103f6d26 	beq	r2,zero,20540 <__sfvwrite_r+0x1f4>
   2078c:	81400417 	ldw	r5,16(r16)
   20790:	1009883a 	mov	r4,r2
   20794:	e00d883a 	mov	r6,fp
   20798:	00210ac0 	call	210ac <memcpy>
   2079c:	8080030b 	ldhu	r2,12(r16)
   207a0:	00fedfc4 	movi	r3,-1153
   207a4:	10c4703a 	and	r2,r2,r3
   207a8:	10802014 	ori	r2,r2,128
   207ac:	8080030d 	sth	r2,12(r16)
   207b0:	bf09883a 	add	r4,r23,fp
   207b4:	9f07c83a 	sub	r3,r19,fp
   207b8:	85c00415 	stw	r23,16(r16)
   207bc:	84c00515 	stw	r19,20(r16)
   207c0:	81000015 	stw	r4,0(r16)
   207c4:	902f883a 	mov	r23,r18
   207c8:	80c00215 	stw	r3,8(r16)
   207cc:	9039883a 	mov	fp,r18
   207d0:	9027883a 	mov	r19,r18
   207d4:	900f883a 	mov	r7,r18
   207d8:	003f3806 	br	204bc <__sfvwrite_r+0x170>
   207dc:	b00b883a 	mov	r5,r22
   207e0:	980d883a 	mov	r6,r19
   207e4:	00211ec0 	call	211ec <memmove>
   207e8:	80800017 	ldw	r2,0(r16)
   207ec:	a809883a 	mov	r4,r21
   207f0:	800b883a 	mov	r5,r16
   207f4:	14c5883a 	add	r2,r2,r19
   207f8:	80800015 	stw	r2,0(r16)
   207fc:	0021b4c0 	call	21b4c <_fflush_r>
   20800:	103f3926 	beq	r2,zero,204e8 <__sfvwrite_r+0x19c>
   20804:	003f5006 	br	20548 <__sfvwrite_r+0x1fc>
   20808:	95800044 	addi	r22,r18,1
   2080c:	00c00044 	movi	r3,1
   20810:	003f5706 	br	20570 <__sfvwrite_r+0x224>
   20814:	80c0030b 	ldhu	r3,12(r16)
   20818:	00bfffc4 	movi	r2,-1
   2081c:	18c01014 	ori	r3,r3,64
   20820:	80c0030d 	sth	r3,12(r16)
   20824:	00c00244 	movi	r3,9
   20828:	a8c00015 	stw	r3,0(r21)
   2082c:	003ef906 	br	20414 <__sfvwrite_r+0xc8>

00020830 <_malloc_r>:
   20830:	defff604 	addi	sp,sp,-40
   20834:	dc800215 	stw	r18,8(sp)
   20838:	dfc00915 	stw	ra,36(sp)
   2083c:	df000815 	stw	fp,32(sp)
   20840:	ddc00715 	stw	r23,28(sp)
   20844:	dd800615 	stw	r22,24(sp)
   20848:	dd400515 	stw	r21,20(sp)
   2084c:	dd000415 	stw	r20,16(sp)
   20850:	dcc00315 	stw	r19,12(sp)
   20854:	dc400115 	stw	r17,4(sp)
   20858:	dc000015 	stw	r16,0(sp)
   2085c:	288002c4 	addi	r2,r5,11
   20860:	00c00584 	movi	r3,22
   20864:	2025883a 	mov	r18,r4
   20868:	18802b2e 	bgeu	r3,r2,20918 <_malloc_r+0xe8>
   2086c:	047ffe04 	movi	r17,-8
   20870:	1462703a 	and	r17,r2,r17
   20874:	88002a16 	blt	r17,zero,20920 <_malloc_r+0xf0>
   20878:	89402936 	bltu	r17,r5,20920 <_malloc_r+0xf0>
   2087c:	9009883a 	mov	r4,r18
   20880:	00233300 	call	23330 <__malloc_lock>
   20884:	00807dc4 	movi	r2,503
   20888:	14402936 	bltu	r2,r17,20930 <_malloc_r+0x100>
   2088c:	8808d0fa 	srli	r4,r17,3
   20890:	04c000b4 	movhi	r19,2
   20894:	9cd61a04 	addi	r19,r19,22632
   20898:	2105883a 	add	r2,r4,r4
   2089c:	1085883a 	add	r2,r2,r2
   208a0:	1085883a 	add	r2,r2,r2
   208a4:	9885883a 	add	r2,r19,r2
   208a8:	14000317 	ldw	r16,12(r2)
   208ac:	80815526 	beq	r16,r2,20e04 <_malloc_r+0x5d4>
   208b0:	81000117 	ldw	r4,4(r16)
   208b4:	00bfff04 	movi	r2,-4
   208b8:	80c00317 	ldw	r3,12(r16)
   208bc:	2084703a 	and	r2,r4,r2
   208c0:	8085883a 	add	r2,r16,r2
   208c4:	11800117 	ldw	r6,4(r2)
   208c8:	81400217 	ldw	r5,8(r16)
   208cc:	9009883a 	mov	r4,r18
   208d0:	31800054 	ori	r6,r6,1
   208d4:	11800115 	stw	r6,4(r2)
   208d8:	28c00315 	stw	r3,12(r5)
   208dc:	19400215 	stw	r5,8(r3)
   208e0:	00233500 	call	23350 <__malloc_unlock>
   208e4:	80800204 	addi	r2,r16,8
   208e8:	dfc00917 	ldw	ra,36(sp)
   208ec:	df000817 	ldw	fp,32(sp)
   208f0:	ddc00717 	ldw	r23,28(sp)
   208f4:	dd800617 	ldw	r22,24(sp)
   208f8:	dd400517 	ldw	r21,20(sp)
   208fc:	dd000417 	ldw	r20,16(sp)
   20900:	dcc00317 	ldw	r19,12(sp)
   20904:	dc800217 	ldw	r18,8(sp)
   20908:	dc400117 	ldw	r17,4(sp)
   2090c:	dc000017 	ldw	r16,0(sp)
   20910:	dec00a04 	addi	sp,sp,40
   20914:	f800283a 	ret
   20918:	04400404 	movi	r17,16
   2091c:	897fd72e 	bgeu	r17,r5,2087c <_malloc_r+0x4c>
   20920:	00800304 	movi	r2,12
   20924:	90800015 	stw	r2,0(r18)
   20928:	0005883a 	mov	r2,zero
   2092c:	003fee06 	br	208e8 <_malloc_r+0xb8>
   20930:	8808d27a 	srli	r4,r17,9
   20934:	20007126 	beq	r4,zero,20afc <_malloc_r+0x2cc>
   20938:	00800104 	movi	r2,4
   2093c:	1100eb36 	bltu	r2,r4,20cec <_malloc_r+0x4bc>
   20940:	8808d1ba 	srli	r4,r17,6
   20944:	21000e04 	addi	r4,r4,56
   20948:	210b883a 	add	r5,r4,r4
   2094c:	294b883a 	add	r5,r5,r5
   20950:	294b883a 	add	r5,r5,r5
   20954:	04c000b4 	movhi	r19,2
   20958:	9cd61a04 	addi	r19,r19,22632
   2095c:	994b883a 	add	r5,r19,r5
   20960:	2c000317 	ldw	r16,12(r5)
   20964:	2c000e26 	beq	r5,r16,209a0 <_malloc_r+0x170>
   20968:	80c00117 	ldw	r3,4(r16)
   2096c:	01ffff04 	movi	r7,-4
   20970:	018003c4 	movi	r6,15
   20974:	19c6703a 	and	r3,r3,r7
   20978:	1c45c83a 	sub	r2,r3,r17
   2097c:	30800716 	blt	r6,r2,2099c <_malloc_r+0x16c>
   20980:	1000610e 	bge	r2,zero,20b08 <_malloc_r+0x2d8>
   20984:	84000317 	ldw	r16,12(r16)
   20988:	2c000526 	beq	r5,r16,209a0 <_malloc_r+0x170>
   2098c:	80c00117 	ldw	r3,4(r16)
   20990:	19c6703a 	and	r3,r3,r7
   20994:	1c45c83a 	sub	r2,r3,r17
   20998:	30bff90e 	bge	r6,r2,20980 <_malloc_r+0x150>
   2099c:	213fffc4 	addi	r4,r4,-1
   209a0:	21000044 	addi	r4,r4,1
   209a4:	9c000417 	ldw	r16,16(r19)
   209a8:	00c000b4 	movhi	r3,2
   209ac:	18d61a04 	addi	r3,r3,22632
   209b0:	1a400204 	addi	r9,r3,8
   209b4:	8240ff26 	beq	r16,r9,20db4 <_malloc_r+0x584>
   209b8:	81400117 	ldw	r5,4(r16)
   209bc:	00bfff04 	movi	r2,-4
   209c0:	018003c4 	movi	r6,15
   209c4:	2884703a 	and	r2,r5,r2
   209c8:	144bc83a 	sub	r5,r2,r17
   209cc:	3140ea16 	blt	r6,r5,20d78 <_malloc_r+0x548>
   209d0:	1a400515 	stw	r9,20(r3)
   209d4:	1a400415 	stw	r9,16(r3)
   209d8:	2800570e 	bge	r5,zero,20b38 <_malloc_r+0x308>
   209dc:	01407fc4 	movi	r5,511
   209e0:	2880ca36 	bltu	r5,r2,20d0c <_malloc_r+0x4dc>
   209e4:	1004d0fa 	srli	r2,r2,3
   209e8:	02000044 	movi	r8,1
   209ec:	19c00117 	ldw	r7,4(r3)
   209f0:	108b883a 	add	r5,r2,r2
   209f4:	294b883a 	add	r5,r5,r5
   209f8:	1005d0ba 	srai	r2,r2,2
   209fc:	294b883a 	add	r5,r5,r5
   20a00:	28cb883a 	add	r5,r5,r3
   20a04:	29800217 	ldw	r6,8(r5)
   20a08:	4084983a 	sll	r2,r8,r2
   20a0c:	81400315 	stw	r5,12(r16)
   20a10:	81800215 	stw	r6,8(r16)
   20a14:	11c4b03a 	or	r2,r2,r7
   20a18:	18800115 	stw	r2,4(r3)
   20a1c:	2c000215 	stw	r16,8(r5)
   20a20:	34000315 	stw	r16,12(r6)
   20a24:	200bd0ba 	srai	r5,r4,2
   20a28:	00c00044 	movi	r3,1
   20a2c:	194a983a 	sll	r5,r3,r5
   20a30:	11404936 	bltu	r2,r5,20b58 <_malloc_r+0x328>
   20a34:	1146703a 	and	r3,r2,r5
   20a38:	18000a1e 	bne	r3,zero,20a64 <_malloc_r+0x234>
   20a3c:	00ffff04 	movi	r3,-4
   20a40:	294b883a 	add	r5,r5,r5
   20a44:	20c8703a 	and	r4,r4,r3
   20a48:	1146703a 	and	r3,r2,r5
   20a4c:	21000104 	addi	r4,r4,4
   20a50:	1800041e 	bne	r3,zero,20a64 <_malloc_r+0x234>
   20a54:	294b883a 	add	r5,r5,r5
   20a58:	1146703a 	and	r3,r2,r5
   20a5c:	21000104 	addi	r4,r4,4
   20a60:	183ffc26 	beq	r3,zero,20a54 <_malloc_r+0x224>
   20a64:	023fff04 	movi	r8,-4
   20a68:	01c003c4 	movi	r7,15
   20a6c:	2105883a 	add	r2,r4,r4
   20a70:	1085883a 	add	r2,r2,r2
   20a74:	1085883a 	add	r2,r2,r2
   20a78:	9899883a 	add	r12,r19,r2
   20a7c:	62800304 	addi	r10,r12,12
   20a80:	2017883a 	mov	r11,r4
   20a84:	54000017 	ldw	r16,0(r10)
   20a88:	51bffd04 	addi	r6,r10,-12
   20a8c:	8180041e 	bne	r16,r6,20aa0 <_malloc_r+0x270>
   20a90:	0000ca06 	br	20dbc <_malloc_r+0x58c>
   20a94:	10001c0e 	bge	r2,zero,20b08 <_malloc_r+0x2d8>
   20a98:	84000317 	ldw	r16,12(r16)
   20a9c:	8180c726 	beq	r16,r6,20dbc <_malloc_r+0x58c>
   20aa0:	80c00117 	ldw	r3,4(r16)
   20aa4:	1a06703a 	and	r3,r3,r8
   20aa8:	1c45c83a 	sub	r2,r3,r17
   20aac:	38bff90e 	bge	r7,r2,20a94 <_malloc_r+0x264>
   20ab0:	81000317 	ldw	r4,12(r16)
   20ab4:	81400217 	ldw	r5,8(r16)
   20ab8:	8447883a 	add	r3,r16,r17
   20abc:	8c400054 	ori	r17,r17,1
   20ac0:	29000315 	stw	r4,12(r5)
   20ac4:	21400215 	stw	r5,8(r4)
   20ac8:	84400115 	stw	r17,4(r16)
   20acc:	1889883a 	add	r4,r3,r2
   20ad0:	11400054 	ori	r5,r2,1
   20ad4:	98c00515 	stw	r3,20(r19)
   20ad8:	98c00415 	stw	r3,16(r19)
   20adc:	20800015 	stw	r2,0(r4)
   20ae0:	1a400315 	stw	r9,12(r3)
   20ae4:	1a400215 	stw	r9,8(r3)
   20ae8:	19400115 	stw	r5,4(r3)
   20aec:	9009883a 	mov	r4,r18
   20af0:	00233500 	call	23350 <__malloc_unlock>
   20af4:	80800204 	addi	r2,r16,8
   20af8:	003f7b06 	br	208e8 <_malloc_r+0xb8>
   20afc:	8808d0fa 	srli	r4,r17,3
   20b00:	210b883a 	add	r5,r4,r4
   20b04:	003f9106 	br	2094c <_malloc_r+0x11c>
   20b08:	80c7883a 	add	r3,r16,r3
   20b0c:	19400117 	ldw	r5,4(r3)
   20b10:	80800317 	ldw	r2,12(r16)
   20b14:	81000217 	ldw	r4,8(r16)
   20b18:	29400054 	ori	r5,r5,1
   20b1c:	19400115 	stw	r5,4(r3)
   20b20:	20800315 	stw	r2,12(r4)
   20b24:	11000215 	stw	r4,8(r2)
   20b28:	9009883a 	mov	r4,r18
   20b2c:	00233500 	call	23350 <__malloc_unlock>
   20b30:	80800204 	addi	r2,r16,8
   20b34:	003f6c06 	br	208e8 <_malloc_r+0xb8>
   20b38:	8085883a 	add	r2,r16,r2
   20b3c:	10c00117 	ldw	r3,4(r2)
   20b40:	9009883a 	mov	r4,r18
   20b44:	18c00054 	ori	r3,r3,1
   20b48:	10c00115 	stw	r3,4(r2)
   20b4c:	00233500 	call	23350 <__malloc_unlock>
   20b50:	80800204 	addi	r2,r16,8
   20b54:	003f6406 	br	208e8 <_malloc_r+0xb8>
   20b58:	9c000217 	ldw	r16,8(r19)
   20b5c:	00bfff04 	movi	r2,-4
   20b60:	85400117 	ldw	r21,4(r16)
   20b64:	a8aa703a 	and	r21,r21,r2
   20b68:	ac400336 	bltu	r21,r17,20b78 <_malloc_r+0x348>
   20b6c:	ac45c83a 	sub	r2,r21,r17
   20b70:	00c003c4 	movi	r3,15
   20b74:	18805316 	blt	r3,r2,20cc4 <_malloc_r+0x494>
   20b78:	d5e6a217 	ldw	r23,-25976(gp)
   20b7c:	d0e00217 	ldw	r3,-32760(gp)
   20b80:	00bfffc4 	movi	r2,-1
   20b84:	8579883a 	add	fp,r16,r21
   20b88:	8def883a 	add	r23,r17,r23
   20b8c:	1880d226 	beq	r3,r2,20ed8 <_malloc_r+0x6a8>
   20b90:	bdc403c4 	addi	r23,r23,4111
   20b94:	00bc0004 	movi	r2,-4096
   20b98:	b8ae703a 	and	r23,r23,r2
   20b9c:	9009883a 	mov	r4,r18
   20ba0:	b80b883a 	mov	r5,r23
   20ba4:	00219740 	call	21974 <_sbrk_r>
   20ba8:	1029883a 	mov	r20,r2
   20bac:	00bfffc4 	movi	r2,-1
   20bb0:	a080d126 	beq	r20,r2,20ef8 <_malloc_r+0x6c8>
   20bb4:	a7009f36 	bltu	r20,fp,20e34 <_malloc_r+0x604>
   20bb8:	058000f4 	movhi	r22,3
   20bbc:	b5a24804 	addi	r22,r22,-30432
   20bc0:	b0800017 	ldw	r2,0(r22)
   20bc4:	b885883a 	add	r2,r23,r2
   20bc8:	b0800015 	stw	r2,0(r22)
   20bcc:	e500cf26 	beq	fp,r20,20f0c <_malloc_r+0x6dc>
   20bd0:	d1200217 	ldw	r4,-32760(gp)
   20bd4:	00ffffc4 	movi	r3,-1
   20bd8:	20c0e026 	beq	r4,r3,20f5c <_malloc_r+0x72c>
   20bdc:	a739c83a 	sub	fp,r20,fp
   20be0:	1705883a 	add	r2,r2,fp
   20be4:	b0800015 	stw	r2,0(r22)
   20be8:	a08001cc 	andi	r2,r20,7
   20bec:	1000a526 	beq	r2,zero,20e84 <_malloc_r+0x654>
   20bf0:	a0a9c83a 	sub	r20,r20,r2
   20bf4:	00c40204 	movi	r3,4104
   20bf8:	a5000204 	addi	r20,r20,8
   20bfc:	1885c83a 	sub	r2,r3,r2
   20c00:	a5c7883a 	add	r3,r20,r23
   20c04:	18c3ffcc 	andi	r3,r3,4095
   20c08:	10efc83a 	sub	r23,r2,r3
   20c0c:	9009883a 	mov	r4,r18
   20c10:	b80b883a 	mov	r5,r23
   20c14:	00219740 	call	21974 <_sbrk_r>
   20c18:	00ffffc4 	movi	r3,-1
   20c1c:	10c0cc26 	beq	r2,r3,20f50 <_malloc_r+0x720>
   20c20:	1505c83a 	sub	r2,r2,r20
   20c24:	b887883a 	add	r3,r23,r2
   20c28:	18c00054 	ori	r3,r3,1
   20c2c:	b0800017 	ldw	r2,0(r22)
   20c30:	9d000215 	stw	r20,8(r19)
   20c34:	a0c00115 	stw	r3,4(r20)
   20c38:	b885883a 	add	r2,r23,r2
   20c3c:	b0800015 	stw	r2,0(r22)
   20c40:	84c00e26 	beq	r16,r19,20c7c <_malloc_r+0x44c>
   20c44:	00c003c4 	movi	r3,15
   20c48:	1d40902e 	bgeu	r3,r21,20e8c <_malloc_r+0x65c>
   20c4c:	ad7ffd04 	addi	r21,r21,-12
   20c50:	013ffe04 	movi	r4,-8
   20c54:	a908703a 	and	r4,r21,r4
   20c58:	810b883a 	add	r5,r16,r4
   20c5c:	01800144 	movi	r6,5
   20c60:	29800115 	stw	r6,4(r5)
   20c64:	29800215 	stw	r6,8(r5)
   20c68:	81400117 	ldw	r5,4(r16)
   20c6c:	2940004c 	andi	r5,r5,1
   20c70:	214ab03a 	or	r5,r4,r5
   20c74:	81400115 	stw	r5,4(r16)
   20c78:	1900ae36 	bltu	r3,r4,20f34 <_malloc_r+0x704>
   20c7c:	d0e6a117 	ldw	r3,-25980(gp)
   20c80:	1880012e 	bgeu	r3,r2,20c88 <_malloc_r+0x458>
   20c84:	d0a6a115 	stw	r2,-25980(gp)
   20c88:	d0e6a017 	ldw	r3,-25984(gp)
   20c8c:	9c000217 	ldw	r16,8(r19)
   20c90:	1880012e 	bgeu	r3,r2,20c98 <_malloc_r+0x468>
   20c94:	d0a6a015 	stw	r2,-25984(gp)
   20c98:	80c00117 	ldw	r3,4(r16)
   20c9c:	00bfff04 	movi	r2,-4
   20ca0:	1886703a 	and	r3,r3,r2
   20ca4:	1c45c83a 	sub	r2,r3,r17
   20ca8:	1c400236 	bltu	r3,r17,20cb4 <_malloc_r+0x484>
   20cac:	00c003c4 	movi	r3,15
   20cb0:	18800416 	blt	r3,r2,20cc4 <_malloc_r+0x494>
   20cb4:	9009883a 	mov	r4,r18
   20cb8:	00233500 	call	23350 <__malloc_unlock>
   20cbc:	0005883a 	mov	r2,zero
   20cc0:	003f0906 	br	208e8 <_malloc_r+0xb8>
   20cc4:	88c00054 	ori	r3,r17,1
   20cc8:	10800054 	ori	r2,r2,1
   20ccc:	80c00115 	stw	r3,4(r16)
   20cd0:	8463883a 	add	r17,r16,r17
   20cd4:	88800115 	stw	r2,4(r17)
   20cd8:	9009883a 	mov	r4,r18
   20cdc:	9c400215 	stw	r17,8(r19)
   20ce0:	00233500 	call	23350 <__malloc_unlock>
   20ce4:	80800204 	addi	r2,r16,8
   20ce8:	003eff06 	br	208e8 <_malloc_r+0xb8>
   20cec:	00800504 	movi	r2,20
   20cf0:	1100492e 	bgeu	r2,r4,20e18 <_malloc_r+0x5e8>
   20cf4:	00801504 	movi	r2,84
   20cf8:	11005c36 	bltu	r2,r4,20e6c <_malloc_r+0x63c>
   20cfc:	8808d33a 	srli	r4,r17,12
   20d00:	21001b84 	addi	r4,r4,110
   20d04:	210b883a 	add	r5,r4,r4
   20d08:	003f1006 	br	2094c <_malloc_r+0x11c>
   20d0c:	1006d27a 	srli	r3,r2,9
   20d10:	01400104 	movi	r5,4
   20d14:	28c0432e 	bgeu	r5,r3,20e24 <_malloc_r+0x5f4>
   20d18:	01400504 	movi	r5,20
   20d1c:	28c07036 	bltu	r5,r3,20ee0 <_malloc_r+0x6b0>
   20d20:	194016c4 	addi	r5,r3,91
   20d24:	294d883a 	add	r6,r5,r5
   20d28:	318d883a 	add	r6,r6,r6
   20d2c:	318d883a 	add	r6,r6,r6
   20d30:	998d883a 	add	r6,r19,r6
   20d34:	30c00217 	ldw	r3,8(r6)
   20d38:	01c000b4 	movhi	r7,2
   20d3c:	39d61a04 	addi	r7,r7,22632
   20d40:	19805726 	beq	r3,r6,20ea0 <_malloc_r+0x670>
   20d44:	01ffff04 	movi	r7,-4
   20d48:	19400117 	ldw	r5,4(r3)
   20d4c:	29ca703a 	and	r5,r5,r7
   20d50:	1140022e 	bgeu	r2,r5,20d5c <_malloc_r+0x52c>
   20d54:	18c00217 	ldw	r3,8(r3)
   20d58:	30fffb1e 	bne	r6,r3,20d48 <_malloc_r+0x518>
   20d5c:	19400317 	ldw	r5,12(r3)
   20d60:	98800117 	ldw	r2,4(r19)
   20d64:	81400315 	stw	r5,12(r16)
   20d68:	80c00215 	stw	r3,8(r16)
   20d6c:	2c000215 	stw	r16,8(r5)
   20d70:	1c000315 	stw	r16,12(r3)
   20d74:	003f2b06 	br	20a24 <_malloc_r+0x1f4>
   20d78:	8445883a 	add	r2,r16,r17
   20d7c:	8c400054 	ori	r17,r17,1
   20d80:	18800515 	stw	r2,20(r3)
   20d84:	18800415 	stw	r2,16(r3)
   20d88:	29000054 	ori	r4,r5,1
   20d8c:	1147883a 	add	r3,r2,r5
   20d90:	84400115 	stw	r17,4(r16)
   20d94:	11000115 	stw	r4,4(r2)
   20d98:	12400315 	stw	r9,12(r2)
   20d9c:	12400215 	stw	r9,8(r2)
   20da0:	19400015 	stw	r5,0(r3)
   20da4:	9009883a 	mov	r4,r18
   20da8:	00233500 	call	23350 <__malloc_unlock>
   20dac:	80800204 	addi	r2,r16,8
   20db0:	003ecd06 	br	208e8 <_malloc_r+0xb8>
   20db4:	18800117 	ldw	r2,4(r3)
   20db8:	003f1a06 	br	20a24 <_malloc_r+0x1f4>
   20dbc:	5ac00044 	addi	r11,r11,1
   20dc0:	588000cc 	andi	r2,r11,3
   20dc4:	52800204 	addi	r10,r10,8
   20dc8:	103f2e1e 	bne	r2,zero,20a84 <_malloc_r+0x254>
   20dcc:	20c000cc 	andi	r3,r4,3
   20dd0:	60bffe04 	addi	r2,r12,-8
   20dd4:	18006f26 	beq	r3,zero,20f94 <_malloc_r+0x764>
   20dd8:	63000017 	ldw	r12,0(r12)
   20ddc:	213fffc4 	addi	r4,r4,-1
   20de0:	60bffa26 	beq	r12,r2,20dcc <_malloc_r+0x59c>
   20de4:	98800117 	ldw	r2,4(r19)
   20de8:	294b883a 	add	r5,r5,r5
   20dec:	117f5a36 	bltu	r2,r5,20b58 <_malloc_r+0x328>
   20df0:	283f5926 	beq	r5,zero,20b58 <_malloc_r+0x328>
   20df4:	1146703a 	and	r3,r2,r5
   20df8:	18001626 	beq	r3,zero,20e54 <_malloc_r+0x624>
   20dfc:	5809883a 	mov	r4,r11
   20e00:	003f1a06 	br	20a6c <_malloc_r+0x23c>
   20e04:	80800204 	addi	r2,r16,8
   20e08:	84000517 	ldw	r16,20(r16)
   20e0c:	143ea81e 	bne	r2,r16,208b0 <_malloc_r+0x80>
   20e10:	21000084 	addi	r4,r4,2
   20e14:	003ee306 	br	209a4 <_malloc_r+0x174>
   20e18:	210016c4 	addi	r4,r4,91
   20e1c:	210b883a 	add	r5,r4,r4
   20e20:	003eca06 	br	2094c <_malloc_r+0x11c>
   20e24:	100ad1ba 	srli	r5,r2,6
   20e28:	29400e04 	addi	r5,r5,56
   20e2c:	294d883a 	add	r6,r5,r5
   20e30:	003fbd06 	br	20d28 <_malloc_r+0x4f8>
   20e34:	84ff6026 	beq	r16,r19,20bb8 <_malloc_r+0x388>
   20e38:	008000b4 	movhi	r2,2
   20e3c:	10961a04 	addi	r2,r2,22632
   20e40:	14000217 	ldw	r16,8(r2)
   20e44:	00bfff04 	movi	r2,-4
   20e48:	80c00117 	ldw	r3,4(r16)
   20e4c:	1886703a 	and	r3,r3,r2
   20e50:	003f9406 	br	20ca4 <_malloc_r+0x474>
   20e54:	294b883a 	add	r5,r5,r5
   20e58:	1146703a 	and	r3,r2,r5
   20e5c:	5ac00104 	addi	r11,r11,4
   20e60:	183ffc26 	beq	r3,zero,20e54 <_malloc_r+0x624>
   20e64:	5809883a 	mov	r4,r11
   20e68:	003f0006 	br	20a6c <_malloc_r+0x23c>
   20e6c:	00805504 	movi	r2,340
   20e70:	11001336 	bltu	r2,r4,20ec0 <_malloc_r+0x690>
   20e74:	8808d3fa 	srli	r4,r17,15
   20e78:	21001dc4 	addi	r4,r4,119
   20e7c:	210b883a 	add	r5,r4,r4
   20e80:	003eb206 	br	2094c <_malloc_r+0x11c>
   20e84:	00840004 	movi	r2,4096
   20e88:	003f5d06 	br	20c00 <_malloc_r+0x3d0>
   20e8c:	00800044 	movi	r2,1
   20e90:	a0800115 	stw	r2,4(r20)
   20e94:	a021883a 	mov	r16,r20
   20e98:	0007883a 	mov	r3,zero
   20e9c:	003f8106 	br	20ca4 <_malloc_r+0x474>
   20ea0:	280bd0ba 	srai	r5,r5,2
   20ea4:	01800044 	movi	r6,1
   20ea8:	38800117 	ldw	r2,4(r7)
   20eac:	314c983a 	sll	r6,r6,r5
   20eb0:	180b883a 	mov	r5,r3
   20eb4:	3084b03a 	or	r2,r6,r2
   20eb8:	38800115 	stw	r2,4(r7)
   20ebc:	003fa906 	br	20d64 <_malloc_r+0x534>
   20ec0:	00815504 	movi	r2,1364
   20ec4:	11001836 	bltu	r2,r4,20f28 <_malloc_r+0x6f8>
   20ec8:	8808d4ba 	srli	r4,r17,18
   20ecc:	21001f04 	addi	r4,r4,124
   20ed0:	210b883a 	add	r5,r4,r4
   20ed4:	003e9d06 	br	2094c <_malloc_r+0x11c>
   20ed8:	bdc00404 	addi	r23,r23,16
   20edc:	003f2f06 	br	20b9c <_malloc_r+0x36c>
   20ee0:	01401504 	movi	r5,84
   20ee4:	28c01f36 	bltu	r5,r3,20f64 <_malloc_r+0x734>
   20ee8:	100ad33a 	srli	r5,r2,12
   20eec:	29401b84 	addi	r5,r5,110
   20ef0:	294d883a 	add	r6,r5,r5
   20ef4:	003f8c06 	br	20d28 <_malloc_r+0x4f8>
   20ef8:	9c000217 	ldw	r16,8(r19)
   20efc:	00bfff04 	movi	r2,-4
   20f00:	80c00117 	ldw	r3,4(r16)
   20f04:	1886703a 	and	r3,r3,r2
   20f08:	003f6606 	br	20ca4 <_malloc_r+0x474>
   20f0c:	e0c3ffcc 	andi	r3,fp,4095
   20f10:	183f2f1e 	bne	r3,zero,20bd0 <_malloc_r+0x3a0>
   20f14:	98c00217 	ldw	r3,8(r19)
   20f18:	bd49883a 	add	r4,r23,r21
   20f1c:	21000054 	ori	r4,r4,1
   20f20:	19000115 	stw	r4,4(r3)
   20f24:	003f5506 	br	20c7c <_malloc_r+0x44c>
   20f28:	01403f04 	movi	r5,252
   20f2c:	01001f84 	movi	r4,126
   20f30:	003e8606 	br	2094c <_malloc_r+0x11c>
   20f34:	9009883a 	mov	r4,r18
   20f38:	81400204 	addi	r5,r16,8
   20f3c:	002218c0 	call	2218c <_free_r>
   20f40:	008000f4 	movhi	r2,3
   20f44:	10a24804 	addi	r2,r2,-30432
   20f48:	10800017 	ldw	r2,0(r2)
   20f4c:	003f4b06 	br	20c7c <_malloc_r+0x44c>
   20f50:	00c00044 	movi	r3,1
   20f54:	002f883a 	mov	r23,zero
   20f58:	003f3406 	br	20c2c <_malloc_r+0x3fc>
   20f5c:	d5200215 	stw	r20,-32760(gp)
   20f60:	003f2106 	br	20be8 <_malloc_r+0x3b8>
   20f64:	01405504 	movi	r5,340
   20f68:	28c00436 	bltu	r5,r3,20f7c <_malloc_r+0x74c>
   20f6c:	100ad3fa 	srli	r5,r2,15
   20f70:	29401dc4 	addi	r5,r5,119
   20f74:	294d883a 	add	r6,r5,r5
   20f78:	003f6b06 	br	20d28 <_malloc_r+0x4f8>
   20f7c:	01415504 	movi	r5,1364
   20f80:	28c00936 	bltu	r5,r3,20fa8 <_malloc_r+0x778>
   20f84:	100ad4ba 	srli	r5,r2,18
   20f88:	29401f04 	addi	r5,r5,124
   20f8c:	294d883a 	add	r6,r5,r5
   20f90:	003f6506 	br	20d28 <_malloc_r+0x4f8>
   20f94:	98800117 	ldw	r2,4(r19)
   20f98:	0146303a 	nor	r3,zero,r5
   20f9c:	1884703a 	and	r2,r3,r2
   20fa0:	98800115 	stw	r2,4(r19)
   20fa4:	003f9006 	br	20de8 <_malloc_r+0x5b8>
   20fa8:	01803f04 	movi	r6,252
   20fac:	01401f84 	movi	r5,126
   20fb0:	003f5d06 	br	20d28 <_malloc_r+0x4f8>

00020fb4 <memchr>:
   20fb4:	008000c4 	movi	r2,3
   20fb8:	29403fcc 	andi	r5,r5,255
   20fbc:	1180282e 	bgeu	r2,r6,21060 <memchr+0xac>
   20fc0:	2086703a 	and	r3,r4,r2
   20fc4:	1800351e 	bne	r3,zero,2109c <memchr+0xe8>
   20fc8:	2816923a 	slli	r11,r5,8
   20fcc:	2093883a 	add	r9,r4,r2
   20fd0:	22000084 	addi	r8,r4,2
   20fd4:	5957883a 	add	r11,r11,r5
   20fd8:	5816923a 	slli	r11,r11,8
   20fdc:	20c00044 	addi	r3,r4,1
   20fe0:	037fbff4 	movhi	r13,65279
   20fe4:	6b7fbfc4 	addi	r13,r13,-257
   20fe8:	5957883a 	add	r11,r11,r5
   20fec:	5816923a 	slli	r11,r11,8
   20ff0:	03202074 	movhi	r12,32897
   20ff4:	63202004 	addi	r12,r12,-32640
   20ff8:	101d883a 	mov	r14,r2
   20ffc:	5957883a 	add	r11,r11,r5
   21000:	21c00017 	ldw	r7,0(r4)
   21004:	31bfff04 	addi	r6,r6,-4
   21008:	1805883a 	mov	r2,r3
   2100c:	3acef03a 	xor	r7,r7,r11
   21010:	3b55883a 	add	r10,r7,r13
   21014:	01ce303a 	nor	r7,zero,r7
   21018:	51ce703a 	and	r7,r10,r7
   2101c:	3b0e703a 	and	r7,r7,r12
   21020:	38000a26 	beq	r7,zero,2104c <memchr+0x98>
   21024:	21c00003 	ldbu	r7,0(r4)
   21028:	39401e26 	beq	r7,r5,210a4 <memchr+0xf0>
   2102c:	19c00003 	ldbu	r7,0(r3)
   21030:	39401926 	beq	r7,r5,21098 <memchr+0xe4>
   21034:	41c00003 	ldbu	r7,0(r8)
   21038:	4005883a 	mov	r2,r8
   2103c:	39401626 	beq	r7,r5,21098 <memchr+0xe4>
   21040:	49c00003 	ldbu	r7,0(r9)
   21044:	4805883a 	mov	r2,r9
   21048:	39401326 	beq	r7,r5,21098 <memchr+0xe4>
   2104c:	21000104 	addi	r4,r4,4
   21050:	4a400104 	addi	r9,r9,4
   21054:	42000104 	addi	r8,r8,4
   21058:	18c00104 	addi	r3,r3,4
   2105c:	71bfe836 	bltu	r14,r6,21000 <memchr+0x4c>
   21060:	2005883a 	mov	r2,r4
   21064:	30000a26 	beq	r6,zero,21090 <memchr+0xdc>
   21068:	10c00003 	ldbu	r3,0(r2)
   2106c:	19400a26 	beq	r3,r5,21098 <memchr+0xe4>
   21070:	10c00044 	addi	r3,r2,1
   21074:	118d883a 	add	r6,r2,r6
   21078:	00000306 	br	21088 <memchr+0xd4>
   2107c:	11000003 	ldbu	r4,0(r2)
   21080:	18c00044 	addi	r3,r3,1
   21084:	21400426 	beq	r4,r5,21098 <memchr+0xe4>
   21088:	1805883a 	mov	r2,r3
   2108c:	19bffb1e 	bne	r3,r6,2107c <memchr+0xc8>
   21090:	0005883a 	mov	r2,zero
   21094:	f800283a 	ret
   21098:	f800283a 	ret
   2109c:	2005883a 	mov	r2,r4
   210a0:	003ff106 	br	21068 <memchr+0xb4>
   210a4:	2005883a 	mov	r2,r4
   210a8:	f800283a 	ret

000210ac <memcpy>:
   210ac:	defffb04 	addi	sp,sp,-20
   210b0:	dc000015 	stw	r16,0(sp)
   210b4:	dfc00415 	stw	ra,16(sp)
   210b8:	dcc00315 	stw	r19,12(sp)
   210bc:	dc800215 	stw	r18,8(sp)
   210c0:	dc400115 	stw	r17,4(sp)
   210c4:	00c003c4 	movi	r3,15
   210c8:	2021883a 	mov	r16,r4
   210cc:	3005883a 	mov	r2,r6
   210d0:	1980032e 	bgeu	r3,r6,210e0 <memcpy+0x34>
   210d4:	2906b03a 	or	r3,r5,r4
   210d8:	18c000cc 	andi	r3,r3,3
   210dc:	18001026 	beq	r3,zero,21120 <memcpy+0x74>
   210e0:	8007883a 	mov	r3,r16
   210e4:	288f883a 	add	r7,r5,r2
   210e8:	10000526 	beq	r2,zero,21100 <memcpy+0x54>
   210ec:	29800003 	ldbu	r6,0(r5)
   210f0:	18c00044 	addi	r3,r3,1
   210f4:	29400044 	addi	r5,r5,1
   210f8:	19bfffc5 	stb	r6,-1(r3)
   210fc:	29fffb1e 	bne	r5,r7,210ec <memcpy+0x40>
   21100:	8005883a 	mov	r2,r16
   21104:	dfc00417 	ldw	ra,16(sp)
   21108:	dcc00317 	ldw	r19,12(sp)
   2110c:	dc800217 	ldw	r18,8(sp)
   21110:	dc400117 	ldw	r17,4(sp)
   21114:	dc000017 	ldw	r16,0(sp)
   21118:	dec00504 	addi	sp,sp,20
   2111c:	f800283a 	ret
   21120:	32bffc04 	addi	r10,r6,-16
   21124:	5014d13a 	srli	r10,r10,4
   21128:	20800404 	addi	r2,r4,16
   2112c:	2007883a 	mov	r3,r4
   21130:	5008913a 	slli	r4,r10,4
   21134:	280f883a 	mov	r7,r5
   21138:	1105883a 	add	r2,r2,r4
   2113c:	3a000017 	ldw	r8,0(r7)
   21140:	18c00404 	addi	r3,r3,16
   21144:	39c00404 	addi	r7,r7,16
   21148:	1a3ffc15 	stw	r8,-16(r3)
   2114c:	3a3ffd17 	ldw	r8,-12(r7)
   21150:	1a3ffd15 	stw	r8,-12(r3)
   21154:	3a3ffe17 	ldw	r8,-8(r7)
   21158:	1a3ffe15 	stw	r8,-8(r3)
   2115c:	3a3fff17 	ldw	r8,-4(r7)
   21160:	1a3fff15 	stw	r8,-4(r3)
   21164:	18bff51e 	bne	r3,r2,2113c <memcpy+0x90>
   21168:	52800044 	addi	r10,r10,1
   2116c:	5014913a 	slli	r10,r10,4
   21170:	308003cc 	andi	r2,r6,15
   21174:	010000c4 	movi	r4,3
   21178:	8287883a 	add	r3,r16,r10
   2117c:	2a95883a 	add	r10,r5,r10
   21180:	2080182e 	bgeu	r4,r2,211e4 <memcpy+0x138>
   21184:	147fff04 	addi	r17,r2,-4
   21188:	8808d0ba 	srli	r4,r17,2
   2118c:	1a400104 	addi	r9,r3,4
   21190:	180d883a 	mov	r6,r3
   21194:	2105883a 	add	r2,r4,r4
   21198:	1085883a 	add	r2,r2,r2
   2119c:	4893883a 	add	r9,r9,r2
   211a0:	500f883a 	mov	r7,r10
   211a4:	3a000017 	ldw	r8,0(r7)
   211a8:	31800104 	addi	r6,r6,4
   211ac:	39c00104 	addi	r7,r7,4
   211b0:	323fff15 	stw	r8,-4(r6)
   211b4:	327ffb1e 	bne	r6,r9,211a4 <memcpy+0xf8>
   211b8:	20800044 	addi	r2,r4,1
   211bc:	1085883a 	add	r2,r2,r2
   211c0:	1085883a 	add	r2,r2,r2
   211c4:	017fff04 	movi	r5,-4
   211c8:	18a5883a 	add	r18,r3,r2
   211cc:	50a7883a 	add	r19,r10,r2
   211d0:	0022d440 	call	22d44 <__mulsi3>
   211d4:	1445883a 	add	r2,r2,r17
   211d8:	980b883a 	mov	r5,r19
   211dc:	9007883a 	mov	r3,r18
   211e0:	003fc006 	br	210e4 <memcpy+0x38>
   211e4:	500b883a 	mov	r5,r10
   211e8:	003fbe06 	br	210e4 <memcpy+0x38>

000211ec <memmove>:
   211ec:	defffb04 	addi	sp,sp,-20
   211f0:	dc000015 	stw	r16,0(sp)
   211f4:	dfc00415 	stw	ra,16(sp)
   211f8:	dcc00315 	stw	r19,12(sp)
   211fc:	dc800215 	stw	r18,8(sp)
   21200:	dc400115 	stw	r17,4(sp)
   21204:	2021883a 	mov	r16,r4
   21208:	300f883a 	mov	r7,r6
   2120c:	2900122e 	bgeu	r5,r4,21258 <memmove+0x6c>
   21210:	2987883a 	add	r3,r5,r6
   21214:	20c0102e 	bgeu	r4,r3,21258 <memmove+0x6c>
   21218:	218b883a 	add	r5,r4,r6
   2121c:	1989c83a 	sub	r4,r3,r6
   21220:	30000526 	beq	r6,zero,21238 <memmove+0x4c>
   21224:	18ffffc4 	addi	r3,r3,-1
   21228:	18800003 	ldbu	r2,0(r3)
   2122c:	297fffc4 	addi	r5,r5,-1
   21230:	28800005 	stb	r2,0(r5)
   21234:	193ffb1e 	bne	r3,r4,21224 <memmove+0x38>
   21238:	8005883a 	mov	r2,r16
   2123c:	dfc00417 	ldw	ra,16(sp)
   21240:	dcc00317 	ldw	r19,12(sp)
   21244:	dc800217 	ldw	r18,8(sp)
   21248:	dc400117 	ldw	r17,4(sp)
   2124c:	dc000017 	ldw	r16,0(sp)
   21250:	dec00504 	addi	sp,sp,20
   21254:	f800283a 	ret
   21258:	008003c4 	movi	r2,15
   2125c:	1180422e 	bgeu	r2,r6,21368 <memmove+0x17c>
   21260:	2c04b03a 	or	r2,r5,r16
   21264:	108000cc 	andi	r2,r2,3
   21268:	10003f1e 	bne	r2,zero,21368 <memmove+0x17c>
   2126c:	32bffc04 	addi	r10,r6,-16
   21270:	5014d13a 	srli	r10,r10,4
   21274:	81000404 	addi	r4,r16,16
   21278:	8007883a 	mov	r3,r16
   2127c:	5004913a 	slli	r2,r10,4
   21280:	280f883a 	mov	r7,r5
   21284:	2089883a 	add	r4,r4,r2
   21288:	38800017 	ldw	r2,0(r7)
   2128c:	18c00404 	addi	r3,r3,16
   21290:	39c00404 	addi	r7,r7,16
   21294:	18bffc15 	stw	r2,-16(r3)
   21298:	38bffd17 	ldw	r2,-12(r7)
   2129c:	18bffd15 	stw	r2,-12(r3)
   212a0:	38bffe17 	ldw	r2,-8(r7)
   212a4:	18bffe15 	stw	r2,-8(r3)
   212a8:	38bfff17 	ldw	r2,-4(r7)
   212ac:	18bfff15 	stw	r2,-4(r3)
   212b0:	193ff51e 	bne	r3,r4,21288 <memmove+0x9c>
   212b4:	52800044 	addi	r10,r10,1
   212b8:	5014913a 	slli	r10,r10,4
   212bc:	31c003cc 	andi	r7,r6,15
   212c0:	008000c4 	movi	r2,3
   212c4:	8287883a 	add	r3,r16,r10
   212c8:	2a95883a 	add	r10,r5,r10
   212cc:	11c0282e 	bgeu	r2,r7,21370 <memmove+0x184>
   212d0:	3c7fff04 	addi	r17,r7,-4
   212d4:	8808d0ba 	srli	r4,r17,2
   212d8:	1a400104 	addi	r9,r3,4
   212dc:	180d883a 	mov	r6,r3
   212e0:	2105883a 	add	r2,r4,r4
   212e4:	1085883a 	add	r2,r2,r2
   212e8:	4893883a 	add	r9,r9,r2
   212ec:	5005883a 	mov	r2,r10
   212f0:	12000017 	ldw	r8,0(r2)
   212f4:	31800104 	addi	r6,r6,4
   212f8:	10800104 	addi	r2,r2,4
   212fc:	323fff15 	stw	r8,-4(r6)
   21300:	327ffb1e 	bne	r6,r9,212f0 <memmove+0x104>
   21304:	20800044 	addi	r2,r4,1
   21308:	1085883a 	add	r2,r2,r2
   2130c:	1085883a 	add	r2,r2,r2
   21310:	017fff04 	movi	r5,-4
   21314:	18a5883a 	add	r18,r3,r2
   21318:	50a7883a 	add	r19,r10,r2
   2131c:	0022d440 	call	22d44 <__mulsi3>
   21320:	144f883a 	add	r7,r2,r17
   21324:	980b883a 	mov	r5,r19
   21328:	9007883a 	mov	r3,r18
   2132c:	383fc226 	beq	r7,zero,21238 <memmove+0x4c>
   21330:	19cf883a 	add	r7,r3,r7
   21334:	29800003 	ldbu	r6,0(r5)
   21338:	18c00044 	addi	r3,r3,1
   2133c:	29400044 	addi	r5,r5,1
   21340:	19bfffc5 	stb	r6,-1(r3)
   21344:	19fffb1e 	bne	r3,r7,21334 <memmove+0x148>
   21348:	8005883a 	mov	r2,r16
   2134c:	dfc00417 	ldw	ra,16(sp)
   21350:	dcc00317 	ldw	r19,12(sp)
   21354:	dc800217 	ldw	r18,8(sp)
   21358:	dc400117 	ldw	r17,4(sp)
   2135c:	dc000017 	ldw	r16,0(sp)
   21360:	dec00504 	addi	sp,sp,20
   21364:	f800283a 	ret
   21368:	8007883a 	mov	r3,r16
   2136c:	003fef06 	br	2132c <memmove+0x140>
   21370:	500b883a 	mov	r5,r10
   21374:	003fed06 	br	2132c <memmove+0x140>

00021378 <_realloc_r>:
   21378:	defff504 	addi	sp,sp,-44
   2137c:	dd400615 	stw	r21,24(sp)
   21380:	dc800315 	stw	r18,12(sp)
   21384:	dc000115 	stw	r16,4(sp)
   21388:	dfc00a15 	stw	ra,40(sp)
   2138c:	df000915 	stw	fp,36(sp)
   21390:	ddc00815 	stw	r23,32(sp)
   21394:	dd800715 	stw	r22,28(sp)
   21398:	dd000515 	stw	r20,20(sp)
   2139c:	dcc00415 	stw	r19,16(sp)
   213a0:	dc400215 	stw	r17,8(sp)
   213a4:	2821883a 	mov	r16,r5
   213a8:	202b883a 	mov	r21,r4
   213ac:	3025883a 	mov	r18,r6
   213b0:	28009626 	beq	r5,zero,2160c <_realloc_r+0x294>
   213b4:	00233300 	call	23330 <__malloc_lock>
   213b8:	80bfff17 	ldw	r2,-4(r16)
   213bc:	04ffff04 	movi	r19,-4
   213c0:	90c002c4 	addi	r3,r18,11
   213c4:	01000584 	movi	r4,22
   213c8:	85bffe04 	addi	r22,r16,-8
   213cc:	14e6703a 	and	r19,r2,r19
   213d0:	20c0372e 	bgeu	r4,r3,214b0 <_realloc_r+0x138>
   213d4:	047ffe04 	movi	r17,-8
   213d8:	1c62703a 	and	r17,r3,r17
   213dc:	8807883a 	mov	r3,r17
   213e0:	88005a16 	blt	r17,zero,2154c <_realloc_r+0x1d4>
   213e4:	8c805936 	bltu	r17,r18,2154c <_realloc_r+0x1d4>
   213e8:	98c0340e 	bge	r19,r3,214bc <_realloc_r+0x144>
   213ec:	070000b4 	movhi	fp,2
   213f0:	e7161a04 	addi	fp,fp,22632
   213f4:	e1400217 	ldw	r5,8(fp)
   213f8:	b4c9883a 	add	r4,r22,r19
   213fc:	29009026 	beq	r5,r4,21640 <_realloc_r+0x2c8>
   21400:	21800117 	ldw	r6,4(r4)
   21404:	01ffff84 	movi	r7,-2
   21408:	31ce703a 	and	r7,r6,r7
   2140c:	21cf883a 	add	r7,r4,r7
   21410:	39c00117 	ldw	r7,4(r7)
   21414:	39c0004c 	andi	r7,r7,1
   21418:	38004326 	beq	r7,zero,21528 <_realloc_r+0x1b0>
   2141c:	000d883a 	mov	r6,zero
   21420:	0009883a 	mov	r4,zero
   21424:	1080004c 	andi	r2,r2,1
   21428:	10005a1e 	bne	r2,zero,21594 <_realloc_r+0x21c>
   2142c:	85fffe17 	ldw	r23,-8(r16)
   21430:	00bfff04 	movi	r2,-4
   21434:	b5efc83a 	sub	r23,r22,r23
   21438:	b9c00117 	ldw	r7,4(r23)
   2143c:	388e703a 	and	r7,r7,r2
   21440:	3ccf883a 	add	r7,r7,r19
   21444:	20005226 	beq	r4,zero,21590 <_realloc_r+0x218>
   21448:	31e9883a 	add	r20,r6,r7
   2144c:	2140c726 	beq	r4,r5,2176c <_realloc_r+0x3f4>
   21450:	a0c04f16 	blt	r20,r3,21590 <_realloc_r+0x218>
   21454:	20800317 	ldw	r2,12(r4)
   21458:	20c00217 	ldw	r3,8(r4)
   2145c:	99bfff04 	addi	r6,r19,-4
   21460:	01000904 	movi	r4,36
   21464:	18800315 	stw	r2,12(r3)
   21468:	10c00215 	stw	r3,8(r2)
   2146c:	b8c00217 	ldw	r3,8(r23)
   21470:	b8800317 	ldw	r2,12(r23)
   21474:	bc800204 	addi	r18,r23,8
   21478:	18800315 	stw	r2,12(r3)
   2147c:	10c00215 	stw	r3,8(r2)
   21480:	2180ed36 	bltu	r4,r6,21838 <_realloc_r+0x4c0>
   21484:	008004c4 	movi	r2,19
   21488:	11809b2e 	bgeu	r2,r6,216f8 <_realloc_r+0x380>
   2148c:	80800017 	ldw	r2,0(r16)
   21490:	b8800215 	stw	r2,8(r23)
   21494:	80800117 	ldw	r2,4(r16)
   21498:	b8800315 	stw	r2,12(r23)
   2149c:	008006c4 	movi	r2,27
   214a0:	1180f936 	bltu	r2,r6,21888 <_realloc_r+0x510>
   214a4:	b8800404 	addi	r2,r23,16
   214a8:	80c00204 	addi	r3,r16,8
   214ac:	00009406 	br	21700 <_realloc_r+0x388>
   214b0:	00c00404 	movi	r3,16
   214b4:	1823883a 	mov	r17,r3
   214b8:	003fca06 	br	213e4 <_realloc_r+0x6c>
   214bc:	9829883a 	mov	r20,r19
   214c0:	a447c83a 	sub	r3,r20,r17
   214c4:	010003c4 	movi	r4,15
   214c8:	1080004c 	andi	r2,r2,1
   214cc:	20c02336 	bltu	r4,r3,2155c <_realloc_r+0x1e4>
   214d0:	1504b03a 	or	r2,r2,r20
   214d4:	b0800115 	stw	r2,4(r22)
   214d8:	b52d883a 	add	r22,r22,r20
   214dc:	b0800117 	ldw	r2,4(r22)
   214e0:	10800054 	ori	r2,r2,1
   214e4:	b0800115 	stw	r2,4(r22)
   214e8:	a809883a 	mov	r4,r21
   214ec:	00233500 	call	23350 <__malloc_unlock>
   214f0:	8025883a 	mov	r18,r16
   214f4:	9005883a 	mov	r2,r18
   214f8:	dfc00a17 	ldw	ra,40(sp)
   214fc:	df000917 	ldw	fp,36(sp)
   21500:	ddc00817 	ldw	r23,32(sp)
   21504:	dd800717 	ldw	r22,28(sp)
   21508:	dd400617 	ldw	r21,24(sp)
   2150c:	dd000517 	ldw	r20,20(sp)
   21510:	dcc00417 	ldw	r19,16(sp)
   21514:	dc800317 	ldw	r18,12(sp)
   21518:	dc400217 	ldw	r17,8(sp)
   2151c:	dc000117 	ldw	r16,4(sp)
   21520:	dec00b04 	addi	sp,sp,44
   21524:	f800283a 	ret
   21528:	01ffff04 	movi	r7,-4
   2152c:	31cc703a 	and	r6,r6,r7
   21530:	34e9883a 	add	r20,r6,r19
   21534:	a0ffbb16 	blt	r20,r3,21424 <_realloc_r+0xac>
   21538:	20c00317 	ldw	r3,12(r4)
   2153c:	21000217 	ldw	r4,8(r4)
   21540:	20c00315 	stw	r3,12(r4)
   21544:	19000215 	stw	r4,8(r3)
   21548:	003fdd06 	br	214c0 <_realloc_r+0x148>
   2154c:	00800304 	movi	r2,12
   21550:	a8800015 	stw	r2,0(r21)
   21554:	0025883a 	mov	r18,zero
   21558:	003fe606 	br	214f4 <_realloc_r+0x17c>
   2155c:	1444b03a 	or	r2,r2,r17
   21560:	b0800115 	stw	r2,4(r22)
   21564:	b44b883a 	add	r5,r22,r17
   21568:	18800054 	ori	r2,r3,1
   2156c:	28800115 	stw	r2,4(r5)
   21570:	28c7883a 	add	r3,r5,r3
   21574:	18800117 	ldw	r2,4(r3)
   21578:	a809883a 	mov	r4,r21
   2157c:	29400204 	addi	r5,r5,8
   21580:	10800054 	ori	r2,r2,1
   21584:	18800115 	stw	r2,4(r3)
   21588:	002218c0 	call	2218c <_free_r>
   2158c:	003fd606 	br	214e8 <_realloc_r+0x170>
   21590:	38c0330e 	bge	r7,r3,21660 <_realloc_r+0x2e8>
   21594:	900b883a 	mov	r5,r18
   21598:	a809883a 	mov	r4,r21
   2159c:	00208300 	call	20830 <_malloc_r>
   215a0:	1025883a 	mov	r18,r2
   215a4:	10001626 	beq	r2,zero,21600 <_realloc_r+0x288>
   215a8:	80bfff17 	ldw	r2,-4(r16)
   215ac:	00ffff84 	movi	r3,-2
   215b0:	913ffe04 	addi	r4,r18,-8
   215b4:	10c6703a 	and	r3,r2,r3
   215b8:	b0c7883a 	add	r3,r22,r3
   215bc:	20c09926 	beq	r4,r3,21824 <_realloc_r+0x4ac>
   215c0:	99bfff04 	addi	r6,r19,-4
   215c4:	00800904 	movi	r2,36
   215c8:	11806436 	bltu	r2,r6,2175c <_realloc_r+0x3e4>
   215cc:	00c004c4 	movi	r3,19
   215d0:	19804036 	bltu	r3,r6,216d4 <_realloc_r+0x35c>
   215d4:	9005883a 	mov	r2,r18
   215d8:	8007883a 	mov	r3,r16
   215dc:	19000017 	ldw	r4,0(r3)
   215e0:	11000015 	stw	r4,0(r2)
   215e4:	19000117 	ldw	r4,4(r3)
   215e8:	11000115 	stw	r4,4(r2)
   215ec:	18c00217 	ldw	r3,8(r3)
   215f0:	10c00215 	stw	r3,8(r2)
   215f4:	a809883a 	mov	r4,r21
   215f8:	800b883a 	mov	r5,r16
   215fc:	002218c0 	call	2218c <_free_r>
   21600:	a809883a 	mov	r4,r21
   21604:	00233500 	call	23350 <__malloc_unlock>
   21608:	003fba06 	br	214f4 <_realloc_r+0x17c>
   2160c:	300b883a 	mov	r5,r6
   21610:	dfc00a17 	ldw	ra,40(sp)
   21614:	df000917 	ldw	fp,36(sp)
   21618:	ddc00817 	ldw	r23,32(sp)
   2161c:	dd800717 	ldw	r22,28(sp)
   21620:	dd400617 	ldw	r21,24(sp)
   21624:	dd000517 	ldw	r20,20(sp)
   21628:	dcc00417 	ldw	r19,16(sp)
   2162c:	dc800317 	ldw	r18,12(sp)
   21630:	dc400217 	ldw	r17,8(sp)
   21634:	dc000117 	ldw	r16,4(sp)
   21638:	dec00b04 	addi	sp,sp,44
   2163c:	00208301 	jmpi	20830 <_malloc_r>
   21640:	29800117 	ldw	r6,4(r5)
   21644:	013fff04 	movi	r4,-4
   21648:	89c00404 	addi	r7,r17,16
   2164c:	310c703a 	and	r6,r6,r4
   21650:	34c9883a 	add	r4,r6,r19
   21654:	21c0340e 	bge	r4,r7,21728 <_realloc_r+0x3b0>
   21658:	2809883a 	mov	r4,r5
   2165c:	003f7106 	br	21424 <_realloc_r+0xac>
   21660:	b8800317 	ldw	r2,12(r23)
   21664:	b8c00217 	ldw	r3,8(r23)
   21668:	99bfff04 	addi	r6,r19,-4
   2166c:	01000904 	movi	r4,36
   21670:	18800315 	stw	r2,12(r3)
   21674:	10c00215 	stw	r3,8(r2)
   21678:	bc800204 	addi	r18,r23,8
   2167c:	21807836 	bltu	r4,r6,21860 <_realloc_r+0x4e8>
   21680:	008004c4 	movi	r2,19
   21684:	1180732e 	bgeu	r2,r6,21854 <_realloc_r+0x4dc>
   21688:	80800017 	ldw	r2,0(r16)
   2168c:	b8800215 	stw	r2,8(r23)
   21690:	80800117 	ldw	r2,4(r16)
   21694:	b8800315 	stw	r2,12(r23)
   21698:	008006c4 	movi	r2,27
   2169c:	11808936 	bltu	r2,r6,218c4 <_realloc_r+0x54c>
   216a0:	b8800404 	addi	r2,r23,16
   216a4:	80c00204 	addi	r3,r16,8
   216a8:	19000017 	ldw	r4,0(r3)
   216ac:	9021883a 	mov	r16,r18
   216b0:	3829883a 	mov	r20,r7
   216b4:	11000015 	stw	r4,0(r2)
   216b8:	19000117 	ldw	r4,4(r3)
   216bc:	b82d883a 	mov	r22,r23
   216c0:	11000115 	stw	r4,4(r2)
   216c4:	18c00217 	ldw	r3,8(r3)
   216c8:	10c00215 	stw	r3,8(r2)
   216cc:	b8800117 	ldw	r2,4(r23)
   216d0:	003f7b06 	br	214c0 <_realloc_r+0x148>
   216d4:	80c00017 	ldw	r3,0(r16)
   216d8:	90c00015 	stw	r3,0(r18)
   216dc:	80c00117 	ldw	r3,4(r16)
   216e0:	90c00115 	stw	r3,4(r18)
   216e4:	00c006c4 	movi	r3,27
   216e8:	19804636 	bltu	r3,r6,21804 <_realloc_r+0x48c>
   216ec:	90800204 	addi	r2,r18,8
   216f0:	80c00204 	addi	r3,r16,8
   216f4:	003fb906 	br	215dc <_realloc_r+0x264>
   216f8:	9005883a 	mov	r2,r18
   216fc:	8007883a 	mov	r3,r16
   21700:	19000017 	ldw	r4,0(r3)
   21704:	9021883a 	mov	r16,r18
   21708:	b82d883a 	mov	r22,r23
   2170c:	11000015 	stw	r4,0(r2)
   21710:	19000117 	ldw	r4,4(r3)
   21714:	11000115 	stw	r4,4(r2)
   21718:	18c00217 	ldw	r3,8(r3)
   2171c:	10c00215 	stw	r3,8(r2)
   21720:	b8800117 	ldw	r2,4(r23)
   21724:	003f6606 	br	214c0 <_realloc_r+0x148>
   21728:	2445c83a 	sub	r2,r4,r17
   2172c:	b46d883a 	add	r22,r22,r17
   21730:	10800054 	ori	r2,r2,1
   21734:	b0800115 	stw	r2,4(r22)
   21738:	80bfff17 	ldw	r2,-4(r16)
   2173c:	a809883a 	mov	r4,r21
   21740:	e5800215 	stw	r22,8(fp)
   21744:	1080004c 	andi	r2,r2,1
   21748:	88a2b03a 	or	r17,r17,r2
   2174c:	847fff15 	stw	r17,-4(r16)
   21750:	00233500 	call	23350 <__malloc_unlock>
   21754:	8025883a 	mov	r18,r16
   21758:	003f6606 	br	214f4 <_realloc_r+0x17c>
   2175c:	9009883a 	mov	r4,r18
   21760:	800b883a 	mov	r5,r16
   21764:	00211ec0 	call	211ec <memmove>
   21768:	003fa206 	br	215f4 <_realloc_r+0x27c>
   2176c:	88800404 	addi	r2,r17,16
   21770:	a0bf8716 	blt	r20,r2,21590 <_realloc_r+0x218>
   21774:	b8800317 	ldw	r2,12(r23)
   21778:	b8c00217 	ldw	r3,8(r23)
   2177c:	99bfff04 	addi	r6,r19,-4
   21780:	01000904 	movi	r4,36
   21784:	18800315 	stw	r2,12(r3)
   21788:	10c00215 	stw	r3,8(r2)
   2178c:	bc800204 	addi	r18,r23,8
   21790:	21806536 	bltu	r4,r6,21928 <_realloc_r+0x5b0>
   21794:	008004c4 	movi	r2,19
   21798:	1180592e 	bgeu	r2,r6,21900 <_realloc_r+0x588>
   2179c:	80800017 	ldw	r2,0(r16)
   217a0:	b8800215 	stw	r2,8(r23)
   217a4:	80800117 	ldw	r2,4(r16)
   217a8:	b8800315 	stw	r2,12(r23)
   217ac:	008006c4 	movi	r2,27
   217b0:	11806136 	bltu	r2,r6,21938 <_realloc_r+0x5c0>
   217b4:	b8800404 	addi	r2,r23,16
   217b8:	80c00204 	addi	r3,r16,8
   217bc:	19000017 	ldw	r4,0(r3)
   217c0:	11000015 	stw	r4,0(r2)
   217c4:	19000117 	ldw	r4,4(r3)
   217c8:	11000115 	stw	r4,4(r2)
   217cc:	18c00217 	ldw	r3,8(r3)
   217d0:	10c00215 	stw	r3,8(r2)
   217d4:	a447c83a 	sub	r3,r20,r17
   217d8:	bc45883a 	add	r2,r23,r17
   217dc:	18c00054 	ori	r3,r3,1
   217e0:	10c00115 	stw	r3,4(r2)
   217e4:	b8c00117 	ldw	r3,4(r23)
   217e8:	e0800215 	stw	r2,8(fp)
   217ec:	a809883a 	mov	r4,r21
   217f0:	1880004c 	andi	r2,r3,1
   217f4:	88a2b03a 	or	r17,r17,r2
   217f8:	bc400115 	stw	r17,4(r23)
   217fc:	00233500 	call	23350 <__malloc_unlock>
   21800:	003f3c06 	br	214f4 <_realloc_r+0x17c>
   21804:	80c00217 	ldw	r3,8(r16)
   21808:	90c00215 	stw	r3,8(r18)
   2180c:	80c00317 	ldw	r3,12(r16)
   21810:	90c00315 	stw	r3,12(r18)
   21814:	30802426 	beq	r6,r2,218a8 <_realloc_r+0x530>
   21818:	90800404 	addi	r2,r18,16
   2181c:	80c00404 	addi	r3,r16,16
   21820:	003f6e06 	br	215dc <_realloc_r+0x264>
   21824:	953fff17 	ldw	r20,-4(r18)
   21828:	00ffff04 	movi	r3,-4
   2182c:	a0e8703a 	and	r20,r20,r3
   21830:	a4e9883a 	add	r20,r20,r19
   21834:	003f2206 	br	214c0 <_realloc_r+0x148>
   21838:	800b883a 	mov	r5,r16
   2183c:	9009883a 	mov	r4,r18
   21840:	00211ec0 	call	211ec <memmove>
   21844:	9021883a 	mov	r16,r18
   21848:	b8800117 	ldw	r2,4(r23)
   2184c:	b82d883a 	mov	r22,r23
   21850:	003f1b06 	br	214c0 <_realloc_r+0x148>
   21854:	9005883a 	mov	r2,r18
   21858:	8007883a 	mov	r3,r16
   2185c:	003f9206 	br	216a8 <_realloc_r+0x330>
   21860:	800b883a 	mov	r5,r16
   21864:	9009883a 	mov	r4,r18
   21868:	d9c00015 	stw	r7,0(sp)
   2186c:	00211ec0 	call	211ec <memmove>
   21870:	d9c00017 	ldw	r7,0(sp)
   21874:	9021883a 	mov	r16,r18
   21878:	b8800117 	ldw	r2,4(r23)
   2187c:	3829883a 	mov	r20,r7
   21880:	b82d883a 	mov	r22,r23
   21884:	003f0e06 	br	214c0 <_realloc_r+0x148>
   21888:	80800217 	ldw	r2,8(r16)
   2188c:	b8800415 	stw	r2,16(r23)
   21890:	80800317 	ldw	r2,12(r16)
   21894:	b8800515 	stw	r2,20(r23)
   21898:	31001226 	beq	r6,r4,218e4 <_realloc_r+0x56c>
   2189c:	b8800604 	addi	r2,r23,24
   218a0:	80c00404 	addi	r3,r16,16
   218a4:	003f9606 	br	21700 <_realloc_r+0x388>
   218a8:	81000417 	ldw	r4,16(r16)
   218ac:	90800604 	addi	r2,r18,24
   218b0:	80c00604 	addi	r3,r16,24
   218b4:	91000415 	stw	r4,16(r18)
   218b8:	81000517 	ldw	r4,20(r16)
   218bc:	91000515 	stw	r4,20(r18)
   218c0:	003f4606 	br	215dc <_realloc_r+0x264>
   218c4:	80800217 	ldw	r2,8(r16)
   218c8:	b8800415 	stw	r2,16(r23)
   218cc:	80800317 	ldw	r2,12(r16)
   218d0:	b8800515 	stw	r2,20(r23)
   218d4:	31000d26 	beq	r6,r4,2190c <_realloc_r+0x594>
   218d8:	b8800604 	addi	r2,r23,24
   218dc:	80c00404 	addi	r3,r16,16
   218e0:	003f7106 	br	216a8 <_realloc_r+0x330>
   218e4:	81000417 	ldw	r4,16(r16)
   218e8:	b8800804 	addi	r2,r23,32
   218ec:	80c00604 	addi	r3,r16,24
   218f0:	b9000615 	stw	r4,24(r23)
   218f4:	81000517 	ldw	r4,20(r16)
   218f8:	b9000715 	stw	r4,28(r23)
   218fc:	003f8006 	br	21700 <_realloc_r+0x388>
   21900:	9005883a 	mov	r2,r18
   21904:	8007883a 	mov	r3,r16
   21908:	003fac06 	br	217bc <_realloc_r+0x444>
   2190c:	81000417 	ldw	r4,16(r16)
   21910:	b8800804 	addi	r2,r23,32
   21914:	80c00604 	addi	r3,r16,24
   21918:	b9000615 	stw	r4,24(r23)
   2191c:	81000517 	ldw	r4,20(r16)
   21920:	b9000715 	stw	r4,28(r23)
   21924:	003f6006 	br	216a8 <_realloc_r+0x330>
   21928:	9009883a 	mov	r4,r18
   2192c:	800b883a 	mov	r5,r16
   21930:	00211ec0 	call	211ec <memmove>
   21934:	003fa706 	br	217d4 <_realloc_r+0x45c>
   21938:	80800217 	ldw	r2,8(r16)
   2193c:	b8800415 	stw	r2,16(r23)
   21940:	80800317 	ldw	r2,12(r16)
   21944:	b8800515 	stw	r2,20(r23)
   21948:	31000326 	beq	r6,r4,21958 <_realloc_r+0x5e0>
   2194c:	b8800604 	addi	r2,r23,24
   21950:	80c00404 	addi	r3,r16,16
   21954:	003f9906 	br	217bc <_realloc_r+0x444>
   21958:	81000417 	ldw	r4,16(r16)
   2195c:	b8800804 	addi	r2,r23,32
   21960:	80c00604 	addi	r3,r16,24
   21964:	b9000615 	stw	r4,24(r23)
   21968:	81000517 	ldw	r4,20(r16)
   2196c:	b9000715 	stw	r4,28(r23)
   21970:	003f9206 	br	217bc <_realloc_r+0x444>

00021974 <_sbrk_r>:
   21974:	defffd04 	addi	sp,sp,-12
   21978:	dc400115 	stw	r17,4(sp)
   2197c:	dc000015 	stw	r16,0(sp)
   21980:	2023883a 	mov	r17,r4
   21984:	040000f4 	movhi	r16,3
   21988:	84224104 	addi	r16,r16,-30460
   2198c:	2809883a 	mov	r4,r5
   21990:	dfc00215 	stw	ra,8(sp)
   21994:	80000015 	stw	zero,0(r16)
   21998:	00235340 	call	23534 <sbrk>
   2199c:	00ffffc4 	movi	r3,-1
   219a0:	10c00526 	beq	r2,r3,219b8 <_sbrk_r+0x44>
   219a4:	dfc00217 	ldw	ra,8(sp)
   219a8:	dc400117 	ldw	r17,4(sp)
   219ac:	dc000017 	ldw	r16,0(sp)
   219b0:	dec00304 	addi	sp,sp,12
   219b4:	f800283a 	ret
   219b8:	80c00017 	ldw	r3,0(r16)
   219bc:	183ff926 	beq	r3,zero,219a4 <_sbrk_r+0x30>
   219c0:	88c00015 	stw	r3,0(r17)
   219c4:	dfc00217 	ldw	ra,8(sp)
   219c8:	dc400117 	ldw	r17,4(sp)
   219cc:	dc000017 	ldw	r16,0(sp)
   219d0:	dec00304 	addi	sp,sp,12
   219d4:	f800283a 	ret

000219d8 <__swsetup_r>:
   219d8:	008000b4 	movhi	r2,2
   219dc:	109b9f04 	addi	r2,r2,28284
   219e0:	10800017 	ldw	r2,0(r2)
   219e4:	defffd04 	addi	sp,sp,-12
   219e8:	dc400115 	stw	r17,4(sp)
   219ec:	dc000015 	stw	r16,0(sp)
   219f0:	dfc00215 	stw	ra,8(sp)
   219f4:	2023883a 	mov	r17,r4
   219f8:	2821883a 	mov	r16,r5
   219fc:	10000226 	beq	r2,zero,21a08 <__swsetup_r+0x30>
   21a00:	10c00e17 	ldw	r3,56(r2)
   21a04:	18003d26 	beq	r3,zero,21afc <__swsetup_r+0x124>
   21a08:	8080030b 	ldhu	r2,12(r16)
   21a0c:	10c0020c 	andi	r3,r2,8
   21a10:	18ffffcc 	andi	r3,r3,65535
   21a14:	18e0001c 	xori	r3,r3,32768
   21a18:	18e00004 	addi	r3,r3,-32768
   21a1c:	18001226 	beq	r3,zero,21a68 <__swsetup_r+0x90>
   21a20:	80c00417 	ldw	r3,16(r16)
   21a24:	18001f26 	beq	r3,zero,21aa4 <__swsetup_r+0xcc>
   21a28:	1100004c 	andi	r4,r2,1
   21a2c:	2000261e 	bne	r4,zero,21ac8 <__swsetup_r+0xf0>
   21a30:	1080008c 	andi	r2,r2,2
   21a34:	10bfffcc 	andi	r2,r2,65535
   21a38:	10a0001c 	xori	r2,r2,32768
   21a3c:	10a00004 	addi	r2,r2,-32768
   21a40:	1000311e 	bne	r2,zero,21b08 <__swsetup_r+0x130>
   21a44:	80800517 	ldw	r2,20(r16)
   21a48:	80800215 	stw	r2,8(r16)
   21a4c:	18002326 	beq	r3,zero,21adc <__swsetup_r+0x104>
   21a50:	0005883a 	mov	r2,zero
   21a54:	dfc00217 	ldw	ra,8(sp)
   21a58:	dc400117 	ldw	r17,4(sp)
   21a5c:	dc000017 	ldw	r16,0(sp)
   21a60:	dec00304 	addi	sp,sp,12
   21a64:	f800283a 	ret
   21a68:	10c0040c 	andi	r3,r2,16
   21a6c:	18ffffcc 	andi	r3,r3,65535
   21a70:	18e0001c 	xori	r3,r3,32768
   21a74:	18e00004 	addi	r3,r3,-32768
   21a78:	18001e26 	beq	r3,zero,21af4 <__swsetup_r+0x11c>
   21a7c:	10c0010c 	andi	r3,r2,4
   21a80:	18ffffcc 	andi	r3,r3,65535
   21a84:	18e0001c 	xori	r3,r3,32768
   21a88:	18e00004 	addi	r3,r3,-32768
   21a8c:	1800211e 	bne	r3,zero,21b14 <__swsetup_r+0x13c>
   21a90:	80c00417 	ldw	r3,16(r16)
   21a94:	11400214 	ori	r5,r2,8
   21a98:	8140030d 	sth	r5,12(r16)
   21a9c:	2805883a 	mov	r2,r5
   21aa0:	183fe11e 	bne	r3,zero,21a28 <__swsetup_r+0x50>
   21aa4:	1140a00c 	andi	r5,r2,640
   21aa8:	01008004 	movi	r4,512
   21aac:	293fde26 	beq	r5,r4,21a28 <__swsetup_r+0x50>
   21ab0:	8809883a 	mov	r4,r17
   21ab4:	800b883a 	mov	r5,r16
   21ab8:	00225bc0 	call	225bc <__smakebuf_r>
   21abc:	8080030b 	ldhu	r2,12(r16)
   21ac0:	80c00417 	ldw	r3,16(r16)
   21ac4:	003fd806 	br	21a28 <__swsetup_r+0x50>
   21ac8:	80800517 	ldw	r2,20(r16)
   21acc:	80000215 	stw	zero,8(r16)
   21ad0:	0085c83a 	sub	r2,zero,r2
   21ad4:	80800615 	stw	r2,24(r16)
   21ad8:	183fdd1e 	bne	r3,zero,21a50 <__swsetup_r+0x78>
   21adc:	8080030b 	ldhu	r2,12(r16)
   21ae0:	1080200c 	andi	r2,r2,128
   21ae4:	10bfffcc 	andi	r2,r2,65535
   21ae8:	10a0001c 	xori	r2,r2,32768
   21aec:	10a00004 	addi	r2,r2,-32768
   21af0:	103fd826 	beq	r2,zero,21a54 <__swsetup_r+0x7c>
   21af4:	00bfffc4 	movi	r2,-1
   21af8:	003fd606 	br	21a54 <__swsetup_r+0x7c>
   21afc:	1009883a 	mov	r4,r2
   21b00:	0021e080 	call	21e08 <__sinit>
   21b04:	003fc006 	br	21a08 <__swsetup_r+0x30>
   21b08:	0005883a 	mov	r2,zero
   21b0c:	80800215 	stw	r2,8(r16)
   21b10:	003fce06 	br	21a4c <__swsetup_r+0x74>
   21b14:	81400c17 	ldw	r5,48(r16)
   21b18:	28000626 	beq	r5,zero,21b34 <__swsetup_r+0x15c>
   21b1c:	80c01004 	addi	r3,r16,64
   21b20:	28c00326 	beq	r5,r3,21b30 <__swsetup_r+0x158>
   21b24:	8809883a 	mov	r4,r17
   21b28:	002218c0 	call	2218c <_free_r>
   21b2c:	8080030b 	ldhu	r2,12(r16)
   21b30:	80000c15 	stw	zero,48(r16)
   21b34:	80c00417 	ldw	r3,16(r16)
   21b38:	013ff6c4 	movi	r4,-37
   21b3c:	2084703a 	and	r2,r4,r2
   21b40:	80000115 	stw	zero,4(r16)
   21b44:	80c00015 	stw	r3,0(r16)
   21b48:	003fd206 	br	21a94 <__swsetup_r+0xbc>

00021b4c <_fflush_r>:
   21b4c:	defffb04 	addi	sp,sp,-20
   21b50:	dcc00315 	stw	r19,12(sp)
   21b54:	dc400115 	stw	r17,4(sp)
   21b58:	dfc00415 	stw	ra,16(sp)
   21b5c:	dc800215 	stw	r18,8(sp)
   21b60:	dc000015 	stw	r16,0(sp)
   21b64:	2027883a 	mov	r19,r4
   21b68:	2823883a 	mov	r17,r5
   21b6c:	20000226 	beq	r4,zero,21b78 <_fflush_r+0x2c>
   21b70:	20800e17 	ldw	r2,56(r4)
   21b74:	10005726 	beq	r2,zero,21cd4 <_fflush_r+0x188>
   21b78:	8880030b 	ldhu	r2,12(r17)
   21b7c:	10c0020c 	andi	r3,r2,8
   21b80:	18ffffcc 	andi	r3,r3,65535
   21b84:	18e0001c 	xori	r3,r3,32768
   21b88:	18e00004 	addi	r3,r3,-32768
   21b8c:	1800311e 	bne	r3,zero,21c54 <_fflush_r+0x108>
   21b90:	89000117 	ldw	r4,4(r17)
   21b94:	10c20014 	ori	r3,r2,2048
   21b98:	88c0030d 	sth	r3,12(r17)
   21b9c:	180b883a 	mov	r5,r3
   21ba0:	0100520e 	bge	zero,r4,21cec <_fflush_r+0x1a0>
   21ba4:	88c00a17 	ldw	r3,40(r17)
   21ba8:	18002226 	beq	r3,zero,21c34 <_fflush_r+0xe8>
   21bac:	1084000c 	andi	r2,r2,4096
   21bb0:	10bfffcc 	andi	r2,r2,65535
   21bb4:	10a0001c 	xori	r2,r2,32768
   21bb8:	10a00004 	addi	r2,r2,-32768
   21bbc:	10004e26 	beq	r2,zero,21cf8 <_fflush_r+0x1ac>
   21bc0:	8c001417 	ldw	r16,80(r17)
   21bc4:	2940010c 	andi	r5,r5,4
   21bc8:	297fffcc 	andi	r5,r5,65535
   21bcc:	2960001c 	xori	r5,r5,32768
   21bd0:	29600004 	addi	r5,r5,-32768
   21bd4:	28000626 	beq	r5,zero,21bf0 <_fflush_r+0xa4>
   21bd8:	89000117 	ldw	r4,4(r17)
   21bdc:	88800c17 	ldw	r2,48(r17)
   21be0:	8121c83a 	sub	r16,r16,r4
   21be4:	10000226 	beq	r2,zero,21bf0 <_fflush_r+0xa4>
   21be8:	88800f17 	ldw	r2,60(r17)
   21bec:	80a1c83a 	sub	r16,r16,r2
   21bf0:	89400717 	ldw	r5,28(r17)
   21bf4:	9809883a 	mov	r4,r19
   21bf8:	800d883a 	mov	r6,r16
   21bfc:	000f883a 	mov	r7,zero
   21c00:	183ee83a 	callr	r3
   21c04:	8080281e 	bne	r16,r2,21ca8 <_fflush_r+0x15c>
   21c08:	8880030b 	ldhu	r2,12(r17)
   21c0c:	88c00417 	ldw	r3,16(r17)
   21c10:	88000115 	stw	zero,4(r17)
   21c14:	113dffcc 	andi	r4,r2,63487
   21c18:	1084000c 	andi	r2,r2,4096
   21c1c:	10bfffcc 	andi	r2,r2,65535
   21c20:	10a0001c 	xori	r2,r2,32768
   21c24:	8900030d 	sth	r4,12(r17)
   21c28:	88c00015 	stw	r3,0(r17)
   21c2c:	10a00004 	addi	r2,r2,-32768
   21c30:	10002c1e 	bne	r2,zero,21ce4 <_fflush_r+0x198>
   21c34:	0005883a 	mov	r2,zero
   21c38:	dfc00417 	ldw	ra,16(sp)
   21c3c:	dcc00317 	ldw	r19,12(sp)
   21c40:	dc800217 	ldw	r18,8(sp)
   21c44:	dc400117 	ldw	r17,4(sp)
   21c48:	dc000017 	ldw	r16,0(sp)
   21c4c:	dec00504 	addi	sp,sp,20
   21c50:	f800283a 	ret
   21c54:	8c800417 	ldw	r18,16(r17)
   21c58:	903ff626 	beq	r18,zero,21c34 <_fflush_r+0xe8>
   21c5c:	8c000017 	ldw	r16,0(r17)
   21c60:	108000cc 	andi	r2,r2,3
   21c64:	8c800015 	stw	r18,0(r17)
   21c68:	84a1c83a 	sub	r16,r16,r18
   21c6c:	10001b1e 	bne	r2,zero,21cdc <_fflush_r+0x190>
   21c70:	88800517 	ldw	r2,20(r17)
   21c74:	88800215 	stw	r2,8(r17)
   21c78:	04000316 	blt	zero,r16,21c88 <_fflush_r+0x13c>
   21c7c:	003fed06 	br	21c34 <_fflush_r+0xe8>
   21c80:	90a5883a 	add	r18,r18,r2
   21c84:	043feb0e 	bge	zero,r16,21c34 <_fflush_r+0xe8>
   21c88:	88800917 	ldw	r2,36(r17)
   21c8c:	89400717 	ldw	r5,28(r17)
   21c90:	800f883a 	mov	r7,r16
   21c94:	900d883a 	mov	r6,r18
   21c98:	9809883a 	mov	r4,r19
   21c9c:	103ee83a 	callr	r2
   21ca0:	80a1c83a 	sub	r16,r16,r2
   21ca4:	00bff616 	blt	zero,r2,21c80 <_fflush_r+0x134>
   21ca8:	88c0030b 	ldhu	r3,12(r17)
   21cac:	00bfffc4 	movi	r2,-1
   21cb0:	18c01014 	ori	r3,r3,64
   21cb4:	88c0030d 	sth	r3,12(r17)
   21cb8:	dfc00417 	ldw	ra,16(sp)
   21cbc:	dcc00317 	ldw	r19,12(sp)
   21cc0:	dc800217 	ldw	r18,8(sp)
   21cc4:	dc400117 	ldw	r17,4(sp)
   21cc8:	dc000017 	ldw	r16,0(sp)
   21ccc:	dec00504 	addi	sp,sp,20
   21cd0:	f800283a 	ret
   21cd4:	0021e080 	call	21e08 <__sinit>
   21cd8:	003fa706 	br	21b78 <_fflush_r+0x2c>
   21cdc:	0005883a 	mov	r2,zero
   21ce0:	003fe406 	br	21c74 <_fflush_r+0x128>
   21ce4:	8c001415 	stw	r16,80(r17)
   21ce8:	003fd206 	br	21c34 <_fflush_r+0xe8>
   21cec:	88c00f17 	ldw	r3,60(r17)
   21cf0:	00ffac16 	blt	zero,r3,21ba4 <_fflush_r+0x58>
   21cf4:	003fcf06 	br	21c34 <_fflush_r+0xe8>
   21cf8:	89400717 	ldw	r5,28(r17)
   21cfc:	9809883a 	mov	r4,r19
   21d00:	000d883a 	mov	r6,zero
   21d04:	01c00044 	movi	r7,1
   21d08:	183ee83a 	callr	r3
   21d0c:	1021883a 	mov	r16,r2
   21d10:	00bfffc4 	movi	r2,-1
   21d14:	80800326 	beq	r16,r2,21d24 <_fflush_r+0x1d8>
   21d18:	8940030b 	ldhu	r5,12(r17)
   21d1c:	88c00a17 	ldw	r3,40(r17)
   21d20:	003fa806 	br	21bc4 <_fflush_r+0x78>
   21d24:	98c00017 	ldw	r3,0(r19)
   21d28:	00800744 	movi	r2,29
   21d2c:	18bfde1e 	bne	r3,r2,21ca8 <_fflush_r+0x15c>
   21d30:	003fc006 	br	21c34 <_fflush_r+0xe8>

00021d34 <fflush>:
   21d34:	200b883a 	mov	r5,r4
   21d38:	20000426 	beq	r4,zero,21d4c <fflush+0x18>
   21d3c:	008000b4 	movhi	r2,2
   21d40:	109b9f04 	addi	r2,r2,28284
   21d44:	11000017 	ldw	r4,0(r2)
   21d48:	0021b4c1 	jmpi	21b4c <_fflush_r>
   21d4c:	008000b4 	movhi	r2,2
   21d50:	109b9e04 	addi	r2,r2,28280
   21d54:	11000017 	ldw	r4,0(r2)
   21d58:	014000b4 	movhi	r5,2
   21d5c:	2946d304 	addi	r5,r5,6988
   21d60:	00225041 	jmpi	22504 <_fwalk_reent>

00021d64 <__fp_lock>:
   21d64:	0005883a 	mov	r2,zero
   21d68:	f800283a 	ret

00021d6c <__fp_unlock>:
   21d6c:	0005883a 	mov	r2,zero
   21d70:	f800283a 	ret

00021d74 <_cleanup_r>:
   21d74:	014000b4 	movhi	r5,2
   21d78:	294ae304 	addi	r5,r5,11148
   21d7c:	002245c1 	jmpi	2245c <_fwalk>

00021d80 <__sfmoreglue>:
   21d80:	defffc04 	addi	sp,sp,-16
   21d84:	dc800215 	stw	r18,8(sp)
   21d88:	2825883a 	mov	r18,r5
   21d8c:	dc000015 	stw	r16,0(sp)
   21d90:	01401704 	movi	r5,92
   21d94:	2021883a 	mov	r16,r4
   21d98:	9009883a 	mov	r4,r18
   21d9c:	dfc00315 	stw	ra,12(sp)
   21da0:	dc400115 	stw	r17,4(sp)
   21da4:	0022d440 	call	22d44 <__mulsi3>
   21da8:	8009883a 	mov	r4,r16
   21dac:	11400304 	addi	r5,r2,12
   21db0:	1023883a 	mov	r17,r2
   21db4:	00208300 	call	20830 <_malloc_r>
   21db8:	1021883a 	mov	r16,r2
   21dbc:	10000726 	beq	r2,zero,21ddc <__sfmoreglue+0x5c>
   21dc0:	11000304 	addi	r4,r2,12
   21dc4:	10000015 	stw	zero,0(r2)
   21dc8:	14800115 	stw	r18,4(r2)
   21dcc:	11000215 	stw	r4,8(r2)
   21dd0:	000b883a 	mov	r5,zero
   21dd4:	880d883a 	mov	r6,r17
   21dd8:	00227640 	call	22764 <memset>
   21ddc:	8005883a 	mov	r2,r16
   21de0:	dfc00317 	ldw	ra,12(sp)
   21de4:	dc800217 	ldw	r18,8(sp)
   21de8:	dc400117 	ldw	r17,4(sp)
   21dec:	dc000017 	ldw	r16,0(sp)
   21df0:	dec00404 	addi	sp,sp,16
   21df4:	f800283a 	ret

00021df8 <_cleanup>:
   21df8:	008000b4 	movhi	r2,2
   21dfc:	109b9e04 	addi	r2,r2,28280
   21e00:	11000017 	ldw	r4,0(r2)
   21e04:	0021d741 	jmpi	21d74 <_cleanup_r>

00021e08 <__sinit>:
   21e08:	20800e17 	ldw	r2,56(r4)
   21e0c:	1000401e 	bne	r2,zero,21f10 <__sinit+0x108>
   21e10:	21400117 	ldw	r5,4(r4)
   21e14:	018000b4 	movhi	r6,2
   21e18:	31875d04 	addi	r6,r6,7540
   21e1c:	20c00217 	ldw	r3,8(r4)
   21e20:	21800f15 	stw	r6,60(r4)
   21e24:	2080bb04 	addi	r2,r4,748
   21e28:	02400044 	movi	r9,1
   21e2c:	018000c4 	movi	r6,3
   21e30:	2180b915 	stw	r6,740(r4)
   21e34:	2080ba15 	stw	r2,744(r4)
   21e38:	22400e15 	stw	r9,56(r4)
   21e3c:	20800317 	ldw	r2,12(r4)
   21e40:	2000b815 	stw	zero,736(r4)
   21e44:	020000b4 	movhi	r8,2
   21e48:	420a1004 	addi	r8,r8,10304
   21e4c:	01c000b4 	movhi	r7,2
   21e50:	39ca2504 	addi	r7,r7,10388
   21e54:	018000b4 	movhi	r6,2
   21e58:	318a4704 	addi	r6,r6,10524
   21e5c:	010000b4 	movhi	r4,2
   21e60:	210a5e04 	addi	r4,r4,10616
   21e64:	02800104 	movi	r10,4
   21e68:	28000015 	stw	zero,0(r5)
   21e6c:	28000115 	stw	zero,4(r5)
   21e70:	28000215 	stw	zero,8(r5)
   21e74:	2a80030d 	sth	r10,12(r5)
   21e78:	2800038d 	sth	zero,14(r5)
   21e7c:	28000415 	stw	zero,16(r5)
   21e80:	28000515 	stw	zero,20(r5)
   21e84:	28000615 	stw	zero,24(r5)
   21e88:	29400715 	stw	r5,28(r5)
   21e8c:	2a000815 	stw	r8,32(r5)
   21e90:	29c00915 	stw	r7,36(r5)
   21e94:	29800a15 	stw	r6,40(r5)
   21e98:	29000b15 	stw	r4,44(r5)
   21e9c:	01400284 	movi	r5,10
   21ea0:	18000015 	stw	zero,0(r3)
   21ea4:	18000115 	stw	zero,4(r3)
   21ea8:	18000215 	stw	zero,8(r3)
   21eac:	1940030d 	sth	r5,12(r3)
   21eb0:	1a40038d 	sth	r9,14(r3)
   21eb4:	18000415 	stw	zero,16(r3)
   21eb8:	18000515 	stw	zero,20(r3)
   21ebc:	18000615 	stw	zero,24(r3)
   21ec0:	18c00715 	stw	r3,28(r3)
   21ec4:	1a000815 	stw	r8,32(r3)
   21ec8:	19c00915 	stw	r7,36(r3)
   21ecc:	19800a15 	stw	r6,40(r3)
   21ed0:	19000b15 	stw	r4,44(r3)
   21ed4:	00c00484 	movi	r3,18
   21ed8:	10c0030d 	sth	r3,12(r2)
   21edc:	00c00084 	movi	r3,2
   21ee0:	10000015 	stw	zero,0(r2)
   21ee4:	10000115 	stw	zero,4(r2)
   21ee8:	10000215 	stw	zero,8(r2)
   21eec:	10c0038d 	sth	r3,14(r2)
   21ef0:	10000415 	stw	zero,16(r2)
   21ef4:	10000515 	stw	zero,20(r2)
   21ef8:	10000615 	stw	zero,24(r2)
   21efc:	10800715 	stw	r2,28(r2)
   21f00:	12000815 	stw	r8,32(r2)
   21f04:	11c00915 	stw	r7,36(r2)
   21f08:	11800a15 	stw	r6,40(r2)
   21f0c:	11000b15 	stw	r4,44(r2)
   21f10:	f800283a 	ret

00021f14 <__sfp>:
   21f14:	defffc04 	addi	sp,sp,-16
   21f18:	008000b4 	movhi	r2,2
   21f1c:	109b9e04 	addi	r2,r2,28280
   21f20:	dc400115 	stw	r17,4(sp)
   21f24:	14400017 	ldw	r17,0(r2)
   21f28:	dc800215 	stw	r18,8(sp)
   21f2c:	dfc00315 	stw	ra,12(sp)
   21f30:	88800e17 	ldw	r2,56(r17)
   21f34:	dc000015 	stw	r16,0(sp)
   21f38:	2025883a 	mov	r18,r4
   21f3c:	10002826 	beq	r2,zero,21fe0 <__sfp+0xcc>
   21f40:	8c40b804 	addi	r17,r17,736
   21f44:	043fffc4 	movi	r16,-1
   21f48:	89400117 	ldw	r5,4(r17)
   21f4c:	88800217 	ldw	r2,8(r17)
   21f50:	297fffc4 	addi	r5,r5,-1
   21f54:	28000a16 	blt	r5,zero,21f80 <__sfp+0x6c>
   21f58:	10c0030f 	ldh	r3,12(r2)
   21f5c:	18000c26 	beq	r3,zero,21f90 <__sfp+0x7c>
   21f60:	10c01a04 	addi	r3,r2,104
   21f64:	00000206 	br	21f70 <__sfp+0x5c>
   21f68:	19bfe90f 	ldh	r6,-92(r3)
   21f6c:	30000826 	beq	r6,zero,21f90 <__sfp+0x7c>
   21f70:	297fffc4 	addi	r5,r5,-1
   21f74:	18bffd04 	addi	r2,r3,-12
   21f78:	18c01704 	addi	r3,r3,92
   21f7c:	2c3ffa1e 	bne	r5,r16,21f68 <__sfp+0x54>
   21f80:	88800017 	ldw	r2,0(r17)
   21f84:	10001926 	beq	r2,zero,21fec <__sfp+0xd8>
   21f88:	1023883a 	mov	r17,r2
   21f8c:	003fee06 	br	21f48 <__sfp+0x34>
   21f90:	00ffffc4 	movi	r3,-1
   21f94:	10c0038d 	sth	r3,14(r2)
   21f98:	00c00044 	movi	r3,1
   21f9c:	10c0030d 	sth	r3,12(r2)
   21fa0:	10000015 	stw	zero,0(r2)
   21fa4:	10000215 	stw	zero,8(r2)
   21fa8:	10000115 	stw	zero,4(r2)
   21fac:	10000415 	stw	zero,16(r2)
   21fb0:	10000515 	stw	zero,20(r2)
   21fb4:	10000615 	stw	zero,24(r2)
   21fb8:	10000c15 	stw	zero,48(r2)
   21fbc:	10000d15 	stw	zero,52(r2)
   21fc0:	10001115 	stw	zero,68(r2)
   21fc4:	10001215 	stw	zero,72(r2)
   21fc8:	dfc00317 	ldw	ra,12(sp)
   21fcc:	dc800217 	ldw	r18,8(sp)
   21fd0:	dc400117 	ldw	r17,4(sp)
   21fd4:	dc000017 	ldw	r16,0(sp)
   21fd8:	dec00404 	addi	sp,sp,16
   21fdc:	f800283a 	ret
   21fe0:	8809883a 	mov	r4,r17
   21fe4:	0021e080 	call	21e08 <__sinit>
   21fe8:	003fd506 	br	21f40 <__sfp+0x2c>
   21fec:	9009883a 	mov	r4,r18
   21ff0:	01400104 	movi	r5,4
   21ff4:	0021d800 	call	21d80 <__sfmoreglue>
   21ff8:	88800015 	stw	r2,0(r17)
   21ffc:	103fe21e 	bne	r2,zero,21f88 <__sfp+0x74>
   22000:	00800304 	movi	r2,12
   22004:	90800015 	stw	r2,0(r18)
   22008:	0005883a 	mov	r2,zero
   2200c:	003fee06 	br	21fc8 <__sfp+0xb4>

00022010 <__sfp_lock_acquire>:
   22010:	f800283a 	ret

00022014 <__sfp_lock_release>:
   22014:	f800283a 	ret

00022018 <__sinit_lock_acquire>:
   22018:	f800283a 	ret

0002201c <__sinit_lock_release>:
   2201c:	f800283a 	ret

00022020 <__fp_lock_all>:
   22020:	008000b4 	movhi	r2,2
   22024:	109b9f04 	addi	r2,r2,28284
   22028:	11000017 	ldw	r4,0(r2)
   2202c:	014000b4 	movhi	r5,2
   22030:	29475904 	addi	r5,r5,7524
   22034:	002245c1 	jmpi	2245c <_fwalk>

00022038 <__fp_unlock_all>:
   22038:	008000b4 	movhi	r2,2
   2203c:	109b9f04 	addi	r2,r2,28284
   22040:	11000017 	ldw	r4,0(r2)
   22044:	014000b4 	movhi	r5,2
   22048:	29475b04 	addi	r5,r5,7532
   2204c:	002245c1 	jmpi	2245c <_fwalk>

00022050 <_malloc_trim_r>:
   22050:	defffb04 	addi	sp,sp,-20
   22054:	dcc00315 	stw	r19,12(sp)
   22058:	dc800215 	stw	r18,8(sp)
   2205c:	dc400115 	stw	r17,4(sp)
   22060:	dc000015 	stw	r16,0(sp)
   22064:	2827883a 	mov	r19,r5
   22068:	dfc00415 	stw	ra,16(sp)
   2206c:	044000b4 	movhi	r17,2
   22070:	8c561a04 	addi	r17,r17,22632
   22074:	2021883a 	mov	r16,r4
   22078:	00233300 	call	23330 <__malloc_lock>
   2207c:	88800217 	ldw	r2,8(r17)
   22080:	14800117 	ldw	r18,4(r2)
   22084:	00bfff04 	movi	r2,-4
   22088:	90a4703a 	and	r18,r18,r2
   2208c:	9083fbc4 	addi	r2,r18,4079
   22090:	14e7c83a 	sub	r19,r2,r19
   22094:	9826d33a 	srli	r19,r19,12
   22098:	0083ffc4 	movi	r2,4095
   2209c:	9cffffc4 	addi	r19,r19,-1
   220a0:	9826933a 	slli	r19,r19,12
   220a4:	14c0060e 	bge	r2,r19,220c0 <_malloc_trim_r+0x70>
   220a8:	8009883a 	mov	r4,r16
   220ac:	000b883a 	mov	r5,zero
   220b0:	00219740 	call	21974 <_sbrk_r>
   220b4:	88c00217 	ldw	r3,8(r17)
   220b8:	1c87883a 	add	r3,r3,r18
   220bc:	10c00a26 	beq	r2,r3,220e8 <_malloc_trim_r+0x98>
   220c0:	8009883a 	mov	r4,r16
   220c4:	00233500 	call	23350 <__malloc_unlock>
   220c8:	0005883a 	mov	r2,zero
   220cc:	dfc00417 	ldw	ra,16(sp)
   220d0:	dcc00317 	ldw	r19,12(sp)
   220d4:	dc800217 	ldw	r18,8(sp)
   220d8:	dc400117 	ldw	r17,4(sp)
   220dc:	dc000017 	ldw	r16,0(sp)
   220e0:	dec00504 	addi	sp,sp,20
   220e4:	f800283a 	ret
   220e8:	8009883a 	mov	r4,r16
   220ec:	04cbc83a 	sub	r5,zero,r19
   220f0:	00219740 	call	21974 <_sbrk_r>
   220f4:	00ffffc4 	movi	r3,-1
   220f8:	10c01326 	beq	r2,r3,22148 <_malloc_trim_r+0xf8>
   220fc:	008000f4 	movhi	r2,3
   22100:	10a24804 	addi	r2,r2,-30432
   22104:	11000017 	ldw	r4,0(r2)
   22108:	88c00217 	ldw	r3,8(r17)
   2210c:	94e5c83a 	sub	r18,r18,r19
   22110:	94800054 	ori	r18,r18,1
   22114:	24e7c83a 	sub	r19,r4,r19
   22118:	1c800115 	stw	r18,4(r3)
   2211c:	8009883a 	mov	r4,r16
   22120:	14c00015 	stw	r19,0(r2)
   22124:	00233500 	call	23350 <__malloc_unlock>
   22128:	00800044 	movi	r2,1
   2212c:	dfc00417 	ldw	ra,16(sp)
   22130:	dcc00317 	ldw	r19,12(sp)
   22134:	dc800217 	ldw	r18,8(sp)
   22138:	dc400117 	ldw	r17,4(sp)
   2213c:	dc000017 	ldw	r16,0(sp)
   22140:	dec00504 	addi	sp,sp,20
   22144:	f800283a 	ret
   22148:	8009883a 	mov	r4,r16
   2214c:	000b883a 	mov	r5,zero
   22150:	00219740 	call	21974 <_sbrk_r>
   22154:	88c00217 	ldw	r3,8(r17)
   22158:	014003c4 	movi	r5,15
   2215c:	10c9c83a 	sub	r4,r2,r3
   22160:	293fd70e 	bge	r5,r4,220c0 <_malloc_trim_r+0x70>
   22164:	014000b4 	movhi	r5,2
   22168:	295ba004 	addi	r5,r5,28288
   2216c:	29400017 	ldw	r5,0(r5)
   22170:	21000054 	ori	r4,r4,1
   22174:	19000115 	stw	r4,4(r3)
   22178:	1145c83a 	sub	r2,r2,r5
   2217c:	014000f4 	movhi	r5,3
   22180:	29624804 	addi	r5,r5,-30432
   22184:	28800015 	stw	r2,0(r5)
   22188:	003fcd06 	br	220c0 <_malloc_trim_r+0x70>

0002218c <_free_r>:
   2218c:	defffd04 	addi	sp,sp,-12
   22190:	dc400115 	stw	r17,4(sp)
   22194:	dc000015 	stw	r16,0(sp)
   22198:	dfc00215 	stw	ra,8(sp)
   2219c:	2821883a 	mov	r16,r5
   221a0:	2023883a 	mov	r17,r4
   221a4:	28004b26 	beq	r5,zero,222d4 <_free_r+0x148>
   221a8:	00233300 	call	23330 <__malloc_lock>
   221ac:	823fff17 	ldw	r8,-4(r16)
   221b0:	00bfff84 	movi	r2,-2
   221b4:	81bffe04 	addi	r6,r16,-8
   221b8:	4084703a 	and	r2,r8,r2
   221bc:	3087883a 	add	r3,r6,r2
   221c0:	014000b4 	movhi	r5,2
   221c4:	29561a04 	addi	r5,r5,22632
   221c8:	1a400117 	ldw	r9,4(r3)
   221cc:	29000217 	ldw	r4,8(r5)
   221d0:	01ffff04 	movi	r7,-4
   221d4:	49ce703a 	and	r7,r9,r7
   221d8:	20c06526 	beq	r4,r3,22370 <_free_r+0x1e4>
   221dc:	19c00115 	stw	r7,4(r3)
   221e0:	4200004c 	andi	r8,r8,1
   221e4:	40003026 	beq	r8,zero,222a8 <_free_r+0x11c>
   221e8:	0009883a 	mov	r4,zero
   221ec:	19d1883a 	add	r8,r3,r7
   221f0:	42000117 	ldw	r8,4(r8)
   221f4:	4200004c 	andi	r8,r8,1
   221f8:	4000061e 	bne	r8,zero,22214 <_free_r+0x88>
   221fc:	11c5883a 	add	r2,r2,r7
   22200:	19c00217 	ldw	r7,8(r3)
   22204:	20004e26 	beq	r4,zero,22340 <_free_r+0x1b4>
   22208:	18c00317 	ldw	r3,12(r3)
   2220c:	38c00315 	stw	r3,12(r7)
   22210:	19c00215 	stw	r7,8(r3)
   22214:	11c00054 	ori	r7,r2,1
   22218:	3087883a 	add	r3,r6,r2
   2221c:	31c00115 	stw	r7,4(r6)
   22220:	18800015 	stw	r2,0(r3)
   22224:	20001a1e 	bne	r4,zero,22290 <_free_r+0x104>
   22228:	00c07fc4 	movi	r3,511
   2222c:	18802e2e 	bgeu	r3,r2,222e8 <_free_r+0x15c>
   22230:	1006d27a 	srli	r3,r2,9
   22234:	01000104 	movi	r4,4
   22238:	20c06636 	bltu	r4,r3,223d4 <_free_r+0x248>
   2223c:	1008d1ba 	srli	r4,r2,6
   22240:	21000e04 	addi	r4,r4,56
   22244:	210f883a 	add	r7,r4,r4
   22248:	39cf883a 	add	r7,r7,r7
   2224c:	39cf883a 	add	r7,r7,r7
   22250:	29cf883a 	add	r7,r5,r7
   22254:	38c00217 	ldw	r3,8(r7)
   22258:	014000b4 	movhi	r5,2
   2225c:	29561a04 	addi	r5,r5,22632
   22260:	19c06126 	beq	r3,r7,223e8 <_free_r+0x25c>
   22264:	013fff04 	movi	r4,-4
   22268:	19400117 	ldw	r5,4(r3)
   2226c:	290a703a 	and	r5,r5,r4
   22270:	1140022e 	bgeu	r2,r5,2227c <_free_r+0xf0>
   22274:	18c00217 	ldw	r3,8(r3)
   22278:	38fffb1e 	bne	r7,r3,22268 <_free_r+0xdc>
   2227c:	18800317 	ldw	r2,12(r3)
   22280:	30800315 	stw	r2,12(r6)
   22284:	30c00215 	stw	r3,8(r6)
   22288:	11800215 	stw	r6,8(r2)
   2228c:	19800315 	stw	r6,12(r3)
   22290:	8809883a 	mov	r4,r17
   22294:	dfc00217 	ldw	ra,8(sp)
   22298:	dc400117 	ldw	r17,4(sp)
   2229c:	dc000017 	ldw	r16,0(sp)
   222a0:	dec00304 	addi	sp,sp,12
   222a4:	00233501 	jmpi	23350 <__malloc_unlock>
   222a8:	813ffe17 	ldw	r4,-8(r16)
   222ac:	2a400204 	addi	r9,r5,8
   222b0:	310dc83a 	sub	r6,r6,r4
   222b4:	32000217 	ldw	r8,8(r6)
   222b8:	1105883a 	add	r2,r2,r4
   222bc:	42404326 	beq	r8,r9,223cc <_free_r+0x240>
   222c0:	32400317 	ldw	r9,12(r6)
   222c4:	0009883a 	mov	r4,zero
   222c8:	42400315 	stw	r9,12(r8)
   222cc:	4a000215 	stw	r8,8(r9)
   222d0:	003fc606 	br	221ec <_free_r+0x60>
   222d4:	dfc00217 	ldw	ra,8(sp)
   222d8:	dc400117 	ldw	r17,4(sp)
   222dc:	dc000017 	ldw	r16,0(sp)
   222e0:	dec00304 	addi	sp,sp,12
   222e4:	f800283a 	ret
   222e8:	1004d0fa 	srli	r2,r2,3
   222ec:	02000044 	movi	r8,1
   222f0:	29c00117 	ldw	r7,4(r5)
   222f4:	1087883a 	add	r3,r2,r2
   222f8:	18c7883a 	add	r3,r3,r3
   222fc:	1005d0ba 	srai	r2,r2,2
   22300:	18c7883a 	add	r3,r3,r3
   22304:	28c7883a 	add	r3,r5,r3
   22308:	19000217 	ldw	r4,8(r3)
   2230c:	4084983a 	sll	r2,r8,r2
   22310:	30c00315 	stw	r3,12(r6)
   22314:	31000215 	stw	r4,8(r6)
   22318:	11c4b03a 	or	r2,r2,r7
   2231c:	21800315 	stw	r6,12(r4)
   22320:	8809883a 	mov	r4,r17
   22324:	28800115 	stw	r2,4(r5)
   22328:	19800215 	stw	r6,8(r3)
   2232c:	dfc00217 	ldw	ra,8(sp)
   22330:	dc400117 	ldw	r17,4(sp)
   22334:	dc000017 	ldw	r16,0(sp)
   22338:	dec00304 	addi	sp,sp,12
   2233c:	00233501 	jmpi	23350 <__malloc_unlock>
   22340:	020000b4 	movhi	r8,2
   22344:	42161c04 	addi	r8,r8,22640
   22348:	3a3faf1e 	bne	r7,r8,22208 <_free_r+0x7c>
   2234c:	29800515 	stw	r6,20(r5)
   22350:	29800415 	stw	r6,16(r5)
   22354:	11000054 	ori	r4,r2,1
   22358:	3087883a 	add	r3,r6,r2
   2235c:	31c00315 	stw	r7,12(r6)
   22360:	31c00215 	stw	r7,8(r6)
   22364:	31000115 	stw	r4,4(r6)
   22368:	18800015 	stw	r2,0(r3)
   2236c:	003fc806 	br	22290 <_free_r+0x104>
   22370:	4200004c 	andi	r8,r8,1
   22374:	3885883a 	add	r2,r7,r2
   22378:	4000071e 	bne	r8,zero,22398 <_free_r+0x20c>
   2237c:	81fffe17 	ldw	r7,-8(r16)
   22380:	31cdc83a 	sub	r6,r6,r7
   22384:	30c00317 	ldw	r3,12(r6)
   22388:	31000217 	ldw	r4,8(r6)
   2238c:	11c5883a 	add	r2,r2,r7
   22390:	20c00315 	stw	r3,12(r4)
   22394:	19000215 	stw	r4,8(r3)
   22398:	00c000b4 	movhi	r3,2
   2239c:	18dba104 	addi	r3,r3,28292
   223a0:	18c00017 	ldw	r3,0(r3)
   223a4:	11000054 	ori	r4,r2,1
   223a8:	31000115 	stw	r4,4(r6)
   223ac:	29800215 	stw	r6,8(r5)
   223b0:	10ffb736 	bltu	r2,r3,22290 <_free_r+0x104>
   223b4:	008000f4 	movhi	r2,3
   223b8:	10a24004 	addi	r2,r2,-30464
   223bc:	11400017 	ldw	r5,0(r2)
   223c0:	8809883a 	mov	r4,r17
   223c4:	00220500 	call	22050 <_malloc_trim_r>
   223c8:	003fb106 	br	22290 <_free_r+0x104>
   223cc:	01000044 	movi	r4,1
   223d0:	003f8606 	br	221ec <_free_r+0x60>
   223d4:	01000504 	movi	r4,20
   223d8:	20c00b36 	bltu	r4,r3,22408 <_free_r+0x27c>
   223dc:	190016c4 	addi	r4,r3,91
   223e0:	210f883a 	add	r7,r4,r4
   223e4:	003f9806 	br	22248 <_free_r+0xbc>
   223e8:	2009d0ba 	srai	r4,r4,2
   223ec:	00800044 	movi	r2,1
   223f0:	29c00117 	ldw	r7,4(r5)
   223f4:	1108983a 	sll	r4,r2,r4
   223f8:	1805883a 	mov	r2,r3
   223fc:	21c8b03a 	or	r4,r4,r7
   22400:	29000115 	stw	r4,4(r5)
   22404:	003f9e06 	br	22280 <_free_r+0xf4>
   22408:	01001504 	movi	r4,84
   2240c:	20c00436 	bltu	r4,r3,22420 <_free_r+0x294>
   22410:	1008d33a 	srli	r4,r2,12
   22414:	21001b84 	addi	r4,r4,110
   22418:	210f883a 	add	r7,r4,r4
   2241c:	003f8a06 	br	22248 <_free_r+0xbc>
   22420:	01005504 	movi	r4,340
   22424:	20c00436 	bltu	r4,r3,22438 <_free_r+0x2ac>
   22428:	1008d3fa 	srli	r4,r2,15
   2242c:	21001dc4 	addi	r4,r4,119
   22430:	210f883a 	add	r7,r4,r4
   22434:	003f8406 	br	22248 <_free_r+0xbc>
   22438:	01015504 	movi	r4,1364
   2243c:	20c00436 	bltu	r4,r3,22450 <_free_r+0x2c4>
   22440:	1008d4ba 	srli	r4,r2,18
   22444:	21001f04 	addi	r4,r4,124
   22448:	210f883a 	add	r7,r4,r4
   2244c:	003f7e06 	br	22248 <_free_r+0xbc>
   22450:	01c03f04 	movi	r7,252
   22454:	01001f84 	movi	r4,126
   22458:	003f7b06 	br	22248 <_free_r+0xbc>

0002245c <_fwalk>:
   2245c:	defff904 	addi	sp,sp,-28
   22460:	dcc00315 	stw	r19,12(sp)
   22464:	24c0b804 	addi	r19,r4,736
   22468:	dd400515 	stw	r21,20(sp)
   2246c:	dd000415 	stw	r20,16(sp)
   22470:	dfc00615 	stw	ra,24(sp)
   22474:	dc800215 	stw	r18,8(sp)
   22478:	dc400115 	stw	r17,4(sp)
   2247c:	dc000015 	stw	r16,0(sp)
   22480:	282b883a 	mov	r21,r5
   22484:	0029883a 	mov	r20,zero
   22488:	00220100 	call	22010 <__sfp_lock_acquire>
   2248c:	98001226 	beq	r19,zero,224d8 <_fwalk+0x7c>
   22490:	04bfffc4 	movi	r18,-1
   22494:	9c400117 	ldw	r17,4(r19)
   22498:	9c000217 	ldw	r16,8(r19)
   2249c:	8c7fffc4 	addi	r17,r17,-1
   224a0:	88000b16 	blt	r17,zero,224d0 <_fwalk+0x74>
   224a4:	84000304 	addi	r16,r16,12
   224a8:	80c0000f 	ldh	r3,0(r16)
   224ac:	8c7fffc4 	addi	r17,r17,-1
   224b0:	813ffd04 	addi	r4,r16,-12
   224b4:	18000426 	beq	r3,zero,224c8 <_fwalk+0x6c>
   224b8:	80c0008f 	ldh	r3,2(r16)
   224bc:	1c800226 	beq	r3,r18,224c8 <_fwalk+0x6c>
   224c0:	a83ee83a 	callr	r21
   224c4:	a0a8b03a 	or	r20,r20,r2
   224c8:	84001704 	addi	r16,r16,92
   224cc:	8cbff61e 	bne	r17,r18,224a8 <_fwalk+0x4c>
   224d0:	9cc00017 	ldw	r19,0(r19)
   224d4:	983fef1e 	bne	r19,zero,22494 <_fwalk+0x38>
   224d8:	00220140 	call	22014 <__sfp_lock_release>
   224dc:	a005883a 	mov	r2,r20
   224e0:	dfc00617 	ldw	ra,24(sp)
   224e4:	dd400517 	ldw	r21,20(sp)
   224e8:	dd000417 	ldw	r20,16(sp)
   224ec:	dcc00317 	ldw	r19,12(sp)
   224f0:	dc800217 	ldw	r18,8(sp)
   224f4:	dc400117 	ldw	r17,4(sp)
   224f8:	dc000017 	ldw	r16,0(sp)
   224fc:	dec00704 	addi	sp,sp,28
   22500:	f800283a 	ret

00022504 <_fwalk_reent>:
   22504:	defff804 	addi	sp,sp,-32
   22508:	dcc00315 	stw	r19,12(sp)
   2250c:	24c0b804 	addi	r19,r4,736
   22510:	dd800615 	stw	r22,24(sp)
   22514:	dd400515 	stw	r21,20(sp)
   22518:	dd000415 	stw	r20,16(sp)
   2251c:	dfc00715 	stw	ra,28(sp)
   22520:	dc800215 	stw	r18,8(sp)
   22524:	dc400115 	stw	r17,4(sp)
   22528:	dc000015 	stw	r16,0(sp)
   2252c:	2029883a 	mov	r20,r4
   22530:	282b883a 	mov	r21,r5
   22534:	002d883a 	mov	r22,zero
   22538:	00220100 	call	22010 <__sfp_lock_acquire>
   2253c:	98001326 	beq	r19,zero,2258c <_fwalk_reent+0x88>
   22540:	04bfffc4 	movi	r18,-1
   22544:	9c400117 	ldw	r17,4(r19)
   22548:	9c000217 	ldw	r16,8(r19)
   2254c:	8c7fffc4 	addi	r17,r17,-1
   22550:	88000c16 	blt	r17,zero,22584 <_fwalk_reent+0x80>
   22554:	84000304 	addi	r16,r16,12
   22558:	80c0000f 	ldh	r3,0(r16)
   2255c:	8c7fffc4 	addi	r17,r17,-1
   22560:	817ffd04 	addi	r5,r16,-12
   22564:	18000526 	beq	r3,zero,2257c <_fwalk_reent+0x78>
   22568:	80c0008f 	ldh	r3,2(r16)
   2256c:	a009883a 	mov	r4,r20
   22570:	1c800226 	beq	r3,r18,2257c <_fwalk_reent+0x78>
   22574:	a83ee83a 	callr	r21
   22578:	b0acb03a 	or	r22,r22,r2
   2257c:	84001704 	addi	r16,r16,92
   22580:	8cbff51e 	bne	r17,r18,22558 <_fwalk_reent+0x54>
   22584:	9cc00017 	ldw	r19,0(r19)
   22588:	983fee1e 	bne	r19,zero,22544 <_fwalk_reent+0x40>
   2258c:	00220140 	call	22014 <__sfp_lock_release>
   22590:	b005883a 	mov	r2,r22
   22594:	dfc00717 	ldw	ra,28(sp)
   22598:	dd800617 	ldw	r22,24(sp)
   2259c:	dd400517 	ldw	r21,20(sp)
   225a0:	dd000417 	ldw	r20,16(sp)
   225a4:	dcc00317 	ldw	r19,12(sp)
   225a8:	dc800217 	ldw	r18,8(sp)
   225ac:	dc400117 	ldw	r17,4(sp)
   225b0:	dc000017 	ldw	r16,0(sp)
   225b4:	dec00804 	addi	sp,sp,32
   225b8:	f800283a 	ret

000225bc <__smakebuf_r>:
   225bc:	2880030b 	ldhu	r2,12(r5)
   225c0:	deffed04 	addi	sp,sp,-76
   225c4:	dc401015 	stw	r17,64(sp)
   225c8:	10c0008c 	andi	r3,r2,2
   225cc:	18ffffcc 	andi	r3,r3,65535
   225d0:	18e0001c 	xori	r3,r3,32768
   225d4:	dc000f15 	stw	r16,60(sp)
   225d8:	dfc01215 	stw	ra,72(sp)
   225dc:	dc801115 	stw	r18,68(sp)
   225e0:	18e00004 	addi	r3,r3,-32768
   225e4:	2821883a 	mov	r16,r5
   225e8:	2023883a 	mov	r17,r4
   225ec:	1800381e 	bne	r3,zero,226d0 <__smakebuf_r+0x114>
   225f0:	2940038f 	ldh	r5,14(r5)
   225f4:	28002d16 	blt	r5,zero,226ac <__smakebuf_r+0xf0>
   225f8:	d80d883a 	mov	r6,sp
   225fc:	0022ba00 	call	22ba0 <_fstat_r>
   22600:	10002916 	blt	r2,zero,226a8 <__smakebuf_r+0xec>
   22604:	d8800117 	ldw	r2,4(sp)
   22608:	00e00014 	movui	r3,32768
   2260c:	10bc000c 	andi	r2,r2,61440
   22610:	10c03c26 	beq	r2,r3,22704 <__smakebuf_r+0x148>
   22614:	80c0030b 	ldhu	r3,12(r16)
   22618:	18c20014 	ori	r3,r3,2048
   2261c:	80c0030d 	sth	r3,12(r16)
   22620:	00c80004 	movi	r3,8192
   22624:	10c00c1e 	bne	r2,r3,22658 <__smakebuf_r+0x9c>
   22628:	8140038f 	ldh	r5,14(r16)
   2262c:	8809883a 	mov	r4,r17
   22630:	0022c080 	call	22c08 <_isatty_r>
   22634:	10000826 	beq	r2,zero,22658 <__smakebuf_r+0x9c>
   22638:	80c0030b 	ldhu	r3,12(r16)
   2263c:	808010c4 	addi	r2,r16,67
   22640:	80800015 	stw	r2,0(r16)
   22644:	18c00054 	ori	r3,r3,1
   22648:	80800415 	stw	r2,16(r16)
   2264c:	00800044 	movi	r2,1
   22650:	80c0030d 	sth	r3,12(r16)
   22654:	80800515 	stw	r2,20(r16)
   22658:	04810004 	movi	r18,1024
   2265c:	8809883a 	mov	r4,r17
   22660:	900b883a 	mov	r5,r18
   22664:	00208300 	call	20830 <_malloc_r>
   22668:	10003026 	beq	r2,zero,2272c <__smakebuf_r+0x170>
   2266c:	80c0030b 	ldhu	r3,12(r16)
   22670:	010000b4 	movhi	r4,2
   22674:	21075d04 	addi	r4,r4,7540
   22678:	89000f15 	stw	r4,60(r17)
   2267c:	18c02014 	ori	r3,r3,128
   22680:	80c0030d 	sth	r3,12(r16)
   22684:	80800015 	stw	r2,0(r16)
   22688:	80800415 	stw	r2,16(r16)
   2268c:	84800515 	stw	r18,20(r16)
   22690:	dfc01217 	ldw	ra,72(sp)
   22694:	dc801117 	ldw	r18,68(sp)
   22698:	dc401017 	ldw	r17,64(sp)
   2269c:	dc000f17 	ldw	r16,60(sp)
   226a0:	dec01304 	addi	sp,sp,76
   226a4:	f800283a 	ret
   226a8:	8080030b 	ldhu	r2,12(r16)
   226ac:	10c0200c 	andi	r3,r2,128
   226b0:	18ffffcc 	andi	r3,r3,65535
   226b4:	18e0001c 	xori	r3,r3,32768
   226b8:	18e00004 	addi	r3,r3,-32768
   226bc:	18000f1e 	bne	r3,zero,226fc <__smakebuf_r+0x140>
   226c0:	04810004 	movi	r18,1024
   226c4:	10820014 	ori	r2,r2,2048
   226c8:	8080030d 	sth	r2,12(r16)
   226cc:	003fe306 	br	2265c <__smakebuf_r+0xa0>
   226d0:	288010c4 	addi	r2,r5,67
   226d4:	28800015 	stw	r2,0(r5)
   226d8:	28800415 	stw	r2,16(r5)
   226dc:	00800044 	movi	r2,1
   226e0:	28800515 	stw	r2,20(r5)
   226e4:	dfc01217 	ldw	ra,72(sp)
   226e8:	dc801117 	ldw	r18,68(sp)
   226ec:	dc401017 	ldw	r17,64(sp)
   226f0:	dc000f17 	ldw	r16,60(sp)
   226f4:	dec01304 	addi	sp,sp,76
   226f8:	f800283a 	ret
   226fc:	04801004 	movi	r18,64
   22700:	003ff006 	br	226c4 <__smakebuf_r+0x108>
   22704:	81000a17 	ldw	r4,40(r16)
   22708:	00c000b4 	movhi	r3,2
   2270c:	18ca4704 	addi	r3,r3,10524
   22710:	20ffc01e 	bne	r4,r3,22614 <__smakebuf_r+0x58>
   22714:	8080030b 	ldhu	r2,12(r16)
   22718:	00c10004 	movi	r3,1024
   2271c:	80c01315 	stw	r3,76(r16)
   22720:	10c4b03a 	or	r2,r2,r3
   22724:	8080030d 	sth	r2,12(r16)
   22728:	003fcb06 	br	22658 <__smakebuf_r+0x9c>
   2272c:	8080030b 	ldhu	r2,12(r16)
   22730:	10c0800c 	andi	r3,r2,512
   22734:	18ffffcc 	andi	r3,r3,65535
   22738:	18e0001c 	xori	r3,r3,32768
   2273c:	18e00004 	addi	r3,r3,-32768
   22740:	183fd31e 	bne	r3,zero,22690 <__smakebuf_r+0xd4>
   22744:	10800094 	ori	r2,r2,2
   22748:	80c010c4 	addi	r3,r16,67
   2274c:	8080030d 	sth	r2,12(r16)
   22750:	00800044 	movi	r2,1
   22754:	80c00015 	stw	r3,0(r16)
   22758:	80c00415 	stw	r3,16(r16)
   2275c:	80800515 	stw	r2,20(r16)
   22760:	003fcb06 	br	22690 <__smakebuf_r+0xd4>

00022764 <memset>:
   22764:	00c000c4 	movi	r3,3
   22768:	2005883a 	mov	r2,r4
   2276c:	29403fcc 	andi	r5,r5,255
   22770:	19802d2e 	bgeu	r3,r6,22828 <memset+0xc4>
   22774:	20c6703a 	and	r3,r4,r3
   22778:	18002e1e 	bne	r3,zero,22834 <memset+0xd0>
   2277c:	2806923a 	slli	r3,r5,8
   22780:	010003c4 	movi	r4,15
   22784:	3011883a 	mov	r8,r6
   22788:	1946b03a 	or	r3,r3,r5
   2278c:	180e943a 	slli	r7,r3,16
   22790:	38ceb03a 	or	r7,r7,r3
   22794:	1007883a 	mov	r3,r2
   22798:	21800f2e 	bgeu	r4,r6,227d8 <memset+0x74>
   2279c:	19c00015 	stw	r7,0(r3)
   227a0:	19c00115 	stw	r7,4(r3)
   227a4:	19c00215 	stw	r7,8(r3)
   227a8:	19c00315 	stw	r7,12(r3)
   227ac:	423ffc04 	addi	r8,r8,-16
   227b0:	18c00404 	addi	r3,r3,16
   227b4:	223ff936 	bltu	r4,r8,2279c <memset+0x38>
   227b8:	30fffc04 	addi	r3,r6,-16
   227bc:	1806d13a 	srli	r3,r3,4
   227c0:	318003cc 	andi	r6,r6,15
   227c4:	010000c4 	movi	r4,3
   227c8:	18c00044 	addi	r3,r3,1
   227cc:	1806913a 	slli	r3,r3,4
   227d0:	10c7883a 	add	r3,r2,r3
   227d4:	21800e2e 	bgeu	r4,r6,22810 <memset+0xac>
   227d8:	1813883a 	mov	r9,r3
   227dc:	3011883a 	mov	r8,r6
   227e0:	010000c4 	movi	r4,3
   227e4:	49c00015 	stw	r7,0(r9)
   227e8:	423fff04 	addi	r8,r8,-4
   227ec:	4a400104 	addi	r9,r9,4
   227f0:	223ffc36 	bltu	r4,r8,227e4 <memset+0x80>
   227f4:	313fff04 	addi	r4,r6,-4
   227f8:	2008d0ba 	srli	r4,r4,2
   227fc:	318000cc 	andi	r6,r6,3
   22800:	21000044 	addi	r4,r4,1
   22804:	2109883a 	add	r4,r4,r4
   22808:	2109883a 	add	r4,r4,r4
   2280c:	1907883a 	add	r3,r3,r4
   22810:	30000a26 	beq	r6,zero,2283c <memset+0xd8>
   22814:	198d883a 	add	r6,r3,r6
   22818:	19400005 	stb	r5,0(r3)
   2281c:	18c00044 	addi	r3,r3,1
   22820:	19bffd1e 	bne	r3,r6,22818 <memset+0xb4>
   22824:	f800283a 	ret
   22828:	2007883a 	mov	r3,r4
   2282c:	303ff91e 	bne	r6,zero,22814 <memset+0xb0>
   22830:	00000206 	br	2283c <memset+0xd8>
   22834:	2007883a 	mov	r3,r4
   22838:	003ff606 	br	22814 <memset+0xb0>
   2283c:	f800283a 	ret

00022840 <__sread>:
   22840:	defffe04 	addi	sp,sp,-8
   22844:	dc000015 	stw	r16,0(sp)
   22848:	2821883a 	mov	r16,r5
   2284c:	2940038f 	ldh	r5,14(r5)
   22850:	dfc00115 	stw	ra,4(sp)
   22854:	0022cd80 	call	22cd8 <_read_r>
   22858:	10000716 	blt	r2,zero,22878 <__sread+0x38>
   2285c:	80c01417 	ldw	r3,80(r16)
   22860:	1887883a 	add	r3,r3,r2
   22864:	80c01415 	stw	r3,80(r16)
   22868:	dfc00117 	ldw	ra,4(sp)
   2286c:	dc000017 	ldw	r16,0(sp)
   22870:	dec00204 	addi	sp,sp,8
   22874:	f800283a 	ret
   22878:	80c0030b 	ldhu	r3,12(r16)
   2287c:	18fbffcc 	andi	r3,r3,61439
   22880:	80c0030d 	sth	r3,12(r16)
   22884:	dfc00117 	ldw	ra,4(sp)
   22888:	dc000017 	ldw	r16,0(sp)
   2288c:	dec00204 	addi	sp,sp,8
   22890:	f800283a 	ret

00022894 <__swrite>:
   22894:	2880030b 	ldhu	r2,12(r5)
   22898:	defffb04 	addi	sp,sp,-20
   2289c:	dcc00315 	stw	r19,12(sp)
   228a0:	10c0400c 	andi	r3,r2,256
   228a4:	18ffffcc 	andi	r3,r3,65535
   228a8:	18e0001c 	xori	r3,r3,32768
   228ac:	dc800215 	stw	r18,8(sp)
   228b0:	dc400115 	stw	r17,4(sp)
   228b4:	dc000015 	stw	r16,0(sp)
   228b8:	dfc00415 	stw	ra,16(sp)
   228bc:	18e00004 	addi	r3,r3,-32768
   228c0:	2821883a 	mov	r16,r5
   228c4:	2027883a 	mov	r19,r4
   228c8:	3025883a 	mov	r18,r6
   228cc:	3823883a 	mov	r17,r7
   228d0:	18000526 	beq	r3,zero,228e8 <__swrite+0x54>
   228d4:	2940038f 	ldh	r5,14(r5)
   228d8:	000d883a 	mov	r6,zero
   228dc:	01c00084 	movi	r7,2
   228e0:	0022c6c0 	call	22c6c <_lseek_r>
   228e4:	8080030b 	ldhu	r2,12(r16)
   228e8:	8140038f 	ldh	r5,14(r16)
   228ec:	10bbffcc 	andi	r2,r2,61439
   228f0:	9809883a 	mov	r4,r19
   228f4:	900d883a 	mov	r6,r18
   228f8:	880f883a 	mov	r7,r17
   228fc:	8080030d 	sth	r2,12(r16)
   22900:	dfc00417 	ldw	ra,16(sp)
   22904:	dcc00317 	ldw	r19,12(sp)
   22908:	dc800217 	ldw	r18,8(sp)
   2290c:	dc400117 	ldw	r17,4(sp)
   22910:	dc000017 	ldw	r16,0(sp)
   22914:	dec00504 	addi	sp,sp,20
   22918:	00229801 	jmpi	22980 <_write_r>

0002291c <__sseek>:
   2291c:	defffe04 	addi	sp,sp,-8
   22920:	dc000015 	stw	r16,0(sp)
   22924:	2821883a 	mov	r16,r5
   22928:	2940038f 	ldh	r5,14(r5)
   2292c:	dfc00115 	stw	ra,4(sp)
   22930:	0022c6c0 	call	22c6c <_lseek_r>
   22934:	00ffffc4 	movi	r3,-1
   22938:	10c00826 	beq	r2,r3,2295c <__sseek+0x40>
   2293c:	80c0030b 	ldhu	r3,12(r16)
   22940:	80801415 	stw	r2,80(r16)
   22944:	18c40014 	ori	r3,r3,4096
   22948:	80c0030d 	sth	r3,12(r16)
   2294c:	dfc00117 	ldw	ra,4(sp)
   22950:	dc000017 	ldw	r16,0(sp)
   22954:	dec00204 	addi	sp,sp,8
   22958:	f800283a 	ret
   2295c:	80c0030b 	ldhu	r3,12(r16)
   22960:	18fbffcc 	andi	r3,r3,61439
   22964:	80c0030d 	sth	r3,12(r16)
   22968:	dfc00117 	ldw	ra,4(sp)
   2296c:	dc000017 	ldw	r16,0(sp)
   22970:	dec00204 	addi	sp,sp,8
   22974:	f800283a 	ret

00022978 <__sclose>:
   22978:	2940038f 	ldh	r5,14(r5)
   2297c:	00229ec1 	jmpi	229ec <_close_r>

00022980 <_write_r>:
   22980:	defffd04 	addi	sp,sp,-12
   22984:	dc400115 	stw	r17,4(sp)
   22988:	dc000015 	stw	r16,0(sp)
   2298c:	2023883a 	mov	r17,r4
   22990:	040000f4 	movhi	r16,3
   22994:	84224104 	addi	r16,r16,-30460
   22998:	2809883a 	mov	r4,r5
   2299c:	300b883a 	mov	r5,r6
   229a0:	380d883a 	mov	r6,r7
   229a4:	dfc00215 	stw	ra,8(sp)
   229a8:	80000015 	stw	zero,0(r16)
   229ac:	00236340 	call	23634 <write>
   229b0:	00ffffc4 	movi	r3,-1
   229b4:	10c00526 	beq	r2,r3,229cc <_write_r+0x4c>
   229b8:	dfc00217 	ldw	ra,8(sp)
   229bc:	dc400117 	ldw	r17,4(sp)
   229c0:	dc000017 	ldw	r16,0(sp)
   229c4:	dec00304 	addi	sp,sp,12
   229c8:	f800283a 	ret
   229cc:	80c00017 	ldw	r3,0(r16)
   229d0:	183ff926 	beq	r3,zero,229b8 <_write_r+0x38>
   229d4:	88c00015 	stw	r3,0(r17)
   229d8:	dfc00217 	ldw	ra,8(sp)
   229dc:	dc400117 	ldw	r17,4(sp)
   229e0:	dc000017 	ldw	r16,0(sp)
   229e4:	dec00304 	addi	sp,sp,12
   229e8:	f800283a 	ret

000229ec <_close_r>:
   229ec:	defffd04 	addi	sp,sp,-12
   229f0:	dc400115 	stw	r17,4(sp)
   229f4:	dc000015 	stw	r16,0(sp)
   229f8:	2023883a 	mov	r17,r4
   229fc:	040000f4 	movhi	r16,3
   22a00:	84224104 	addi	r16,r16,-30460
   22a04:	2809883a 	mov	r4,r5
   22a08:	dfc00215 	stw	ra,8(sp)
   22a0c:	80000015 	stw	zero,0(r16)
   22a10:	0022dbc0 	call	22dbc <close>
   22a14:	00ffffc4 	movi	r3,-1
   22a18:	10c00526 	beq	r2,r3,22a30 <_close_r+0x44>
   22a1c:	dfc00217 	ldw	ra,8(sp)
   22a20:	dc400117 	ldw	r17,4(sp)
   22a24:	dc000017 	ldw	r16,0(sp)
   22a28:	dec00304 	addi	sp,sp,12
   22a2c:	f800283a 	ret
   22a30:	80c00017 	ldw	r3,0(r16)
   22a34:	183ff926 	beq	r3,zero,22a1c <_close_r+0x30>
   22a38:	88c00015 	stw	r3,0(r17)
   22a3c:	dfc00217 	ldw	ra,8(sp)
   22a40:	dc400117 	ldw	r17,4(sp)
   22a44:	dc000017 	ldw	r16,0(sp)
   22a48:	dec00304 	addi	sp,sp,12
   22a4c:	f800283a 	ret

00022a50 <_fclose_r>:
   22a50:	defffc04 	addi	sp,sp,-16
   22a54:	dc400115 	stw	r17,4(sp)
   22a58:	dc000015 	stw	r16,0(sp)
   22a5c:	dfc00315 	stw	ra,12(sp)
   22a60:	dc800215 	stw	r18,8(sp)
   22a64:	2821883a 	mov	r16,r5
   22a68:	2023883a 	mov	r17,r4
   22a6c:	28003426 	beq	r5,zero,22b40 <_fclose_r+0xf0>
   22a70:	00220100 	call	22010 <__sfp_lock_acquire>
   22a74:	88000226 	beq	r17,zero,22a80 <_fclose_r+0x30>
   22a78:	88800e17 	ldw	r2,56(r17)
   22a7c:	10003826 	beq	r2,zero,22b60 <_fclose_r+0x110>
   22a80:	8080030f 	ldh	r2,12(r16)
   22a84:	10002526 	beq	r2,zero,22b1c <_fclose_r+0xcc>
   22a88:	8809883a 	mov	r4,r17
   22a8c:	800b883a 	mov	r5,r16
   22a90:	0021b4c0 	call	21b4c <_fflush_r>
   22a94:	1025883a 	mov	r18,r2
   22a98:	80800b17 	ldw	r2,44(r16)
   22a9c:	10000426 	beq	r2,zero,22ab0 <_fclose_r+0x60>
   22aa0:	81400717 	ldw	r5,28(r16)
   22aa4:	8809883a 	mov	r4,r17
   22aa8:	103ee83a 	callr	r2
   22aac:	10003516 	blt	r2,zero,22b84 <_fclose_r+0x134>
   22ab0:	8080030b 	ldhu	r2,12(r16)
   22ab4:	1080200c 	andi	r2,r2,128
   22ab8:	10bfffcc 	andi	r2,r2,65535
   22abc:	10a0001c 	xori	r2,r2,32768
   22ac0:	10a00004 	addi	r2,r2,-32768
   22ac4:	10002b1e 	bne	r2,zero,22b74 <_fclose_r+0x124>
   22ac8:	81400c17 	ldw	r5,48(r16)
   22acc:	28000526 	beq	r5,zero,22ae4 <_fclose_r+0x94>
   22ad0:	80801004 	addi	r2,r16,64
   22ad4:	28800226 	beq	r5,r2,22ae0 <_fclose_r+0x90>
   22ad8:	8809883a 	mov	r4,r17
   22adc:	002218c0 	call	2218c <_free_r>
   22ae0:	80000c15 	stw	zero,48(r16)
   22ae4:	81401117 	ldw	r5,68(r16)
   22ae8:	28000326 	beq	r5,zero,22af8 <_fclose_r+0xa8>
   22aec:	8809883a 	mov	r4,r17
   22af0:	002218c0 	call	2218c <_free_r>
   22af4:	80001115 	stw	zero,68(r16)
   22af8:	8000030d 	sth	zero,12(r16)
   22afc:	00220140 	call	22014 <__sfp_lock_release>
   22b00:	9005883a 	mov	r2,r18
   22b04:	dfc00317 	ldw	ra,12(sp)
   22b08:	dc800217 	ldw	r18,8(sp)
   22b0c:	dc400117 	ldw	r17,4(sp)
   22b10:	dc000017 	ldw	r16,0(sp)
   22b14:	dec00404 	addi	sp,sp,16
   22b18:	f800283a 	ret
   22b1c:	00220140 	call	22014 <__sfp_lock_release>
   22b20:	0025883a 	mov	r18,zero
   22b24:	9005883a 	mov	r2,r18
   22b28:	dfc00317 	ldw	ra,12(sp)
   22b2c:	dc800217 	ldw	r18,8(sp)
   22b30:	dc400117 	ldw	r17,4(sp)
   22b34:	dc000017 	ldw	r16,0(sp)
   22b38:	dec00404 	addi	sp,sp,16
   22b3c:	f800283a 	ret
   22b40:	0025883a 	mov	r18,zero
   22b44:	9005883a 	mov	r2,r18
   22b48:	dfc00317 	ldw	ra,12(sp)
   22b4c:	dc800217 	ldw	r18,8(sp)
   22b50:	dc400117 	ldw	r17,4(sp)
   22b54:	dc000017 	ldw	r16,0(sp)
   22b58:	dec00404 	addi	sp,sp,16
   22b5c:	f800283a 	ret
   22b60:	8809883a 	mov	r4,r17
   22b64:	0021e080 	call	21e08 <__sinit>
   22b68:	8080030f 	ldh	r2,12(r16)
   22b6c:	103fc61e 	bne	r2,zero,22a88 <_fclose_r+0x38>
   22b70:	003fea06 	br	22b1c <_fclose_r+0xcc>
   22b74:	81400417 	ldw	r5,16(r16)
   22b78:	8809883a 	mov	r4,r17
   22b7c:	002218c0 	call	2218c <_free_r>
   22b80:	003fd106 	br	22ac8 <_fclose_r+0x78>
   22b84:	04bfffc4 	movi	r18,-1
   22b88:	003fc906 	br	22ab0 <_fclose_r+0x60>

00022b8c <fclose>:
   22b8c:	008000b4 	movhi	r2,2
   22b90:	109b9f04 	addi	r2,r2,28284
   22b94:	200b883a 	mov	r5,r4
   22b98:	11000017 	ldw	r4,0(r2)
   22b9c:	0022a501 	jmpi	22a50 <_fclose_r>

00022ba0 <_fstat_r>:
   22ba0:	defffd04 	addi	sp,sp,-12
   22ba4:	dc400115 	stw	r17,4(sp)
   22ba8:	dc000015 	stw	r16,0(sp)
   22bac:	2023883a 	mov	r17,r4
   22bb0:	040000f4 	movhi	r16,3
   22bb4:	84224104 	addi	r16,r16,-30460
   22bb8:	2809883a 	mov	r4,r5
   22bbc:	300b883a 	mov	r5,r6
   22bc0:	dfc00215 	stw	ra,8(sp)
   22bc4:	80000015 	stw	zero,0(r16)
   22bc8:	0022f040 	call	22f04 <fstat>
   22bcc:	00ffffc4 	movi	r3,-1
   22bd0:	10c00526 	beq	r2,r3,22be8 <_fstat_r+0x48>
   22bd4:	dfc00217 	ldw	ra,8(sp)
   22bd8:	dc400117 	ldw	r17,4(sp)
   22bdc:	dc000017 	ldw	r16,0(sp)
   22be0:	dec00304 	addi	sp,sp,12
   22be4:	f800283a 	ret
   22be8:	80c00017 	ldw	r3,0(r16)
   22bec:	183ff926 	beq	r3,zero,22bd4 <_fstat_r+0x34>
   22bf0:	88c00015 	stw	r3,0(r17)
   22bf4:	dfc00217 	ldw	ra,8(sp)
   22bf8:	dc400117 	ldw	r17,4(sp)
   22bfc:	dc000017 	ldw	r16,0(sp)
   22c00:	dec00304 	addi	sp,sp,12
   22c04:	f800283a 	ret

00022c08 <_isatty_r>:
   22c08:	defffd04 	addi	sp,sp,-12
   22c0c:	dc400115 	stw	r17,4(sp)
   22c10:	dc000015 	stw	r16,0(sp)
   22c14:	2023883a 	mov	r17,r4
   22c18:	040000f4 	movhi	r16,3
   22c1c:	84224104 	addi	r16,r16,-30460
   22c20:	2809883a 	mov	r4,r5
   22c24:	dfc00215 	stw	ra,8(sp)
   22c28:	80000015 	stw	zero,0(r16)
   22c2c:	00230040 	call	23004 <isatty>
   22c30:	00ffffc4 	movi	r3,-1
   22c34:	10c00526 	beq	r2,r3,22c4c <_isatty_r+0x44>
   22c38:	dfc00217 	ldw	ra,8(sp)
   22c3c:	dc400117 	ldw	r17,4(sp)
   22c40:	dc000017 	ldw	r16,0(sp)
   22c44:	dec00304 	addi	sp,sp,12
   22c48:	f800283a 	ret
   22c4c:	80c00017 	ldw	r3,0(r16)
   22c50:	183ff926 	beq	r3,zero,22c38 <_isatty_r+0x30>
   22c54:	88c00015 	stw	r3,0(r17)
   22c58:	dfc00217 	ldw	ra,8(sp)
   22c5c:	dc400117 	ldw	r17,4(sp)
   22c60:	dc000017 	ldw	r16,0(sp)
   22c64:	dec00304 	addi	sp,sp,12
   22c68:	f800283a 	ret

00022c6c <_lseek_r>:
   22c6c:	defffd04 	addi	sp,sp,-12
   22c70:	dc400115 	stw	r17,4(sp)
   22c74:	dc000015 	stw	r16,0(sp)
   22c78:	2023883a 	mov	r17,r4
   22c7c:	040000f4 	movhi	r16,3
   22c80:	84224104 	addi	r16,r16,-30460
   22c84:	2809883a 	mov	r4,r5
   22c88:	300b883a 	mov	r5,r6
   22c8c:	380d883a 	mov	r6,r7
   22c90:	dfc00215 	stw	ra,8(sp)
   22c94:	80000015 	stw	zero,0(r16)
   22c98:	00231e40 	call	231e4 <lseek>
   22c9c:	00ffffc4 	movi	r3,-1
   22ca0:	10c00526 	beq	r2,r3,22cb8 <_lseek_r+0x4c>
   22ca4:	dfc00217 	ldw	ra,8(sp)
   22ca8:	dc400117 	ldw	r17,4(sp)
   22cac:	dc000017 	ldw	r16,0(sp)
   22cb0:	dec00304 	addi	sp,sp,12
   22cb4:	f800283a 	ret
   22cb8:	80c00017 	ldw	r3,0(r16)
   22cbc:	183ff926 	beq	r3,zero,22ca4 <_lseek_r+0x38>
   22cc0:	88c00015 	stw	r3,0(r17)
   22cc4:	dfc00217 	ldw	ra,8(sp)
   22cc8:	dc400117 	ldw	r17,4(sp)
   22ccc:	dc000017 	ldw	r16,0(sp)
   22cd0:	dec00304 	addi	sp,sp,12
   22cd4:	f800283a 	ret

00022cd8 <_read_r>:
   22cd8:	defffd04 	addi	sp,sp,-12
   22cdc:	dc400115 	stw	r17,4(sp)
   22ce0:	dc000015 	stw	r16,0(sp)
   22ce4:	2023883a 	mov	r17,r4
   22ce8:	040000f4 	movhi	r16,3
   22cec:	84224104 	addi	r16,r16,-30460
   22cf0:	2809883a 	mov	r4,r5
   22cf4:	300b883a 	mov	r5,r6
   22cf8:	380d883a 	mov	r6,r7
   22cfc:	dfc00215 	stw	ra,8(sp)
   22d00:	80000015 	stw	zero,0(r16)
   22d04:	00233c00 	call	233c0 <read>
   22d08:	00ffffc4 	movi	r3,-1
   22d0c:	10c00526 	beq	r2,r3,22d24 <_read_r+0x4c>
   22d10:	dfc00217 	ldw	ra,8(sp)
   22d14:	dc400117 	ldw	r17,4(sp)
   22d18:	dc000017 	ldw	r16,0(sp)
   22d1c:	dec00304 	addi	sp,sp,12
   22d20:	f800283a 	ret
   22d24:	80c00017 	ldw	r3,0(r16)
   22d28:	183ff926 	beq	r3,zero,22d10 <_read_r+0x38>
   22d2c:	88c00015 	stw	r3,0(r17)
   22d30:	dfc00217 	ldw	ra,8(sp)
   22d34:	dc400117 	ldw	r17,4(sp)
   22d38:	dc000017 	ldw	r16,0(sp)
   22d3c:	dec00304 	addi	sp,sp,12
   22d40:	f800283a 	ret

00022d44 <__mulsi3>:
   22d44:	0005883a 	mov	r2,zero
   22d48:	20000726 	beq	r4,zero,22d68 <__mulsi3+0x24>
   22d4c:	20c0004c 	andi	r3,r4,1
   22d50:	2008d07a 	srli	r4,r4,1
   22d54:	18000126 	beq	r3,zero,22d5c <__mulsi3+0x18>
   22d58:	1145883a 	add	r2,r2,r5
   22d5c:	294b883a 	add	r5,r5,r5
   22d60:	203ffa1e 	bne	r4,zero,22d4c <__mulsi3+0x8>
   22d64:	f800283a 	ret
   22d68:	f800283a 	ret

00022d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22d6c:	defffe04 	addi	sp,sp,-8
   22d70:	dfc00115 	stw	ra,4(sp)
   22d74:	df000015 	stw	fp,0(sp)
   22d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22d7c:	008000b4 	movhi	r2,2
   22d80:	109ba704 	addi	r2,r2,28316
   22d84:	10800017 	ldw	r2,0(r2)
   22d88:	10000526 	beq	r2,zero,22da0 <alt_get_errno+0x34>
   22d8c:	008000b4 	movhi	r2,2
   22d90:	109ba704 	addi	r2,r2,28316
   22d94:	10800017 	ldw	r2,0(r2)
   22d98:	103ee83a 	callr	r2
   22d9c:	00000206 	br	22da8 <alt_get_errno+0x3c>
   22da0:	008000f4 	movhi	r2,3
   22da4:	10a24104 	addi	r2,r2,-30460
}
   22da8:	e037883a 	mov	sp,fp
   22dac:	dfc00117 	ldw	ra,4(sp)
   22db0:	df000017 	ldw	fp,0(sp)
   22db4:	dec00204 	addi	sp,sp,8
   22db8:	f800283a 	ret

00022dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22dbc:	defffb04 	addi	sp,sp,-20
   22dc0:	dfc00415 	stw	ra,16(sp)
   22dc4:	df000315 	stw	fp,12(sp)
   22dc8:	df000304 	addi	fp,sp,12
   22dcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22dd0:	e0bfff17 	ldw	r2,-4(fp)
   22dd4:	10000716 	blt	r2,zero,22df4 <close+0x38>
   22dd8:	e13fff17 	ldw	r4,-4(fp)
   22ddc:	01400304 	movi	r5,12
   22de0:	0022d440 	call	22d44 <__mulsi3>
   22de4:	00c000b4 	movhi	r3,2
   22de8:	18d72604 	addi	r3,r3,23704
   22dec:	10c5883a 	add	r2,r2,r3
   22df0:	00000106 	br	22df8 <close+0x3c>
   22df4:	0005883a 	mov	r2,zero
   22df8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22dfc:	e0bffd17 	ldw	r2,-12(fp)
   22e00:	10001826 	beq	r2,zero,22e64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22e04:	e0bffd17 	ldw	r2,-12(fp)
   22e08:	10800017 	ldw	r2,0(r2)
   22e0c:	10800417 	ldw	r2,16(r2)
   22e10:	10000626 	beq	r2,zero,22e2c <close+0x70>
   22e14:	e0bffd17 	ldw	r2,-12(fp)
   22e18:	10800017 	ldw	r2,0(r2)
   22e1c:	10800417 	ldw	r2,16(r2)
   22e20:	e13ffd17 	ldw	r4,-12(fp)
   22e24:	103ee83a 	callr	r2
   22e28:	00000106 	br	22e30 <close+0x74>
   22e2c:	0005883a 	mov	r2,zero
   22e30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22e34:	e13fff17 	ldw	r4,-4(fp)
   22e38:	00234b40 	call	234b4 <alt_release_fd>
    if (rval < 0)
   22e3c:	e0bffe17 	ldw	r2,-8(fp)
   22e40:	1000060e 	bge	r2,zero,22e5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   22e44:	0022d6c0 	call	22d6c <alt_get_errno>
   22e48:	e0fffe17 	ldw	r3,-8(fp)
   22e4c:	00c7c83a 	sub	r3,zero,r3
   22e50:	10c00015 	stw	r3,0(r2)
      return -1;
   22e54:	00bfffc4 	movi	r2,-1
   22e58:	00000606 	br	22e74 <close+0xb8>
    }
    return 0;
   22e5c:	0005883a 	mov	r2,zero
   22e60:	00000406 	br	22e74 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22e64:	0022d6c0 	call	22d6c <alt_get_errno>
   22e68:	00c01444 	movi	r3,81
   22e6c:	10c00015 	stw	r3,0(r2)
    return -1;
   22e70:	00bfffc4 	movi	r2,-1
  }
}
   22e74:	e037883a 	mov	sp,fp
   22e78:	dfc00117 	ldw	ra,4(sp)
   22e7c:	df000017 	ldw	fp,0(sp)
   22e80:	dec00204 	addi	sp,sp,8
   22e84:	f800283a 	ret

00022e88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22e88:	defffc04 	addi	sp,sp,-16
   22e8c:	df000315 	stw	fp,12(sp)
   22e90:	df000304 	addi	fp,sp,12
   22e94:	e13ffd15 	stw	r4,-12(fp)
   22e98:	e17ffe15 	stw	r5,-8(fp)
   22e9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   22ea4:	e037883a 	mov	sp,fp
   22ea8:	df000017 	ldw	fp,0(sp)
   22eac:	dec00104 	addi	sp,sp,4
   22eb0:	f800283a 	ret

00022eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22eb4:	defffe04 	addi	sp,sp,-8
   22eb8:	dfc00115 	stw	ra,4(sp)
   22ebc:	df000015 	stw	fp,0(sp)
   22ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ec4:	008000b4 	movhi	r2,2
   22ec8:	109ba704 	addi	r2,r2,28316
   22ecc:	10800017 	ldw	r2,0(r2)
   22ed0:	10000526 	beq	r2,zero,22ee8 <alt_get_errno+0x34>
   22ed4:	008000b4 	movhi	r2,2
   22ed8:	109ba704 	addi	r2,r2,28316
   22edc:	10800017 	ldw	r2,0(r2)
   22ee0:	103ee83a 	callr	r2
   22ee4:	00000206 	br	22ef0 <alt_get_errno+0x3c>
   22ee8:	008000f4 	movhi	r2,3
   22eec:	10a24104 	addi	r2,r2,-30460
}
   22ef0:	e037883a 	mov	sp,fp
   22ef4:	dfc00117 	ldw	ra,4(sp)
   22ef8:	df000017 	ldw	fp,0(sp)
   22efc:	dec00204 	addi	sp,sp,8
   22f00:	f800283a 	ret

00022f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   22f04:	defffb04 	addi	sp,sp,-20
   22f08:	dfc00415 	stw	ra,16(sp)
   22f0c:	df000315 	stw	fp,12(sp)
   22f10:	df000304 	addi	fp,sp,12
   22f14:	e13ffe15 	stw	r4,-8(fp)
   22f18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22f1c:	e0bffe17 	ldw	r2,-8(fp)
   22f20:	10000716 	blt	r2,zero,22f40 <fstat+0x3c>
   22f24:	e13ffe17 	ldw	r4,-8(fp)
   22f28:	01400304 	movi	r5,12
   22f2c:	0022d440 	call	22d44 <__mulsi3>
   22f30:	00c000b4 	movhi	r3,2
   22f34:	18d72604 	addi	r3,r3,23704
   22f38:	10c5883a 	add	r2,r2,r3
   22f3c:	00000106 	br	22f44 <fstat+0x40>
   22f40:	0005883a 	mov	r2,zero
   22f44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   22f48:	e0bffd17 	ldw	r2,-12(fp)
   22f4c:	10001026 	beq	r2,zero,22f90 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   22f50:	e0bffd17 	ldw	r2,-12(fp)
   22f54:	10800017 	ldw	r2,0(r2)
   22f58:	10800817 	ldw	r2,32(r2)
   22f5c:	10000726 	beq	r2,zero,22f7c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   22f60:	e0bffd17 	ldw	r2,-12(fp)
   22f64:	10800017 	ldw	r2,0(r2)
   22f68:	10800817 	ldw	r2,32(r2)
   22f6c:	e13ffd17 	ldw	r4,-12(fp)
   22f70:	e17fff17 	ldw	r5,-4(fp)
   22f74:	103ee83a 	callr	r2
   22f78:	00000906 	br	22fa0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   22f7c:	e0bfff17 	ldw	r2,-4(fp)
   22f80:	00c80004 	movi	r3,8192
   22f84:	10c00115 	stw	r3,4(r2)
      return 0;
   22f88:	0005883a 	mov	r2,zero
   22f8c:	00000406 	br	22fa0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22f90:	0022eb40 	call	22eb4 <alt_get_errno>
   22f94:	00c01444 	movi	r3,81
   22f98:	10c00015 	stw	r3,0(r2)
    return -1;
   22f9c:	00bfffc4 	movi	r2,-1
  }
}
   22fa0:	e037883a 	mov	sp,fp
   22fa4:	dfc00117 	ldw	ra,4(sp)
   22fa8:	df000017 	ldw	fp,0(sp)
   22fac:	dec00204 	addi	sp,sp,8
   22fb0:	f800283a 	ret

00022fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22fb4:	defffe04 	addi	sp,sp,-8
   22fb8:	dfc00115 	stw	ra,4(sp)
   22fbc:	df000015 	stw	fp,0(sp)
   22fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22fc4:	008000b4 	movhi	r2,2
   22fc8:	109ba704 	addi	r2,r2,28316
   22fcc:	10800017 	ldw	r2,0(r2)
   22fd0:	10000526 	beq	r2,zero,22fe8 <alt_get_errno+0x34>
   22fd4:	008000b4 	movhi	r2,2
   22fd8:	109ba704 	addi	r2,r2,28316
   22fdc:	10800017 	ldw	r2,0(r2)
   22fe0:	103ee83a 	callr	r2
   22fe4:	00000206 	br	22ff0 <alt_get_errno+0x3c>
   22fe8:	008000f4 	movhi	r2,3
   22fec:	10a24104 	addi	r2,r2,-30460
}
   22ff0:	e037883a 	mov	sp,fp
   22ff4:	dfc00117 	ldw	ra,4(sp)
   22ff8:	df000017 	ldw	fp,0(sp)
   22ffc:	dec00204 	addi	sp,sp,8
   23000:	f800283a 	ret

00023004 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23004:	deffed04 	addi	sp,sp,-76
   23008:	dfc01215 	stw	ra,72(sp)
   2300c:	df001115 	stw	fp,68(sp)
   23010:	df001104 	addi	fp,sp,68
   23014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23018:	e0bfff17 	ldw	r2,-4(fp)
   2301c:	10000716 	blt	r2,zero,2303c <isatty+0x38>
   23020:	e13fff17 	ldw	r4,-4(fp)
   23024:	01400304 	movi	r5,12
   23028:	0022d440 	call	22d44 <__mulsi3>
   2302c:	00c000b4 	movhi	r3,2
   23030:	18d72604 	addi	r3,r3,23704
   23034:	10c5883a 	add	r2,r2,r3
   23038:	00000106 	br	23040 <isatty+0x3c>
   2303c:	0005883a 	mov	r2,zero
   23040:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23044:	e0bfef17 	ldw	r2,-68(fp)
   23048:	10000e26 	beq	r2,zero,23084 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2304c:	e0bfef17 	ldw	r2,-68(fp)
   23050:	10800017 	ldw	r2,0(r2)
   23054:	10800817 	ldw	r2,32(r2)
   23058:	1000021e 	bne	r2,zero,23064 <isatty+0x60>
    {
      return 1;
   2305c:	00800044 	movi	r2,1
   23060:	00000c06 	br	23094 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23064:	e0bff004 	addi	r2,fp,-64
   23068:	e13fff17 	ldw	r4,-4(fp)
   2306c:	100b883a 	mov	r5,r2
   23070:	0022f040 	call	22f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23074:	e0bff117 	ldw	r2,-60(fp)
   23078:	10880020 	cmpeqi	r2,r2,8192
   2307c:	10803fcc 	andi	r2,r2,255
   23080:	00000406 	br	23094 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23084:	0022fb40 	call	22fb4 <alt_get_errno>
   23088:	00c01444 	movi	r3,81
   2308c:	10c00015 	stw	r3,0(r2)
    return 0;
   23090:	0005883a 	mov	r2,zero
  }
}
   23094:	e037883a 	mov	sp,fp
   23098:	dfc00117 	ldw	ra,4(sp)
   2309c:	df000017 	ldw	fp,0(sp)
   230a0:	dec00204 	addi	sp,sp,8
   230a4:	f800283a 	ret

000230a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   230a8:	defffc04 	addi	sp,sp,-16
   230ac:	df000315 	stw	fp,12(sp)
   230b0:	df000304 	addi	fp,sp,12
   230b4:	e13ffd15 	stw	r4,-12(fp)
   230b8:	e17ffe15 	stw	r5,-8(fp)
   230bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   230c0:	e0fffe17 	ldw	r3,-8(fp)
   230c4:	e0bffd17 	ldw	r2,-12(fp)
   230c8:	18800e26 	beq	r3,r2,23104 <alt_load_section+0x5c>
  {
    while( to != end )
   230cc:	00000a06 	br	230f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   230d0:	e0bffd17 	ldw	r2,-12(fp)
   230d4:	10c00017 	ldw	r3,0(r2)
   230d8:	e0bffe17 	ldw	r2,-8(fp)
   230dc:	10c00015 	stw	r3,0(r2)
   230e0:	e0bffe17 	ldw	r2,-8(fp)
   230e4:	10800104 	addi	r2,r2,4
   230e8:	e0bffe15 	stw	r2,-8(fp)
   230ec:	e0bffd17 	ldw	r2,-12(fp)
   230f0:	10800104 	addi	r2,r2,4
   230f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   230f8:	e0fffe17 	ldw	r3,-8(fp)
   230fc:	e0bfff17 	ldw	r2,-4(fp)
   23100:	18bff31e 	bne	r3,r2,230d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23104:	e037883a 	mov	sp,fp
   23108:	df000017 	ldw	fp,0(sp)
   2310c:	dec00104 	addi	sp,sp,4
   23110:	f800283a 	ret

00023114 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23114:	defffe04 	addi	sp,sp,-8
   23118:	dfc00115 	stw	ra,4(sp)
   2311c:	df000015 	stw	fp,0(sp)
   23120:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23124:	010000b4 	movhi	r4,2
   23128:	211bac04 	addi	r4,r4,28336
   2312c:	014000b4 	movhi	r5,2
   23130:	29551a04 	addi	r5,r5,21608
   23134:	018000b4 	movhi	r6,2
   23138:	319bac04 	addi	r6,r6,28336
   2313c:	00230a80 	call	230a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23140:	010000b4 	movhi	r4,2
   23144:	21000804 	addi	r4,r4,32
   23148:	014000b4 	movhi	r5,2
   2314c:	29400804 	addi	r5,r5,32
   23150:	018000b4 	movhi	r6,2
   23154:	31806e04 	addi	r6,r6,440
   23158:	00230a80 	call	230a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2315c:	010000b4 	movhi	r4,2
   23160:	21150604 	addi	r4,r4,21528
   23164:	014000b4 	movhi	r5,2
   23168:	29550604 	addi	r5,r5,21528
   2316c:	018000b4 	movhi	r6,2
   23170:	31951a04 	addi	r6,r6,21608
   23174:	00230a80 	call	230a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23178:	00243780 	call	24378 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2317c:	002453c0 	call	2453c <alt_icache_flush_all>
}
   23180:	e037883a 	mov	sp,fp
   23184:	dfc00117 	ldw	ra,4(sp)
   23188:	df000017 	ldw	fp,0(sp)
   2318c:	dec00204 	addi	sp,sp,8
   23190:	f800283a 	ret

00023194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23194:	defffe04 	addi	sp,sp,-8
   23198:	dfc00115 	stw	ra,4(sp)
   2319c:	df000015 	stw	fp,0(sp)
   231a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231a4:	008000b4 	movhi	r2,2
   231a8:	109ba704 	addi	r2,r2,28316
   231ac:	10800017 	ldw	r2,0(r2)
   231b0:	10000526 	beq	r2,zero,231c8 <alt_get_errno+0x34>
   231b4:	008000b4 	movhi	r2,2
   231b8:	109ba704 	addi	r2,r2,28316
   231bc:	10800017 	ldw	r2,0(r2)
   231c0:	103ee83a 	callr	r2
   231c4:	00000206 	br	231d0 <alt_get_errno+0x3c>
   231c8:	008000f4 	movhi	r2,3
   231cc:	10a24104 	addi	r2,r2,-30460
}
   231d0:	e037883a 	mov	sp,fp
   231d4:	dfc00117 	ldw	ra,4(sp)
   231d8:	df000017 	ldw	fp,0(sp)
   231dc:	dec00204 	addi	sp,sp,8
   231e0:	f800283a 	ret

000231e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   231e4:	defff904 	addi	sp,sp,-28
   231e8:	dfc00615 	stw	ra,24(sp)
   231ec:	df000515 	stw	fp,20(sp)
   231f0:	df000504 	addi	fp,sp,20
   231f4:	e13ffd15 	stw	r4,-12(fp)
   231f8:	e17ffe15 	stw	r5,-8(fp)
   231fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23200:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23204:	e0bffd17 	ldw	r2,-12(fp)
   23208:	10000716 	blt	r2,zero,23228 <lseek+0x44>
   2320c:	e13ffd17 	ldw	r4,-12(fp)
   23210:	01400304 	movi	r5,12
   23214:	0022d440 	call	22d44 <__mulsi3>
   23218:	00c000b4 	movhi	r3,2
   2321c:	18d72604 	addi	r3,r3,23704
   23220:	10c5883a 	add	r2,r2,r3
   23224:	00000106 	br	2322c <lseek+0x48>
   23228:	0005883a 	mov	r2,zero
   2322c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23230:	e0bffc17 	ldw	r2,-16(fp)
   23234:	10001026 	beq	r2,zero,23278 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23238:	e0bffc17 	ldw	r2,-16(fp)
   2323c:	10800017 	ldw	r2,0(r2)
   23240:	10800717 	ldw	r2,28(r2)
   23244:	10000926 	beq	r2,zero,2326c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23248:	e0bffc17 	ldw	r2,-16(fp)
   2324c:	10800017 	ldw	r2,0(r2)
   23250:	10800717 	ldw	r2,28(r2)
   23254:	e13ffc17 	ldw	r4,-16(fp)
   23258:	e17ffe17 	ldw	r5,-8(fp)
   2325c:	e1bfff17 	ldw	r6,-4(fp)
   23260:	103ee83a 	callr	r2
   23264:	e0bffb15 	stw	r2,-20(fp)
   23268:	00000506 	br	23280 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2326c:	00bfde84 	movi	r2,-134
   23270:	e0bffb15 	stw	r2,-20(fp)
   23274:	00000206 	br	23280 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   23278:	00bfebc4 	movi	r2,-81
   2327c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23280:	e0bffb17 	ldw	r2,-20(fp)
   23284:	1000060e 	bge	r2,zero,232a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   23288:	00231940 	call	23194 <alt_get_errno>
   2328c:	e0fffb17 	ldw	r3,-20(fp)
   23290:	00c7c83a 	sub	r3,zero,r3
   23294:	10c00015 	stw	r3,0(r2)
    rc = -1;
   23298:	00bfffc4 	movi	r2,-1
   2329c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   232a0:	e0bffb17 	ldw	r2,-20(fp)
}
   232a4:	e037883a 	mov	sp,fp
   232a8:	dfc00117 	ldw	ra,4(sp)
   232ac:	df000017 	ldw	fp,0(sp)
   232b0:	dec00204 	addi	sp,sp,8
   232b4:	f800283a 	ret

000232b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   232b8:	defffd04 	addi	sp,sp,-12
   232bc:	dfc00215 	stw	ra,8(sp)
   232c0:	df000115 	stw	fp,4(sp)
   232c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   232c8:	0009883a 	mov	r4,zero
   232cc:	002375c0 	call	2375c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   232d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   232d4:	00237900 	call	23790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   232d8:	010000b4 	movhi	r4,2
   232dc:	21151004 	addi	r4,r4,21568
   232e0:	014000b4 	movhi	r5,2
   232e4:	29551004 	addi	r5,r5,21568
   232e8:	018000b4 	movhi	r6,2
   232ec:	31951004 	addi	r6,r6,21568
   232f0:	00249000 	call	24900 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   232f4:	00244840 	call	24484 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   232f8:	010000b4 	movhi	r4,2
   232fc:	21113804 	addi	r4,r4,17632
   23300:	00250440 	call	25044 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23304:	d126a417 	ldw	r4,-25968(gp)
   23308:	d0e6a517 	ldw	r3,-25964(gp)
   2330c:	d0a6a617 	ldw	r2,-25960(gp)
   23310:	180b883a 	mov	r5,r3
   23314:	100d883a 	mov	r6,r2
   23318:	00201f40 	call	201f4 <main>
   2331c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23320:	01000044 	movi	r4,1
   23324:	0022dbc0 	call	22dbc <close>
  exit (result);
   23328:	e13fff17 	ldw	r4,-4(fp)
   2332c:	00250580 	call	25058 <exit>

00023330 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23330:	defffe04 	addi	sp,sp,-8
   23334:	df000115 	stw	fp,4(sp)
   23338:	df000104 	addi	fp,sp,4
   2333c:	e13fff15 	stw	r4,-4(fp)
}
   23340:	e037883a 	mov	sp,fp
   23344:	df000017 	ldw	fp,0(sp)
   23348:	dec00104 	addi	sp,sp,4
   2334c:	f800283a 	ret

00023350 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23350:	defffe04 	addi	sp,sp,-8
   23354:	df000115 	stw	fp,4(sp)
   23358:	df000104 	addi	fp,sp,4
   2335c:	e13fff15 	stw	r4,-4(fp)
}
   23360:	e037883a 	mov	sp,fp
   23364:	df000017 	ldw	fp,0(sp)
   23368:	dec00104 	addi	sp,sp,4
   2336c:	f800283a 	ret

00023370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23370:	defffe04 	addi	sp,sp,-8
   23374:	dfc00115 	stw	ra,4(sp)
   23378:	df000015 	stw	fp,0(sp)
   2337c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23380:	008000b4 	movhi	r2,2
   23384:	109ba704 	addi	r2,r2,28316
   23388:	10800017 	ldw	r2,0(r2)
   2338c:	10000526 	beq	r2,zero,233a4 <alt_get_errno+0x34>
   23390:	008000b4 	movhi	r2,2
   23394:	109ba704 	addi	r2,r2,28316
   23398:	10800017 	ldw	r2,0(r2)
   2339c:	103ee83a 	callr	r2
   233a0:	00000206 	br	233ac <alt_get_errno+0x3c>
   233a4:	008000f4 	movhi	r2,3
   233a8:	10a24104 	addi	r2,r2,-30460
}
   233ac:	e037883a 	mov	sp,fp
   233b0:	dfc00117 	ldw	ra,4(sp)
   233b4:	df000017 	ldw	fp,0(sp)
   233b8:	dec00204 	addi	sp,sp,8
   233bc:	f800283a 	ret

000233c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   233c0:	defff904 	addi	sp,sp,-28
   233c4:	dfc00615 	stw	ra,24(sp)
   233c8:	df000515 	stw	fp,20(sp)
   233cc:	df000504 	addi	fp,sp,20
   233d0:	e13ffd15 	stw	r4,-12(fp)
   233d4:	e17ffe15 	stw	r5,-8(fp)
   233d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   233dc:	e0bffd17 	ldw	r2,-12(fp)
   233e0:	10000716 	blt	r2,zero,23400 <read+0x40>
   233e4:	e13ffd17 	ldw	r4,-12(fp)
   233e8:	01400304 	movi	r5,12
   233ec:	0022d440 	call	22d44 <__mulsi3>
   233f0:	00c000b4 	movhi	r3,2
   233f4:	18d72604 	addi	r3,r3,23704
   233f8:	10c5883a 	add	r2,r2,r3
   233fc:	00000106 	br	23404 <read+0x44>
   23400:	0005883a 	mov	r2,zero
   23404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23408:	e0bffb17 	ldw	r2,-20(fp)
   2340c:	10002026 	beq	r2,zero,23490 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23410:	e0bffb17 	ldw	r2,-20(fp)
   23414:	10800217 	ldw	r2,8(r2)
   23418:	108000cc 	andi	r2,r2,3
   2341c:	10800060 	cmpeqi	r2,r2,1
   23420:	1000171e 	bne	r2,zero,23480 <read+0xc0>
        (fd->dev->read))
   23424:	e0bffb17 	ldw	r2,-20(fp)
   23428:	10800017 	ldw	r2,0(r2)
   2342c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23430:	10001326 	beq	r2,zero,23480 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23434:	e0bffb17 	ldw	r2,-20(fp)
   23438:	10800017 	ldw	r2,0(r2)
   2343c:	10c00517 	ldw	r3,20(r2)
   23440:	e0bfff17 	ldw	r2,-4(fp)
   23444:	e13ffb17 	ldw	r4,-20(fp)
   23448:	e17ffe17 	ldw	r5,-8(fp)
   2344c:	100d883a 	mov	r6,r2
   23450:	183ee83a 	callr	r3
   23454:	e0bffc15 	stw	r2,-16(fp)
   23458:	e0bffc17 	ldw	r2,-16(fp)
   2345c:	1000060e 	bge	r2,zero,23478 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   23460:	00233700 	call	23370 <alt_get_errno>
   23464:	e0fffc17 	ldw	r3,-16(fp)
   23468:	00c7c83a 	sub	r3,zero,r3
   2346c:	10c00015 	stw	r3,0(r2)
          return -1;
   23470:	00bfffc4 	movi	r2,-1
   23474:	00000a06 	br	234a0 <read+0xe0>
        }
        return rval;
   23478:	e0bffc17 	ldw	r2,-16(fp)
   2347c:	00000806 	br	234a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23480:	00233700 	call	23370 <alt_get_errno>
   23484:	00c00344 	movi	r3,13
   23488:	10c00015 	stw	r3,0(r2)
   2348c:	00000306 	br	2349c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23490:	00233700 	call	23370 <alt_get_errno>
   23494:	00c01444 	movi	r3,81
   23498:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2349c:	00bfffc4 	movi	r2,-1
}
   234a0:	e037883a 	mov	sp,fp
   234a4:	dfc00117 	ldw	ra,4(sp)
   234a8:	df000017 	ldw	fp,0(sp)
   234ac:	dec00204 	addi	sp,sp,8
   234b0:	f800283a 	ret

000234b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   234b4:	defffc04 	addi	sp,sp,-16
   234b8:	dfc00315 	stw	ra,12(sp)
   234bc:	df000215 	stw	fp,8(sp)
   234c0:	dc000115 	stw	r16,4(sp)
   234c4:	df000104 	addi	fp,sp,4
   234c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   234cc:	e0bfff17 	ldw	r2,-4(fp)
   234d0:	108000d0 	cmplti	r2,r2,3
   234d4:	1000111e 	bne	r2,zero,2351c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   234d8:	040000b4 	movhi	r16,2
   234dc:	84172604 	addi	r16,r16,23704
   234e0:	e0bfff17 	ldw	r2,-4(fp)
   234e4:	1009883a 	mov	r4,r2
   234e8:	01400304 	movi	r5,12
   234ec:	0022d440 	call	22d44 <__mulsi3>
   234f0:	8085883a 	add	r2,r16,r2
   234f4:	10800204 	addi	r2,r2,8
   234f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   234fc:	040000b4 	movhi	r16,2
   23500:	84172604 	addi	r16,r16,23704
   23504:	e0bfff17 	ldw	r2,-4(fp)
   23508:	1009883a 	mov	r4,r2
   2350c:	01400304 	movi	r5,12
   23510:	0022d440 	call	22d44 <__mulsi3>
   23514:	8085883a 	add	r2,r16,r2
   23518:	10000015 	stw	zero,0(r2)
  }
}
   2351c:	e037883a 	mov	sp,fp
   23520:	dfc00217 	ldw	ra,8(sp)
   23524:	df000117 	ldw	fp,4(sp)
   23528:	dc000017 	ldw	r16,0(sp)
   2352c:	dec00304 	addi	sp,sp,12
   23530:	f800283a 	ret

00023534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23534:	defff904 	addi	sp,sp,-28
   23538:	df000615 	stw	fp,24(sp)
   2353c:	df000604 	addi	fp,sp,24
   23540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23544:	0005303a 	rdctl	r2,status
   23548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2354c:	e0fffc17 	ldw	r3,-16(fp)
   23550:	00bfff84 	movi	r2,-2
   23554:	1884703a 	and	r2,r3,r2
   23558:	1001703a 	wrctl	status,r2
  
  return context;
   2355c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23560:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23564:	d0a00a17 	ldw	r2,-32728(gp)
   23568:	10c000c4 	addi	r3,r2,3
   2356c:	00bfff04 	movi	r2,-4
   23570:	1884703a 	and	r2,r3,r2
   23574:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23578:	d0e00a17 	ldw	r3,-32728(gp)
   2357c:	e0bfff17 	ldw	r2,-4(fp)
   23580:	1885883a 	add	r2,r3,r2
   23584:	00c000f4 	movhi	r3,3
   23588:	18e80004 	addi	r3,r3,-24576
   2358c:	1880062e 	bgeu	r3,r2,235a8 <sbrk+0x74>
   23590:	e0bffa17 	ldw	r2,-24(fp)
   23594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23598:	e0bffd17 	ldw	r2,-12(fp)
   2359c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   235a0:	00bfffc4 	movi	r2,-1
   235a4:	00000b06 	br	235d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   235a8:	d0a00a17 	ldw	r2,-32728(gp)
   235ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   235b0:	d0e00a17 	ldw	r3,-32728(gp)
   235b4:	e0bfff17 	ldw	r2,-4(fp)
   235b8:	1885883a 	add	r2,r3,r2
   235bc:	d0a00a15 	stw	r2,-32728(gp)
   235c0:	e0bffa17 	ldw	r2,-24(fp)
   235c4:	e0bffe15 	stw	r2,-8(fp)
   235c8:	e0bffe17 	ldw	r2,-8(fp)
   235cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   235d0:	e0bffb17 	ldw	r2,-20(fp)
} 
   235d4:	e037883a 	mov	sp,fp
   235d8:	df000017 	ldw	fp,0(sp)
   235dc:	dec00104 	addi	sp,sp,4
   235e0:	f800283a 	ret

000235e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235e4:	defffe04 	addi	sp,sp,-8
   235e8:	dfc00115 	stw	ra,4(sp)
   235ec:	df000015 	stw	fp,0(sp)
   235f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235f4:	008000b4 	movhi	r2,2
   235f8:	109ba704 	addi	r2,r2,28316
   235fc:	10800017 	ldw	r2,0(r2)
   23600:	10000526 	beq	r2,zero,23618 <alt_get_errno+0x34>
   23604:	008000b4 	movhi	r2,2
   23608:	109ba704 	addi	r2,r2,28316
   2360c:	10800017 	ldw	r2,0(r2)
   23610:	103ee83a 	callr	r2
   23614:	00000206 	br	23620 <alt_get_errno+0x3c>
   23618:	008000f4 	movhi	r2,3
   2361c:	10a24104 	addi	r2,r2,-30460
}
   23620:	e037883a 	mov	sp,fp
   23624:	dfc00117 	ldw	ra,4(sp)
   23628:	df000017 	ldw	fp,0(sp)
   2362c:	dec00204 	addi	sp,sp,8
   23630:	f800283a 	ret

00023634 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23634:	defff904 	addi	sp,sp,-28
   23638:	dfc00615 	stw	ra,24(sp)
   2363c:	df000515 	stw	fp,20(sp)
   23640:	df000504 	addi	fp,sp,20
   23644:	e13ffd15 	stw	r4,-12(fp)
   23648:	e17ffe15 	stw	r5,-8(fp)
   2364c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23650:	e0bffd17 	ldw	r2,-12(fp)
   23654:	10000716 	blt	r2,zero,23674 <write+0x40>
   23658:	e13ffd17 	ldw	r4,-12(fp)
   2365c:	01400304 	movi	r5,12
   23660:	0022d440 	call	22d44 <__mulsi3>
   23664:	00c000b4 	movhi	r3,2
   23668:	18d72604 	addi	r3,r3,23704
   2366c:	10c5883a 	add	r2,r2,r3
   23670:	00000106 	br	23678 <write+0x44>
   23674:	0005883a 	mov	r2,zero
   23678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2367c:	e0bffb17 	ldw	r2,-20(fp)
   23680:	10001f26 	beq	r2,zero,23700 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23684:	e0bffb17 	ldw	r2,-20(fp)
   23688:	10800217 	ldw	r2,8(r2)
   2368c:	108000cc 	andi	r2,r2,3
   23690:	10001726 	beq	r2,zero,236f0 <write+0xbc>
   23694:	e0bffb17 	ldw	r2,-20(fp)
   23698:	10800017 	ldw	r2,0(r2)
   2369c:	10800617 	ldw	r2,24(r2)
   236a0:	10001326 	beq	r2,zero,236f0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   236a4:	e0bffb17 	ldw	r2,-20(fp)
   236a8:	10800017 	ldw	r2,0(r2)
   236ac:	10c00617 	ldw	r3,24(r2)
   236b0:	e0bfff17 	ldw	r2,-4(fp)
   236b4:	e13ffb17 	ldw	r4,-20(fp)
   236b8:	e17ffe17 	ldw	r5,-8(fp)
   236bc:	100d883a 	mov	r6,r2
   236c0:	183ee83a 	callr	r3
   236c4:	e0bffc15 	stw	r2,-16(fp)
   236c8:	e0bffc17 	ldw	r2,-16(fp)
   236cc:	1000060e 	bge	r2,zero,236e8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   236d0:	00235e40 	call	235e4 <alt_get_errno>
   236d4:	e0fffc17 	ldw	r3,-16(fp)
   236d8:	00c7c83a 	sub	r3,zero,r3
   236dc:	10c00015 	stw	r3,0(r2)
        return -1;
   236e0:	00bfffc4 	movi	r2,-1
   236e4:	00000a06 	br	23710 <write+0xdc>
      }
      return rval;
   236e8:	e0bffc17 	ldw	r2,-16(fp)
   236ec:	00000806 	br	23710 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   236f0:	00235e40 	call	235e4 <alt_get_errno>
   236f4:	00c00344 	movi	r3,13
   236f8:	10c00015 	stw	r3,0(r2)
   236fc:	00000306 	br	2370c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23700:	00235e40 	call	235e4 <alt_get_errno>
   23704:	00c01444 	movi	r3,81
   23708:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2370c:	00bfffc4 	movi	r2,-1
}
   23710:	e037883a 	mov	sp,fp
   23714:	dfc00117 	ldw	ra,4(sp)
   23718:	df000017 	ldw	fp,0(sp)
   2371c:	dec00204 	addi	sp,sp,8
   23720:	f800283a 	ret

00023724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23724:	defffd04 	addi	sp,sp,-12
   23728:	dfc00215 	stw	ra,8(sp)
   2372c:	df000115 	stw	fp,4(sp)
   23730:	df000104 	addi	fp,sp,4
   23734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23738:	e13fff17 	ldw	r4,-4(fp)
   2373c:	014000b4 	movhi	r5,2
   23740:	295ba404 	addi	r5,r5,28304
   23744:	00243e40 	call	243e4 <alt_dev_llist_insert>
}
   23748:	e037883a 	mov	sp,fp
   2374c:	dfc00117 	ldw	ra,4(sp)
   23750:	df000017 	ldw	fp,0(sp)
   23754:	dec00204 	addi	sp,sp,8
   23758:	f800283a 	ret

0002375c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2375c:	defffd04 	addi	sp,sp,-12
   23760:	dfc00215 	stw	ra,8(sp)
   23764:	df000115 	stw	fp,4(sp)
   23768:	df000104 	addi	fp,sp,4
   2376c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   23770:	0024dac0 	call	24dac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23774:	00800044 	movi	r2,1
   23778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2377c:	e037883a 	mov	sp,fp
   23780:	dfc00117 	ldw	ra,4(sp)
   23784:	df000017 	ldw	fp,0(sp)
   23788:	dec00204 	addi	sp,sp,8
   2378c:	f800283a 	ret

00023790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23790:	defffe04 	addi	sp,sp,-8
   23794:	dfc00115 	stw	ra,4(sp)
   23798:	df000015 	stw	fp,0(sp)
   2379c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   237a0:	010000b4 	movhi	r4,2
   237a4:	21179004 	addi	r4,r4,24128
   237a8:	000b883a 	mov	r5,zero
   237ac:	01800044 	movi	r6,1
   237b0:	00239380 	call	23938 <altera_avalon_jtag_uart_init>
   237b4:	010000b4 	movhi	r4,2
   237b8:	21178604 	addi	r4,r4,24088
   237bc:	00237240 	call	23724 <alt_dev_reg>
}
   237c0:	e037883a 	mov	sp,fp
   237c4:	dfc00117 	ldw	ra,4(sp)
   237c8:	df000017 	ldw	fp,0(sp)
   237cc:	dec00204 	addi	sp,sp,8
   237d0:	f800283a 	ret

000237d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   237d4:	defffa04 	addi	sp,sp,-24
   237d8:	dfc00515 	stw	ra,20(sp)
   237dc:	df000415 	stw	fp,16(sp)
   237e0:	df000404 	addi	fp,sp,16
   237e4:	e13ffd15 	stw	r4,-12(fp)
   237e8:	e17ffe15 	stw	r5,-8(fp)
   237ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   237f0:	e0bffd17 	ldw	r2,-12(fp)
   237f4:	10800017 	ldw	r2,0(r2)
   237f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   237fc:	e0bffc17 	ldw	r2,-16(fp)
   23800:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   23804:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23808:	10800217 	ldw	r2,8(r2)
   2380c:	1809883a 	mov	r4,r3
   23810:	e17ffe17 	ldw	r5,-8(fp)
   23814:	e1bfff17 	ldw	r6,-4(fp)
   23818:	100f883a 	mov	r7,r2
   2381c:	0023dfc0 	call	23dfc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23820:	e037883a 	mov	sp,fp
   23824:	dfc00117 	ldw	ra,4(sp)
   23828:	df000017 	ldw	fp,0(sp)
   2382c:	dec00204 	addi	sp,sp,8
   23830:	f800283a 	ret

00023834 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23834:	defffa04 	addi	sp,sp,-24
   23838:	dfc00515 	stw	ra,20(sp)
   2383c:	df000415 	stw	fp,16(sp)
   23840:	df000404 	addi	fp,sp,16
   23844:	e13ffd15 	stw	r4,-12(fp)
   23848:	e17ffe15 	stw	r5,-8(fp)
   2384c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23850:	e0bffd17 	ldw	r2,-12(fp)
   23854:	10800017 	ldw	r2,0(r2)
   23858:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2385c:	e0bffc17 	ldw	r2,-16(fp)
   23860:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   23864:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23868:	10800217 	ldw	r2,8(r2)
   2386c:	1809883a 	mov	r4,r3
   23870:	e17ffe17 	ldw	r5,-8(fp)
   23874:	e1bfff17 	ldw	r6,-4(fp)
   23878:	100f883a 	mov	r7,r2
   2387c:	00240140 	call	24014 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23880:	e037883a 	mov	sp,fp
   23884:	dfc00117 	ldw	ra,4(sp)
   23888:	df000017 	ldw	fp,0(sp)
   2388c:	dec00204 	addi	sp,sp,8
   23890:	f800283a 	ret

00023894 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23894:	defffc04 	addi	sp,sp,-16
   23898:	dfc00315 	stw	ra,12(sp)
   2389c:	df000215 	stw	fp,8(sp)
   238a0:	df000204 	addi	fp,sp,8
   238a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   238a8:	e0bfff17 	ldw	r2,-4(fp)
   238ac:	10800017 	ldw	r2,0(r2)
   238b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   238b4:	e0bffe17 	ldw	r2,-8(fp)
   238b8:	10c00a04 	addi	r3,r2,40
   238bc:	e0bfff17 	ldw	r2,-4(fp)
   238c0:	10800217 	ldw	r2,8(r2)
   238c4:	1809883a 	mov	r4,r3
   238c8:	100b883a 	mov	r5,r2
   238cc:	0023ca00 	call	23ca0 <altera_avalon_jtag_uart_close>
}
   238d0:	e037883a 	mov	sp,fp
   238d4:	dfc00117 	ldw	ra,4(sp)
   238d8:	df000017 	ldw	fp,0(sp)
   238dc:	dec00204 	addi	sp,sp,8
   238e0:	f800283a 	ret

000238e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   238e4:	defffa04 	addi	sp,sp,-24
   238e8:	dfc00515 	stw	ra,20(sp)
   238ec:	df000415 	stw	fp,16(sp)
   238f0:	df000404 	addi	fp,sp,16
   238f4:	e13ffd15 	stw	r4,-12(fp)
   238f8:	e17ffe15 	stw	r5,-8(fp)
   238fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23900:	e0bffd17 	ldw	r2,-12(fp)
   23904:	10800017 	ldw	r2,0(r2)
   23908:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2390c:	e0bffc17 	ldw	r2,-16(fp)
   23910:	10800a04 	addi	r2,r2,40
   23914:	1009883a 	mov	r4,r2
   23918:	e17ffe17 	ldw	r5,-8(fp)
   2391c:	e1bfff17 	ldw	r6,-4(fp)
   23920:	0023d080 	call	23d08 <altera_avalon_jtag_uart_ioctl>
}
   23924:	e037883a 	mov	sp,fp
   23928:	dfc00117 	ldw	ra,4(sp)
   2392c:	df000017 	ldw	fp,0(sp)
   23930:	dec00204 	addi	sp,sp,8
   23934:	f800283a 	ret

00023938 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23938:	defffa04 	addi	sp,sp,-24
   2393c:	dfc00515 	stw	ra,20(sp)
   23940:	df000415 	stw	fp,16(sp)
   23944:	df000404 	addi	fp,sp,16
   23948:	e13ffd15 	stw	r4,-12(fp)
   2394c:	e17ffe15 	stw	r5,-8(fp)
   23950:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23954:	e0bffd17 	ldw	r2,-12(fp)
   23958:	00c00044 	movi	r3,1
   2395c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23960:	e0bffd17 	ldw	r2,-12(fp)
   23964:	10800017 	ldw	r2,0(r2)
   23968:	10800104 	addi	r2,r2,4
   2396c:	e0fffd17 	ldw	r3,-12(fp)
   23970:	18c00817 	ldw	r3,32(r3)
   23974:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   23978:	e0fffe17 	ldw	r3,-8(fp)
   2397c:	e0bfff17 	ldw	r2,-4(fp)
   23980:	d8000015 	stw	zero,0(sp)
   23984:	1809883a 	mov	r4,r3
   23988:	100b883a 	mov	r5,r2
   2398c:	018000b4 	movhi	r6,2
   23990:	318e7e04 	addi	r6,r6,14840
   23994:	e1fffd17 	ldw	r7,-12(fp)
   23998:	00245580 	call	24558 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2399c:	e0bffd17 	ldw	r2,-12(fp)
   239a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   239a4:	e0bffd17 	ldw	r2,-12(fp)
   239a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   239ac:	008000f4 	movhi	r2,3
   239b0:	10a24604 	addi	r2,r2,-30440
   239b4:	10800017 	ldw	r2,0(r2)
   239b8:	1809883a 	mov	r4,r3
   239bc:	100b883a 	mov	r5,r2
   239c0:	018000b4 	movhi	r6,2
   239c4:	318eff04 	addi	r6,r6,15356
   239c8:	e1fffd17 	ldw	r7,-12(fp)
   239cc:	00242380 	call	24238 <alt_alarm_start>
   239d0:	1000040e 	bge	r2,zero,239e4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   239d4:	e0bffd17 	ldw	r2,-12(fp)
   239d8:	00e00034 	movhi	r3,32768
   239dc:	18ffffc4 	addi	r3,r3,-1
   239e0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   239e4:	e037883a 	mov	sp,fp
   239e8:	dfc00117 	ldw	ra,4(sp)
   239ec:	df000017 	ldw	fp,0(sp)
   239f0:	dec00204 	addi	sp,sp,8
   239f4:	f800283a 	ret

000239f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   239f8:	defff804 	addi	sp,sp,-32
   239fc:	df000715 	stw	fp,28(sp)
   23a00:	df000704 	addi	fp,sp,28
   23a04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23a08:	e0bfff17 	ldw	r2,-4(fp)
   23a0c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23a10:	e0bffb17 	ldw	r2,-20(fp)
   23a14:	10800017 	ldw	r2,0(r2)
   23a18:	e0bffc15 	stw	r2,-16(fp)
   23a1c:	00000106 	br	23a24 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   23a20:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23a24:	e0bffc17 	ldw	r2,-16(fp)
   23a28:	10800104 	addi	r2,r2,4
   23a2c:	10800037 	ldwio	r2,0(r2)
   23a30:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23a34:	e0bffd17 	ldw	r2,-12(fp)
   23a38:	1080c00c 	andi	r2,r2,768
   23a3c:	10006a26 	beq	r2,zero,23be8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23a40:	e0bffd17 	ldw	r2,-12(fp)
   23a44:	1080400c 	andi	r2,r2,256
   23a48:	10003326 	beq	r2,zero,23b18 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23a4c:	00800074 	movhi	r2,1
   23a50:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23a54:	e0bffb17 	ldw	r2,-20(fp)
   23a58:	10800a17 	ldw	r2,40(r2)
   23a5c:	10800044 	addi	r2,r2,1
   23a60:	1081ffcc 	andi	r2,r2,2047
   23a64:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23a68:	e0bffb17 	ldw	r2,-20(fp)
   23a6c:	10c00b17 	ldw	r3,44(r2)
   23a70:	e0bffe17 	ldw	r2,-8(fp)
   23a74:	18801426 	beq	r3,r2,23ac8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23a78:	e0bffc17 	ldw	r2,-16(fp)
   23a7c:	10800037 	ldwio	r2,0(r2)
   23a80:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23a84:	e0bff917 	ldw	r2,-28(fp)
   23a88:	10a0000c 	andi	r2,r2,32768
   23a8c:	10001026 	beq	r2,zero,23ad0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23a90:	e0bffb17 	ldw	r2,-20(fp)
   23a94:	10800a17 	ldw	r2,40(r2)
   23a98:	e0fff917 	ldw	r3,-28(fp)
   23a9c:	e13ffb17 	ldw	r4,-20(fp)
   23aa0:	2085883a 	add	r2,r4,r2
   23aa4:	10800e04 	addi	r2,r2,56
   23aa8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23aac:	e0bffb17 	ldw	r2,-20(fp)
   23ab0:	10800a17 	ldw	r2,40(r2)
   23ab4:	10800044 	addi	r2,r2,1
   23ab8:	10c1ffcc 	andi	r3,r2,2047
   23abc:	e0bffb17 	ldw	r2,-20(fp)
   23ac0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23ac4:	003fe306 	br	23a54 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   23ac8:	0001883a 	nop
   23acc:	00000106 	br	23ad4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23ad0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23ad4:	e0bff917 	ldw	r2,-28(fp)
   23ad8:	10bfffec 	andhi	r2,r2,65535
   23adc:	10000e26 	beq	r2,zero,23b18 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23ae0:	e0bffb17 	ldw	r2,-20(fp)
   23ae4:	10c00817 	ldw	r3,32(r2)
   23ae8:	00bfff84 	movi	r2,-2
   23aec:	1886703a 	and	r3,r3,r2
   23af0:	e0bffb17 	ldw	r2,-20(fp)
   23af4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23af8:	e0bffc17 	ldw	r2,-16(fp)
   23afc:	10800104 	addi	r2,r2,4
   23b00:	e0fffb17 	ldw	r3,-20(fp)
   23b04:	18c00817 	ldw	r3,32(r3)
   23b08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23b0c:	e0bffc17 	ldw	r2,-16(fp)
   23b10:	10800104 	addi	r2,r2,4
   23b14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23b18:	e0bffd17 	ldw	r2,-12(fp)
   23b1c:	1080800c 	andi	r2,r2,512
   23b20:	103fbf26 	beq	r2,zero,23a20 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23b24:	e0bffd17 	ldw	r2,-12(fp)
   23b28:	1004d43a 	srli	r2,r2,16
   23b2c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23b30:	00001406 	br	23b84 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23b34:	e0bffc17 	ldw	r2,-16(fp)
   23b38:	e0fffb17 	ldw	r3,-20(fp)
   23b3c:	18c00d17 	ldw	r3,52(r3)
   23b40:	e13ffb17 	ldw	r4,-20(fp)
   23b44:	20c7883a 	add	r3,r4,r3
   23b48:	18c20e04 	addi	r3,r3,2104
   23b4c:	18c00003 	ldbu	r3,0(r3)
   23b50:	18c03fcc 	andi	r3,r3,255
   23b54:	18c0201c 	xori	r3,r3,128
   23b58:	18ffe004 	addi	r3,r3,-128
   23b5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23b60:	e0bffb17 	ldw	r2,-20(fp)
   23b64:	10800d17 	ldw	r2,52(r2)
   23b68:	10800044 	addi	r2,r2,1
   23b6c:	10c1ffcc 	andi	r3,r2,2047
   23b70:	e0bffb17 	ldw	r2,-20(fp)
   23b74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23b78:	e0bffa17 	ldw	r2,-24(fp)
   23b7c:	10bfffc4 	addi	r2,r2,-1
   23b80:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23b84:	e0bffa17 	ldw	r2,-24(fp)
   23b88:	10000526 	beq	r2,zero,23ba0 <altera_avalon_jtag_uart_irq+0x1a8>
   23b8c:	e0bffb17 	ldw	r2,-20(fp)
   23b90:	10c00d17 	ldw	r3,52(r2)
   23b94:	e0bffb17 	ldw	r2,-20(fp)
   23b98:	10800c17 	ldw	r2,48(r2)
   23b9c:	18bfe51e 	bne	r3,r2,23b34 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23ba0:	e0bffa17 	ldw	r2,-24(fp)
   23ba4:	103f9e26 	beq	r2,zero,23a20 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23ba8:	e0bffb17 	ldw	r2,-20(fp)
   23bac:	10c00817 	ldw	r3,32(r2)
   23bb0:	00bfff44 	movi	r2,-3
   23bb4:	1886703a 	and	r3,r3,r2
   23bb8:	e0bffb17 	ldw	r2,-20(fp)
   23bbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23bc0:	e0bffb17 	ldw	r2,-20(fp)
   23bc4:	10800017 	ldw	r2,0(r2)
   23bc8:	10800104 	addi	r2,r2,4
   23bcc:	e0fffb17 	ldw	r3,-20(fp)
   23bd0:	18c00817 	ldw	r3,32(r3)
   23bd4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23bd8:	e0bffc17 	ldw	r2,-16(fp)
   23bdc:	10800104 	addi	r2,r2,4
   23be0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23be4:	003f8e06 	br	23a20 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   23be8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   23bec:	e037883a 	mov	sp,fp
   23bf0:	df000017 	ldw	fp,0(sp)
   23bf4:	dec00104 	addi	sp,sp,4
   23bf8:	f800283a 	ret

00023bfc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23bfc:	defffc04 	addi	sp,sp,-16
   23c00:	df000315 	stw	fp,12(sp)
   23c04:	df000304 	addi	fp,sp,12
   23c08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23c0c:	e0bfff17 	ldw	r2,-4(fp)
   23c10:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23c14:	e0bffd17 	ldw	r2,-12(fp)
   23c18:	10800017 	ldw	r2,0(r2)
   23c1c:	10800104 	addi	r2,r2,4
   23c20:	10800037 	ldwio	r2,0(r2)
   23c24:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23c28:	e0bffe17 	ldw	r2,-8(fp)
   23c2c:	1081000c 	andi	r2,r2,1024
   23c30:	10000a26 	beq	r2,zero,23c5c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23c34:	e0bffd17 	ldw	r2,-12(fp)
   23c38:	10800017 	ldw	r2,0(r2)
   23c3c:	10800104 	addi	r2,r2,4
   23c40:	e0fffd17 	ldw	r3,-12(fp)
   23c44:	18c00817 	ldw	r3,32(r3)
   23c48:	18c10014 	ori	r3,r3,1024
   23c4c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   23c50:	e0bffd17 	ldw	r2,-12(fp)
   23c54:	10000915 	stw	zero,36(r2)
   23c58:	00000a06 	br	23c84 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23c5c:	e0bffd17 	ldw	r2,-12(fp)
   23c60:	10800917 	ldw	r2,36(r2)
   23c64:	00e00034 	movhi	r3,32768
   23c68:	18ffff04 	addi	r3,r3,-4
   23c6c:	18800536 	bltu	r3,r2,23c84 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   23c70:	e0bffd17 	ldw	r2,-12(fp)
   23c74:	10800917 	ldw	r2,36(r2)
   23c78:	10c00044 	addi	r3,r2,1
   23c7c:	e0bffd17 	ldw	r2,-12(fp)
   23c80:	10c00915 	stw	r3,36(r2)
   23c84:	008000f4 	movhi	r2,3
   23c88:	10a24604 	addi	r2,r2,-30440
   23c8c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23c90:	e037883a 	mov	sp,fp
   23c94:	df000017 	ldw	fp,0(sp)
   23c98:	dec00104 	addi	sp,sp,4
   23c9c:	f800283a 	ret

00023ca0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23ca0:	defffd04 	addi	sp,sp,-12
   23ca4:	df000215 	stw	fp,8(sp)
   23ca8:	df000204 	addi	fp,sp,8
   23cac:	e13ffe15 	stw	r4,-8(fp)
   23cb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23cb4:	00000506 	br	23ccc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23cb8:	e0bfff17 	ldw	r2,-4(fp)
   23cbc:	1090000c 	andi	r2,r2,16384
   23cc0:	10000226 	beq	r2,zero,23ccc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23cc4:	00bffd44 	movi	r2,-11
   23cc8:	00000b06 	br	23cf8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23ccc:	e0bffe17 	ldw	r2,-8(fp)
   23cd0:	10c00d17 	ldw	r3,52(r2)
   23cd4:	e0bffe17 	ldw	r2,-8(fp)
   23cd8:	10800c17 	ldw	r2,48(r2)
   23cdc:	18800526 	beq	r3,r2,23cf4 <altera_avalon_jtag_uart_close+0x54>
   23ce0:	e0bffe17 	ldw	r2,-8(fp)
   23ce4:	10c00917 	ldw	r3,36(r2)
   23ce8:	e0bffe17 	ldw	r2,-8(fp)
   23cec:	10800117 	ldw	r2,4(r2)
   23cf0:	18bff136 	bltu	r3,r2,23cb8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23cf4:	0005883a 	mov	r2,zero
}
   23cf8:	e037883a 	mov	sp,fp
   23cfc:	df000017 	ldw	fp,0(sp)
   23d00:	dec00104 	addi	sp,sp,4
   23d04:	f800283a 	ret

00023d08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23d08:	defffa04 	addi	sp,sp,-24
   23d0c:	df000515 	stw	fp,20(sp)
   23d10:	df000504 	addi	fp,sp,20
   23d14:	e13ffd15 	stw	r4,-12(fp)
   23d18:	e17ffe15 	stw	r5,-8(fp)
   23d1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23d20:	00bff9c4 	movi	r2,-25
   23d24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23d28:	e0bffe17 	ldw	r2,-8(fp)
   23d2c:	10da8060 	cmpeqi	r3,r2,27137
   23d30:	1800031e 	bne	r3,zero,23d40 <altera_avalon_jtag_uart_ioctl+0x38>
   23d34:	109a80a0 	cmpeqi	r2,r2,27138
   23d38:	1000181e 	bne	r2,zero,23d9c <altera_avalon_jtag_uart_ioctl+0x94>
   23d3c:	00002606 	br	23dd8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23d40:	e0bffd17 	ldw	r2,-12(fp)
   23d44:	10c00117 	ldw	r3,4(r2)
   23d48:	00a00034 	movhi	r2,32768
   23d4c:	10bfffc4 	addi	r2,r2,-1
   23d50:	18802226 	beq	r3,r2,23ddc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   23d54:	e0bfff17 	ldw	r2,-4(fp)
   23d58:	10800017 	ldw	r2,0(r2)
   23d5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23d60:	e0bffc17 	ldw	r2,-16(fp)
   23d64:	10800090 	cmplti	r2,r2,2
   23d68:	1000061e 	bne	r2,zero,23d84 <altera_avalon_jtag_uart_ioctl+0x7c>
   23d6c:	e0fffc17 	ldw	r3,-16(fp)
   23d70:	00a00034 	movhi	r2,32768
   23d74:	10bfffc4 	addi	r2,r2,-1
   23d78:	18800226 	beq	r3,r2,23d84 <altera_avalon_jtag_uart_ioctl+0x7c>
   23d7c:	e0bffc17 	ldw	r2,-16(fp)
   23d80:	00000206 	br	23d8c <altera_avalon_jtag_uart_ioctl+0x84>
   23d84:	00a00034 	movhi	r2,32768
   23d88:	10bfff84 	addi	r2,r2,-2
   23d8c:	e0fffd17 	ldw	r3,-12(fp)
   23d90:	18800115 	stw	r2,4(r3)
      rc = 0;
   23d94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23d98:	00001006 	br	23ddc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23d9c:	e0bffd17 	ldw	r2,-12(fp)
   23da0:	10c00117 	ldw	r3,4(r2)
   23da4:	00a00034 	movhi	r2,32768
   23da8:	10bfffc4 	addi	r2,r2,-1
   23dac:	18800d26 	beq	r3,r2,23de4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23db0:	e0bffd17 	ldw	r2,-12(fp)
   23db4:	10c00917 	ldw	r3,36(r2)
   23db8:	e0bffd17 	ldw	r2,-12(fp)
   23dbc:	10800117 	ldw	r2,4(r2)
   23dc0:	1885803a 	cmpltu	r2,r3,r2
   23dc4:	10c03fcc 	andi	r3,r2,255
   23dc8:	e0bfff17 	ldw	r2,-4(fp)
   23dcc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23dd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23dd4:	00000306 	br	23de4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   23dd8:	00000306 	br	23de8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   23ddc:	0001883a 	nop
   23de0:	00000106 	br	23de8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   23de4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   23de8:	e0bffb17 	ldw	r2,-20(fp)
}
   23dec:	e037883a 	mov	sp,fp
   23df0:	df000017 	ldw	fp,0(sp)
   23df4:	dec00104 	addi	sp,sp,4
   23df8:	f800283a 	ret

00023dfc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23dfc:	defff304 	addi	sp,sp,-52
   23e00:	dfc00c15 	stw	ra,48(sp)
   23e04:	df000b15 	stw	fp,44(sp)
   23e08:	df000b04 	addi	fp,sp,44
   23e0c:	e13ffc15 	stw	r4,-16(fp)
   23e10:	e17ffd15 	stw	r5,-12(fp)
   23e14:	e1bffe15 	stw	r6,-8(fp)
   23e18:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   23e1c:	e0bffd17 	ldw	r2,-12(fp)
   23e20:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23e24:	00004706 	br	23f44 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23e28:	e0bffc17 	ldw	r2,-16(fp)
   23e2c:	10800a17 	ldw	r2,40(r2)
   23e30:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   23e34:	e0bffc17 	ldw	r2,-16(fp)
   23e38:	10800b17 	ldw	r2,44(r2)
   23e3c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   23e40:	e0fff717 	ldw	r3,-36(fp)
   23e44:	e0bff817 	ldw	r2,-32(fp)
   23e48:	18800536 	bltu	r3,r2,23e60 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23e4c:	e0fff717 	ldw	r3,-36(fp)
   23e50:	e0bff817 	ldw	r2,-32(fp)
   23e54:	1885c83a 	sub	r2,r3,r2
   23e58:	e0bff615 	stw	r2,-40(fp)
   23e5c:	00000406 	br	23e70 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23e60:	00c20004 	movi	r3,2048
   23e64:	e0bff817 	ldw	r2,-32(fp)
   23e68:	1885c83a 	sub	r2,r3,r2
   23e6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23e70:	e0bff617 	ldw	r2,-40(fp)
   23e74:	10001e26 	beq	r2,zero,23ef0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   23e78:	e0fffe17 	ldw	r3,-8(fp)
   23e7c:	e0bff617 	ldw	r2,-40(fp)
   23e80:	1880022e 	bgeu	r3,r2,23e8c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   23e84:	e0bffe17 	ldw	r2,-8(fp)
   23e88:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23e8c:	e0bff817 	ldw	r2,-32(fp)
   23e90:	10800e04 	addi	r2,r2,56
   23e94:	e0fffc17 	ldw	r3,-16(fp)
   23e98:	1885883a 	add	r2,r3,r2
   23e9c:	e13ff517 	ldw	r4,-44(fp)
   23ea0:	100b883a 	mov	r5,r2
   23ea4:	e1bff617 	ldw	r6,-40(fp)
   23ea8:	00210ac0 	call	210ac <memcpy>
      ptr   += n;
   23eac:	e0fff517 	ldw	r3,-44(fp)
   23eb0:	e0bff617 	ldw	r2,-40(fp)
   23eb4:	1885883a 	add	r2,r3,r2
   23eb8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   23ebc:	e0fffe17 	ldw	r3,-8(fp)
   23ec0:	e0bff617 	ldw	r2,-40(fp)
   23ec4:	1885c83a 	sub	r2,r3,r2
   23ec8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23ecc:	e0fff817 	ldw	r3,-32(fp)
   23ed0:	e0bff617 	ldw	r2,-40(fp)
   23ed4:	1885883a 	add	r2,r3,r2
   23ed8:	10c1ffcc 	andi	r3,r2,2047
   23edc:	e0bffc17 	ldw	r2,-16(fp)
   23ee0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   23ee4:	e0bffe17 	ldw	r2,-8(fp)
   23ee8:	00bfcf16 	blt	zero,r2,23e28 <altera_avalon_jtag_uart_read+0x2c>
   23eec:	00000106 	br	23ef4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   23ef0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   23ef4:	e0fff517 	ldw	r3,-44(fp)
   23ef8:	e0bffd17 	ldw	r2,-12(fp)
   23efc:	1880141e 	bne	r3,r2,23f50 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   23f00:	e0bfff17 	ldw	r2,-4(fp)
   23f04:	1090000c 	andi	r2,r2,16384
   23f08:	1000131e 	bne	r2,zero,23f58 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23f0c:	0001883a 	nop
   23f10:	e0bffc17 	ldw	r2,-16(fp)
   23f14:	10c00a17 	ldw	r3,40(r2)
   23f18:	e0bff717 	ldw	r2,-36(fp)
   23f1c:	1880051e 	bne	r3,r2,23f34 <altera_avalon_jtag_uart_read+0x138>
   23f20:	e0bffc17 	ldw	r2,-16(fp)
   23f24:	10c00917 	ldw	r3,36(r2)
   23f28:	e0bffc17 	ldw	r2,-16(fp)
   23f2c:	10800117 	ldw	r2,4(r2)
   23f30:	18bff736 	bltu	r3,r2,23f10 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23f34:	e0bffc17 	ldw	r2,-16(fp)
   23f38:	10c00a17 	ldw	r3,40(r2)
   23f3c:	e0bff717 	ldw	r2,-36(fp)
   23f40:	18800726 	beq	r3,r2,23f60 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23f44:	e0bffe17 	ldw	r2,-8(fp)
   23f48:	00bfb716 	blt	zero,r2,23e28 <altera_avalon_jtag_uart_read+0x2c>
   23f4c:	00000506 	br	23f64 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   23f50:	0001883a 	nop
   23f54:	00000306 	br	23f64 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23f58:	0001883a 	nop
   23f5c:	00000106 	br	23f64 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   23f60:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23f64:	e0fff517 	ldw	r3,-44(fp)
   23f68:	e0bffd17 	ldw	r2,-12(fp)
   23f6c:	18801726 	beq	r3,r2,23fcc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23f70:	0005303a 	rdctl	r2,status
   23f74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23f78:	e0fffa17 	ldw	r3,-24(fp)
   23f7c:	00bfff84 	movi	r2,-2
   23f80:	1884703a 	and	r2,r3,r2
   23f84:	1001703a 	wrctl	status,r2
  
  return context;
   23f88:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23f8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23f90:	e0bffc17 	ldw	r2,-16(fp)
   23f94:	10800817 	ldw	r2,32(r2)
   23f98:	10c00054 	ori	r3,r2,1
   23f9c:	e0bffc17 	ldw	r2,-16(fp)
   23fa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23fa4:	e0bffc17 	ldw	r2,-16(fp)
   23fa8:	10800017 	ldw	r2,0(r2)
   23fac:	10800104 	addi	r2,r2,4
   23fb0:	e0fffc17 	ldw	r3,-16(fp)
   23fb4:	18c00817 	ldw	r3,32(r3)
   23fb8:	10c00035 	stwio	r3,0(r2)
   23fbc:	e0bff917 	ldw	r2,-28(fp)
   23fc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23fc4:	e0bffb17 	ldw	r2,-20(fp)
   23fc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23fcc:	e0fff517 	ldw	r3,-44(fp)
   23fd0:	e0bffd17 	ldw	r2,-12(fp)
   23fd4:	18800426 	beq	r3,r2,23fe8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   23fd8:	e0fff517 	ldw	r3,-44(fp)
   23fdc:	e0bffd17 	ldw	r2,-12(fp)
   23fe0:	1885c83a 	sub	r2,r3,r2
   23fe4:	00000606 	br	24000 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   23fe8:	e0bfff17 	ldw	r2,-4(fp)
   23fec:	1090000c 	andi	r2,r2,16384
   23ff0:	10000226 	beq	r2,zero,23ffc <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   23ff4:	00bffd44 	movi	r2,-11
   23ff8:	00000106 	br	24000 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   23ffc:	00bffec4 	movi	r2,-5
}
   24000:	e037883a 	mov	sp,fp
   24004:	dfc00117 	ldw	ra,4(sp)
   24008:	df000017 	ldw	fp,0(sp)
   2400c:	dec00204 	addi	sp,sp,8
   24010:	f800283a 	ret

00024014 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24014:	defff304 	addi	sp,sp,-52
   24018:	dfc00c15 	stw	ra,48(sp)
   2401c:	df000b15 	stw	fp,44(sp)
   24020:	df000b04 	addi	fp,sp,44
   24024:	e13ffc15 	stw	r4,-16(fp)
   24028:	e17ffd15 	stw	r5,-12(fp)
   2402c:	e1bffe15 	stw	r6,-8(fp)
   24030:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24034:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24038:	e0bffd17 	ldw	r2,-12(fp)
   2403c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24040:	00003706 	br	24120 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24044:	e0bffc17 	ldw	r2,-16(fp)
   24048:	10800c17 	ldw	r2,48(r2)
   2404c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   24050:	e0bffc17 	ldw	r2,-16(fp)
   24054:	10800d17 	ldw	r2,52(r2)
   24058:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2405c:	e0fff817 	ldw	r3,-32(fp)
   24060:	e0bff517 	ldw	r2,-44(fp)
   24064:	1880062e 	bgeu	r3,r2,24080 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24068:	e0fff517 	ldw	r3,-44(fp)
   2406c:	e0bff817 	ldw	r2,-32(fp)
   24070:	1885c83a 	sub	r2,r3,r2
   24074:	10bfffc4 	addi	r2,r2,-1
   24078:	e0bff615 	stw	r2,-40(fp)
   2407c:	00000b06 	br	240ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24080:	e0bff517 	ldw	r2,-44(fp)
   24084:	10000526 	beq	r2,zero,2409c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24088:	00c20004 	movi	r3,2048
   2408c:	e0bff817 	ldw	r2,-32(fp)
   24090:	1885c83a 	sub	r2,r3,r2
   24094:	e0bff615 	stw	r2,-40(fp)
   24098:	00000406 	br	240ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2409c:	00c1ffc4 	movi	r3,2047
   240a0:	e0bff817 	ldw	r2,-32(fp)
   240a4:	1885c83a 	sub	r2,r3,r2
   240a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   240ac:	e0bff617 	ldw	r2,-40(fp)
   240b0:	10001e26 	beq	r2,zero,2412c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   240b4:	e0fffe17 	ldw	r3,-8(fp)
   240b8:	e0bff617 	ldw	r2,-40(fp)
   240bc:	1880022e 	bgeu	r3,r2,240c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   240c0:	e0bffe17 	ldw	r2,-8(fp)
   240c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   240c8:	e0bff817 	ldw	r2,-32(fp)
   240cc:	10820e04 	addi	r2,r2,2104
   240d0:	e0fffc17 	ldw	r3,-16(fp)
   240d4:	1885883a 	add	r2,r3,r2
   240d8:	1009883a 	mov	r4,r2
   240dc:	e17ffd17 	ldw	r5,-12(fp)
   240e0:	e1bff617 	ldw	r6,-40(fp)
   240e4:	00210ac0 	call	210ac <memcpy>
      ptr   += n;
   240e8:	e0fffd17 	ldw	r3,-12(fp)
   240ec:	e0bff617 	ldw	r2,-40(fp)
   240f0:	1885883a 	add	r2,r3,r2
   240f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   240f8:	e0fffe17 	ldw	r3,-8(fp)
   240fc:	e0bff617 	ldw	r2,-40(fp)
   24100:	1885c83a 	sub	r2,r3,r2
   24104:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24108:	e0fff817 	ldw	r3,-32(fp)
   2410c:	e0bff617 	ldw	r2,-40(fp)
   24110:	1885883a 	add	r2,r3,r2
   24114:	10c1ffcc 	andi	r3,r2,2047
   24118:	e0bffc17 	ldw	r2,-16(fp)
   2411c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24120:	e0bffe17 	ldw	r2,-8(fp)
   24124:	00bfc716 	blt	zero,r2,24044 <altera_avalon_jtag_uart_write+0x30>
   24128:	00000106 	br	24130 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2412c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24130:	0005303a 	rdctl	r2,status
   24134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24138:	e0fffa17 	ldw	r3,-24(fp)
   2413c:	00bfff84 	movi	r2,-2
   24140:	1884703a 	and	r2,r3,r2
   24144:	1001703a 	wrctl	status,r2
  
  return context;
   24148:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2414c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24150:	e0bffc17 	ldw	r2,-16(fp)
   24154:	10800817 	ldw	r2,32(r2)
   24158:	10c00094 	ori	r3,r2,2
   2415c:	e0bffc17 	ldw	r2,-16(fp)
   24160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24164:	e0bffc17 	ldw	r2,-16(fp)
   24168:	10800017 	ldw	r2,0(r2)
   2416c:	10800104 	addi	r2,r2,4
   24170:	e0fffc17 	ldw	r3,-16(fp)
   24174:	18c00817 	ldw	r3,32(r3)
   24178:	10c00035 	stwio	r3,0(r2)
   2417c:	e0bff917 	ldw	r2,-28(fp)
   24180:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24184:	e0bffb17 	ldw	r2,-20(fp)
   24188:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2418c:	e0bffe17 	ldw	r2,-8(fp)
   24190:	0080110e 	bge	zero,r2,241d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24194:	e0bfff17 	ldw	r2,-4(fp)
   24198:	1090000c 	andi	r2,r2,16384
   2419c:	1000111e 	bne	r2,zero,241e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   241a0:	0001883a 	nop
   241a4:	e0bffc17 	ldw	r2,-16(fp)
   241a8:	10c00d17 	ldw	r3,52(r2)
   241ac:	e0bff517 	ldw	r2,-44(fp)
   241b0:	1880051e 	bne	r3,r2,241c8 <altera_avalon_jtag_uart_write+0x1b4>
   241b4:	e0bffc17 	ldw	r2,-16(fp)
   241b8:	10c00917 	ldw	r3,36(r2)
   241bc:	e0bffc17 	ldw	r2,-16(fp)
   241c0:	10800117 	ldw	r2,4(r2)
   241c4:	18bff736 	bltu	r3,r2,241a4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   241c8:	e0bffc17 	ldw	r2,-16(fp)
   241cc:	10c00d17 	ldw	r3,52(r2)
   241d0:	e0bff517 	ldw	r2,-44(fp)
   241d4:	18800526 	beq	r3,r2,241ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   241d8:	e0bffe17 	ldw	r2,-8(fp)
   241dc:	00bfd016 	blt	zero,r2,24120 <altera_avalon_jtag_uart_write+0x10c>
   241e0:	00000306 	br	241f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   241e4:	0001883a 	nop
   241e8:	00000106 	br	241f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   241ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   241f0:	e0fffd17 	ldw	r3,-12(fp)
   241f4:	e0bff717 	ldw	r2,-36(fp)
   241f8:	18800426 	beq	r3,r2,2420c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   241fc:	e0fffd17 	ldw	r3,-12(fp)
   24200:	e0bff717 	ldw	r2,-36(fp)
   24204:	1885c83a 	sub	r2,r3,r2
   24208:	00000606 	br	24224 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2420c:	e0bfff17 	ldw	r2,-4(fp)
   24210:	1090000c 	andi	r2,r2,16384
   24214:	10000226 	beq	r2,zero,24220 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24218:	00bffd44 	movi	r2,-11
   2421c:	00000106 	br	24224 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24220:	00bffec4 	movi	r2,-5
}
   24224:	e037883a 	mov	sp,fp
   24228:	dfc00117 	ldw	ra,4(sp)
   2422c:	df000017 	ldw	fp,0(sp)
   24230:	dec00204 	addi	sp,sp,8
   24234:	f800283a 	ret

00024238 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24238:	defff504 	addi	sp,sp,-44
   2423c:	df000a15 	stw	fp,40(sp)
   24240:	df000a04 	addi	fp,sp,40
   24244:	e13ffc15 	stw	r4,-16(fp)
   24248:	e17ffd15 	stw	r5,-12(fp)
   2424c:	e1bffe15 	stw	r6,-8(fp)
   24250:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   24254:	e03ff615 	stw	zero,-40(fp)
   24258:	008000f4 	movhi	r2,3
   2425c:	10a24604 	addi	r2,r2,-30440
   24260:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   24264:	10003f26 	beq	r2,zero,24364 <alt_alarm_start+0x12c>
  {
    if (alarm)
   24268:	e0bffc17 	ldw	r2,-16(fp)
   2426c:	10003b26 	beq	r2,zero,2435c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   24270:	e0bffc17 	ldw	r2,-16(fp)
   24274:	e0fffe17 	ldw	r3,-8(fp)
   24278:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2427c:	e0bffc17 	ldw	r2,-16(fp)
   24280:	e0ffff17 	ldw	r3,-4(fp)
   24284:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24288:	0005303a 	rdctl	r2,status
   2428c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24290:	e0fff817 	ldw	r3,-32(fp)
   24294:	00bfff84 	movi	r2,-2
   24298:	1884703a 	and	r2,r3,r2
   2429c:	1001703a 	wrctl	status,r2
  
  return context;
   242a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   242a4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   242a8:	008000f4 	movhi	r2,3
   242ac:	10a24704 	addi	r2,r2,-30436
   242b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   242b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   242b8:	e0fffd17 	ldw	r3,-12(fp)
   242bc:	e0bff617 	ldw	r2,-40(fp)
   242c0:	1885883a 	add	r2,r3,r2
   242c4:	10c00044 	addi	r3,r2,1
   242c8:	e0bffc17 	ldw	r2,-16(fp)
   242cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   242d0:	e0bffc17 	ldw	r2,-16(fp)
   242d4:	10c00217 	ldw	r3,8(r2)
   242d8:	e0bff617 	ldw	r2,-40(fp)
   242dc:	1880042e 	bgeu	r3,r2,242f0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   242e0:	e0bffc17 	ldw	r2,-16(fp)
   242e4:	00c00044 	movi	r3,1
   242e8:	10c00405 	stb	r3,16(r2)
   242ec:	00000206 	br	242f8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   242f0:	e0bffc17 	ldw	r2,-16(fp)
   242f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   242f8:	e0bffc17 	ldw	r2,-16(fp)
   242fc:	00c000b4 	movhi	r3,2
   24300:	18dbaa04 	addi	r3,r3,28328
   24304:	e0fff915 	stw	r3,-28(fp)
   24308:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2430c:	e0bffa17 	ldw	r2,-24(fp)
   24310:	e0fff917 	ldw	r3,-28(fp)
   24314:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24318:	e0bff917 	ldw	r2,-28(fp)
   2431c:	10c00017 	ldw	r3,0(r2)
   24320:	e0bffa17 	ldw	r2,-24(fp)
   24324:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24328:	e0bff917 	ldw	r2,-28(fp)
   2432c:	10800017 	ldw	r2,0(r2)
   24330:	e0fffa17 	ldw	r3,-24(fp)
   24334:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24338:	e0bff917 	ldw	r2,-28(fp)
   2433c:	e0fffa17 	ldw	r3,-24(fp)
   24340:	10c00015 	stw	r3,0(r2)
   24344:	e0bff717 	ldw	r2,-36(fp)
   24348:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2434c:	e0bffb17 	ldw	r2,-20(fp)
   24350:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24354:	0005883a 	mov	r2,zero
   24358:	00000306 	br	24368 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2435c:	00bffa84 	movi	r2,-22
   24360:	00000106 	br	24368 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   24364:	00bfde84 	movi	r2,-134
  }
}
   24368:	e037883a 	mov	sp,fp
   2436c:	df000017 	ldw	fp,0(sp)
   24370:	dec00104 	addi	sp,sp,4
   24374:	f800283a 	ret

00024378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24378:	deffff04 	addi	sp,sp,-4
   2437c:	df000015 	stw	fp,0(sp)
   24380:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24384:	e037883a 	mov	sp,fp
   24388:	df000017 	ldw	fp,0(sp)
   2438c:	dec00104 	addi	sp,sp,4
   24390:	f800283a 	ret

00024394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24394:	defffe04 	addi	sp,sp,-8
   24398:	dfc00115 	stw	ra,4(sp)
   2439c:	df000015 	stw	fp,0(sp)
   243a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   243a4:	008000b4 	movhi	r2,2
   243a8:	109ba704 	addi	r2,r2,28316
   243ac:	10800017 	ldw	r2,0(r2)
   243b0:	10000526 	beq	r2,zero,243c8 <alt_get_errno+0x34>
   243b4:	008000b4 	movhi	r2,2
   243b8:	109ba704 	addi	r2,r2,28316
   243bc:	10800017 	ldw	r2,0(r2)
   243c0:	103ee83a 	callr	r2
   243c4:	00000206 	br	243d0 <alt_get_errno+0x3c>
   243c8:	008000f4 	movhi	r2,3
   243cc:	10a24104 	addi	r2,r2,-30460
}
   243d0:	e037883a 	mov	sp,fp
   243d4:	dfc00117 	ldw	ra,4(sp)
   243d8:	df000017 	ldw	fp,0(sp)
   243dc:	dec00204 	addi	sp,sp,8
   243e0:	f800283a 	ret

000243e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   243e4:	defffa04 	addi	sp,sp,-24
   243e8:	dfc00515 	stw	ra,20(sp)
   243ec:	df000415 	stw	fp,16(sp)
   243f0:	df000404 	addi	fp,sp,16
   243f4:	e13ffe15 	stw	r4,-8(fp)
   243f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   243fc:	e0bffe17 	ldw	r2,-8(fp)
   24400:	10000326 	beq	r2,zero,24410 <alt_dev_llist_insert+0x2c>
   24404:	e0bffe17 	ldw	r2,-8(fp)
   24408:	10800217 	ldw	r2,8(r2)
   2440c:	1000051e 	bne	r2,zero,24424 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   24410:	00243940 	call	24394 <alt_get_errno>
   24414:	00c00584 	movi	r3,22
   24418:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2441c:	00bffa84 	movi	r2,-22
   24420:	00001306 	br	24470 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24424:	e0bffe17 	ldw	r2,-8(fp)
   24428:	e0ffff17 	ldw	r3,-4(fp)
   2442c:	e0fffc15 	stw	r3,-16(fp)
   24430:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24434:	e0bffd17 	ldw	r2,-12(fp)
   24438:	e0fffc17 	ldw	r3,-16(fp)
   2443c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24440:	e0bffc17 	ldw	r2,-16(fp)
   24444:	10c00017 	ldw	r3,0(r2)
   24448:	e0bffd17 	ldw	r2,-12(fp)
   2444c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24450:	e0bffc17 	ldw	r2,-16(fp)
   24454:	10800017 	ldw	r2,0(r2)
   24458:	e0fffd17 	ldw	r3,-12(fp)
   2445c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24460:	e0bffc17 	ldw	r2,-16(fp)
   24464:	e0fffd17 	ldw	r3,-12(fp)
   24468:	10c00015 	stw	r3,0(r2)

  return 0;  
   2446c:	0005883a 	mov	r2,zero
}
   24470:	e037883a 	mov	sp,fp
   24474:	dfc00117 	ldw	ra,4(sp)
   24478:	df000017 	ldw	fp,0(sp)
   2447c:	dec00204 	addi	sp,sp,8
   24480:	f800283a 	ret

00024484 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24484:	defffd04 	addi	sp,sp,-12
   24488:	dfc00215 	stw	ra,8(sp)
   2448c:	df000115 	stw	fp,4(sp)
   24490:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24494:	008000b4 	movhi	r2,2
   24498:	10950504 	addi	r2,r2,21524
   2449c:	e0bfff15 	stw	r2,-4(fp)
   244a0:	00000606 	br	244bc <_do_ctors+0x38>
        (*ctor) (); 
   244a4:	e0bfff17 	ldw	r2,-4(fp)
   244a8:	10800017 	ldw	r2,0(r2)
   244ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   244b0:	e0bfff17 	ldw	r2,-4(fp)
   244b4:	10bfff04 	addi	r2,r2,-4
   244b8:	e0bfff15 	stw	r2,-4(fp)
   244bc:	e0ffff17 	ldw	r3,-4(fp)
   244c0:	008000b4 	movhi	r2,2
   244c4:	10950604 	addi	r2,r2,21528
   244c8:	18bff62e 	bgeu	r3,r2,244a4 <_do_ctors+0x20>
        (*ctor) (); 
}
   244cc:	e037883a 	mov	sp,fp
   244d0:	dfc00117 	ldw	ra,4(sp)
   244d4:	df000017 	ldw	fp,0(sp)
   244d8:	dec00204 	addi	sp,sp,8
   244dc:	f800283a 	ret

000244e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   244e0:	defffd04 	addi	sp,sp,-12
   244e4:	dfc00215 	stw	ra,8(sp)
   244e8:	df000115 	stw	fp,4(sp)
   244ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   244f0:	008000b4 	movhi	r2,2
   244f4:	10950504 	addi	r2,r2,21524
   244f8:	e0bfff15 	stw	r2,-4(fp)
   244fc:	00000606 	br	24518 <_do_dtors+0x38>
        (*dtor) (); 
   24500:	e0bfff17 	ldw	r2,-4(fp)
   24504:	10800017 	ldw	r2,0(r2)
   24508:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2450c:	e0bfff17 	ldw	r2,-4(fp)
   24510:	10bfff04 	addi	r2,r2,-4
   24514:	e0bfff15 	stw	r2,-4(fp)
   24518:	e0ffff17 	ldw	r3,-4(fp)
   2451c:	008000b4 	movhi	r2,2
   24520:	10950604 	addi	r2,r2,21528
   24524:	18bff62e 	bgeu	r3,r2,24500 <_do_dtors+0x20>
        (*dtor) (); 
}
   24528:	e037883a 	mov	sp,fp
   2452c:	dfc00117 	ldw	ra,4(sp)
   24530:	df000017 	ldw	fp,0(sp)
   24534:	dec00204 	addi	sp,sp,8
   24538:	f800283a 	ret

0002453c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2453c:	deffff04 	addi	sp,sp,-4
   24540:	df000015 	stw	fp,0(sp)
   24544:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24548:	e037883a 	mov	sp,fp
   2454c:	df000017 	ldw	fp,0(sp)
   24550:	dec00104 	addi	sp,sp,4
   24554:	f800283a 	ret

00024558 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24558:	defff904 	addi	sp,sp,-28
   2455c:	dfc00615 	stw	ra,24(sp)
   24560:	df000515 	stw	fp,20(sp)
   24564:	df000504 	addi	fp,sp,20
   24568:	e13ffc15 	stw	r4,-16(fp)
   2456c:	e17ffd15 	stw	r5,-12(fp)
   24570:	e1bffe15 	stw	r6,-8(fp)
   24574:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24578:	e0800217 	ldw	r2,8(fp)
   2457c:	d8800015 	stw	r2,0(sp)
   24580:	e13ffc17 	ldw	r4,-16(fp)
   24584:	e17ffd17 	ldw	r5,-12(fp)
   24588:	e1bffe17 	ldw	r6,-8(fp)
   2458c:	e1ffff17 	ldw	r7,-4(fp)
   24590:	00247300 	call	24730 <alt_iic_isr_register>
}  
   24594:	e037883a 	mov	sp,fp
   24598:	dfc00117 	ldw	ra,4(sp)
   2459c:	df000017 	ldw	fp,0(sp)
   245a0:	dec00204 	addi	sp,sp,8
   245a4:	f800283a 	ret

000245a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   245a8:	defff904 	addi	sp,sp,-28
   245ac:	df000615 	stw	fp,24(sp)
   245b0:	df000604 	addi	fp,sp,24
   245b4:	e13ffe15 	stw	r4,-8(fp)
   245b8:	e17fff15 	stw	r5,-4(fp)
   245bc:	e0bfff17 	ldw	r2,-4(fp)
   245c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245c4:	0005303a 	rdctl	r2,status
   245c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   245cc:	e0fffb17 	ldw	r3,-20(fp)
   245d0:	00bfff84 	movi	r2,-2
   245d4:	1884703a 	and	r2,r3,r2
   245d8:	1001703a 	wrctl	status,r2
  
  return context;
   245dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   245e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   245e4:	e0bffa17 	ldw	r2,-24(fp)
   245e8:	00c00044 	movi	r3,1
   245ec:	1884983a 	sll	r2,r3,r2
   245f0:	1007883a 	mov	r3,r2
   245f4:	008000f4 	movhi	r2,3
   245f8:	10a24504 	addi	r2,r2,-30444
   245fc:	10800017 	ldw	r2,0(r2)
   24600:	1886b03a 	or	r3,r3,r2
   24604:	008000f4 	movhi	r2,3
   24608:	10a24504 	addi	r2,r2,-30444
   2460c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24610:	008000f4 	movhi	r2,3
   24614:	10a24504 	addi	r2,r2,-30444
   24618:	10800017 	ldw	r2,0(r2)
   2461c:	100170fa 	wrctl	ienable,r2
   24620:	e0bffc17 	ldw	r2,-16(fp)
   24624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24628:	e0bffd17 	ldw	r2,-12(fp)
   2462c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24630:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   24634:	e037883a 	mov	sp,fp
   24638:	df000017 	ldw	fp,0(sp)
   2463c:	dec00104 	addi	sp,sp,4
   24640:	f800283a 	ret

00024644 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24644:	defff904 	addi	sp,sp,-28
   24648:	df000615 	stw	fp,24(sp)
   2464c:	df000604 	addi	fp,sp,24
   24650:	e13ffe15 	stw	r4,-8(fp)
   24654:	e17fff15 	stw	r5,-4(fp)
   24658:	e0bfff17 	ldw	r2,-4(fp)
   2465c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24660:	0005303a 	rdctl	r2,status
   24664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24668:	e0fffb17 	ldw	r3,-20(fp)
   2466c:	00bfff84 	movi	r2,-2
   24670:	1884703a 	and	r2,r3,r2
   24674:	1001703a 	wrctl	status,r2
  
  return context;
   24678:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2467c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24680:	e0bffa17 	ldw	r2,-24(fp)
   24684:	00c00044 	movi	r3,1
   24688:	1884983a 	sll	r2,r3,r2
   2468c:	0084303a 	nor	r2,zero,r2
   24690:	1007883a 	mov	r3,r2
   24694:	008000f4 	movhi	r2,3
   24698:	10a24504 	addi	r2,r2,-30444
   2469c:	10800017 	ldw	r2,0(r2)
   246a0:	1886703a 	and	r3,r3,r2
   246a4:	008000f4 	movhi	r2,3
   246a8:	10a24504 	addi	r2,r2,-30444
   246ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   246b0:	008000f4 	movhi	r2,3
   246b4:	10a24504 	addi	r2,r2,-30444
   246b8:	10800017 	ldw	r2,0(r2)
   246bc:	100170fa 	wrctl	ienable,r2
   246c0:	e0bffc17 	ldw	r2,-16(fp)
   246c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   246c8:	e0bffd17 	ldw	r2,-12(fp)
   246cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   246d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   246d4:	e037883a 	mov	sp,fp
   246d8:	df000017 	ldw	fp,0(sp)
   246dc:	dec00104 	addi	sp,sp,4
   246e0:	f800283a 	ret

000246e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   246e4:	defffc04 	addi	sp,sp,-16
   246e8:	df000315 	stw	fp,12(sp)
   246ec:	df000304 	addi	fp,sp,12
   246f0:	e13ffe15 	stw	r4,-8(fp)
   246f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   246f8:	000530fa 	rdctl	r2,ienable
   246fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24700:	e0bfff17 	ldw	r2,-4(fp)
   24704:	00c00044 	movi	r3,1
   24708:	1884983a 	sll	r2,r3,r2
   2470c:	1007883a 	mov	r3,r2
   24710:	e0bffd17 	ldw	r2,-12(fp)
   24714:	1884703a 	and	r2,r3,r2
   24718:	1004c03a 	cmpne	r2,r2,zero
   2471c:	10803fcc 	andi	r2,r2,255
}
   24720:	e037883a 	mov	sp,fp
   24724:	df000017 	ldw	fp,0(sp)
   24728:	dec00104 	addi	sp,sp,4
   2472c:	f800283a 	ret

00024730 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24730:	defff504 	addi	sp,sp,-44
   24734:	dfc00a15 	stw	ra,40(sp)
   24738:	df000915 	stw	fp,36(sp)
   2473c:	df000904 	addi	fp,sp,36
   24740:	e13ffc15 	stw	r4,-16(fp)
   24744:	e17ffd15 	stw	r5,-12(fp)
   24748:	e1bffe15 	stw	r6,-8(fp)
   2474c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24750:	00bffa84 	movi	r2,-22
   24754:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24758:	e0bffd17 	ldw	r2,-12(fp)
   2475c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24760:	e0bff817 	ldw	r2,-32(fp)
   24764:	10800808 	cmpgei	r2,r2,32
   24768:	1000271e 	bne	r2,zero,24808 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2476c:	0005303a 	rdctl	r2,status
   24770:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24774:	e0fffa17 	ldw	r3,-24(fp)
   24778:	00bfff84 	movi	r2,-2
   2477c:	1884703a 	and	r2,r3,r2
   24780:	1001703a 	wrctl	status,r2
  
  return context;
   24784:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24788:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2478c:	00c000f4 	movhi	r3,3
   24790:	18e25204 	addi	r3,r3,-30392
   24794:	e0bff817 	ldw	r2,-32(fp)
   24798:	100490fa 	slli	r2,r2,3
   2479c:	1885883a 	add	r2,r3,r2
   247a0:	e0fffe17 	ldw	r3,-8(fp)
   247a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   247a8:	00c000f4 	movhi	r3,3
   247ac:	18e25204 	addi	r3,r3,-30392
   247b0:	e0bff817 	ldw	r2,-32(fp)
   247b4:	100490fa 	slli	r2,r2,3
   247b8:	1885883a 	add	r2,r3,r2
   247bc:	10800104 	addi	r2,r2,4
   247c0:	e0ffff17 	ldw	r3,-4(fp)
   247c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   247c8:	e0bffe17 	ldw	r2,-8(fp)
   247cc:	10000526 	beq	r2,zero,247e4 <alt_iic_isr_register+0xb4>
   247d0:	e0bff817 	ldw	r2,-32(fp)
   247d4:	e13ffc17 	ldw	r4,-16(fp)
   247d8:	100b883a 	mov	r5,r2
   247dc:	00245a80 	call	245a8 <alt_ic_irq_enable>
   247e0:	00000406 	br	247f4 <alt_iic_isr_register+0xc4>
   247e4:	e0bff817 	ldw	r2,-32(fp)
   247e8:	e13ffc17 	ldw	r4,-16(fp)
   247ec:	100b883a 	mov	r5,r2
   247f0:	00246440 	call	24644 <alt_ic_irq_disable>
   247f4:	e0bff715 	stw	r2,-36(fp)
   247f8:	e0bff917 	ldw	r2,-28(fp)
   247fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24800:	e0bffb17 	ldw	r2,-20(fp)
   24804:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24808:	e0bff717 	ldw	r2,-36(fp)
}
   2480c:	e037883a 	mov	sp,fp
   24810:	dfc00117 	ldw	ra,4(sp)
   24814:	df000017 	ldw	fp,0(sp)
   24818:	dec00204 	addi	sp,sp,8
   2481c:	f800283a 	ret

00024820 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24820:	defff804 	addi	sp,sp,-32
   24824:	dfc00715 	stw	ra,28(sp)
   24828:	df000615 	stw	fp,24(sp)
   2482c:	dc000515 	stw	r16,20(sp)
   24830:	df000504 	addi	fp,sp,20
   24834:	e13ffc15 	stw	r4,-16(fp)
   24838:	e17ffd15 	stw	r5,-12(fp)
   2483c:	e1bffe15 	stw	r6,-8(fp)
   24840:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   24844:	e13ffd17 	ldw	r4,-12(fp)
   24848:	e17ffe17 	ldw	r5,-8(fp)
   2484c:	e1bfff17 	ldw	r6,-4(fp)
   24850:	0024ab80 	call	24ab8 <open>
   24854:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   24858:	e0bffb17 	ldw	r2,-20(fp)
   2485c:	10002216 	blt	r2,zero,248e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24860:	040000b4 	movhi	r16,2
   24864:	84172604 	addi	r16,r16,23704
   24868:	e0bffb17 	ldw	r2,-20(fp)
   2486c:	1009883a 	mov	r4,r2
   24870:	01400304 	movi	r5,12
   24874:	0022d440 	call	22d44 <__mulsi3>
   24878:	8085883a 	add	r2,r16,r2
   2487c:	10c00017 	ldw	r3,0(r2)
   24880:	e0bffc17 	ldw	r2,-16(fp)
   24884:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24888:	040000b4 	movhi	r16,2
   2488c:	84172604 	addi	r16,r16,23704
   24890:	e0bffb17 	ldw	r2,-20(fp)
   24894:	1009883a 	mov	r4,r2
   24898:	01400304 	movi	r5,12
   2489c:	0022d440 	call	22d44 <__mulsi3>
   248a0:	8085883a 	add	r2,r16,r2
   248a4:	10800104 	addi	r2,r2,4
   248a8:	10c00017 	ldw	r3,0(r2)
   248ac:	e0bffc17 	ldw	r2,-16(fp)
   248b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   248b4:	040000b4 	movhi	r16,2
   248b8:	84172604 	addi	r16,r16,23704
   248bc:	e0bffb17 	ldw	r2,-20(fp)
   248c0:	1009883a 	mov	r4,r2
   248c4:	01400304 	movi	r5,12
   248c8:	0022d440 	call	22d44 <__mulsi3>
   248cc:	8085883a 	add	r2,r16,r2
   248d0:	10800204 	addi	r2,r2,8
   248d4:	10c00017 	ldw	r3,0(r2)
   248d8:	e0bffc17 	ldw	r2,-16(fp)
   248dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   248e0:	e13ffb17 	ldw	r4,-20(fp)
   248e4:	00234b40 	call	234b4 <alt_release_fd>
  }
} 
   248e8:	e037883a 	mov	sp,fp
   248ec:	dfc00217 	ldw	ra,8(sp)
   248f0:	df000117 	ldw	fp,4(sp)
   248f4:	dc000017 	ldw	r16,0(sp)
   248f8:	dec00304 	addi	sp,sp,12
   248fc:	f800283a 	ret

00024900 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24900:	defffb04 	addi	sp,sp,-20
   24904:	dfc00415 	stw	ra,16(sp)
   24908:	df000315 	stw	fp,12(sp)
   2490c:	df000304 	addi	fp,sp,12
   24910:	e13ffd15 	stw	r4,-12(fp)
   24914:	e17ffe15 	stw	r5,-8(fp)
   24918:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2491c:	010000b4 	movhi	r4,2
   24920:	21172904 	addi	r4,r4,23716
   24924:	e17ffd17 	ldw	r5,-12(fp)
   24928:	01800044 	movi	r6,1
   2492c:	01c07fc4 	movi	r7,511
   24930:	00248200 	call	24820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24934:	010000b4 	movhi	r4,2
   24938:	21172604 	addi	r4,r4,23704
   2493c:	e17ffe17 	ldw	r5,-8(fp)
   24940:	000d883a 	mov	r6,zero
   24944:	01c07fc4 	movi	r7,511
   24948:	00248200 	call	24820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2494c:	010000b4 	movhi	r4,2
   24950:	21172c04 	addi	r4,r4,23728
   24954:	e17fff17 	ldw	r5,-4(fp)
   24958:	01800044 	movi	r6,1
   2495c:	01c07fc4 	movi	r7,511
   24960:	00248200 	call	24820 <alt_open_fd>
}  
   24964:	e037883a 	mov	sp,fp
   24968:	dfc00117 	ldw	ra,4(sp)
   2496c:	df000017 	ldw	fp,0(sp)
   24970:	dec00204 	addi	sp,sp,8
   24974:	f800283a 	ret

00024978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24978:	defffe04 	addi	sp,sp,-8
   2497c:	dfc00115 	stw	ra,4(sp)
   24980:	df000015 	stw	fp,0(sp)
   24984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24988:	008000b4 	movhi	r2,2
   2498c:	109ba704 	addi	r2,r2,28316
   24990:	10800017 	ldw	r2,0(r2)
   24994:	10000526 	beq	r2,zero,249ac <alt_get_errno+0x34>
   24998:	008000b4 	movhi	r2,2
   2499c:	109ba704 	addi	r2,r2,28316
   249a0:	10800017 	ldw	r2,0(r2)
   249a4:	103ee83a 	callr	r2
   249a8:	00000206 	br	249b4 <alt_get_errno+0x3c>
   249ac:	008000f4 	movhi	r2,3
   249b0:	10a24104 	addi	r2,r2,-30460
}
   249b4:	e037883a 	mov	sp,fp
   249b8:	dfc00117 	ldw	ra,4(sp)
   249bc:	df000017 	ldw	fp,0(sp)
   249c0:	dec00204 	addi	sp,sp,8
   249c4:	f800283a 	ret

000249c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   249c8:	defffb04 	addi	sp,sp,-20
   249cc:	dfc00415 	stw	ra,16(sp)
   249d0:	df000315 	stw	fp,12(sp)
   249d4:	dc000215 	stw	r16,8(sp)
   249d8:	df000204 	addi	fp,sp,8
   249dc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   249e0:	e0bfff17 	ldw	r2,-4(fp)
   249e4:	10800217 	ldw	r2,8(r2)
   249e8:	10d00034 	orhi	r3,r2,16384
   249ec:	e0bfff17 	ldw	r2,-4(fp)
   249f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   249f4:	e03ffe15 	stw	zero,-8(fp)
   249f8:	00002206 	br	24a84 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   249fc:	040000b4 	movhi	r16,2
   24a00:	84172604 	addi	r16,r16,23704
   24a04:	e0bffe17 	ldw	r2,-8(fp)
   24a08:	1009883a 	mov	r4,r2
   24a0c:	01400304 	movi	r5,12
   24a10:	0022d440 	call	22d44 <__mulsi3>
   24a14:	8085883a 	add	r2,r16,r2
   24a18:	10c00017 	ldw	r3,0(r2)
   24a1c:	e0bfff17 	ldw	r2,-4(fp)
   24a20:	10800017 	ldw	r2,0(r2)
   24a24:	1880141e 	bne	r3,r2,24a78 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24a28:	040000b4 	movhi	r16,2
   24a2c:	84172604 	addi	r16,r16,23704
   24a30:	e0bffe17 	ldw	r2,-8(fp)
   24a34:	1009883a 	mov	r4,r2
   24a38:	01400304 	movi	r5,12
   24a3c:	0022d440 	call	22d44 <__mulsi3>
   24a40:	8085883a 	add	r2,r16,r2
   24a44:	10800204 	addi	r2,r2,8
   24a48:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24a4c:	10000a0e 	bge	r2,zero,24a78 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24a50:	e13ffe17 	ldw	r4,-8(fp)
   24a54:	01400304 	movi	r5,12
   24a58:	0022d440 	call	22d44 <__mulsi3>
   24a5c:	00c000b4 	movhi	r3,2
   24a60:	18d72604 	addi	r3,r3,23704
   24a64:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24a68:	e0bfff17 	ldw	r2,-4(fp)
   24a6c:	18800226 	beq	r3,r2,24a78 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24a70:	00bffcc4 	movi	r2,-13
   24a74:	00000a06 	br	24aa0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24a78:	e0bffe17 	ldw	r2,-8(fp)
   24a7c:	10800044 	addi	r2,r2,1
   24a80:	e0bffe15 	stw	r2,-8(fp)
   24a84:	008000b4 	movhi	r2,2
   24a88:	109ba604 	addi	r2,r2,28312
   24a8c:	10800017 	ldw	r2,0(r2)
   24a90:	1007883a 	mov	r3,r2
   24a94:	e0bffe17 	ldw	r2,-8(fp)
   24a98:	18bfd82e 	bgeu	r3,r2,249fc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24a9c:	0005883a 	mov	r2,zero
}
   24aa0:	e037883a 	mov	sp,fp
   24aa4:	dfc00217 	ldw	ra,8(sp)
   24aa8:	df000117 	ldw	fp,4(sp)
   24aac:	dc000017 	ldw	r16,0(sp)
   24ab0:	dec00304 	addi	sp,sp,12
   24ab4:	f800283a 	ret

00024ab8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24ab8:	defff604 	addi	sp,sp,-40
   24abc:	dfc00915 	stw	ra,36(sp)
   24ac0:	df000815 	stw	fp,32(sp)
   24ac4:	df000804 	addi	fp,sp,32
   24ac8:	e13ffd15 	stw	r4,-12(fp)
   24acc:	e17ffe15 	stw	r5,-8(fp)
   24ad0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24ad4:	00bfffc4 	movi	r2,-1
   24ad8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24adc:	00bffb44 	movi	r2,-19
   24ae0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24ae4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24ae8:	e13ffd17 	ldw	r4,-12(fp)
   24aec:	014000b4 	movhi	r5,2
   24af0:	295ba404 	addi	r5,r5,28304
   24af4:	0024dcc0 	call	24dcc <alt_find_dev>
   24af8:	e0bff815 	stw	r2,-32(fp)
   24afc:	e0bff817 	ldw	r2,-32(fp)
   24b00:	1000051e 	bne	r2,zero,24b18 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24b04:	e13ffd17 	ldw	r4,-12(fp)
   24b08:	0024e5c0 	call	24e5c <alt_find_file>
   24b0c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24b10:	00800044 	movi	r2,1
   24b14:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24b18:	e0bff817 	ldw	r2,-32(fp)
   24b1c:	10002a26 	beq	r2,zero,24bc8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24b20:	e13ff817 	ldw	r4,-32(fp)
   24b24:	0024f700 	call	24f70 <alt_get_fd>
   24b28:	e0bff915 	stw	r2,-28(fp)
   24b2c:	e0bff917 	ldw	r2,-28(fp)
   24b30:	1000030e 	bge	r2,zero,24b40 <open+0x88>
    {
      status = index;
   24b34:	e0bff917 	ldw	r2,-28(fp)
   24b38:	e0bffa15 	stw	r2,-24(fp)
   24b3c:	00002406 	br	24bd0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24b40:	e13ff917 	ldw	r4,-28(fp)
   24b44:	01400304 	movi	r5,12
   24b48:	0022d440 	call	22d44 <__mulsi3>
   24b4c:	00c000b4 	movhi	r3,2
   24b50:	18d72604 	addi	r3,r3,23704
   24b54:	10c5883a 	add	r2,r2,r3
   24b58:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24b5c:	e0fffe17 	ldw	r3,-8(fp)
   24b60:	00900034 	movhi	r2,16384
   24b64:	10bfffc4 	addi	r2,r2,-1
   24b68:	1886703a 	and	r3,r3,r2
   24b6c:	e0bffc17 	ldw	r2,-16(fp)
   24b70:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24b74:	e0bffb17 	ldw	r2,-20(fp)
   24b78:	1000051e 	bne	r2,zero,24b90 <open+0xd8>
   24b7c:	e13ffc17 	ldw	r4,-16(fp)
   24b80:	00249c80 	call	249c8 <alt_file_locked>
   24b84:	e0bffa15 	stw	r2,-24(fp)
   24b88:	e0bffa17 	ldw	r2,-24(fp)
   24b8c:	10001016 	blt	r2,zero,24bd0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24b90:	e0bff817 	ldw	r2,-32(fp)
   24b94:	10800317 	ldw	r2,12(r2)
   24b98:	10000826 	beq	r2,zero,24bbc <open+0x104>
   24b9c:	e0bff817 	ldw	r2,-32(fp)
   24ba0:	10800317 	ldw	r2,12(r2)
   24ba4:	e13ffc17 	ldw	r4,-16(fp)
   24ba8:	e17ffd17 	ldw	r5,-12(fp)
   24bac:	e1bffe17 	ldw	r6,-8(fp)
   24bb0:	e1ffff17 	ldw	r7,-4(fp)
   24bb4:	103ee83a 	callr	r2
   24bb8:	00000106 	br	24bc0 <open+0x108>
   24bbc:	0005883a 	mov	r2,zero
   24bc0:	e0bffa15 	stw	r2,-24(fp)
   24bc4:	00000206 	br	24bd0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24bc8:	00bffb44 	movi	r2,-19
   24bcc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24bd0:	e0bffa17 	ldw	r2,-24(fp)
   24bd4:	1000080e 	bge	r2,zero,24bf8 <open+0x140>
  {
    alt_release_fd (index);  
   24bd8:	e13ff917 	ldw	r4,-28(fp)
   24bdc:	00234b40 	call	234b4 <alt_release_fd>
    ALT_ERRNO = -status;
   24be0:	00249780 	call	24978 <alt_get_errno>
   24be4:	e0fffa17 	ldw	r3,-24(fp)
   24be8:	00c7c83a 	sub	r3,zero,r3
   24bec:	10c00015 	stw	r3,0(r2)
    return -1;
   24bf0:	00bfffc4 	movi	r2,-1
   24bf4:	00000106 	br	24bfc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   24bf8:	e0bff917 	ldw	r2,-28(fp)
}
   24bfc:	e037883a 	mov	sp,fp
   24c00:	dfc00117 	ldw	ra,4(sp)
   24c04:	df000017 	ldw	fp,0(sp)
   24c08:	dec00204 	addi	sp,sp,8
   24c0c:	f800283a 	ret

00024c10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24c10:	defffa04 	addi	sp,sp,-24
   24c14:	df000515 	stw	fp,20(sp)
   24c18:	df000504 	addi	fp,sp,20
   24c1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c20:	0005303a 	rdctl	r2,status
   24c24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c28:	e0fffc17 	ldw	r3,-16(fp)
   24c2c:	00bfff84 	movi	r2,-2
   24c30:	1884703a 	and	r2,r3,r2
   24c34:	1001703a 	wrctl	status,r2
  
  return context;
   24c38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24c3c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24c40:	e0bfff17 	ldw	r2,-4(fp)
   24c44:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24c48:	e0bffd17 	ldw	r2,-12(fp)
   24c4c:	10800017 	ldw	r2,0(r2)
   24c50:	e0fffd17 	ldw	r3,-12(fp)
   24c54:	18c00117 	ldw	r3,4(r3)
   24c58:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24c5c:	e0bffd17 	ldw	r2,-12(fp)
   24c60:	10800117 	ldw	r2,4(r2)
   24c64:	e0fffd17 	ldw	r3,-12(fp)
   24c68:	18c00017 	ldw	r3,0(r3)
   24c6c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24c70:	e0bffd17 	ldw	r2,-12(fp)
   24c74:	e0fffd17 	ldw	r3,-12(fp)
   24c78:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24c7c:	e0bffd17 	ldw	r2,-12(fp)
   24c80:	e0fffd17 	ldw	r3,-12(fp)
   24c84:	10c00015 	stw	r3,0(r2)
   24c88:	e0bffb17 	ldw	r2,-20(fp)
   24c8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24c90:	e0bffe17 	ldw	r2,-8(fp)
   24c94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24c98:	e037883a 	mov	sp,fp
   24c9c:	df000017 	ldw	fp,0(sp)
   24ca0:	dec00104 	addi	sp,sp,4
   24ca4:	f800283a 	ret

00024ca8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24ca8:	defffb04 	addi	sp,sp,-20
   24cac:	dfc00415 	stw	ra,16(sp)
   24cb0:	df000315 	stw	fp,12(sp)
   24cb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24cb8:	d0a00c17 	ldw	r2,-32720(gp)
   24cbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24cc0:	d0a6a917 	ldw	r2,-25948(gp)
   24cc4:	10800044 	addi	r2,r2,1
   24cc8:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24ccc:	00002e06 	br	24d88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24cd0:	e0bffd17 	ldw	r2,-12(fp)
   24cd4:	10800017 	ldw	r2,0(r2)
   24cd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24cdc:	e0bffd17 	ldw	r2,-12(fp)
   24ce0:	10800403 	ldbu	r2,16(r2)
   24ce4:	10803fcc 	andi	r2,r2,255
   24ce8:	10000426 	beq	r2,zero,24cfc <alt_tick+0x54>
   24cec:	d0a6a917 	ldw	r2,-25948(gp)
   24cf0:	1000021e 	bne	r2,zero,24cfc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24cf4:	e0bffd17 	ldw	r2,-12(fp)
   24cf8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24cfc:	e0bffd17 	ldw	r2,-12(fp)
   24d00:	10800217 	ldw	r2,8(r2)
   24d04:	d0e6a917 	ldw	r3,-25948(gp)
   24d08:	18801d36 	bltu	r3,r2,24d80 <alt_tick+0xd8>
   24d0c:	e0bffd17 	ldw	r2,-12(fp)
   24d10:	10800403 	ldbu	r2,16(r2)
   24d14:	10803fcc 	andi	r2,r2,255
   24d18:	1000191e 	bne	r2,zero,24d80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24d1c:	e0bffd17 	ldw	r2,-12(fp)
   24d20:	10c00317 	ldw	r3,12(r2)
   24d24:	e0bffd17 	ldw	r2,-12(fp)
   24d28:	10800517 	ldw	r2,20(r2)
   24d2c:	1009883a 	mov	r4,r2
   24d30:	183ee83a 	callr	r3
   24d34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24d38:	e0bfff17 	ldw	r2,-4(fp)
   24d3c:	1000031e 	bne	r2,zero,24d4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24d40:	e13ffd17 	ldw	r4,-12(fp)
   24d44:	0024c100 	call	24c10 <alt_alarm_stop>
   24d48:	00000d06 	br	24d80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24d4c:	e0bffd17 	ldw	r2,-12(fp)
   24d50:	10c00217 	ldw	r3,8(r2)
   24d54:	e0bfff17 	ldw	r2,-4(fp)
   24d58:	1887883a 	add	r3,r3,r2
   24d5c:	e0bffd17 	ldw	r2,-12(fp)
   24d60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24d64:	e0bffd17 	ldw	r2,-12(fp)
   24d68:	10c00217 	ldw	r3,8(r2)
   24d6c:	d0a6a917 	ldw	r2,-25948(gp)
   24d70:	1880032e 	bgeu	r3,r2,24d80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24d74:	e0bffd17 	ldw	r2,-12(fp)
   24d78:	00c00044 	movi	r3,1
   24d7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24d80:	e0bffe17 	ldw	r2,-8(fp)
   24d84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24d88:	e0fffd17 	ldw	r3,-12(fp)
   24d8c:	d0a00c04 	addi	r2,gp,-32720
   24d90:	18bfcf1e 	bne	r3,r2,24cd0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24d94:	0001883a 	nop
}
   24d98:	e037883a 	mov	sp,fp
   24d9c:	dfc00117 	ldw	ra,4(sp)
   24da0:	df000017 	ldw	fp,0(sp)
   24da4:	dec00204 	addi	sp,sp,8
   24da8:	f800283a 	ret

00024dac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   24dac:	deffff04 	addi	sp,sp,-4
   24db0:	df000015 	stw	fp,0(sp)
   24db4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24db8:	000170fa 	wrctl	ienable,zero
}
   24dbc:	e037883a 	mov	sp,fp
   24dc0:	df000017 	ldw	fp,0(sp)
   24dc4:	dec00104 	addi	sp,sp,4
   24dc8:	f800283a 	ret

00024dcc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24dcc:	defffa04 	addi	sp,sp,-24
   24dd0:	dfc00515 	stw	ra,20(sp)
   24dd4:	df000415 	stw	fp,16(sp)
   24dd8:	df000404 	addi	fp,sp,16
   24ddc:	e13ffe15 	stw	r4,-8(fp)
   24de0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24de4:	e0bfff17 	ldw	r2,-4(fp)
   24de8:	10800017 	ldw	r2,0(r2)
   24dec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24df0:	e13ffe17 	ldw	r4,-8(fp)
   24df4:	00202c00 	call	202c0 <strlen>
   24df8:	10800044 	addi	r2,r2,1
   24dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24e00:	00000d06 	br	24e38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24e04:	e0bffc17 	ldw	r2,-16(fp)
   24e08:	10c00217 	ldw	r3,8(r2)
   24e0c:	e0bffd17 	ldw	r2,-12(fp)
   24e10:	1809883a 	mov	r4,r3
   24e14:	e17ffe17 	ldw	r5,-8(fp)
   24e18:	100d883a 	mov	r6,r2
   24e1c:	00250900 	call	25090 <memcmp>
   24e20:	1000021e 	bne	r2,zero,24e2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24e24:	e0bffc17 	ldw	r2,-16(fp)
   24e28:	00000706 	br	24e48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24e2c:	e0bffc17 	ldw	r2,-16(fp)
   24e30:	10800017 	ldw	r2,0(r2)
   24e34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24e38:	e0fffc17 	ldw	r3,-16(fp)
   24e3c:	e0bfff17 	ldw	r2,-4(fp)
   24e40:	18bff01e 	bne	r3,r2,24e04 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24e44:	0005883a 	mov	r2,zero
}
   24e48:	e037883a 	mov	sp,fp
   24e4c:	dfc00117 	ldw	ra,4(sp)
   24e50:	df000017 	ldw	fp,0(sp)
   24e54:	dec00204 	addi	sp,sp,8
   24e58:	f800283a 	ret

00024e5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24e5c:	defffb04 	addi	sp,sp,-20
   24e60:	dfc00415 	stw	ra,16(sp)
   24e64:	df000315 	stw	fp,12(sp)
   24e68:	df000304 	addi	fp,sp,12
   24e6c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24e70:	008000b4 	movhi	r2,2
   24e74:	109ba204 	addi	r2,r2,28296
   24e78:	10800017 	ldw	r2,0(r2)
   24e7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24e80:	00003106 	br	24f48 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   24e84:	e0bffd17 	ldw	r2,-12(fp)
   24e88:	10800217 	ldw	r2,8(r2)
   24e8c:	1009883a 	mov	r4,r2
   24e90:	00202c00 	call	202c0 <strlen>
   24e94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24e98:	e0bffd17 	ldw	r2,-12(fp)
   24e9c:	10c00217 	ldw	r3,8(r2)
   24ea0:	e0bffe17 	ldw	r2,-8(fp)
   24ea4:	10bfffc4 	addi	r2,r2,-1
   24ea8:	1885883a 	add	r2,r3,r2
   24eac:	10800003 	ldbu	r2,0(r2)
   24eb0:	10803fcc 	andi	r2,r2,255
   24eb4:	1080201c 	xori	r2,r2,128
   24eb8:	10bfe004 	addi	r2,r2,-128
   24ebc:	10800bd8 	cmpnei	r2,r2,47
   24ec0:	1000031e 	bne	r2,zero,24ed0 <alt_find_file+0x74>
    {
      len -= 1;
   24ec4:	e0bffe17 	ldw	r2,-8(fp)
   24ec8:	10bfffc4 	addi	r2,r2,-1
   24ecc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24ed0:	e0bffe17 	ldw	r2,-8(fp)
   24ed4:	e0ffff17 	ldw	r3,-4(fp)
   24ed8:	1885883a 	add	r2,r3,r2
   24edc:	10800003 	ldbu	r2,0(r2)
   24ee0:	10803fcc 	andi	r2,r2,255
   24ee4:	1080201c 	xori	r2,r2,128
   24ee8:	10bfe004 	addi	r2,r2,-128
   24eec:	10800be0 	cmpeqi	r2,r2,47
   24ef0:	1000081e 	bne	r2,zero,24f14 <alt_find_file+0xb8>
   24ef4:	e0bffe17 	ldw	r2,-8(fp)
   24ef8:	e0ffff17 	ldw	r3,-4(fp)
   24efc:	1885883a 	add	r2,r3,r2
   24f00:	10800003 	ldbu	r2,0(r2)
   24f04:	10803fcc 	andi	r2,r2,255
   24f08:	1080201c 	xori	r2,r2,128
   24f0c:	10bfe004 	addi	r2,r2,-128
   24f10:	10000a1e 	bne	r2,zero,24f3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   24f14:	e0bffd17 	ldw	r2,-12(fp)
   24f18:	10c00217 	ldw	r3,8(r2)
   24f1c:	e0bffe17 	ldw	r2,-8(fp)
   24f20:	1809883a 	mov	r4,r3
   24f24:	e17fff17 	ldw	r5,-4(fp)
   24f28:	100d883a 	mov	r6,r2
   24f2c:	00250900 	call	25090 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24f30:	1000021e 	bne	r2,zero,24f3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24f34:	e0bffd17 	ldw	r2,-12(fp)
   24f38:	00000806 	br	24f5c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   24f3c:	e0bffd17 	ldw	r2,-12(fp)
   24f40:	10800017 	ldw	r2,0(r2)
   24f44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24f48:	e0fffd17 	ldw	r3,-12(fp)
   24f4c:	008000b4 	movhi	r2,2
   24f50:	109ba204 	addi	r2,r2,28296
   24f54:	18bfcb1e 	bne	r3,r2,24e84 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24f58:	0005883a 	mov	r2,zero
}
   24f5c:	e037883a 	mov	sp,fp
   24f60:	dfc00117 	ldw	ra,4(sp)
   24f64:	df000017 	ldw	fp,0(sp)
   24f68:	dec00204 	addi	sp,sp,8
   24f6c:	f800283a 	ret

00024f70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24f70:	defffa04 	addi	sp,sp,-24
   24f74:	dfc00515 	stw	ra,20(sp)
   24f78:	df000415 	stw	fp,16(sp)
   24f7c:	dc000315 	stw	r16,12(sp)
   24f80:	df000304 	addi	fp,sp,12
   24f84:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   24f88:	00bffa04 	movi	r2,-24
   24f8c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24f90:	e03ffd15 	stw	zero,-12(fp)
   24f94:	00002106 	br	2501c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   24f98:	040000b4 	movhi	r16,2
   24f9c:	84172604 	addi	r16,r16,23704
   24fa0:	e0bffd17 	ldw	r2,-12(fp)
   24fa4:	1009883a 	mov	r4,r2
   24fa8:	01400304 	movi	r5,12
   24fac:	0022d440 	call	22d44 <__mulsi3>
   24fb0:	8085883a 	add	r2,r16,r2
   24fb4:	10800017 	ldw	r2,0(r2)
   24fb8:	1000151e 	bne	r2,zero,25010 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   24fbc:	040000b4 	movhi	r16,2
   24fc0:	84172604 	addi	r16,r16,23704
   24fc4:	e0bffd17 	ldw	r2,-12(fp)
   24fc8:	1009883a 	mov	r4,r2
   24fcc:	01400304 	movi	r5,12
   24fd0:	0022d440 	call	22d44 <__mulsi3>
   24fd4:	8085883a 	add	r2,r16,r2
   24fd8:	e0ffff17 	ldw	r3,-4(fp)
   24fdc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24fe0:	008000b4 	movhi	r2,2
   24fe4:	109ba604 	addi	r2,r2,28312
   24fe8:	10c00017 	ldw	r3,0(r2)
   24fec:	e0bffd17 	ldw	r2,-12(fp)
   24ff0:	1880040e 	bge	r3,r2,25004 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   24ff4:	008000b4 	movhi	r2,2
   24ff8:	109ba604 	addi	r2,r2,28312
   24ffc:	e0fffd17 	ldw	r3,-12(fp)
   25000:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   25004:	e0bffd17 	ldw	r2,-12(fp)
   25008:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2500c:	00000606 	br	25028 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25010:	e0bffd17 	ldw	r2,-12(fp)
   25014:	10800044 	addi	r2,r2,1
   25018:	e0bffd15 	stw	r2,-12(fp)
   2501c:	e0bffd17 	ldw	r2,-12(fp)
   25020:	10800810 	cmplti	r2,r2,32
   25024:	103fdc1e 	bne	r2,zero,24f98 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25028:	e0bffe17 	ldw	r2,-8(fp)
}
   2502c:	e037883a 	mov	sp,fp
   25030:	dfc00217 	ldw	ra,8(sp)
   25034:	df000117 	ldw	fp,4(sp)
   25038:	dc000017 	ldw	r16,0(sp)
   2503c:	dec00304 	addi	sp,sp,12
   25040:	f800283a 	ret

00025044 <atexit>:
   25044:	200b883a 	mov	r5,r4
   25048:	000d883a 	mov	r6,zero
   2504c:	0009883a 	mov	r4,zero
   25050:	000f883a 	mov	r7,zero
   25054:	002510c1 	jmpi	2510c <__register_exitproc>

00025058 <exit>:
   25058:	defffe04 	addi	sp,sp,-8
   2505c:	000b883a 	mov	r5,zero
   25060:	dc000015 	stw	r16,0(sp)
   25064:	dfc00115 	stw	ra,4(sp)
   25068:	2021883a 	mov	r16,r4
   2506c:	002523c0 	call	2523c <__call_exitprocs>
   25070:	008000b4 	movhi	r2,2
   25074:	109b9e04 	addi	r2,r2,28280
   25078:	11000017 	ldw	r4,0(r2)
   2507c:	20800f17 	ldw	r2,60(r4)
   25080:	10000126 	beq	r2,zero,25088 <exit+0x30>
   25084:	103ee83a 	callr	r2
   25088:	8009883a 	mov	r4,r16
   2508c:	00253dc0 	call	253dc <_exit>

00025090 <memcmp>:
   25090:	01c000c4 	movi	r7,3
   25094:	3980192e 	bgeu	r7,r6,250fc <memcmp+0x6c>
   25098:	2904b03a 	or	r2,r5,r4
   2509c:	11c4703a 	and	r2,r2,r7
   250a0:	10000f26 	beq	r2,zero,250e0 <memcmp+0x50>
   250a4:	20c00003 	ldbu	r3,0(r4)
   250a8:	28800003 	ldbu	r2,0(r5)
   250ac:	1880151e 	bne	r3,r2,25104 <memcmp+0x74>
   250b0:	31bfff84 	addi	r6,r6,-2
   250b4:	01ffffc4 	movi	r7,-1
   250b8:	00000406 	br	250cc <memcmp+0x3c>
   250bc:	20c00003 	ldbu	r3,0(r4)
   250c0:	28800003 	ldbu	r2,0(r5)
   250c4:	31bfffc4 	addi	r6,r6,-1
   250c8:	18800e1e 	bne	r3,r2,25104 <memcmp+0x74>
   250cc:	21000044 	addi	r4,r4,1
   250d0:	29400044 	addi	r5,r5,1
   250d4:	31fff91e 	bne	r6,r7,250bc <memcmp+0x2c>
   250d8:	0005883a 	mov	r2,zero
   250dc:	f800283a 	ret
   250e0:	20c00017 	ldw	r3,0(r4)
   250e4:	28800017 	ldw	r2,0(r5)
   250e8:	1880041e 	bne	r3,r2,250fc <memcmp+0x6c>
   250ec:	31bfff04 	addi	r6,r6,-4
   250f0:	21000104 	addi	r4,r4,4
   250f4:	29400104 	addi	r5,r5,4
   250f8:	39bff936 	bltu	r7,r6,250e0 <memcmp+0x50>
   250fc:	303fe91e 	bne	r6,zero,250a4 <memcmp+0x14>
   25100:	003ff506 	br	250d8 <memcmp+0x48>
   25104:	1885c83a 	sub	r2,r3,r2
   25108:	f800283a 	ret

0002510c <__register_exitproc>:
   2510c:	defffa04 	addi	sp,sp,-24
   25110:	008000b4 	movhi	r2,2
   25114:	109b9e04 	addi	r2,r2,28280
   25118:	dc000315 	stw	r16,12(sp)
   2511c:	14000017 	ldw	r16,0(r2)
   25120:	dc400415 	stw	r17,16(sp)
   25124:	dfc00515 	stw	ra,20(sp)
   25128:	80805217 	ldw	r2,328(r16)
   2512c:	2023883a 	mov	r17,r4
   25130:	10003e26 	beq	r2,zero,2522c <__register_exitproc+0x120>
   25134:	10c00117 	ldw	r3,4(r2)
   25138:	020007c4 	movi	r8,31
   2513c:	40c0180e 	bge	r8,r3,251a0 <__register_exitproc+0x94>
   25140:	00800034 	movhi	r2,0
   25144:	10800004 	addi	r2,r2,0
   25148:	1000061e 	bne	r2,zero,25164 <__register_exitproc+0x58>
   2514c:	00bfffc4 	movi	r2,-1
   25150:	dfc00517 	ldw	ra,20(sp)
   25154:	dc400417 	ldw	r17,16(sp)
   25158:	dc000317 	ldw	r16,12(sp)
   2515c:	dec00604 	addi	sp,sp,24
   25160:	f800283a 	ret
   25164:	01006404 	movi	r4,400
   25168:	d9400015 	stw	r5,0(sp)
   2516c:	d9800115 	stw	r6,4(sp)
   25170:	d9c00215 	stw	r7,8(sp)
   25174:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25178:	d9400017 	ldw	r5,0(sp)
   2517c:	d9800117 	ldw	r6,4(sp)
   25180:	d9c00217 	ldw	r7,8(sp)
   25184:	103ff126 	beq	r2,zero,2514c <__register_exitproc+0x40>
   25188:	80c05217 	ldw	r3,328(r16)
   2518c:	10000115 	stw	zero,4(r2)
   25190:	10c00015 	stw	r3,0(r2)
   25194:	80805215 	stw	r2,328(r16)
   25198:	10006215 	stw	zero,392(r2)
   2519c:	10006315 	stw	zero,396(r2)
   251a0:	10c00117 	ldw	r3,4(r2)
   251a4:	88000d1e 	bne	r17,zero,251dc <__register_exitproc+0xd0>
   251a8:	19000084 	addi	r4,r3,2
   251ac:	2109883a 	add	r4,r4,r4
   251b0:	18c00044 	addi	r3,r3,1
   251b4:	2109883a 	add	r4,r4,r4
   251b8:	1109883a 	add	r4,r2,r4
   251bc:	10c00115 	stw	r3,4(r2)
   251c0:	0005883a 	mov	r2,zero
   251c4:	21400015 	stw	r5,0(r4)
   251c8:	dfc00517 	ldw	ra,20(sp)
   251cc:	dc400417 	ldw	r17,16(sp)
   251d0:	dc000317 	ldw	r16,12(sp)
   251d4:	dec00604 	addi	sp,sp,24
   251d8:	f800283a 	ret
   251dc:	02400044 	movi	r9,1
   251e0:	12806217 	ldw	r10,392(r2)
   251e4:	48d2983a 	sll	r9,r9,r3
   251e8:	19000804 	addi	r4,r3,32
   251ec:	18d1883a 	add	r8,r3,r3
   251f0:	2109883a 	add	r4,r4,r4
   251f4:	4211883a 	add	r8,r8,r8
   251f8:	2109883a 	add	r4,r4,r4
   251fc:	1109883a 	add	r4,r2,r4
   25200:	1211883a 	add	r8,r2,r8
   25204:	5254b03a 	or	r10,r10,r9
   25208:	21c02215 	stw	r7,136(r4)
   2520c:	41802215 	stw	r6,136(r8)
   25210:	12806215 	stw	r10,392(r2)
   25214:	01000084 	movi	r4,2
   25218:	893fe31e 	bne	r17,r4,251a8 <__register_exitproc+0x9c>
   2521c:	11006317 	ldw	r4,396(r2)
   25220:	2252b03a 	or	r9,r4,r9
   25224:	12406315 	stw	r9,396(r2)
   25228:	003fdf06 	br	251a8 <__register_exitproc+0x9c>
   2522c:	008000f4 	movhi	r2,3
   25230:	10a29204 	addi	r2,r2,-30136
   25234:	80805215 	stw	r2,328(r16)
   25238:	003fbe06 	br	25134 <__register_exitproc+0x28>

0002523c <__call_exitprocs>:
   2523c:	008000b4 	movhi	r2,2
   25240:	109b9e04 	addi	r2,r2,28280
   25244:	10800017 	ldw	r2,0(r2)
   25248:	defff304 	addi	sp,sp,-52
   2524c:	df000b15 	stw	fp,44(sp)
   25250:	d8800015 	stw	r2,0(sp)
   25254:	10805204 	addi	r2,r2,328
   25258:	dd400815 	stw	r21,32(sp)
   2525c:	dfc00c15 	stw	ra,48(sp)
   25260:	ddc00a15 	stw	r23,40(sp)
   25264:	dd800915 	stw	r22,36(sp)
   25268:	dd000715 	stw	r20,28(sp)
   2526c:	dcc00615 	stw	r19,24(sp)
   25270:	dc800515 	stw	r18,20(sp)
   25274:	dc400415 	stw	r17,16(sp)
   25278:	dc000315 	stw	r16,12(sp)
   2527c:	d9000115 	stw	r4,4(sp)
   25280:	2839883a 	mov	fp,r5
   25284:	d8800215 	stw	r2,8(sp)
   25288:	057fffc4 	movi	r21,-1
   2528c:	d8800017 	ldw	r2,0(sp)
   25290:	ddc00217 	ldw	r23,8(sp)
   25294:	14805217 	ldw	r18,328(r2)
   25298:	90001726 	beq	r18,zero,252f8 <__call_exitprocs+0xbc>
   2529c:	94400117 	ldw	r17,4(r18)
   252a0:	8c3fffc4 	addi	r16,r17,-1
   252a4:	80001116 	blt	r16,zero,252ec <__call_exitprocs+0xb0>
   252a8:	8c400044 	addi	r17,r17,1
   252ac:	8427883a 	add	r19,r16,r16
   252b0:	8c63883a 	add	r17,r17,r17
   252b4:	95802204 	addi	r22,r18,136
   252b8:	9ce7883a 	add	r19,r19,r19
   252bc:	8c63883a 	add	r17,r17,r17
   252c0:	b4e7883a 	add	r19,r22,r19
   252c4:	9463883a 	add	r17,r18,r17
   252c8:	e0001726 	beq	fp,zero,25328 <__call_exitprocs+0xec>
   252cc:	8c87c83a 	sub	r3,r17,r18
   252d0:	b0c7883a 	add	r3,r22,r3
   252d4:	18c01e17 	ldw	r3,120(r3)
   252d8:	1f001326 	beq	r3,fp,25328 <__call_exitprocs+0xec>
   252dc:	843fffc4 	addi	r16,r16,-1
   252e0:	9cffff04 	addi	r19,r19,-4
   252e4:	8c7fff04 	addi	r17,r17,-4
   252e8:	857ff71e 	bne	r16,r21,252c8 <__call_exitprocs+0x8c>
   252ec:	00800034 	movhi	r2,0
   252f0:	10800004 	addi	r2,r2,0
   252f4:	10002a1e 	bne	r2,zero,253a0 <__call_exitprocs+0x164>
   252f8:	dfc00c17 	ldw	ra,48(sp)
   252fc:	df000b17 	ldw	fp,44(sp)
   25300:	ddc00a17 	ldw	r23,40(sp)
   25304:	dd800917 	ldw	r22,36(sp)
   25308:	dd400817 	ldw	r21,32(sp)
   2530c:	dd000717 	ldw	r20,28(sp)
   25310:	dcc00617 	ldw	r19,24(sp)
   25314:	dc800517 	ldw	r18,20(sp)
   25318:	dc400417 	ldw	r17,16(sp)
   2531c:	dc000317 	ldw	r16,12(sp)
   25320:	dec00d04 	addi	sp,sp,52
   25324:	f800283a 	ret
   25328:	91000117 	ldw	r4,4(r18)
   2532c:	88c00017 	ldw	r3,0(r17)
   25330:	213fffc4 	addi	r4,r4,-1
   25334:	24001526 	beq	r4,r16,2538c <__call_exitprocs+0x150>
   25338:	88000015 	stw	zero,0(r17)
   2533c:	183fe726 	beq	r3,zero,252dc <__call_exitprocs+0xa0>
   25340:	00800044 	movi	r2,1
   25344:	1408983a 	sll	r4,r2,r16
   25348:	91406217 	ldw	r5,392(r18)
   2534c:	95000117 	ldw	r20,4(r18)
   25350:	214a703a 	and	r5,r4,r5
   25354:	28000b26 	beq	r5,zero,25384 <__call_exitprocs+0x148>
   25358:	91406317 	ldw	r5,396(r18)
   2535c:	2148703a 	and	r4,r4,r5
   25360:	20000c1e 	bne	r4,zero,25394 <__call_exitprocs+0x158>
   25364:	99400017 	ldw	r5,0(r19)
   25368:	d9000117 	ldw	r4,4(sp)
   2536c:	183ee83a 	callr	r3
   25370:	90c00117 	ldw	r3,4(r18)
   25374:	1d3fc51e 	bne	r3,r20,2528c <__call_exitprocs+0x50>
   25378:	b8c00017 	ldw	r3,0(r23)
   2537c:	1cbfd726 	beq	r3,r18,252dc <__call_exitprocs+0xa0>
   25380:	003fc206 	br	2528c <__call_exitprocs+0x50>
   25384:	183ee83a 	callr	r3
   25388:	003ff906 	br	25370 <__call_exitprocs+0x134>
   2538c:	94000115 	stw	r16,4(r18)
   25390:	003fea06 	br	2533c <__call_exitprocs+0x100>
   25394:	99000017 	ldw	r4,0(r19)
   25398:	183ee83a 	callr	r3
   2539c:	003ff406 	br	25370 <__call_exitprocs+0x134>
   253a0:	90c00117 	ldw	r3,4(r18)
   253a4:	1800071e 	bne	r3,zero,253c4 <__call_exitprocs+0x188>
   253a8:	90c00017 	ldw	r3,0(r18)
   253ac:	18000926 	beq	r3,zero,253d4 <__call_exitprocs+0x198>
   253b0:	9009883a 	mov	r4,r18
   253b4:	b8c00015 	stw	r3,0(r23)
   253b8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   253bc:	bc800017 	ldw	r18,0(r23)
   253c0:	003fb506 	br	25298 <__call_exitprocs+0x5c>
   253c4:	90c00017 	ldw	r3,0(r18)
   253c8:	902f883a 	mov	r23,r18
   253cc:	1825883a 	mov	r18,r3
   253d0:	003fb106 	br	25298 <__call_exitprocs+0x5c>
   253d4:	0007883a 	mov	r3,zero
   253d8:	003ffb06 	br	253c8 <__call_exitprocs+0x18c>

000253dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   253dc:	defffc04 	addi	sp,sp,-16
   253e0:	df000315 	stw	fp,12(sp)
   253e4:	df000304 	addi	fp,sp,12
   253e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   253ec:	0001883a 	nop
   253f0:	e0bfff17 	ldw	r2,-4(fp)
   253f4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   253f8:	e0bffd17 	ldw	r2,-12(fp)
   253fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25400:	e0bffe17 	ldw	r2,-8(fp)
   25404:	10000226 	beq	r2,zero,25410 <_exit+0x34>
    ALT_SIM_FAIL();
   25408:	002af070 	cmpltui	zero,zero,43969
   2540c:	00000106 	br	25414 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   25410:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25414:	003fff06 	br	25414 <_exit+0x38>
