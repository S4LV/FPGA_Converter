
zzz.elf:     file format elf32-littlenios2
zzz.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006824 memsz 0x00006824 flags r-x
    LOAD off    0x00007844 vaddr 0x00016844 paddr 0x00018354 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x00009e64 vaddr 0x00019e64 paddr 0x00019e64 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000063a8  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002e4  00016560  00016560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  00016844  00018354  00007844  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00019e64  00019e64  00009e64  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009354  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a28  00000000  00000000  00009378  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00019e42  00000000  00000000  00009da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000064d8  00000000  00000000  00023be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000077d3  00000000  00000000  0002a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001234  00000000  00000000  00031890  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002635  00000000  00000000  00032ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000602a  00000000  00000000  000350f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0003b124  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  0003b138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003dc7b  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0003dc7e  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003dc8a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003dc8b  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0003dc8c  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0003dc97  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0003dca2  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000009  00000000  00000000  0003dcad  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000030  00000000  00000000  0003dcb6  2**0
                  CONTENTS, READONLY
 25 .jdi          00005000  00000000  00000000  0003dce6  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00040f95  00000000  00000000  00042ce6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00016560 l    d  .rodata	00000000 .rodata
00016844 l    d  .rwdata	00000000 .rwdata
00019e64 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../zzz_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 ctype_.c
0001667f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016844 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00012458 l     F .text	00000008 __fp_lock
00012460 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00013438 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013590 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000136ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000136d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000137d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000138cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000139b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013b94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018344 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013e08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013f48 l     F .text	00000038 alt_dev_reg
000171f4 l     O .rwdata	00001060 jtag_uart_0
00018254 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001423c l     F .text	00000204 altera_avalon_jtag_uart_irq
00014440 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00014c34 l     F .text	00000098 altera_avalon_uart_irq
00014ccc l     F .text	000000d8 altera_avalon_uart_rxirq
00014da4 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00014f34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00015188 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000154dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015968 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015ac0 l     F .text	00000050 alt_get_errno
00015b10 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000132fc g     F .text	00000064 _isatty_r
00013adc g     F .text	00000078 alt_main
00010680 g     F .text	00000084 _puts_r
00019eb4 g     O .bss	00000100 alt_irq
00013360 g     F .text	0000006c _lseek_r
00018354 g       *ABS*	00000000 __flash_rwdata_start
0001a144 g       *ABS*	00000000 __alt_heap_start
00013010 g     F .text	0000005c __sseek
000124fc g     F .text	0000010c __sinit
00012474 g     F .text	00000078 __sfmoreglue
00013b74 g     F .text	00000020 __malloc_unlock
000118e0 g     F .text	0000018c memmove
000124ec g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013294 g     F .text	00000068 _fstat_r
00019e70 g     O .bss	00000004 errno
00019e78 g     O .bss	00000004 alt_argv
00020318 g       *ABS*	00000000 _gp
00017074 g     O .rwdata	00000180 alt_fd_list
00015f14 g     F .text	00000090 alt_find_dev
000117a0 g     F .text	00000140 memcpy
00012468 g     F .text	0000000c _cleanup_r
00015a48 g     F .text	00000078 alt_io_redirect
00016560 g       *ABS*	00000000 __DTOR_END__
00010704 g     F .text	00000014 puts
00014640 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013558 g     F .text	00000008 __udivsi3
00013828 g     F .text	000000a4 isatty
00019e6c g     O .bss	00000004 __malloc_top_pad
00010a40 g     F .text	000004e4 __sfvwrite_r
00012068 g     F .text	00000064 _sbrk_r
000133cc g     F .text	0000006c _read_r
0001833c g     O .rwdata	00000004 alt_max_fd
00013144 g     F .text	0000013c _fclose_r
00012428 g     F .text	00000030 fflush
00019e68 g     O .bss	00000004 __malloc_max_sbrked_mem
00013a08 g     F .text	000000d4 lseek
0001831c g     O .rwdata	00000004 _global_impure_ptr
00011a6c g     F .text	000005fc _realloc_r
0001a144 g       *ABS*	00000000 __bss_end
00015878 g     F .text	000000f0 alt_iic_isr_register
00015df0 g     F .text	00000104 alt_tick
00014b8c g     F .text	000000a8 altera_avalon_uart_init
00018318 g     O .rwdata	00000004 __ctype_ptr
00012714 g     F .text	00000018 __fp_lock_all
0001582c g     F .text	0000004c alt_ic_irq_enabled
00015d58 g     F .text	00000098 alt_alarm_stop
00010a1c g     F .text	00000024 strtol
00019e80 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
0001704c g     O .rwdata	00000028 alt_dev_null
000154c0 g     F .text	0000001c alt_dcache_flush_all
00018354 g       *ABS*	00000000 __ram_rwdata_end
00018334 g     O .rwdata	00000008 alt_dev_list
00013e58 g     F .text	000000f0 write
00016844 g       *ABS*	00000000 __ram_rodata_end
00013728 g     F .text	000000b0 fstat
00013560 g     F .text	00000008 __umodsi3
0001a144 g       *ABS*	00000000 end
00010674 g     F .text	0000000c _atoi_r
000151d8 g     F .text	000001a8 altera_avalon_uart_write
0001417c g     F .text	000000c0 altera_avalon_jtag_uart_init
00016560 g       *ABS*	00000000 __CTOR_LIST__
0001bb80 g       *ABS*	00000000 __alt_stack_pointer
00014adc g     F .text	00000060 altera_avalon_uart_write_fd
00014b3c g     F .text	00000050 altera_avalon_uart_close_fd
00014858 g     F .text	00000224 altera_avalon_jtag_uart_write
00012704 g     F .text	00000004 __sfp_lock_acquire
000116a8 g     F .text	000000f8 memchr
00012880 g     F .text	000002d0 _free_r
00016384 g     F .text	000001a0 __call_exitprocs
00018324 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00019e84 g     O .bss	00000004 _alt_tick_rate
00019e88 g     O .bss	00000004 _alt_nticks
00013be4 g     F .text	000000f4 read
00013fb4 g     F .text	00000064 alt_sys_init
00016254 g     F .text	00000130 __register_exitproc
000144e4 g     F .text	00000068 altera_avalon_jtag_uart_close
00013568 g     F .text	00000028 __mulsi3
00016844 g       *ABS*	00000000 __ram_rwdata_start
00016560 g       *ABS*	00000000 __ram_rodata_start
00019e8c g     O .bss	00000028 __malloc_current_mallinfo
00014018 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000160b8 g     F .text	000000d4 alt_get_fd
000130e0 g     F .text	00000064 _close_r
000161d8 g     F .text	0000007c memcmp
000140d8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a144 g       *ABS*	00000000 __alt_stack_base
00014128 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000120cc g     F .text	00000174 __swsetup_r
00012608 g     F .text	000000fc __sfp
00016c44 g     O .rwdata	00000408 __malloc_av_
00012710 g     F .text	00000004 __sinit_lock_release
00012f34 g     F .text	00000054 __sread
00015fa4 g     F .text	00000114 alt_find_file
0001552c g     F .text	000000a0 alt_dev_llist_insert
00013b54 g     F .text	00000020 __malloc_lock
00013d58 g     F .text	000000b0 sbrk
00012240 g     F .text	000001e8 _fflush_r
00019e64 g       *ABS*	00000000 __bss_start
00012e58 g     F .text	000000dc memset
0001023c g     F .text	0000042c main
00019e7c g     O .bss	00000004 alt_envp
00019e64 g     O .bss	00000004 __malloc_max_total_mem
00014078 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001306c g     F .text	00000008 __sclose
0001bb80 g       *ABS*	00000000 __alt_heap_limit
00013280 g     F .text	00000014 fclose
000107a4 g     F .text	00000278 _strtol_r
00019fb4 g     O .bss	00000190 _atexit0
00010f24 g     F .text	00000784 _malloc_r
00018340 g     O .rwdata	00000004 alt_errno
00012b50 g     F .text	000000a8 _fwalk
000134ac g     F .text	00000050 __divsi3
00012744 g     F .text	0000013c _malloc_trim_r
00016560 g       *ABS*	00000000 __CTOR_END__
00016560 g       *ABS*	00000000 __flash_rodata_start
000101f4 g     F .text	00000048 control_set
00016560 g       *ABS*	00000000 __DTOR_LIST__
00013f80 g     F .text	00000034 alt_irq_init
00013cd8 g     F .text	00000080 alt_release_fd
0001618c g     F .text	00000014 atexit
00013074 g     F .text	0000006c _write_r
00018320 g     O .rwdata	00000004 _impure_ptr
00019e74 g     O .bss	00000004 alt_argc
00015628 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
0001272c g     F .text	00000018 __fp_unlock_all
0001832c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000156a0 g     F .text	00000050 alt_ic_isr_register
00018354 g       *ABS*	00000000 _edata
00014a7c g     F .text	00000060 altera_avalon_uart_read_fd
0001a144 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001454c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001578c g     F .text	000000a0 alt_ic_irq_disable
00012f88 g     F .text	00000088 __swrite
00018328 g     O .rwdata	00000004 __malloc_trim_threshold
00015ef4 g     F .text	00000020 altera_nios2_qsys_irq_init
000161a0 g     F .text	00000038 exit
00012bf8 g     F .text	000000b8 _fwalk_reent
000134fc g     F .text	0000005c __modsi3
0001bb80 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012708 g     F .text	00000004 __sfp_lock_release
00010668 g     F .text	0000000c atoi
0001657e g     O .rodata	00000101 _ctype_
00014ee0 g     F .text	00000054 altera_avalon_uart_close
00016524 g     F .text	0000003c _exit
00015380 g     F .text	00000140 alt_alarm_start
00012cb0 g     F .text	000001a8 __smakebuf_r
00010718 g     F .text	0000008c strlen
00015c00 g     F .text	00000158 open
00015684 g     F .text	0000001c alt_icache_flush_all
00018348 g     O .rwdata	00000004 alt_priority_mask
000156f0 g     F .text	0000009c alt_ic_irq_enable
00014f84 g     F .text	00000204 altera_avalon_uart_read
0001834c g     O .rwdata	00000008 alt_alarm_list
000155cc g     F .text	0000005c _do_ctors
000135e0 g     F .text	000000cc close
00013938 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0001270c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e7ad04 	addi	r3,r3,-24908
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	2127ad04 	addi	r4,r4,-24908
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	deeee014 	ori	sp,sp,48000
    movhi gp, %hi(_gp)
   101c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c4:	d680c614 	ori	gp,gp,792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a79914 	ori	r2,r2,40548

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e85114 	ori	r3,r3,41284

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00139380 	call	13938 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	0013adc0 	call	13adc <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <control_set>:
#define SEQ_DATA_REG_ADDR 3
#define SEQ_SIZE_REG_ADDR 4
#define CLK_DIV_CNT_REG_ADDR 5

void control_set(int data, int offset)
{
   101f4:	defffd04 	addi	sp,sp,-12
   101f8:	df000215 	stw	fp,8(sp)
   101fc:	df000204 	addi	fp,sp,8
   10200:	e13ffe15 	stw	r4,-8(fp)
   10204:	e17fff15 	stw	r5,-4(fp)
	IOWR(MYIP_0_BASE, offset, data);
   10208:	e0bfff17 	ldw	r2,-4(fp)
   1020c:	1085883a 	add	r2,r2,r2
   10210:	1085883a 	add	r2,r2,r2
   10214:	1007883a 	mov	r3,r2
   10218:	008000b4 	movhi	r2,2
   1021c:	10840004 	addi	r2,r2,4096
   10220:	1885883a 	add	r2,r3,r2
   10224:	e0fffe17 	ldw	r3,-8(fp)
   10228:	10c00035 	stwio	r3,0(r2)
}
   1022c:	e037883a 	mov	sp,fp
   10230:	df000017 	ldw	fp,0(sp)
   10234:	dec00104 	addi	sp,sp,4
   10238:	f800283a 	ret

0001023c <main>:



int main()
{
   1023c:	deffdd04 	addi	sp,sp,-140
   10240:	dfc02215 	stw	ra,136(sp)
   10244:	df002115 	stw	fp,132(sp)
   10248:	df002104 	addi	fp,sp,132
  printf("Hello from Nios II!\n");
   1024c:	01000074 	movhi	r4,1
   10250:	21195804 	addi	r4,r4,25952
   10254:	00107040 	call	10704 <puts>
  int i;
  int x = 0;
   10258:	e03fdf15 	stw	zero,-132(fp)
  char xd;
  char readStr[17];
  int y = 1;
   1025c:	00800044 	movi	r2,1
   10260:	e0bfe515 	stw	r2,-108(fp)
  char *cmd_ptr = "1234xd";
   10264:	00800074 	movhi	r2,1
   10268:	10995d04 	addi	r2,r2,25972
   1026c:	e0bfe615 	stw	r2,-104(fp)
  char *p;
  char temporary[1];
  char buffer[] = { '1','2','3','4','x','d'};
   10270:	00800c44 	movi	r2,49
   10274:	e0bff685 	stb	r2,-38(fp)
   10278:	00800c84 	movi	r2,50
   1027c:	e0bff6c5 	stb	r2,-37(fp)
   10280:	00800cc4 	movi	r2,51
   10284:	e0bff705 	stb	r2,-36(fp)
   10288:	00800d04 	movi	r2,52
   1028c:	e0bff745 	stb	r2,-35(fp)
   10290:	00801e04 	movi	r2,120
   10294:	e0bff785 	stb	r2,-34(fp)
   10298:	00801904 	movi	r2,100
   1029c:	e0bff7c5 	stb	r2,-33(fp)
  char CMD1[1];
  char CMD2[8];
  char CMD3[7];
  int index = 0;
   102a0:	e03fe015 	stw	zero,-128(fp)
  int commandNumber = 0;
   102a4:	e03fe115 	stw	zero,-124(fp)
  int command2Number = 0;
   102a8:	e03fe215 	stw	zero,-120(fp)
  int command3Number = 0;
   102ac:	e03fe315 	stw	zero,-116(fp)
  alt_u8 status;
  IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE,0x0);
   102b0:	0007883a 	mov	r3,zero
   102b4:	008000b4 	movhi	r2,2
   102b8:	10842304 	addi	r2,r2,4236
   102bc:	10c00035 	stwio	r3,0(r2)
  	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE,0x0);
   102c0:	0007883a 	mov	r3,zero
   102c4:	008000b4 	movhi	r2,2
   102c8:	10842204 	addi	r2,r2,4232
   102cc:	10c00035 	stwio	r3,0(r2)


  	//test_convertation
  	char testcmd1[1] = {'1',};
   102d0:	00800c44 	movi	r2,49
   102d4:	e0bffc05 	stb	r2,-16(fp)
  	char testcmd3[8] = {'0','1','2','3','4','5','6','7'};
   102d8:	00800c04 	movi	r2,48
   102dc:	e0bffc45 	stb	r2,-15(fp)
   102e0:	00800c44 	movi	r2,49
   102e4:	e0bffc85 	stb	r2,-14(fp)
   102e8:	00800c84 	movi	r2,50
   102ec:	e0bffcc5 	stb	r2,-13(fp)
   102f0:	00800cc4 	movi	r2,51
   102f4:	e0bffd05 	stb	r2,-12(fp)
   102f8:	00800d04 	movi	r2,52
   102fc:	e0bffd45 	stb	r2,-11(fp)
   10300:	00800d44 	movi	r2,53
   10304:	e0bffd85 	stb	r2,-10(fp)
   10308:	00800d84 	movi	r2,54
   1030c:	e0bffdc5 	stb	r2,-9(fp)
   10310:	00800dc4 	movi	r2,55
   10314:	e0bffe05 	stb	r2,-8(fp)
  	char testcmd2[6] = {'0','0','0','1','2','5'};
   10318:	00800c04 	movi	r2,48
   1031c:	e0bffe45 	stb	r2,-7(fp)
   10320:	00800c04 	movi	r2,48
   10324:	e0bffe85 	stb	r2,-6(fp)
   10328:	00800c04 	movi	r2,48
   1032c:	e0bffec5 	stb	r2,-5(fp)
   10330:	00800c44 	movi	r2,49
   10334:	e0bfff05 	stb	r2,-4(fp)
   10338:	00800c84 	movi	r2,50
   1033c:	e0bfff45 	stb	r2,-3(fp)
   10340:	00800d44 	movi	r2,53
   10344:	e0bfff85 	stb	r2,-2(fp)

  	int convertion1 =  testcmd1[0] - '0';
   10348:	e0bffc03 	ldbu	r2,-16(fp)
   1034c:	10803fcc 	andi	r2,r2,255
   10350:	1080201c 	xori	r2,r2,128
   10354:	10bfe004 	addi	r2,r2,-128
   10358:	10bff404 	addi	r2,r2,-48
   1035c:	e0bfe715 	stw	r2,-100(fp)

	int convertion2 = atoi(testcmd2);
   10360:	e0bffe44 	addi	r2,fp,-7
   10364:	1009883a 	mov	r4,r2
   10368:	00106680 	call	10668 <atoi>
   1036c:	e0bfe815 	stw	r2,-96(fp)
	 int tick_num = 0;
   10370:	e03fe915 	stw	zero,-92(fp)
	 int idle_flag= 0 ;
   10374:	e03fea15 	stw	zero,-88(fp)
   10378:	00000106 	br	10380 <main+0x144>
				x++;
			}
			}


  }
   1037c:	0001883a 	nop
	//long convertion3 = strtoul(testcmd3);
  while(1)
  {


	    status= IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & 128;
   10380:	008000b4 	movhi	r2,2
   10384:	10842204 	addi	r2,r2,4232
   10388:	10800037 	ldwio	r2,0(r2)
   1038c:	1007883a 	mov	r3,r2
   10390:	00bfe004 	movi	r2,-128
   10394:	1884703a 	and	r2,r3,r2
   10398:	e0bfeb05 	stb	r2,-84(fp)
	    //status = status & 128;
		  if(x>16)
   1039c:	e0bfdf17 	ldw	r2,-132(fp)
   103a0:	10800450 	cmplti	r2,r2,17
   103a4:	1000911e 	bne	r2,zero,105ec <main+0x3b0>
		  {
			  x = 0;
   103a8:	e03fdf15 	stw	zero,-132(fp)
			  commandNumber = 0;
   103ac:	e03fe115 	stw	zero,-124(fp)
			  command2Number = 0;
   103b0:	e03fe215 	stw	zero,-120(fp)
			  command3Number = 0;
   103b4:	e03fe315 	stw	zero,-116(fp)
			  for(index=0; index<17; index++)
   103b8:	e03fe015 	stw	zero,-128(fp)
   103bc:	00003606 	br	10498 <main+0x25c>
			  {
				  if(readStr[index] == 'n')
   103c0:	e0fff204 	addi	r3,fp,-56
   103c4:	e0bfe017 	ldw	r2,-128(fp)
   103c8:	1885883a 	add	r2,r3,r2
   103cc:	10800003 	ldbu	r2,0(r2)
   103d0:	10803fcc 	andi	r2,r2,255
   103d4:	1080201c 	xori	r2,r2,128
   103d8:	10bfe004 	addi	r2,r2,-128
   103dc:	10801b98 	cmpnei	r2,r2,110
   103e0:	1000061e 	bne	r2,zero,103fc <main+0x1c0>
				  {
					  commandNumber++;
   103e4:	e0bfe117 	ldw	r2,-124(fp)
   103e8:	10800044 	addi	r2,r2,1
   103ec:	e0bfe115 	stw	r2,-124(fp)
					  index++;
   103f0:	e0bfe017 	ldw	r2,-128(fp)
   103f4:	10800044 	addi	r2,r2,1
   103f8:	e0bfe015 	stw	r2,-128(fp)
				  }
				  switch(commandNumber)
   103fc:	e0bfe117 	ldw	r2,-124(fp)
   10400:	10c00060 	cmpeqi	r3,r2,1
   10404:	1800091e 	bne	r3,zero,1042c <main+0x1f0>
   10408:	10c000a0 	cmpeqi	r3,r2,2
   1040c:	1800131e 	bne	r3,zero,1045c <main+0x220>
   10410:	10001e1e 	bne	r2,zero,1048c <main+0x250>
				  {
				  case 0:
					  CMD1[0] = readStr[index];
   10414:	e0fff204 	addi	r3,fp,-56
   10418:	e0bfe017 	ldw	r2,-128(fp)
   1041c:	1885883a 	add	r2,r3,r2
   10420:	10800003 	ldbu	r2,0(r2)
   10424:	e0bff805 	stb	r2,-32(fp)
					  break;
   10428:	00001806 	br	1048c <main+0x250>
				  case 1:
					  CMD2[command2Number++] = readStr[index];
   1042c:	e0fff204 	addi	r3,fp,-56
   10430:	e0bfe017 	ldw	r2,-128(fp)
   10434:	1885883a 	add	r2,r3,r2
   10438:	10c00003 	ldbu	r3,0(r2)
   1043c:	e13ff844 	addi	r4,fp,-31
   10440:	e0bfe217 	ldw	r2,-120(fp)
   10444:	2085883a 	add	r2,r4,r2
   10448:	10c00005 	stb	r3,0(r2)
   1044c:	e0bfe217 	ldw	r2,-120(fp)
   10450:	10800044 	addi	r2,r2,1
   10454:	e0bfe215 	stw	r2,-120(fp)
					  break;
   10458:	00000c06 	br	1048c <main+0x250>
				  case 2:
					  CMD3[command3Number++] = readStr[index];
   1045c:	e0fff204 	addi	r3,fp,-56
   10460:	e0bfe017 	ldw	r2,-128(fp)
   10464:	1885883a 	add	r2,r3,r2
   10468:	10c00003 	ldbu	r3,0(r2)
   1046c:	e13ffa44 	addi	r4,fp,-23
   10470:	e0bfe317 	ldw	r2,-116(fp)
   10474:	2085883a 	add	r2,r4,r2
   10478:	10c00005 	stb	r3,0(r2)
   1047c:	e0bfe317 	ldw	r2,-116(fp)
   10480:	10800044 	addi	r2,r2,1
   10484:	e0bfe315 	stw	r2,-116(fp)
					  break;
   10488:	0001883a 	nop
		  {
			  x = 0;
			  commandNumber = 0;
			  command2Number = 0;
			  command3Number = 0;
			  for(index=0; index<17; index++)
   1048c:	e0bfe017 	ldw	r2,-128(fp)
   10490:	10800044 	addi	r2,r2,1
   10494:	e0bfe015 	stw	r2,-128(fp)
   10498:	e0bfe017 	ldw	r2,-128(fp)
   1049c:	10800450 	cmplti	r2,r2,17
   104a0:	103fc71e 	bne	r2,zero,103c0 <main+0x184>
				  case 2:
					  CMD3[command3Number++] = readStr[index];
					  break;
				  }
			  }
			  CMD3[6]='\0';
   104a4:	e03ffbc5 	stb	zero,-17(fp)
			  tick_num= atoi(CMD3);// max 125 min 208333
   104a8:	e0bffa44 	addi	r2,fp,-23
   104ac:	1009883a 	mov	r4,r2
   104b0:	00106680 	call	10668 <atoi>
   104b4:	e0bfe915 	stw	r2,-92(fp)
			  idle_flag= CMD1[0]- '0';// flag idle
   104b8:	e0bff803 	ldbu	r2,-32(fp)
   104bc:	10803fcc 	andi	r2,r2,255
   104c0:	1080201c 	xori	r2,r2,128
   104c4:	10bfe004 	addi	r2,r2,-128
   104c8:	10bff404 	addi	r2,r2,-48
   104cc:	e0bfea15 	stw	r2,-88(fp)


			  if(idle_flag == 1)
   104d0:	e0bfea17 	ldw	r2,-88(fp)
   104d4:	10800058 	cmpnei	r2,r2,1
   104d8:	1000401e 	bne	r2,zero,105dc <main+0x3a0>
			  {
				  control_set(0, CTRL_REG_ADDR);
   104dc:	0009883a 	mov	r4,zero
   104e0:	01400044 	movi	r5,1
   104e4:	00101f40 	call	101f4 <control_set>
				  //sequence
				control_set(0,SEQ_ADDR_REG_ADDR);
   104e8:	0009883a 	mov	r4,zero
   104ec:	01400084 	movi	r5,2
   104f0:	00101f40 	call	101f4 <control_set>
				control_set(8,SEQ_SIZE_REG_ADDR);
   104f4:	01000204 	movi	r4,8
   104f8:	01400104 	movi	r5,4
   104fc:	00101f40 	call	101f4 <control_set>
				for (j=0;j<8;j++){
   10500:	e03fe415 	stw	zero,-112(fp)
   10504:	00000e06 	br	10540 <main+0x304>
					control_set((CMD2[j]- '0'),SEQ_DATA_REG_ADDR);
   10508:	e0fff844 	addi	r3,fp,-31
   1050c:	e0bfe417 	ldw	r2,-112(fp)
   10510:	1885883a 	add	r2,r3,r2
   10514:	10800003 	ldbu	r2,0(r2)
   10518:	10803fcc 	andi	r2,r2,255
   1051c:	1080201c 	xori	r2,r2,128
   10520:	10bfe004 	addi	r2,r2,-128
   10524:	10bff404 	addi	r2,r2,-48
   10528:	1009883a 	mov	r4,r2
   1052c:	014000c4 	movi	r5,3
   10530:	00101f40 	call	101f4 <control_set>
			  {
				  control_set(0, CTRL_REG_ADDR);
				  //sequence
				control_set(0,SEQ_ADDR_REG_ADDR);
				control_set(8,SEQ_SIZE_REG_ADDR);
				for (j=0;j<8;j++){
   10534:	e0bfe417 	ldw	r2,-112(fp)
   10538:	10800044 	addi	r2,r2,1
   1053c:	e0bfe415 	stw	r2,-112(fp)
   10540:	e0bfe417 	ldw	r2,-112(fp)
   10544:	10800210 	cmplti	r2,r2,8
   10548:	103fef1e 	bne	r2,zero,10508 <main+0x2cc>
					control_set((CMD2[j]- '0'),SEQ_DATA_REG_ADDR);
			  }
				//ticks number

				control_set(tick_num,CLK_DIV_CNT_REG_ADDR);
   1054c:	e13fe917 	ldw	r4,-92(fp)
   10550:	01400144 	movi	r5,5
   10554:	00101f40 	call	101f4 <control_set>
				int testingStatus = IORD(MYIP_0_BASE,STATUS_REG_ADDR);
   10558:	008000b4 	movhi	r2,2
   1055c:	10840004 	addi	r2,r2,4096
   10560:	10800037 	ldwio	r2,0(r2)
   10564:	e0bfec15 	stw	r2,-80(fp)
				int testingWriteTicks = IORD(MYIP_0_BASE, CLK_DIV_CNT_REG_ADDR);
   10568:	008000b4 	movhi	r2,2
   1056c:	10840504 	addi	r2,r2,4116
   10570:	10800037 	ldwio	r2,0(r2)
   10574:	e0bfed15 	stw	r2,-76(fp)
				int testingSeqSize = IORD(MYIP_0_BASE, SEQ_SIZE_REG_ADDR);
   10578:	008000b4 	movhi	r2,2
   1057c:	10840404 	addi	r2,r2,4112
   10580:	10800037 	ldwio	r2,0(r2)
   10584:	e0bfee15 	stw	r2,-72(fp)
				int testingSeqAddr = IORD(MYIP_0_BASE, SEQ_ADDR_REG_ADDR);
   10588:	008000b4 	movhi	r2,2
   1058c:	10840204 	addi	r2,r2,4104
   10590:	10800037 	ldwio	r2,0(r2)
   10594:	e0bfef15 	stw	r2,-68(fp)
				int testingSeqCtlr = IORD(MYIP_0_BASE, CTRL_REG_ADDR);
   10598:	008000b4 	movhi	r2,2
   1059c:	10840104 	addi	r2,r2,4100
   105a0:	10800037 	ldwio	r2,0(r2)
   105a4:	e0bff015 	stw	r2,-64(fp)

					 int xd = 0;
				 }
*/
				//start
				control_set(1, CTRL_REG_ADDR);
   105a8:	01000044 	movi	r4,1
   105ac:	01400044 	movi	r5,1
   105b0:	00101f40 	call	101f4 <control_set>
				 testingSeqCtlr = IORD(MYIP_0_BASE, CTRL_REG_ADDR);
   105b4:	008000b4 	movhi	r2,2
   105b8:	10840104 	addi	r2,r2,4100
   105bc:	10800037 	ldwio	r2,0(r2)
   105c0:	e0bff015 	stw	r2,-64(fp)
				testingStatus = IORD(MYIP_0_BASE,STATUS_REG_ADDR);
   105c4:	008000b4 	movhi	r2,2
   105c8:	10840004 	addi	r2,r2,4096
   105cc:	10800037 	ldwio	r2,0(r2)
   105d0:	e0bfec15 	stw	r2,-80(fp)
				int xd = 0;
   105d4:	e03ff115 	stw	zero,-60(fp)
   105d8:	00000306 	br	105e8 <main+0x3ac>
			  }
			  else{
				  control_set(0, CTRL_REG_ADDR);
   105dc:	0009883a 	mov	r4,zero
   105e0:	01400044 	movi	r5,1
   105e4:	00101f40 	call	101f4 <control_set>
			  }
			  command3Number = 0;//only for debuggin
   105e8:	e03fe315 	stw	zero,-116(fp)




		  }
		if((status)==ALTERA_AVALON_UART_STATUS_RRDY_MSK	){	// check if reception ready{
   105ec:	e0bfeb03 	ldbu	r2,-84(fp)
   105f0:	10802018 	cmpnei	r2,r2,128
   105f4:	103f611e 	bne	r2,zero,1037c <main+0x140>


			readStr[x]=IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   105f8:	008000b4 	movhi	r2,2
   105fc:	10842004 	addi	r2,r2,4224
   10600:	10800037 	ldwio	r2,0(r2)
   10604:	1007883a 	mov	r3,r2
   10608:	e13ff204 	addi	r4,fp,-56
   1060c:	e0bfdf17 	ldw	r2,-132(fp)
   10610:	2085883a 	add	r2,r4,r2
   10614:	10c00005 	stb	r3,0(r2)
			status= IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & 128;			//update status register
   10618:	008000b4 	movhi	r2,2
   1061c:	10842204 	addi	r2,r2,4232
   10620:	10800037 	ldwio	r2,0(r2)
   10624:	1007883a 	mov	r3,r2
   10628:	00bfe004 	movi	r2,-128
   1062c:	1884703a 	and	r2,r3,r2
   10630:	e0bfeb05 	stb	r2,-84(fp)
			if(readStr[x] != '\r')
   10634:	e0fff204 	addi	r3,fp,-56
   10638:	e0bfdf17 	ldw	r2,-132(fp)
   1063c:	1885883a 	add	r2,r3,r2
   10640:	10800003 	ldbu	r2,0(r2)
   10644:	10803fcc 	andi	r2,r2,255
   10648:	1080201c 	xori	r2,r2,128
   1064c:	10bfe004 	addi	r2,r2,-128
   10650:	10800360 	cmpeqi	r2,r2,13
   10654:	103f491e 	bne	r2,zero,1037c <main+0x140>
			{
				//readStr[x]=IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);//receive character
				//status= IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & 128;			//update status register
				x++;
   10658:	e0bfdf17 	ldw	r2,-132(fp)
   1065c:	10800044 	addi	r2,r2,1
   10660:	e0bfdf15 	stw	r2,-132(fp)
			}
			}


  }
   10664:	003f4506 	br	1037c <main+0x140>

00010668 <atoi>:
   10668:	000b883a 	mov	r5,zero
   1066c:	01800284 	movi	r6,10
   10670:	0010a1c1 	jmpi	10a1c <strtol>

00010674 <_atoi_r>:
   10674:	000d883a 	mov	r6,zero
   10678:	01c00284 	movi	r7,10
   1067c:	00107a41 	jmpi	107a4 <_strtol_r>

00010680 <_puts_r>:
   10680:	defff604 	addi	sp,sp,-40
   10684:	dc400815 	stw	r17,32(sp)
   10688:	2023883a 	mov	r17,r4
   1068c:	2809883a 	mov	r4,r5
   10690:	dc000715 	stw	r16,28(sp)
   10694:	dfc00915 	stw	ra,36(sp)
   10698:	2821883a 	mov	r16,r5
   1069c:	00107180 	call	10718 <strlen>
   106a0:	10c00044 	addi	r3,r2,1
   106a4:	d8800115 	stw	r2,4(sp)
   106a8:	89400217 	ldw	r5,8(r17)
   106ac:	00800074 	movhi	r2,1
   106b0:	10995f04 	addi	r2,r2,25980
   106b4:	d8800215 	stw	r2,8(sp)
   106b8:	00800044 	movi	r2,1
   106bc:	d8800315 	stw	r2,12(sp)
   106c0:	8809883a 	mov	r4,r17
   106c4:	00800084 	movi	r2,2
   106c8:	d9800404 	addi	r6,sp,16
   106cc:	dc000015 	stw	r16,0(sp)
   106d0:	d8c00615 	stw	r3,24(sp)
   106d4:	dec00415 	stw	sp,16(sp)
   106d8:	d8800515 	stw	r2,20(sp)
   106dc:	0010a400 	call	10a40 <__sfvwrite_r>
   106e0:	1000061e 	bne	r2,zero,106fc <_puts_r+0x7c>
   106e4:	00800284 	movi	r2,10
   106e8:	dfc00917 	ldw	ra,36(sp)
   106ec:	dc400817 	ldw	r17,32(sp)
   106f0:	dc000717 	ldw	r16,28(sp)
   106f4:	dec00a04 	addi	sp,sp,40
   106f8:	f800283a 	ret
   106fc:	00bfffc4 	movi	r2,-1
   10700:	003ff906 	br	106e8 <_puts_r+0x68>

00010704 <puts>:
   10704:	008000b4 	movhi	r2,2
   10708:	10a0c804 	addi	r2,r2,-31968
   1070c:	200b883a 	mov	r5,r4
   10710:	11000017 	ldw	r4,0(r2)
   10714:	00106801 	jmpi	10680 <_puts_r>

00010718 <strlen>:
   10718:	208000cc 	andi	r2,r4,3
   1071c:	10001f1e 	bne	r2,zero,1079c <strlen+0x84>
   10720:	20800017 	ldw	r2,0(r4)
   10724:	01ffbff4 	movhi	r7,65279
   10728:	39ffbfc4 	addi	r7,r7,-257
   1072c:	01a02074 	movhi	r6,32897
   10730:	31a02004 	addi	r6,r6,-32640
   10734:	11c7883a 	add	r3,r2,r7
   10738:	0084303a 	nor	r2,zero,r2
   1073c:	1886703a 	and	r3,r3,r2
   10740:	1986703a 	and	r3,r3,r6
   10744:	2005883a 	mov	r2,r4
   10748:	1800101e 	bne	r3,zero,1078c <strlen+0x74>
   1074c:	10800104 	addi	r2,r2,4
   10750:	10c00017 	ldw	r3,0(r2)
   10754:	19cb883a 	add	r5,r3,r7
   10758:	00c6303a 	nor	r3,zero,r3
   1075c:	28c6703a 	and	r3,r5,r3
   10760:	1986703a 	and	r3,r3,r6
   10764:	1800091e 	bne	r3,zero,1078c <strlen+0x74>
   10768:	10800104 	addi	r2,r2,4
   1076c:	10c00017 	ldw	r3,0(r2)
   10770:	19cb883a 	add	r5,r3,r7
   10774:	00c6303a 	nor	r3,zero,r3
   10778:	28c6703a 	and	r3,r5,r3
   1077c:	1986703a 	and	r3,r3,r6
   10780:	183ff226 	beq	r3,zero,1074c <strlen+0x34>
   10784:	00000106 	br	1078c <strlen+0x74>
   10788:	10800044 	addi	r2,r2,1
   1078c:	10c00007 	ldb	r3,0(r2)
   10790:	183ffd1e 	bne	r3,zero,10788 <strlen+0x70>
   10794:	1105c83a 	sub	r2,r2,r4
   10798:	f800283a 	ret
   1079c:	2005883a 	mov	r2,r4
   107a0:	003ffa06 	br	1078c <strlen+0x74>

000107a4 <_strtol_r>:
   107a4:	defff304 	addi	sp,sp,-52
   107a8:	008000b4 	movhi	r2,2
   107ac:	10a0c604 	addi	r2,r2,-31976
   107b0:	df000b15 	stw	fp,44(sp)
   107b4:	17000017 	ldw	fp,0(r2)
   107b8:	ddc00a15 	stw	r23,40(sp)
   107bc:	dd000715 	stw	r20,28(sp)
   107c0:	dcc00615 	stw	r19,24(sp)
   107c4:	dc000315 	stw	r16,12(sp)
   107c8:	dfc00c15 	stw	ra,48(sp)
   107cc:	dd800915 	stw	r22,36(sp)
   107d0:	dd400815 	stw	r21,32(sp)
   107d4:	dc800515 	stw	r18,20(sp)
   107d8:	dc400415 	stw	r17,16(sp)
   107dc:	2827883a 	mov	r19,r5
   107e0:	d9000215 	stw	r4,8(sp)
   107e4:	3029883a 	mov	r20,r6
   107e8:	382f883a 	mov	r23,r7
   107ec:	2821883a 	mov	r16,r5
   107f0:	84400007 	ldb	r17,0(r16)
   107f4:	84000044 	addi	r16,r16,1
   107f8:	e445883a 	add	r2,fp,r17
   107fc:	10800003 	ldbu	r2,0(r2)
   10800:	1080020c 	andi	r2,r2,8
   10804:	10803fcc 	andi	r2,r2,255
   10808:	1080201c 	xori	r2,r2,128
   1080c:	10bfe004 	addi	r2,r2,-128
   10810:	103ff71e 	bne	r2,zero,107f0 <_strtol_r+0x4c>
   10814:	00800b44 	movi	r2,45
   10818:	88806d26 	beq	r17,r2,109d0 <_strtol_r+0x22c>
   1081c:	00800ac4 	movi	r2,43
   10820:	88807026 	beq	r17,r2,109e4 <_strtol_r+0x240>
   10824:	d8000015 	stw	zero,0(sp)
   10828:	b800471e 	bne	r23,zero,10948 <_strtol_r+0x1a4>
   1082c:	00800c04 	movi	r2,48
   10830:	88804926 	beq	r17,r2,10958 <_strtol_r+0x1b4>
   10834:	05c00284 	movi	r23,10
   10838:	b825883a 	mov	r18,r23
   1083c:	d9000017 	ldw	r4,0(sp)
   10840:	20006026 	beq	r4,zero,109c4 <_strtol_r+0x220>
   10844:	05600034 	movhi	r21,32768
   10848:	a809883a 	mov	r4,r21
   1084c:	900b883a 	mov	r5,r18
   10850:	00135600 	call	13560 <__umodsi3>
   10854:	a809883a 	mov	r4,r21
   10858:	900b883a 	mov	r5,r18
   1085c:	d8800115 	stw	r2,4(sp)
   10860:	00135580 	call	13558 <__udivsi3>
   10864:	e447883a 	add	r3,fp,r17
   10868:	18c00003 	ldbu	r3,0(r3)
   1086c:	102b883a 	mov	r21,r2
   10870:	000d883a 	mov	r6,zero
   10874:	1940010c 	andi	r5,r3,4
   10878:	29403fcc 	andi	r5,r5,255
   1087c:	2940201c 	xori	r5,r5,128
   10880:	297fe004 	addi	r5,r5,-128
   10884:	0009883a 	mov	r4,zero
   10888:	05bfffc4 	movi	r22,-1
   1088c:	28001226 	beq	r5,zero,108d8 <_strtol_r+0x134>
   10890:	8c7ff404 	addi	r17,r17,-48
   10894:	8dc0170e 	bge	r17,r23,108f4 <_strtol_r+0x150>
   10898:	35800626 	beq	r6,r22,108b4 <_strtol_r+0x110>
   1089c:	a9003a36 	bltu	r21,r4,10988 <_strtol_r+0x1e4>
   108a0:	25403726 	beq	r4,r21,10980 <_strtol_r+0x1dc>
   108a4:	900b883a 	mov	r5,r18
   108a8:	00135680 	call	13568 <__mulsi3>
   108ac:	8889883a 	add	r4,r17,r2
   108b0:	01800044 	movi	r6,1
   108b4:	84400007 	ldb	r17,0(r16)
   108b8:	84000044 	addi	r16,r16,1
   108bc:	e447883a 	add	r3,fp,r17
   108c0:	18c00003 	ldbu	r3,0(r3)
   108c4:	1940010c 	andi	r5,r3,4
   108c8:	29403fcc 	andi	r5,r5,255
   108cc:	2940201c 	xori	r5,r5,128
   108d0:	297fe004 	addi	r5,r5,-128
   108d4:	283fee1e 	bne	r5,zero,10890 <_strtol_r+0xec>
   108d8:	188000cc 	andi	r2,r3,3
   108dc:	10000526 	beq	r2,zero,108f4 <_strtol_r+0x150>
   108e0:	18c0004c 	andi	r3,r3,1
   108e4:	18002a26 	beq	r3,zero,10990 <_strtol_r+0x1ec>
   108e8:	00800dc4 	movi	r2,55
   108ec:	88a3c83a 	sub	r17,r17,r2
   108f0:	8dffe916 	blt	r17,r23,10898 <_strtol_r+0xf4>
   108f4:	00bfffc4 	movi	r2,-1
   108f8:	30802826 	beq	r6,r2,1099c <_strtol_r+0x1f8>
   108fc:	d8800017 	ldw	r2,0(sp)
   10900:	10000126 	beq	r2,zero,10908 <_strtol_r+0x164>
   10904:	0109c83a 	sub	r4,zero,r4
   10908:	2005883a 	mov	r2,r4
   1090c:	a0000226 	beq	r20,zero,10918 <_strtol_r+0x174>
   10910:	30002a1e 	bne	r6,zero,109bc <_strtol_r+0x218>
   10914:	a4c00015 	stw	r19,0(r20)
   10918:	dfc00c17 	ldw	ra,48(sp)
   1091c:	df000b17 	ldw	fp,44(sp)
   10920:	ddc00a17 	ldw	r23,40(sp)
   10924:	dd800917 	ldw	r22,36(sp)
   10928:	dd400817 	ldw	r21,32(sp)
   1092c:	dd000717 	ldw	r20,28(sp)
   10930:	dcc00617 	ldw	r19,24(sp)
   10934:	dc800517 	ldw	r18,20(sp)
   10938:	dc400417 	ldw	r17,16(sp)
   1093c:	dc000317 	ldw	r16,12(sp)
   10940:	dec00d04 	addi	sp,sp,52
   10944:	f800283a 	ret
   10948:	00800404 	movi	r2,16
   1094c:	b8bfba1e 	bne	r23,r2,10838 <_strtol_r+0x94>
   10950:	00800c04 	movi	r2,48
   10954:	88bfb81e 	bne	r17,r2,10838 <_strtol_r+0x94>
   10958:	80800007 	ldb	r2,0(r16)
   1095c:	00c01e04 	movi	r3,120
   10960:	10c02626 	beq	r2,r3,109fc <_strtol_r+0x258>
   10964:	00c01604 	movi	r3,88
   10968:	10c02426 	beq	r2,r3,109fc <_strtol_r+0x258>
   1096c:	b800281e 	bne	r23,zero,10a10 <_strtol_r+0x26c>
   10970:	04800204 	movi	r18,8
   10974:	04400c04 	movi	r17,48
   10978:	902f883a 	mov	r23,r18
   1097c:	003faf06 	br	1083c <_strtol_r+0x98>
   10980:	d8800117 	ldw	r2,4(sp)
   10984:	147fc70e 	bge	r2,r17,108a4 <_strtol_r+0x100>
   10988:	01bfffc4 	movi	r6,-1
   1098c:	003fc906 	br	108b4 <_strtol_r+0x110>
   10990:	008015c4 	movi	r2,87
   10994:	88a3c83a 	sub	r17,r17,r2
   10998:	003fd506 	br	108f0 <_strtol_r+0x14c>
   1099c:	d9000017 	ldw	r4,0(sp)
   109a0:	2000141e 	bne	r4,zero,109f4 <_strtol_r+0x250>
   109a4:	00a00034 	movhi	r2,32768
   109a8:	10bfffc4 	addi	r2,r2,-1
   109ac:	d9000217 	ldw	r4,8(sp)
   109b0:	00c00884 	movi	r3,34
   109b4:	20c00015 	stw	r3,0(r4)
   109b8:	a03fd726 	beq	r20,zero,10918 <_strtol_r+0x174>
   109bc:	84ffffc4 	addi	r19,r16,-1
   109c0:	003fd406 	br	10914 <_strtol_r+0x170>
   109c4:	05600034 	movhi	r21,32768
   109c8:	ad7fffc4 	addi	r21,r21,-1
   109cc:	003f9e06 	br	10848 <_strtol_r+0xa4>
   109d0:	00800044 	movi	r2,1
   109d4:	84400007 	ldb	r17,0(r16)
   109d8:	d8800015 	stw	r2,0(sp)
   109dc:	80a1883a 	add	r16,r16,r2
   109e0:	003f9106 	br	10828 <_strtol_r+0x84>
   109e4:	84400007 	ldb	r17,0(r16)
   109e8:	d8000015 	stw	zero,0(sp)
   109ec:	84000044 	addi	r16,r16,1
   109f0:	003f8d06 	br	10828 <_strtol_r+0x84>
   109f4:	00a00034 	movhi	r2,32768
   109f8:	003fec06 	br	109ac <_strtol_r+0x208>
   109fc:	04800404 	movi	r18,16
   10a00:	84400047 	ldb	r17,1(r16)
   10a04:	902f883a 	mov	r23,r18
   10a08:	84000084 	addi	r16,r16,2
   10a0c:	003f8b06 	br	1083c <_strtol_r+0x98>
   10a10:	b825883a 	mov	r18,r23
   10a14:	04400c04 	movi	r17,48
   10a18:	003f8806 	br	1083c <_strtol_r+0x98>

00010a1c <strtol>:
   10a1c:	008000b4 	movhi	r2,2
   10a20:	10a0c804 	addi	r2,r2,-31968
   10a24:	2007883a 	mov	r3,r4
   10a28:	11000017 	ldw	r4,0(r2)
   10a2c:	2805883a 	mov	r2,r5
   10a30:	300f883a 	mov	r7,r6
   10a34:	180b883a 	mov	r5,r3
   10a38:	100d883a 	mov	r6,r2
   10a3c:	00107a41 	jmpi	107a4 <_strtol_r>

00010a40 <__sfvwrite_r>:
   10a40:	30800217 	ldw	r2,8(r6)
   10a44:	defff504 	addi	sp,sp,-44
   10a48:	dd400615 	stw	r21,24(sp)
   10a4c:	dd000515 	stw	r20,20(sp)
   10a50:	dc000115 	stw	r16,4(sp)
   10a54:	dfc00a15 	stw	ra,40(sp)
   10a58:	df000915 	stw	fp,36(sp)
   10a5c:	ddc00815 	stw	r23,32(sp)
   10a60:	dd800715 	stw	r22,28(sp)
   10a64:	dcc00415 	stw	r19,16(sp)
   10a68:	dc800315 	stw	r18,12(sp)
   10a6c:	dc400215 	stw	r17,8(sp)
   10a70:	3029883a 	mov	r20,r6
   10a74:	202b883a 	mov	r21,r4
   10a78:	2821883a 	mov	r16,r5
   10a7c:	10002126 	beq	r2,zero,10b04 <__sfvwrite_r+0xc4>
   10a80:	2880030b 	ldhu	r2,12(r5)
   10a84:	10c0020c 	andi	r3,r2,8
   10a88:	18ffffcc 	andi	r3,r3,65535
   10a8c:	18e0001c 	xori	r3,r3,32768
   10a90:	18e00004 	addi	r3,r3,-32768
   10a94:	18002826 	beq	r3,zero,10b38 <__sfvwrite_r+0xf8>
   10a98:	28c00417 	ldw	r3,16(r5)
   10a9c:	18002626 	beq	r3,zero,10b38 <__sfvwrite_r+0xf8>
   10aa0:	10c0008c 	andi	r3,r2,2
   10aa4:	18ffffcc 	andi	r3,r3,65535
   10aa8:	18e0001c 	xori	r3,r3,32768
   10aac:	18e00004 	addi	r3,r3,-32768
   10ab0:	a4400017 	ldw	r17,0(r20)
   10ab4:	18002b26 	beq	r3,zero,10b64 <__sfvwrite_r+0x124>
   10ab8:	0027883a 	mov	r19,zero
   10abc:	0025883a 	mov	r18,zero
   10ac0:	05810004 	movi	r22,1024
   10ac4:	980d883a 	mov	r6,r19
   10ac8:	a809883a 	mov	r4,r21
   10acc:	90004f26 	beq	r18,zero,10c0c <__sfvwrite_r+0x1cc>
   10ad0:	900f883a 	mov	r7,r18
   10ad4:	81400717 	ldw	r5,28(r16)
   10ad8:	b480012e 	bgeu	r22,r18,10ae0 <__sfvwrite_r+0xa0>
   10adc:	01c10004 	movi	r7,1024
   10ae0:	80800917 	ldw	r2,36(r16)
   10ae4:	103ee83a 	callr	r2
   10ae8:	0080540e 	bge	zero,r2,10c3c <__sfvwrite_r+0x1fc>
   10aec:	a0c00217 	ldw	r3,8(r20)
   10af0:	98a7883a 	add	r19,r19,r2
   10af4:	90a5c83a 	sub	r18,r18,r2
   10af8:	1885c83a 	sub	r2,r3,r2
   10afc:	a0800215 	stw	r2,8(r20)
   10b00:	103ff01e 	bne	r2,zero,10ac4 <__sfvwrite_r+0x84>
   10b04:	0005883a 	mov	r2,zero
   10b08:	dfc00a17 	ldw	ra,40(sp)
   10b0c:	df000917 	ldw	fp,36(sp)
   10b10:	ddc00817 	ldw	r23,32(sp)
   10b14:	dd800717 	ldw	r22,28(sp)
   10b18:	dd400617 	ldw	r21,24(sp)
   10b1c:	dd000517 	ldw	r20,20(sp)
   10b20:	dcc00417 	ldw	r19,16(sp)
   10b24:	dc800317 	ldw	r18,12(sp)
   10b28:	dc400217 	ldw	r17,8(sp)
   10b2c:	dc000117 	ldw	r16,4(sp)
   10b30:	dec00b04 	addi	sp,sp,44
   10b34:	f800283a 	ret
   10b38:	a809883a 	mov	r4,r21
   10b3c:	800b883a 	mov	r5,r16
   10b40:	00120cc0 	call	120cc <__swsetup_r>
   10b44:	1000f01e 	bne	r2,zero,10f08 <__sfvwrite_r+0x4c8>
   10b48:	8080030b 	ldhu	r2,12(r16)
   10b4c:	a4400017 	ldw	r17,0(r20)
   10b50:	10c0008c 	andi	r3,r2,2
   10b54:	18ffffcc 	andi	r3,r3,65535
   10b58:	18e0001c 	xori	r3,r3,32768
   10b5c:	18e00004 	addi	r3,r3,-32768
   10b60:	183fd51e 	bne	r3,zero,10ab8 <__sfvwrite_r+0x78>
   10b64:	10c0004c 	andi	r3,r2,1
   10b68:	002d883a 	mov	r22,zero
   10b6c:	1800381e 	bne	r3,zero,10c50 <__sfvwrite_r+0x210>
   10b70:	0025883a 	mov	r18,zero
   10b74:	90002126 	beq	r18,zero,10bfc <__sfvwrite_r+0x1bc>
   10b78:	10c0800c 	andi	r3,r2,512
   10b7c:	18ffffcc 	andi	r3,r3,65535
   10b80:	18e0001c 	xori	r3,r3,32768
   10b84:	18e00004 	addi	r3,r3,-32768
   10b88:	84c00217 	ldw	r19,8(r16)
   10b8c:	18006b26 	beq	r3,zero,10d3c <__sfvwrite_r+0x2fc>
   10b90:	980f883a 	mov	r7,r19
   10b94:	94c08636 	bltu	r18,r19,10db0 <__sfvwrite_r+0x370>
   10b98:	10c1200c 	andi	r3,r2,1152
   10b9c:	18009f1e 	bne	r3,zero,10e1c <__sfvwrite_r+0x3dc>
   10ba0:	81000017 	ldw	r4,0(r16)
   10ba4:	982f883a 	mov	r23,r19
   10ba8:	9039883a 	mov	fp,r18
   10bac:	9027883a 	mov	r19,r18
   10bb0:	380d883a 	mov	r6,r7
   10bb4:	b00b883a 	mov	r5,r22
   10bb8:	d9c00015 	stw	r7,0(sp)
   10bbc:	00118e00 	call	118e0 <memmove>
   10bc0:	d9c00017 	ldw	r7,0(sp)
   10bc4:	81000217 	ldw	r4,8(r16)
   10bc8:	80800017 	ldw	r2,0(r16)
   10bcc:	25efc83a 	sub	r23,r4,r23
   10bd0:	11cf883a 	add	r7,r2,r7
   10bd4:	85c00215 	stw	r23,8(r16)
   10bd8:	81c00015 	stw	r7,0(r16)
   10bdc:	a0800217 	ldw	r2,8(r20)
   10be0:	b72d883a 	add	r22,r22,fp
   10be4:	9725c83a 	sub	r18,r18,fp
   10be8:	14e7c83a 	sub	r19,r2,r19
   10bec:	a4c00215 	stw	r19,8(r20)
   10bf0:	983fc426 	beq	r19,zero,10b04 <__sfvwrite_r+0xc4>
   10bf4:	8080030b 	ldhu	r2,12(r16)
   10bf8:	903fdf1e 	bne	r18,zero,10b78 <__sfvwrite_r+0x138>
   10bfc:	8d800017 	ldw	r22,0(r17)
   10c00:	8c800117 	ldw	r18,4(r17)
   10c04:	8c400204 	addi	r17,r17,8
   10c08:	003fda06 	br	10b74 <__sfvwrite_r+0x134>
   10c0c:	8cc00017 	ldw	r19,0(r17)
   10c10:	8c800117 	ldw	r18,4(r17)
   10c14:	8c400204 	addi	r17,r17,8
   10c18:	003faa06 	br	10ac4 <__sfvwrite_r+0x84>
   10c1c:	0011a6c0 	call	11a6c <_realloc_r>
   10c20:	102f883a 	mov	r23,r2
   10c24:	10009f1e 	bne	r2,zero,10ea4 <__sfvwrite_r+0x464>
   10c28:	81400417 	ldw	r5,16(r16)
   10c2c:	a809883a 	mov	r4,r21
   10c30:	00128800 	call	12880 <_free_r>
   10c34:	00800304 	movi	r2,12
   10c38:	a8800015 	stw	r2,0(r21)
   10c3c:	80c0030b 	ldhu	r3,12(r16)
   10c40:	00bfffc4 	movi	r2,-1
   10c44:	18c01014 	ori	r3,r3,64
   10c48:	80c0030d 	sth	r3,12(r16)
   10c4c:	003fae06 	br	10b08 <__sfvwrite_r+0xc8>
   10c50:	0007883a 	mov	r3,zero
   10c54:	0039883a 	mov	fp,zero
   10c58:	0025883a 	mov	r18,zero
   10c5c:	90001e26 	beq	r18,zero,10cd8 <__sfvwrite_r+0x298>
   10c60:	18006526 	beq	r3,zero,10df8 <__sfvwrite_r+0x3b8>
   10c64:	b02f883a 	mov	r23,r22
   10c68:	9580012e 	bgeu	r18,r22,10c70 <__sfvwrite_r+0x230>
   10c6c:	902f883a 	mov	r23,r18
   10c70:	81000017 	ldw	r4,0(r16)
   10c74:	80800417 	ldw	r2,16(r16)
   10c78:	84c00217 	ldw	r19,8(r16)
   10c7c:	81c00517 	ldw	r7,20(r16)
   10c80:	1100022e 	bgeu	r2,r4,10c8c <__sfvwrite_r+0x24c>
   10c84:	99e7883a 	add	r19,r19,r7
   10c88:	9dc01816 	blt	r19,r23,10cec <__sfvwrite_r+0x2ac>
   10c8c:	b9c03b16 	blt	r23,r7,10d7c <__sfvwrite_r+0x33c>
   10c90:	80800917 	ldw	r2,36(r16)
   10c94:	81400717 	ldw	r5,28(r16)
   10c98:	a809883a 	mov	r4,r21
   10c9c:	d8c00015 	stw	r3,0(sp)
   10ca0:	e00d883a 	mov	r6,fp
   10ca4:	103ee83a 	callr	r2
   10ca8:	1027883a 	mov	r19,r2
   10cac:	d8c00017 	ldw	r3,0(sp)
   10cb0:	00bfe20e 	bge	zero,r2,10c3c <__sfvwrite_r+0x1fc>
   10cb4:	b4edc83a 	sub	r22,r22,r19
   10cb8:	b0001a26 	beq	r22,zero,10d24 <__sfvwrite_r+0x2e4>
   10cbc:	a0800217 	ldw	r2,8(r20)
   10cc0:	e4f9883a 	add	fp,fp,r19
   10cc4:	94e5c83a 	sub	r18,r18,r19
   10cc8:	14e7c83a 	sub	r19,r2,r19
   10ccc:	a4c00215 	stw	r19,8(r20)
   10cd0:	983f8c26 	beq	r19,zero,10b04 <__sfvwrite_r+0xc4>
   10cd4:	903fe21e 	bne	r18,zero,10c60 <__sfvwrite_r+0x220>
   10cd8:	8f000017 	ldw	fp,0(r17)
   10cdc:	8c800117 	ldw	r18,4(r17)
   10ce0:	0007883a 	mov	r3,zero
   10ce4:	8c400204 	addi	r17,r17,8
   10ce8:	003fdc06 	br	10c5c <__sfvwrite_r+0x21c>
   10cec:	e00b883a 	mov	r5,fp
   10cf0:	980d883a 	mov	r6,r19
   10cf4:	d8c00015 	stw	r3,0(sp)
   10cf8:	00118e00 	call	118e0 <memmove>
   10cfc:	80800017 	ldw	r2,0(r16)
   10d00:	a809883a 	mov	r4,r21
   10d04:	800b883a 	mov	r5,r16
   10d08:	14c5883a 	add	r2,r2,r19
   10d0c:	80800015 	stw	r2,0(r16)
   10d10:	00122400 	call	12240 <_fflush_r>
   10d14:	d8c00017 	ldw	r3,0(sp)
   10d18:	103fc81e 	bne	r2,zero,10c3c <__sfvwrite_r+0x1fc>
   10d1c:	b4edc83a 	sub	r22,r22,r19
   10d20:	b03fe61e 	bne	r22,zero,10cbc <__sfvwrite_r+0x27c>
   10d24:	a809883a 	mov	r4,r21
   10d28:	800b883a 	mov	r5,r16
   10d2c:	00122400 	call	12240 <_fflush_r>
   10d30:	103fc21e 	bne	r2,zero,10c3c <__sfvwrite_r+0x1fc>
   10d34:	0007883a 	mov	r3,zero
   10d38:	003fe006 	br	10cbc <__sfvwrite_r+0x27c>
   10d3c:	81000017 	ldw	r4,0(r16)
   10d40:	80800417 	ldw	r2,16(r16)
   10d44:	1100022e 	bgeu	r2,r4,10d50 <__sfvwrite_r+0x310>
   10d48:	9839883a 	mov	fp,r19
   10d4c:	9c806036 	bltu	r19,r18,10ed0 <__sfvwrite_r+0x490>
   10d50:	81c00517 	ldw	r7,20(r16)
   10d54:	91c01c36 	bltu	r18,r7,10dc8 <__sfvwrite_r+0x388>
   10d58:	80800917 	ldw	r2,36(r16)
   10d5c:	81400717 	ldw	r5,28(r16)
   10d60:	a809883a 	mov	r4,r21
   10d64:	b00d883a 	mov	r6,r22
   10d68:	103ee83a 	callr	r2
   10d6c:	1027883a 	mov	r19,r2
   10d70:	00bfb20e 	bge	zero,r2,10c3c <__sfvwrite_r+0x1fc>
   10d74:	1039883a 	mov	fp,r2
   10d78:	003f9806 	br	10bdc <__sfvwrite_r+0x19c>
   10d7c:	b80d883a 	mov	r6,r23
   10d80:	e00b883a 	mov	r5,fp
   10d84:	d8c00015 	stw	r3,0(sp)
   10d88:	00118e00 	call	118e0 <memmove>
   10d8c:	80800217 	ldw	r2,8(r16)
   10d90:	81000017 	ldw	r4,0(r16)
   10d94:	b827883a 	mov	r19,r23
   10d98:	15c5c83a 	sub	r2,r2,r23
   10d9c:	25ef883a 	add	r23,r4,r23
   10da0:	80800215 	stw	r2,8(r16)
   10da4:	85c00015 	stw	r23,0(r16)
   10da8:	d8c00017 	ldw	r3,0(sp)
   10dac:	003fc106 	br	10cb4 <__sfvwrite_r+0x274>
   10db0:	81000017 	ldw	r4,0(r16)
   10db4:	902f883a 	mov	r23,r18
   10db8:	9039883a 	mov	fp,r18
   10dbc:	9027883a 	mov	r19,r18
   10dc0:	900f883a 	mov	r7,r18
   10dc4:	003f7a06 	br	10bb0 <__sfvwrite_r+0x170>
   10dc8:	b00b883a 	mov	r5,r22
   10dcc:	900d883a 	mov	r6,r18
   10dd0:	00118e00 	call	118e0 <memmove>
   10dd4:	80c00217 	ldw	r3,8(r16)
   10dd8:	80800017 	ldw	r2,0(r16)
   10ddc:	9027883a 	mov	r19,r18
   10de0:	1c87c83a 	sub	r3,r3,r18
   10de4:	1485883a 	add	r2,r2,r18
   10de8:	80c00215 	stw	r3,8(r16)
   10dec:	80800015 	stw	r2,0(r16)
   10df0:	9039883a 	mov	fp,r18
   10df4:	003f7906 	br	10bdc <__sfvwrite_r+0x19c>
   10df8:	e009883a 	mov	r4,fp
   10dfc:	01400284 	movi	r5,10
   10e00:	900d883a 	mov	r6,r18
   10e04:	00116a80 	call	116a8 <memchr>
   10e08:	10003c26 	beq	r2,zero,10efc <__sfvwrite_r+0x4bc>
   10e0c:	15800044 	addi	r22,r2,1
   10e10:	b72dc83a 	sub	r22,r22,fp
   10e14:	00c00044 	movi	r3,1
   10e18:	003f9206 	br	10c64 <__sfvwrite_r+0x224>
   10e1c:	81000517 	ldw	r4,20(r16)
   10e20:	81400417 	ldw	r5,16(r16)
   10e24:	80c00017 	ldw	r3,0(r16)
   10e28:	210d883a 	add	r6,r4,r4
   10e2c:	3109883a 	add	r4,r6,r4
   10e30:	2026d7fa 	srli	r19,r4,31
   10e34:	1979c83a 	sub	fp,r3,r5
   10e38:	e1800044 	addi	r6,fp,1
   10e3c:	9909883a 	add	r4,r19,r4
   10e40:	2027d07a 	srai	r19,r4,1
   10e44:	3489883a 	add	r4,r6,r18
   10e48:	980d883a 	mov	r6,r19
   10e4c:	9900022e 	bgeu	r19,r4,10e58 <__sfvwrite_r+0x418>
   10e50:	2027883a 	mov	r19,r4
   10e54:	200d883a 	mov	r6,r4
   10e58:	1081000c 	andi	r2,r2,1024
   10e5c:	10bfffcc 	andi	r2,r2,65535
   10e60:	10a0001c 	xori	r2,r2,32768
   10e64:	10a00004 	addi	r2,r2,-32768
   10e68:	a809883a 	mov	r4,r21
   10e6c:	103f6b26 	beq	r2,zero,10c1c <__sfvwrite_r+0x1dc>
   10e70:	300b883a 	mov	r5,r6
   10e74:	0010f240 	call	10f24 <_malloc_r>
   10e78:	102f883a 	mov	r23,r2
   10e7c:	103f6d26 	beq	r2,zero,10c34 <__sfvwrite_r+0x1f4>
   10e80:	81400417 	ldw	r5,16(r16)
   10e84:	1009883a 	mov	r4,r2
   10e88:	e00d883a 	mov	r6,fp
   10e8c:	00117a00 	call	117a0 <memcpy>
   10e90:	8080030b 	ldhu	r2,12(r16)
   10e94:	00fedfc4 	movi	r3,-1153
   10e98:	10c4703a 	and	r2,r2,r3
   10e9c:	10802014 	ori	r2,r2,128
   10ea0:	8080030d 	sth	r2,12(r16)
   10ea4:	bf09883a 	add	r4,r23,fp
   10ea8:	9f07c83a 	sub	r3,r19,fp
   10eac:	85c00415 	stw	r23,16(r16)
   10eb0:	84c00515 	stw	r19,20(r16)
   10eb4:	81000015 	stw	r4,0(r16)
   10eb8:	902f883a 	mov	r23,r18
   10ebc:	80c00215 	stw	r3,8(r16)
   10ec0:	9039883a 	mov	fp,r18
   10ec4:	9027883a 	mov	r19,r18
   10ec8:	900f883a 	mov	r7,r18
   10ecc:	003f3806 	br	10bb0 <__sfvwrite_r+0x170>
   10ed0:	b00b883a 	mov	r5,r22
   10ed4:	980d883a 	mov	r6,r19
   10ed8:	00118e00 	call	118e0 <memmove>
   10edc:	80800017 	ldw	r2,0(r16)
   10ee0:	a809883a 	mov	r4,r21
   10ee4:	800b883a 	mov	r5,r16
   10ee8:	14c5883a 	add	r2,r2,r19
   10eec:	80800015 	stw	r2,0(r16)
   10ef0:	00122400 	call	12240 <_fflush_r>
   10ef4:	103f3926 	beq	r2,zero,10bdc <__sfvwrite_r+0x19c>
   10ef8:	003f5006 	br	10c3c <__sfvwrite_r+0x1fc>
   10efc:	95800044 	addi	r22,r18,1
   10f00:	00c00044 	movi	r3,1
   10f04:	003f5706 	br	10c64 <__sfvwrite_r+0x224>
   10f08:	80c0030b 	ldhu	r3,12(r16)
   10f0c:	00bfffc4 	movi	r2,-1
   10f10:	18c01014 	ori	r3,r3,64
   10f14:	80c0030d 	sth	r3,12(r16)
   10f18:	00c00244 	movi	r3,9
   10f1c:	a8c00015 	stw	r3,0(r21)
   10f20:	003ef906 	br	10b08 <__sfvwrite_r+0xc8>

00010f24 <_malloc_r>:
   10f24:	defff604 	addi	sp,sp,-40
   10f28:	dc800215 	stw	r18,8(sp)
   10f2c:	dfc00915 	stw	ra,36(sp)
   10f30:	df000815 	stw	fp,32(sp)
   10f34:	ddc00715 	stw	r23,28(sp)
   10f38:	dd800615 	stw	r22,24(sp)
   10f3c:	dd400515 	stw	r21,20(sp)
   10f40:	dd000415 	stw	r20,16(sp)
   10f44:	dcc00315 	stw	r19,12(sp)
   10f48:	dc400115 	stw	r17,4(sp)
   10f4c:	dc000015 	stw	r16,0(sp)
   10f50:	288002c4 	addi	r2,r5,11
   10f54:	00c00584 	movi	r3,22
   10f58:	2025883a 	mov	r18,r4
   10f5c:	18802b2e 	bgeu	r3,r2,1100c <_malloc_r+0xe8>
   10f60:	047ffe04 	movi	r17,-8
   10f64:	1462703a 	and	r17,r2,r17
   10f68:	88002a16 	blt	r17,zero,11014 <_malloc_r+0xf0>
   10f6c:	89402936 	bltu	r17,r5,11014 <_malloc_r+0xf0>
   10f70:	9009883a 	mov	r4,r18
   10f74:	0013b540 	call	13b54 <__malloc_lock>
   10f78:	00807dc4 	movi	r2,503
   10f7c:	14402936 	bltu	r2,r17,11024 <_malloc_r+0x100>
   10f80:	8808d0fa 	srli	r4,r17,3
   10f84:	04c00074 	movhi	r19,1
   10f88:	9cdb1104 	addi	r19,r19,27716
   10f8c:	2105883a 	add	r2,r4,r4
   10f90:	1085883a 	add	r2,r2,r2
   10f94:	1085883a 	add	r2,r2,r2
   10f98:	9885883a 	add	r2,r19,r2
   10f9c:	14000317 	ldw	r16,12(r2)
   10fa0:	80815526 	beq	r16,r2,114f8 <_malloc_r+0x5d4>
   10fa4:	81000117 	ldw	r4,4(r16)
   10fa8:	00bfff04 	movi	r2,-4
   10fac:	80c00317 	ldw	r3,12(r16)
   10fb0:	2084703a 	and	r2,r4,r2
   10fb4:	8085883a 	add	r2,r16,r2
   10fb8:	11800117 	ldw	r6,4(r2)
   10fbc:	81400217 	ldw	r5,8(r16)
   10fc0:	9009883a 	mov	r4,r18
   10fc4:	31800054 	ori	r6,r6,1
   10fc8:	11800115 	stw	r6,4(r2)
   10fcc:	28c00315 	stw	r3,12(r5)
   10fd0:	19400215 	stw	r5,8(r3)
   10fd4:	0013b740 	call	13b74 <__malloc_unlock>
   10fd8:	80800204 	addi	r2,r16,8
   10fdc:	dfc00917 	ldw	ra,36(sp)
   10fe0:	df000817 	ldw	fp,32(sp)
   10fe4:	ddc00717 	ldw	r23,28(sp)
   10fe8:	dd800617 	ldw	r22,24(sp)
   10fec:	dd400517 	ldw	r21,20(sp)
   10ff0:	dd000417 	ldw	r20,16(sp)
   10ff4:	dcc00317 	ldw	r19,12(sp)
   10ff8:	dc800217 	ldw	r18,8(sp)
   10ffc:	dc400117 	ldw	r17,4(sp)
   11000:	dc000017 	ldw	r16,0(sp)
   11004:	dec00a04 	addi	sp,sp,40
   11008:	f800283a 	ret
   1100c:	04400404 	movi	r17,16
   11010:	897fd72e 	bgeu	r17,r5,10f70 <_malloc_r+0x4c>
   11014:	00800304 	movi	r2,12
   11018:	90800015 	stw	r2,0(r18)
   1101c:	0005883a 	mov	r2,zero
   11020:	003fee06 	br	10fdc <_malloc_r+0xb8>
   11024:	8808d27a 	srli	r4,r17,9
   11028:	20007126 	beq	r4,zero,111f0 <_malloc_r+0x2cc>
   1102c:	00800104 	movi	r2,4
   11030:	1100eb36 	bltu	r2,r4,113e0 <_malloc_r+0x4bc>
   11034:	8808d1ba 	srli	r4,r17,6
   11038:	21000e04 	addi	r4,r4,56
   1103c:	210b883a 	add	r5,r4,r4
   11040:	294b883a 	add	r5,r5,r5
   11044:	294b883a 	add	r5,r5,r5
   11048:	04c00074 	movhi	r19,1
   1104c:	9cdb1104 	addi	r19,r19,27716
   11050:	994b883a 	add	r5,r19,r5
   11054:	2c000317 	ldw	r16,12(r5)
   11058:	2c000e26 	beq	r5,r16,11094 <_malloc_r+0x170>
   1105c:	80c00117 	ldw	r3,4(r16)
   11060:	01ffff04 	movi	r7,-4
   11064:	018003c4 	movi	r6,15
   11068:	19c6703a 	and	r3,r3,r7
   1106c:	1c45c83a 	sub	r2,r3,r17
   11070:	30800716 	blt	r6,r2,11090 <_malloc_r+0x16c>
   11074:	1000610e 	bge	r2,zero,111fc <_malloc_r+0x2d8>
   11078:	84000317 	ldw	r16,12(r16)
   1107c:	2c000526 	beq	r5,r16,11094 <_malloc_r+0x170>
   11080:	80c00117 	ldw	r3,4(r16)
   11084:	19c6703a 	and	r3,r3,r7
   11088:	1c45c83a 	sub	r2,r3,r17
   1108c:	30bff90e 	bge	r6,r2,11074 <_malloc_r+0x150>
   11090:	213fffc4 	addi	r4,r4,-1
   11094:	21000044 	addi	r4,r4,1
   11098:	9c000417 	ldw	r16,16(r19)
   1109c:	00c00074 	movhi	r3,1
   110a0:	18db1104 	addi	r3,r3,27716
   110a4:	1a400204 	addi	r9,r3,8
   110a8:	8240ff26 	beq	r16,r9,114a8 <_malloc_r+0x584>
   110ac:	81400117 	ldw	r5,4(r16)
   110b0:	00bfff04 	movi	r2,-4
   110b4:	018003c4 	movi	r6,15
   110b8:	2884703a 	and	r2,r5,r2
   110bc:	144bc83a 	sub	r5,r2,r17
   110c0:	3140ea16 	blt	r6,r5,1146c <_malloc_r+0x548>
   110c4:	1a400515 	stw	r9,20(r3)
   110c8:	1a400415 	stw	r9,16(r3)
   110cc:	2800570e 	bge	r5,zero,1122c <_malloc_r+0x308>
   110d0:	01407fc4 	movi	r5,511
   110d4:	2880ca36 	bltu	r5,r2,11400 <_malloc_r+0x4dc>
   110d8:	1004d0fa 	srli	r2,r2,3
   110dc:	02000044 	movi	r8,1
   110e0:	19c00117 	ldw	r7,4(r3)
   110e4:	108b883a 	add	r5,r2,r2
   110e8:	294b883a 	add	r5,r5,r5
   110ec:	1005d0ba 	srai	r2,r2,2
   110f0:	294b883a 	add	r5,r5,r5
   110f4:	28cb883a 	add	r5,r5,r3
   110f8:	29800217 	ldw	r6,8(r5)
   110fc:	4084983a 	sll	r2,r8,r2
   11100:	81400315 	stw	r5,12(r16)
   11104:	81800215 	stw	r6,8(r16)
   11108:	11c4b03a 	or	r2,r2,r7
   1110c:	18800115 	stw	r2,4(r3)
   11110:	2c000215 	stw	r16,8(r5)
   11114:	34000315 	stw	r16,12(r6)
   11118:	200bd0ba 	srai	r5,r4,2
   1111c:	00c00044 	movi	r3,1
   11120:	194a983a 	sll	r5,r3,r5
   11124:	11404936 	bltu	r2,r5,1124c <_malloc_r+0x328>
   11128:	1146703a 	and	r3,r2,r5
   1112c:	18000a1e 	bne	r3,zero,11158 <_malloc_r+0x234>
   11130:	00ffff04 	movi	r3,-4
   11134:	294b883a 	add	r5,r5,r5
   11138:	20c8703a 	and	r4,r4,r3
   1113c:	1146703a 	and	r3,r2,r5
   11140:	21000104 	addi	r4,r4,4
   11144:	1800041e 	bne	r3,zero,11158 <_malloc_r+0x234>
   11148:	294b883a 	add	r5,r5,r5
   1114c:	1146703a 	and	r3,r2,r5
   11150:	21000104 	addi	r4,r4,4
   11154:	183ffc26 	beq	r3,zero,11148 <_malloc_r+0x224>
   11158:	023fff04 	movi	r8,-4
   1115c:	01c003c4 	movi	r7,15
   11160:	2105883a 	add	r2,r4,r4
   11164:	1085883a 	add	r2,r2,r2
   11168:	1085883a 	add	r2,r2,r2
   1116c:	9899883a 	add	r12,r19,r2
   11170:	62800304 	addi	r10,r12,12
   11174:	2017883a 	mov	r11,r4
   11178:	54000017 	ldw	r16,0(r10)
   1117c:	51bffd04 	addi	r6,r10,-12
   11180:	8180041e 	bne	r16,r6,11194 <_malloc_r+0x270>
   11184:	0000ca06 	br	114b0 <_malloc_r+0x58c>
   11188:	10001c0e 	bge	r2,zero,111fc <_malloc_r+0x2d8>
   1118c:	84000317 	ldw	r16,12(r16)
   11190:	8180c726 	beq	r16,r6,114b0 <_malloc_r+0x58c>
   11194:	80c00117 	ldw	r3,4(r16)
   11198:	1a06703a 	and	r3,r3,r8
   1119c:	1c45c83a 	sub	r2,r3,r17
   111a0:	38bff90e 	bge	r7,r2,11188 <_malloc_r+0x264>
   111a4:	81000317 	ldw	r4,12(r16)
   111a8:	81400217 	ldw	r5,8(r16)
   111ac:	8447883a 	add	r3,r16,r17
   111b0:	8c400054 	ori	r17,r17,1
   111b4:	29000315 	stw	r4,12(r5)
   111b8:	21400215 	stw	r5,8(r4)
   111bc:	84400115 	stw	r17,4(r16)
   111c0:	1889883a 	add	r4,r3,r2
   111c4:	11400054 	ori	r5,r2,1
   111c8:	98c00515 	stw	r3,20(r19)
   111cc:	98c00415 	stw	r3,16(r19)
   111d0:	20800015 	stw	r2,0(r4)
   111d4:	1a400315 	stw	r9,12(r3)
   111d8:	1a400215 	stw	r9,8(r3)
   111dc:	19400115 	stw	r5,4(r3)
   111e0:	9009883a 	mov	r4,r18
   111e4:	0013b740 	call	13b74 <__malloc_unlock>
   111e8:	80800204 	addi	r2,r16,8
   111ec:	003f7b06 	br	10fdc <_malloc_r+0xb8>
   111f0:	8808d0fa 	srli	r4,r17,3
   111f4:	210b883a 	add	r5,r4,r4
   111f8:	003f9106 	br	11040 <_malloc_r+0x11c>
   111fc:	80c7883a 	add	r3,r16,r3
   11200:	19400117 	ldw	r5,4(r3)
   11204:	80800317 	ldw	r2,12(r16)
   11208:	81000217 	ldw	r4,8(r16)
   1120c:	29400054 	ori	r5,r5,1
   11210:	19400115 	stw	r5,4(r3)
   11214:	20800315 	stw	r2,12(r4)
   11218:	11000215 	stw	r4,8(r2)
   1121c:	9009883a 	mov	r4,r18
   11220:	0013b740 	call	13b74 <__malloc_unlock>
   11224:	80800204 	addi	r2,r16,8
   11228:	003f6c06 	br	10fdc <_malloc_r+0xb8>
   1122c:	8085883a 	add	r2,r16,r2
   11230:	10c00117 	ldw	r3,4(r2)
   11234:	9009883a 	mov	r4,r18
   11238:	18c00054 	ori	r3,r3,1
   1123c:	10c00115 	stw	r3,4(r2)
   11240:	0013b740 	call	13b74 <__malloc_unlock>
   11244:	80800204 	addi	r2,r16,8
   11248:	003f6406 	br	10fdc <_malloc_r+0xb8>
   1124c:	9c000217 	ldw	r16,8(r19)
   11250:	00bfff04 	movi	r2,-4
   11254:	85400117 	ldw	r21,4(r16)
   11258:	a8aa703a 	and	r21,r21,r2
   1125c:	ac400336 	bltu	r21,r17,1126c <_malloc_r+0x348>
   11260:	ac45c83a 	sub	r2,r21,r17
   11264:	00c003c4 	movi	r3,15
   11268:	18805316 	blt	r3,r2,113b8 <_malloc_r+0x494>
   1126c:	d5e6d517 	ldw	r23,-25772(gp)
   11270:	d0e00317 	ldw	r3,-32756(gp)
   11274:	00bfffc4 	movi	r2,-1
   11278:	8579883a 	add	fp,r16,r21
   1127c:	8def883a 	add	r23,r17,r23
   11280:	1880d226 	beq	r3,r2,115cc <_malloc_r+0x6a8>
   11284:	bdc403c4 	addi	r23,r23,4111
   11288:	00bc0004 	movi	r2,-4096
   1128c:	b8ae703a 	and	r23,r23,r2
   11290:	9009883a 	mov	r4,r18
   11294:	b80b883a 	mov	r5,r23
   11298:	00120680 	call	12068 <_sbrk_r>
   1129c:	1029883a 	mov	r20,r2
   112a0:	00bfffc4 	movi	r2,-1
   112a4:	a080d126 	beq	r20,r2,115ec <_malloc_r+0x6c8>
   112a8:	a7009f36 	bltu	r20,fp,11528 <_malloc_r+0x604>
   112ac:	058000b4 	movhi	r22,2
   112b0:	b5a7a304 	addi	r22,r22,-24948
   112b4:	b0800017 	ldw	r2,0(r22)
   112b8:	b885883a 	add	r2,r23,r2
   112bc:	b0800015 	stw	r2,0(r22)
   112c0:	e500cf26 	beq	fp,r20,11600 <_malloc_r+0x6dc>
   112c4:	d1200317 	ldw	r4,-32756(gp)
   112c8:	00ffffc4 	movi	r3,-1
   112cc:	20c0e026 	beq	r4,r3,11650 <_malloc_r+0x72c>
   112d0:	a739c83a 	sub	fp,r20,fp
   112d4:	1705883a 	add	r2,r2,fp
   112d8:	b0800015 	stw	r2,0(r22)
   112dc:	a08001cc 	andi	r2,r20,7
   112e0:	1000a526 	beq	r2,zero,11578 <_malloc_r+0x654>
   112e4:	a0a9c83a 	sub	r20,r20,r2
   112e8:	00c40204 	movi	r3,4104
   112ec:	a5000204 	addi	r20,r20,8
   112f0:	1885c83a 	sub	r2,r3,r2
   112f4:	a5c7883a 	add	r3,r20,r23
   112f8:	18c3ffcc 	andi	r3,r3,4095
   112fc:	10efc83a 	sub	r23,r2,r3
   11300:	9009883a 	mov	r4,r18
   11304:	b80b883a 	mov	r5,r23
   11308:	00120680 	call	12068 <_sbrk_r>
   1130c:	00ffffc4 	movi	r3,-1
   11310:	10c0cc26 	beq	r2,r3,11644 <_malloc_r+0x720>
   11314:	1505c83a 	sub	r2,r2,r20
   11318:	b887883a 	add	r3,r23,r2
   1131c:	18c00054 	ori	r3,r3,1
   11320:	b0800017 	ldw	r2,0(r22)
   11324:	9d000215 	stw	r20,8(r19)
   11328:	a0c00115 	stw	r3,4(r20)
   1132c:	b885883a 	add	r2,r23,r2
   11330:	b0800015 	stw	r2,0(r22)
   11334:	84c00e26 	beq	r16,r19,11370 <_malloc_r+0x44c>
   11338:	00c003c4 	movi	r3,15
   1133c:	1d40902e 	bgeu	r3,r21,11580 <_malloc_r+0x65c>
   11340:	ad7ffd04 	addi	r21,r21,-12
   11344:	013ffe04 	movi	r4,-8
   11348:	a908703a 	and	r4,r21,r4
   1134c:	810b883a 	add	r5,r16,r4
   11350:	01800144 	movi	r6,5
   11354:	29800115 	stw	r6,4(r5)
   11358:	29800215 	stw	r6,8(r5)
   1135c:	81400117 	ldw	r5,4(r16)
   11360:	2940004c 	andi	r5,r5,1
   11364:	214ab03a 	or	r5,r4,r5
   11368:	81400115 	stw	r5,4(r16)
   1136c:	1900ae36 	bltu	r3,r4,11628 <_malloc_r+0x704>
   11370:	d0e6d417 	ldw	r3,-25776(gp)
   11374:	1880012e 	bgeu	r3,r2,1137c <_malloc_r+0x458>
   11378:	d0a6d415 	stw	r2,-25776(gp)
   1137c:	d0e6d317 	ldw	r3,-25780(gp)
   11380:	9c000217 	ldw	r16,8(r19)
   11384:	1880012e 	bgeu	r3,r2,1138c <_malloc_r+0x468>
   11388:	d0a6d315 	stw	r2,-25780(gp)
   1138c:	80c00117 	ldw	r3,4(r16)
   11390:	00bfff04 	movi	r2,-4
   11394:	1886703a 	and	r3,r3,r2
   11398:	1c45c83a 	sub	r2,r3,r17
   1139c:	1c400236 	bltu	r3,r17,113a8 <_malloc_r+0x484>
   113a0:	00c003c4 	movi	r3,15
   113a4:	18800416 	blt	r3,r2,113b8 <_malloc_r+0x494>
   113a8:	9009883a 	mov	r4,r18
   113ac:	0013b740 	call	13b74 <__malloc_unlock>
   113b0:	0005883a 	mov	r2,zero
   113b4:	003f0906 	br	10fdc <_malloc_r+0xb8>
   113b8:	88c00054 	ori	r3,r17,1
   113bc:	10800054 	ori	r2,r2,1
   113c0:	80c00115 	stw	r3,4(r16)
   113c4:	8463883a 	add	r17,r16,r17
   113c8:	88800115 	stw	r2,4(r17)
   113cc:	9009883a 	mov	r4,r18
   113d0:	9c400215 	stw	r17,8(r19)
   113d4:	0013b740 	call	13b74 <__malloc_unlock>
   113d8:	80800204 	addi	r2,r16,8
   113dc:	003eff06 	br	10fdc <_malloc_r+0xb8>
   113e0:	00800504 	movi	r2,20
   113e4:	1100492e 	bgeu	r2,r4,1150c <_malloc_r+0x5e8>
   113e8:	00801504 	movi	r2,84
   113ec:	11005c36 	bltu	r2,r4,11560 <_malloc_r+0x63c>
   113f0:	8808d33a 	srli	r4,r17,12
   113f4:	21001b84 	addi	r4,r4,110
   113f8:	210b883a 	add	r5,r4,r4
   113fc:	003f1006 	br	11040 <_malloc_r+0x11c>
   11400:	1006d27a 	srli	r3,r2,9
   11404:	01400104 	movi	r5,4
   11408:	28c0432e 	bgeu	r5,r3,11518 <_malloc_r+0x5f4>
   1140c:	01400504 	movi	r5,20
   11410:	28c07036 	bltu	r5,r3,115d4 <_malloc_r+0x6b0>
   11414:	194016c4 	addi	r5,r3,91
   11418:	294d883a 	add	r6,r5,r5
   1141c:	318d883a 	add	r6,r6,r6
   11420:	318d883a 	add	r6,r6,r6
   11424:	998d883a 	add	r6,r19,r6
   11428:	30c00217 	ldw	r3,8(r6)
   1142c:	01c00074 	movhi	r7,1
   11430:	39db1104 	addi	r7,r7,27716
   11434:	19805726 	beq	r3,r6,11594 <_malloc_r+0x670>
   11438:	01ffff04 	movi	r7,-4
   1143c:	19400117 	ldw	r5,4(r3)
   11440:	29ca703a 	and	r5,r5,r7
   11444:	1140022e 	bgeu	r2,r5,11450 <_malloc_r+0x52c>
   11448:	18c00217 	ldw	r3,8(r3)
   1144c:	30fffb1e 	bne	r6,r3,1143c <_malloc_r+0x518>
   11450:	19400317 	ldw	r5,12(r3)
   11454:	98800117 	ldw	r2,4(r19)
   11458:	81400315 	stw	r5,12(r16)
   1145c:	80c00215 	stw	r3,8(r16)
   11460:	2c000215 	stw	r16,8(r5)
   11464:	1c000315 	stw	r16,12(r3)
   11468:	003f2b06 	br	11118 <_malloc_r+0x1f4>
   1146c:	8445883a 	add	r2,r16,r17
   11470:	8c400054 	ori	r17,r17,1
   11474:	18800515 	stw	r2,20(r3)
   11478:	18800415 	stw	r2,16(r3)
   1147c:	29000054 	ori	r4,r5,1
   11480:	1147883a 	add	r3,r2,r5
   11484:	84400115 	stw	r17,4(r16)
   11488:	11000115 	stw	r4,4(r2)
   1148c:	12400315 	stw	r9,12(r2)
   11490:	12400215 	stw	r9,8(r2)
   11494:	19400015 	stw	r5,0(r3)
   11498:	9009883a 	mov	r4,r18
   1149c:	0013b740 	call	13b74 <__malloc_unlock>
   114a0:	80800204 	addi	r2,r16,8
   114a4:	003ecd06 	br	10fdc <_malloc_r+0xb8>
   114a8:	18800117 	ldw	r2,4(r3)
   114ac:	003f1a06 	br	11118 <_malloc_r+0x1f4>
   114b0:	5ac00044 	addi	r11,r11,1
   114b4:	588000cc 	andi	r2,r11,3
   114b8:	52800204 	addi	r10,r10,8
   114bc:	103f2e1e 	bne	r2,zero,11178 <_malloc_r+0x254>
   114c0:	20c000cc 	andi	r3,r4,3
   114c4:	60bffe04 	addi	r2,r12,-8
   114c8:	18006f26 	beq	r3,zero,11688 <_malloc_r+0x764>
   114cc:	63000017 	ldw	r12,0(r12)
   114d0:	213fffc4 	addi	r4,r4,-1
   114d4:	60bffa26 	beq	r12,r2,114c0 <_malloc_r+0x59c>
   114d8:	98800117 	ldw	r2,4(r19)
   114dc:	294b883a 	add	r5,r5,r5
   114e0:	117f5a36 	bltu	r2,r5,1124c <_malloc_r+0x328>
   114e4:	283f5926 	beq	r5,zero,1124c <_malloc_r+0x328>
   114e8:	1146703a 	and	r3,r2,r5
   114ec:	18001626 	beq	r3,zero,11548 <_malloc_r+0x624>
   114f0:	5809883a 	mov	r4,r11
   114f4:	003f1a06 	br	11160 <_malloc_r+0x23c>
   114f8:	80800204 	addi	r2,r16,8
   114fc:	84000517 	ldw	r16,20(r16)
   11500:	143ea81e 	bne	r2,r16,10fa4 <_malloc_r+0x80>
   11504:	21000084 	addi	r4,r4,2
   11508:	003ee306 	br	11098 <_malloc_r+0x174>
   1150c:	210016c4 	addi	r4,r4,91
   11510:	210b883a 	add	r5,r4,r4
   11514:	003eca06 	br	11040 <_malloc_r+0x11c>
   11518:	100ad1ba 	srli	r5,r2,6
   1151c:	29400e04 	addi	r5,r5,56
   11520:	294d883a 	add	r6,r5,r5
   11524:	003fbd06 	br	1141c <_malloc_r+0x4f8>
   11528:	84ff6026 	beq	r16,r19,112ac <_malloc_r+0x388>
   1152c:	00800074 	movhi	r2,1
   11530:	109b1104 	addi	r2,r2,27716
   11534:	14000217 	ldw	r16,8(r2)
   11538:	00bfff04 	movi	r2,-4
   1153c:	80c00117 	ldw	r3,4(r16)
   11540:	1886703a 	and	r3,r3,r2
   11544:	003f9406 	br	11398 <_malloc_r+0x474>
   11548:	294b883a 	add	r5,r5,r5
   1154c:	1146703a 	and	r3,r2,r5
   11550:	5ac00104 	addi	r11,r11,4
   11554:	183ffc26 	beq	r3,zero,11548 <_malloc_r+0x624>
   11558:	5809883a 	mov	r4,r11
   1155c:	003f0006 	br	11160 <_malloc_r+0x23c>
   11560:	00805504 	movi	r2,340
   11564:	11001336 	bltu	r2,r4,115b4 <_malloc_r+0x690>
   11568:	8808d3fa 	srli	r4,r17,15
   1156c:	21001dc4 	addi	r4,r4,119
   11570:	210b883a 	add	r5,r4,r4
   11574:	003eb206 	br	11040 <_malloc_r+0x11c>
   11578:	00840004 	movi	r2,4096
   1157c:	003f5d06 	br	112f4 <_malloc_r+0x3d0>
   11580:	00800044 	movi	r2,1
   11584:	a0800115 	stw	r2,4(r20)
   11588:	a021883a 	mov	r16,r20
   1158c:	0007883a 	mov	r3,zero
   11590:	003f8106 	br	11398 <_malloc_r+0x474>
   11594:	280bd0ba 	srai	r5,r5,2
   11598:	01800044 	movi	r6,1
   1159c:	38800117 	ldw	r2,4(r7)
   115a0:	314c983a 	sll	r6,r6,r5
   115a4:	180b883a 	mov	r5,r3
   115a8:	3084b03a 	or	r2,r6,r2
   115ac:	38800115 	stw	r2,4(r7)
   115b0:	003fa906 	br	11458 <_malloc_r+0x534>
   115b4:	00815504 	movi	r2,1364
   115b8:	11001836 	bltu	r2,r4,1161c <_malloc_r+0x6f8>
   115bc:	8808d4ba 	srli	r4,r17,18
   115c0:	21001f04 	addi	r4,r4,124
   115c4:	210b883a 	add	r5,r4,r4
   115c8:	003e9d06 	br	11040 <_malloc_r+0x11c>
   115cc:	bdc00404 	addi	r23,r23,16
   115d0:	003f2f06 	br	11290 <_malloc_r+0x36c>
   115d4:	01401504 	movi	r5,84
   115d8:	28c01f36 	bltu	r5,r3,11658 <_malloc_r+0x734>
   115dc:	100ad33a 	srli	r5,r2,12
   115e0:	29401b84 	addi	r5,r5,110
   115e4:	294d883a 	add	r6,r5,r5
   115e8:	003f8c06 	br	1141c <_malloc_r+0x4f8>
   115ec:	9c000217 	ldw	r16,8(r19)
   115f0:	00bfff04 	movi	r2,-4
   115f4:	80c00117 	ldw	r3,4(r16)
   115f8:	1886703a 	and	r3,r3,r2
   115fc:	003f6606 	br	11398 <_malloc_r+0x474>
   11600:	e0c3ffcc 	andi	r3,fp,4095
   11604:	183f2f1e 	bne	r3,zero,112c4 <_malloc_r+0x3a0>
   11608:	98c00217 	ldw	r3,8(r19)
   1160c:	bd49883a 	add	r4,r23,r21
   11610:	21000054 	ori	r4,r4,1
   11614:	19000115 	stw	r4,4(r3)
   11618:	003f5506 	br	11370 <_malloc_r+0x44c>
   1161c:	01403f04 	movi	r5,252
   11620:	01001f84 	movi	r4,126
   11624:	003e8606 	br	11040 <_malloc_r+0x11c>
   11628:	9009883a 	mov	r4,r18
   1162c:	81400204 	addi	r5,r16,8
   11630:	00128800 	call	12880 <_free_r>
   11634:	008000b4 	movhi	r2,2
   11638:	10a7a304 	addi	r2,r2,-24948
   1163c:	10800017 	ldw	r2,0(r2)
   11640:	003f4b06 	br	11370 <_malloc_r+0x44c>
   11644:	00c00044 	movi	r3,1
   11648:	002f883a 	mov	r23,zero
   1164c:	003f3406 	br	11320 <_malloc_r+0x3fc>
   11650:	d5200315 	stw	r20,-32756(gp)
   11654:	003f2106 	br	112dc <_malloc_r+0x3b8>
   11658:	01405504 	movi	r5,340
   1165c:	28c00436 	bltu	r5,r3,11670 <_malloc_r+0x74c>
   11660:	100ad3fa 	srli	r5,r2,15
   11664:	29401dc4 	addi	r5,r5,119
   11668:	294d883a 	add	r6,r5,r5
   1166c:	003f6b06 	br	1141c <_malloc_r+0x4f8>
   11670:	01415504 	movi	r5,1364
   11674:	28c00936 	bltu	r5,r3,1169c <_malloc_r+0x778>
   11678:	100ad4ba 	srli	r5,r2,18
   1167c:	29401f04 	addi	r5,r5,124
   11680:	294d883a 	add	r6,r5,r5
   11684:	003f6506 	br	1141c <_malloc_r+0x4f8>
   11688:	98800117 	ldw	r2,4(r19)
   1168c:	0146303a 	nor	r3,zero,r5
   11690:	1884703a 	and	r2,r3,r2
   11694:	98800115 	stw	r2,4(r19)
   11698:	003f9006 	br	114dc <_malloc_r+0x5b8>
   1169c:	01803f04 	movi	r6,252
   116a0:	01401f84 	movi	r5,126
   116a4:	003f5d06 	br	1141c <_malloc_r+0x4f8>

000116a8 <memchr>:
   116a8:	008000c4 	movi	r2,3
   116ac:	29403fcc 	andi	r5,r5,255
   116b0:	1180282e 	bgeu	r2,r6,11754 <memchr+0xac>
   116b4:	2086703a 	and	r3,r4,r2
   116b8:	1800351e 	bne	r3,zero,11790 <memchr+0xe8>
   116bc:	2816923a 	slli	r11,r5,8
   116c0:	2093883a 	add	r9,r4,r2
   116c4:	22000084 	addi	r8,r4,2
   116c8:	5957883a 	add	r11,r11,r5
   116cc:	5816923a 	slli	r11,r11,8
   116d0:	20c00044 	addi	r3,r4,1
   116d4:	037fbff4 	movhi	r13,65279
   116d8:	6b7fbfc4 	addi	r13,r13,-257
   116dc:	5957883a 	add	r11,r11,r5
   116e0:	5816923a 	slli	r11,r11,8
   116e4:	03202074 	movhi	r12,32897
   116e8:	63202004 	addi	r12,r12,-32640
   116ec:	101d883a 	mov	r14,r2
   116f0:	5957883a 	add	r11,r11,r5
   116f4:	21c00017 	ldw	r7,0(r4)
   116f8:	31bfff04 	addi	r6,r6,-4
   116fc:	1805883a 	mov	r2,r3
   11700:	3acef03a 	xor	r7,r7,r11
   11704:	3b55883a 	add	r10,r7,r13
   11708:	01ce303a 	nor	r7,zero,r7
   1170c:	51ce703a 	and	r7,r10,r7
   11710:	3b0e703a 	and	r7,r7,r12
   11714:	38000a26 	beq	r7,zero,11740 <memchr+0x98>
   11718:	21c00003 	ldbu	r7,0(r4)
   1171c:	39401e26 	beq	r7,r5,11798 <memchr+0xf0>
   11720:	19c00003 	ldbu	r7,0(r3)
   11724:	39401926 	beq	r7,r5,1178c <memchr+0xe4>
   11728:	41c00003 	ldbu	r7,0(r8)
   1172c:	4005883a 	mov	r2,r8
   11730:	39401626 	beq	r7,r5,1178c <memchr+0xe4>
   11734:	49c00003 	ldbu	r7,0(r9)
   11738:	4805883a 	mov	r2,r9
   1173c:	39401326 	beq	r7,r5,1178c <memchr+0xe4>
   11740:	21000104 	addi	r4,r4,4
   11744:	4a400104 	addi	r9,r9,4
   11748:	42000104 	addi	r8,r8,4
   1174c:	18c00104 	addi	r3,r3,4
   11750:	71bfe836 	bltu	r14,r6,116f4 <memchr+0x4c>
   11754:	2005883a 	mov	r2,r4
   11758:	30000a26 	beq	r6,zero,11784 <memchr+0xdc>
   1175c:	10c00003 	ldbu	r3,0(r2)
   11760:	19400a26 	beq	r3,r5,1178c <memchr+0xe4>
   11764:	10c00044 	addi	r3,r2,1
   11768:	118d883a 	add	r6,r2,r6
   1176c:	00000306 	br	1177c <memchr+0xd4>
   11770:	11000003 	ldbu	r4,0(r2)
   11774:	18c00044 	addi	r3,r3,1
   11778:	21400426 	beq	r4,r5,1178c <memchr+0xe4>
   1177c:	1805883a 	mov	r2,r3
   11780:	19bffb1e 	bne	r3,r6,11770 <memchr+0xc8>
   11784:	0005883a 	mov	r2,zero
   11788:	f800283a 	ret
   1178c:	f800283a 	ret
   11790:	2005883a 	mov	r2,r4
   11794:	003ff106 	br	1175c <memchr+0xb4>
   11798:	2005883a 	mov	r2,r4
   1179c:	f800283a 	ret

000117a0 <memcpy>:
   117a0:	defffb04 	addi	sp,sp,-20
   117a4:	dc000015 	stw	r16,0(sp)
   117a8:	dfc00415 	stw	ra,16(sp)
   117ac:	dcc00315 	stw	r19,12(sp)
   117b0:	dc800215 	stw	r18,8(sp)
   117b4:	dc400115 	stw	r17,4(sp)
   117b8:	00c003c4 	movi	r3,15
   117bc:	2021883a 	mov	r16,r4
   117c0:	3005883a 	mov	r2,r6
   117c4:	1980032e 	bgeu	r3,r6,117d4 <memcpy+0x34>
   117c8:	2906b03a 	or	r3,r5,r4
   117cc:	18c000cc 	andi	r3,r3,3
   117d0:	18001026 	beq	r3,zero,11814 <memcpy+0x74>
   117d4:	8007883a 	mov	r3,r16
   117d8:	288f883a 	add	r7,r5,r2
   117dc:	10000526 	beq	r2,zero,117f4 <memcpy+0x54>
   117e0:	29800003 	ldbu	r6,0(r5)
   117e4:	18c00044 	addi	r3,r3,1
   117e8:	29400044 	addi	r5,r5,1
   117ec:	19bfffc5 	stb	r6,-1(r3)
   117f0:	29fffb1e 	bne	r5,r7,117e0 <memcpy+0x40>
   117f4:	8005883a 	mov	r2,r16
   117f8:	dfc00417 	ldw	ra,16(sp)
   117fc:	dcc00317 	ldw	r19,12(sp)
   11800:	dc800217 	ldw	r18,8(sp)
   11804:	dc400117 	ldw	r17,4(sp)
   11808:	dc000017 	ldw	r16,0(sp)
   1180c:	dec00504 	addi	sp,sp,20
   11810:	f800283a 	ret
   11814:	32bffc04 	addi	r10,r6,-16
   11818:	5014d13a 	srli	r10,r10,4
   1181c:	20800404 	addi	r2,r4,16
   11820:	2007883a 	mov	r3,r4
   11824:	5008913a 	slli	r4,r10,4
   11828:	280f883a 	mov	r7,r5
   1182c:	1105883a 	add	r2,r2,r4
   11830:	3a000017 	ldw	r8,0(r7)
   11834:	18c00404 	addi	r3,r3,16
   11838:	39c00404 	addi	r7,r7,16
   1183c:	1a3ffc15 	stw	r8,-16(r3)
   11840:	3a3ffd17 	ldw	r8,-12(r7)
   11844:	1a3ffd15 	stw	r8,-12(r3)
   11848:	3a3ffe17 	ldw	r8,-8(r7)
   1184c:	1a3ffe15 	stw	r8,-8(r3)
   11850:	3a3fff17 	ldw	r8,-4(r7)
   11854:	1a3fff15 	stw	r8,-4(r3)
   11858:	18bff51e 	bne	r3,r2,11830 <memcpy+0x90>
   1185c:	52800044 	addi	r10,r10,1
   11860:	5014913a 	slli	r10,r10,4
   11864:	308003cc 	andi	r2,r6,15
   11868:	010000c4 	movi	r4,3
   1186c:	8287883a 	add	r3,r16,r10
   11870:	2a95883a 	add	r10,r5,r10
   11874:	2080182e 	bgeu	r4,r2,118d8 <memcpy+0x138>
   11878:	147fff04 	addi	r17,r2,-4
   1187c:	8808d0ba 	srli	r4,r17,2
   11880:	1a400104 	addi	r9,r3,4
   11884:	180d883a 	mov	r6,r3
   11888:	2105883a 	add	r2,r4,r4
   1188c:	1085883a 	add	r2,r2,r2
   11890:	4893883a 	add	r9,r9,r2
   11894:	500f883a 	mov	r7,r10
   11898:	3a000017 	ldw	r8,0(r7)
   1189c:	31800104 	addi	r6,r6,4
   118a0:	39c00104 	addi	r7,r7,4
   118a4:	323fff15 	stw	r8,-4(r6)
   118a8:	327ffb1e 	bne	r6,r9,11898 <memcpy+0xf8>
   118ac:	20800044 	addi	r2,r4,1
   118b0:	1085883a 	add	r2,r2,r2
   118b4:	1085883a 	add	r2,r2,r2
   118b8:	017fff04 	movi	r5,-4
   118bc:	18a5883a 	add	r18,r3,r2
   118c0:	50a7883a 	add	r19,r10,r2
   118c4:	00135680 	call	13568 <__mulsi3>
   118c8:	1445883a 	add	r2,r2,r17
   118cc:	980b883a 	mov	r5,r19
   118d0:	9007883a 	mov	r3,r18
   118d4:	003fc006 	br	117d8 <memcpy+0x38>
   118d8:	500b883a 	mov	r5,r10
   118dc:	003fbe06 	br	117d8 <memcpy+0x38>

000118e0 <memmove>:
   118e0:	defffb04 	addi	sp,sp,-20
   118e4:	dc000015 	stw	r16,0(sp)
   118e8:	dfc00415 	stw	ra,16(sp)
   118ec:	dcc00315 	stw	r19,12(sp)
   118f0:	dc800215 	stw	r18,8(sp)
   118f4:	dc400115 	stw	r17,4(sp)
   118f8:	2021883a 	mov	r16,r4
   118fc:	300f883a 	mov	r7,r6
   11900:	2900122e 	bgeu	r5,r4,1194c <memmove+0x6c>
   11904:	2987883a 	add	r3,r5,r6
   11908:	20c0102e 	bgeu	r4,r3,1194c <memmove+0x6c>
   1190c:	218b883a 	add	r5,r4,r6
   11910:	1989c83a 	sub	r4,r3,r6
   11914:	30000526 	beq	r6,zero,1192c <memmove+0x4c>
   11918:	18ffffc4 	addi	r3,r3,-1
   1191c:	18800003 	ldbu	r2,0(r3)
   11920:	297fffc4 	addi	r5,r5,-1
   11924:	28800005 	stb	r2,0(r5)
   11928:	193ffb1e 	bne	r3,r4,11918 <memmove+0x38>
   1192c:	8005883a 	mov	r2,r16
   11930:	dfc00417 	ldw	ra,16(sp)
   11934:	dcc00317 	ldw	r19,12(sp)
   11938:	dc800217 	ldw	r18,8(sp)
   1193c:	dc400117 	ldw	r17,4(sp)
   11940:	dc000017 	ldw	r16,0(sp)
   11944:	dec00504 	addi	sp,sp,20
   11948:	f800283a 	ret
   1194c:	008003c4 	movi	r2,15
   11950:	1180422e 	bgeu	r2,r6,11a5c <memmove+0x17c>
   11954:	2c04b03a 	or	r2,r5,r16
   11958:	108000cc 	andi	r2,r2,3
   1195c:	10003f1e 	bne	r2,zero,11a5c <memmove+0x17c>
   11960:	32bffc04 	addi	r10,r6,-16
   11964:	5014d13a 	srli	r10,r10,4
   11968:	81000404 	addi	r4,r16,16
   1196c:	8007883a 	mov	r3,r16
   11970:	5004913a 	slli	r2,r10,4
   11974:	280f883a 	mov	r7,r5
   11978:	2089883a 	add	r4,r4,r2
   1197c:	38800017 	ldw	r2,0(r7)
   11980:	18c00404 	addi	r3,r3,16
   11984:	39c00404 	addi	r7,r7,16
   11988:	18bffc15 	stw	r2,-16(r3)
   1198c:	38bffd17 	ldw	r2,-12(r7)
   11990:	18bffd15 	stw	r2,-12(r3)
   11994:	38bffe17 	ldw	r2,-8(r7)
   11998:	18bffe15 	stw	r2,-8(r3)
   1199c:	38bfff17 	ldw	r2,-4(r7)
   119a0:	18bfff15 	stw	r2,-4(r3)
   119a4:	193ff51e 	bne	r3,r4,1197c <memmove+0x9c>
   119a8:	52800044 	addi	r10,r10,1
   119ac:	5014913a 	slli	r10,r10,4
   119b0:	31c003cc 	andi	r7,r6,15
   119b4:	008000c4 	movi	r2,3
   119b8:	8287883a 	add	r3,r16,r10
   119bc:	2a95883a 	add	r10,r5,r10
   119c0:	11c0282e 	bgeu	r2,r7,11a64 <memmove+0x184>
   119c4:	3c7fff04 	addi	r17,r7,-4
   119c8:	8808d0ba 	srli	r4,r17,2
   119cc:	1a400104 	addi	r9,r3,4
   119d0:	180d883a 	mov	r6,r3
   119d4:	2105883a 	add	r2,r4,r4
   119d8:	1085883a 	add	r2,r2,r2
   119dc:	4893883a 	add	r9,r9,r2
   119e0:	5005883a 	mov	r2,r10
   119e4:	12000017 	ldw	r8,0(r2)
   119e8:	31800104 	addi	r6,r6,4
   119ec:	10800104 	addi	r2,r2,4
   119f0:	323fff15 	stw	r8,-4(r6)
   119f4:	327ffb1e 	bne	r6,r9,119e4 <memmove+0x104>
   119f8:	20800044 	addi	r2,r4,1
   119fc:	1085883a 	add	r2,r2,r2
   11a00:	1085883a 	add	r2,r2,r2
   11a04:	017fff04 	movi	r5,-4
   11a08:	18a5883a 	add	r18,r3,r2
   11a0c:	50a7883a 	add	r19,r10,r2
   11a10:	00135680 	call	13568 <__mulsi3>
   11a14:	144f883a 	add	r7,r2,r17
   11a18:	980b883a 	mov	r5,r19
   11a1c:	9007883a 	mov	r3,r18
   11a20:	383fc226 	beq	r7,zero,1192c <memmove+0x4c>
   11a24:	19cf883a 	add	r7,r3,r7
   11a28:	29800003 	ldbu	r6,0(r5)
   11a2c:	18c00044 	addi	r3,r3,1
   11a30:	29400044 	addi	r5,r5,1
   11a34:	19bfffc5 	stb	r6,-1(r3)
   11a38:	19fffb1e 	bne	r3,r7,11a28 <memmove+0x148>
   11a3c:	8005883a 	mov	r2,r16
   11a40:	dfc00417 	ldw	ra,16(sp)
   11a44:	dcc00317 	ldw	r19,12(sp)
   11a48:	dc800217 	ldw	r18,8(sp)
   11a4c:	dc400117 	ldw	r17,4(sp)
   11a50:	dc000017 	ldw	r16,0(sp)
   11a54:	dec00504 	addi	sp,sp,20
   11a58:	f800283a 	ret
   11a5c:	8007883a 	mov	r3,r16
   11a60:	003fef06 	br	11a20 <memmove+0x140>
   11a64:	500b883a 	mov	r5,r10
   11a68:	003fed06 	br	11a20 <memmove+0x140>

00011a6c <_realloc_r>:
   11a6c:	defff504 	addi	sp,sp,-44
   11a70:	dd400615 	stw	r21,24(sp)
   11a74:	dc800315 	stw	r18,12(sp)
   11a78:	dc000115 	stw	r16,4(sp)
   11a7c:	dfc00a15 	stw	ra,40(sp)
   11a80:	df000915 	stw	fp,36(sp)
   11a84:	ddc00815 	stw	r23,32(sp)
   11a88:	dd800715 	stw	r22,28(sp)
   11a8c:	dd000515 	stw	r20,20(sp)
   11a90:	dcc00415 	stw	r19,16(sp)
   11a94:	dc400215 	stw	r17,8(sp)
   11a98:	2821883a 	mov	r16,r5
   11a9c:	202b883a 	mov	r21,r4
   11aa0:	3025883a 	mov	r18,r6
   11aa4:	28009626 	beq	r5,zero,11d00 <_realloc_r+0x294>
   11aa8:	0013b540 	call	13b54 <__malloc_lock>
   11aac:	80bfff17 	ldw	r2,-4(r16)
   11ab0:	04ffff04 	movi	r19,-4
   11ab4:	90c002c4 	addi	r3,r18,11
   11ab8:	01000584 	movi	r4,22
   11abc:	85bffe04 	addi	r22,r16,-8
   11ac0:	14e6703a 	and	r19,r2,r19
   11ac4:	20c0372e 	bgeu	r4,r3,11ba4 <_realloc_r+0x138>
   11ac8:	047ffe04 	movi	r17,-8
   11acc:	1c62703a 	and	r17,r3,r17
   11ad0:	8807883a 	mov	r3,r17
   11ad4:	88005a16 	blt	r17,zero,11c40 <_realloc_r+0x1d4>
   11ad8:	8c805936 	bltu	r17,r18,11c40 <_realloc_r+0x1d4>
   11adc:	98c0340e 	bge	r19,r3,11bb0 <_realloc_r+0x144>
   11ae0:	07000074 	movhi	fp,1
   11ae4:	e71b1104 	addi	fp,fp,27716
   11ae8:	e1400217 	ldw	r5,8(fp)
   11aec:	b4c9883a 	add	r4,r22,r19
   11af0:	29009026 	beq	r5,r4,11d34 <_realloc_r+0x2c8>
   11af4:	21800117 	ldw	r6,4(r4)
   11af8:	01ffff84 	movi	r7,-2
   11afc:	31ce703a 	and	r7,r6,r7
   11b00:	21cf883a 	add	r7,r4,r7
   11b04:	39c00117 	ldw	r7,4(r7)
   11b08:	39c0004c 	andi	r7,r7,1
   11b0c:	38004326 	beq	r7,zero,11c1c <_realloc_r+0x1b0>
   11b10:	000d883a 	mov	r6,zero
   11b14:	0009883a 	mov	r4,zero
   11b18:	1080004c 	andi	r2,r2,1
   11b1c:	10005a1e 	bne	r2,zero,11c88 <_realloc_r+0x21c>
   11b20:	85fffe17 	ldw	r23,-8(r16)
   11b24:	00bfff04 	movi	r2,-4
   11b28:	b5efc83a 	sub	r23,r22,r23
   11b2c:	b9c00117 	ldw	r7,4(r23)
   11b30:	388e703a 	and	r7,r7,r2
   11b34:	3ccf883a 	add	r7,r7,r19
   11b38:	20005226 	beq	r4,zero,11c84 <_realloc_r+0x218>
   11b3c:	31e9883a 	add	r20,r6,r7
   11b40:	2140c726 	beq	r4,r5,11e60 <_realloc_r+0x3f4>
   11b44:	a0c04f16 	blt	r20,r3,11c84 <_realloc_r+0x218>
   11b48:	20800317 	ldw	r2,12(r4)
   11b4c:	20c00217 	ldw	r3,8(r4)
   11b50:	99bfff04 	addi	r6,r19,-4
   11b54:	01000904 	movi	r4,36
   11b58:	18800315 	stw	r2,12(r3)
   11b5c:	10c00215 	stw	r3,8(r2)
   11b60:	b8c00217 	ldw	r3,8(r23)
   11b64:	b8800317 	ldw	r2,12(r23)
   11b68:	bc800204 	addi	r18,r23,8
   11b6c:	18800315 	stw	r2,12(r3)
   11b70:	10c00215 	stw	r3,8(r2)
   11b74:	2180ed36 	bltu	r4,r6,11f2c <_realloc_r+0x4c0>
   11b78:	008004c4 	movi	r2,19
   11b7c:	11809b2e 	bgeu	r2,r6,11dec <_realloc_r+0x380>
   11b80:	80800017 	ldw	r2,0(r16)
   11b84:	b8800215 	stw	r2,8(r23)
   11b88:	80800117 	ldw	r2,4(r16)
   11b8c:	b8800315 	stw	r2,12(r23)
   11b90:	008006c4 	movi	r2,27
   11b94:	1180f936 	bltu	r2,r6,11f7c <_realloc_r+0x510>
   11b98:	b8800404 	addi	r2,r23,16
   11b9c:	80c00204 	addi	r3,r16,8
   11ba0:	00009406 	br	11df4 <_realloc_r+0x388>
   11ba4:	00c00404 	movi	r3,16
   11ba8:	1823883a 	mov	r17,r3
   11bac:	003fca06 	br	11ad8 <_realloc_r+0x6c>
   11bb0:	9829883a 	mov	r20,r19
   11bb4:	a447c83a 	sub	r3,r20,r17
   11bb8:	010003c4 	movi	r4,15
   11bbc:	1080004c 	andi	r2,r2,1
   11bc0:	20c02336 	bltu	r4,r3,11c50 <_realloc_r+0x1e4>
   11bc4:	1504b03a 	or	r2,r2,r20
   11bc8:	b0800115 	stw	r2,4(r22)
   11bcc:	b52d883a 	add	r22,r22,r20
   11bd0:	b0800117 	ldw	r2,4(r22)
   11bd4:	10800054 	ori	r2,r2,1
   11bd8:	b0800115 	stw	r2,4(r22)
   11bdc:	a809883a 	mov	r4,r21
   11be0:	0013b740 	call	13b74 <__malloc_unlock>
   11be4:	8025883a 	mov	r18,r16
   11be8:	9005883a 	mov	r2,r18
   11bec:	dfc00a17 	ldw	ra,40(sp)
   11bf0:	df000917 	ldw	fp,36(sp)
   11bf4:	ddc00817 	ldw	r23,32(sp)
   11bf8:	dd800717 	ldw	r22,28(sp)
   11bfc:	dd400617 	ldw	r21,24(sp)
   11c00:	dd000517 	ldw	r20,20(sp)
   11c04:	dcc00417 	ldw	r19,16(sp)
   11c08:	dc800317 	ldw	r18,12(sp)
   11c0c:	dc400217 	ldw	r17,8(sp)
   11c10:	dc000117 	ldw	r16,4(sp)
   11c14:	dec00b04 	addi	sp,sp,44
   11c18:	f800283a 	ret
   11c1c:	01ffff04 	movi	r7,-4
   11c20:	31cc703a 	and	r6,r6,r7
   11c24:	34e9883a 	add	r20,r6,r19
   11c28:	a0ffbb16 	blt	r20,r3,11b18 <_realloc_r+0xac>
   11c2c:	20c00317 	ldw	r3,12(r4)
   11c30:	21000217 	ldw	r4,8(r4)
   11c34:	20c00315 	stw	r3,12(r4)
   11c38:	19000215 	stw	r4,8(r3)
   11c3c:	003fdd06 	br	11bb4 <_realloc_r+0x148>
   11c40:	00800304 	movi	r2,12
   11c44:	a8800015 	stw	r2,0(r21)
   11c48:	0025883a 	mov	r18,zero
   11c4c:	003fe606 	br	11be8 <_realloc_r+0x17c>
   11c50:	1444b03a 	or	r2,r2,r17
   11c54:	b0800115 	stw	r2,4(r22)
   11c58:	b44b883a 	add	r5,r22,r17
   11c5c:	18800054 	ori	r2,r3,1
   11c60:	28800115 	stw	r2,4(r5)
   11c64:	28c7883a 	add	r3,r5,r3
   11c68:	18800117 	ldw	r2,4(r3)
   11c6c:	a809883a 	mov	r4,r21
   11c70:	29400204 	addi	r5,r5,8
   11c74:	10800054 	ori	r2,r2,1
   11c78:	18800115 	stw	r2,4(r3)
   11c7c:	00128800 	call	12880 <_free_r>
   11c80:	003fd606 	br	11bdc <_realloc_r+0x170>
   11c84:	38c0330e 	bge	r7,r3,11d54 <_realloc_r+0x2e8>
   11c88:	900b883a 	mov	r5,r18
   11c8c:	a809883a 	mov	r4,r21
   11c90:	0010f240 	call	10f24 <_malloc_r>
   11c94:	1025883a 	mov	r18,r2
   11c98:	10001626 	beq	r2,zero,11cf4 <_realloc_r+0x288>
   11c9c:	80bfff17 	ldw	r2,-4(r16)
   11ca0:	00ffff84 	movi	r3,-2
   11ca4:	913ffe04 	addi	r4,r18,-8
   11ca8:	10c6703a 	and	r3,r2,r3
   11cac:	b0c7883a 	add	r3,r22,r3
   11cb0:	20c09926 	beq	r4,r3,11f18 <_realloc_r+0x4ac>
   11cb4:	99bfff04 	addi	r6,r19,-4
   11cb8:	00800904 	movi	r2,36
   11cbc:	11806436 	bltu	r2,r6,11e50 <_realloc_r+0x3e4>
   11cc0:	00c004c4 	movi	r3,19
   11cc4:	19804036 	bltu	r3,r6,11dc8 <_realloc_r+0x35c>
   11cc8:	9005883a 	mov	r2,r18
   11ccc:	8007883a 	mov	r3,r16
   11cd0:	19000017 	ldw	r4,0(r3)
   11cd4:	11000015 	stw	r4,0(r2)
   11cd8:	19000117 	ldw	r4,4(r3)
   11cdc:	11000115 	stw	r4,4(r2)
   11ce0:	18c00217 	ldw	r3,8(r3)
   11ce4:	10c00215 	stw	r3,8(r2)
   11ce8:	a809883a 	mov	r4,r21
   11cec:	800b883a 	mov	r5,r16
   11cf0:	00128800 	call	12880 <_free_r>
   11cf4:	a809883a 	mov	r4,r21
   11cf8:	0013b740 	call	13b74 <__malloc_unlock>
   11cfc:	003fba06 	br	11be8 <_realloc_r+0x17c>
   11d00:	300b883a 	mov	r5,r6
   11d04:	dfc00a17 	ldw	ra,40(sp)
   11d08:	df000917 	ldw	fp,36(sp)
   11d0c:	ddc00817 	ldw	r23,32(sp)
   11d10:	dd800717 	ldw	r22,28(sp)
   11d14:	dd400617 	ldw	r21,24(sp)
   11d18:	dd000517 	ldw	r20,20(sp)
   11d1c:	dcc00417 	ldw	r19,16(sp)
   11d20:	dc800317 	ldw	r18,12(sp)
   11d24:	dc400217 	ldw	r17,8(sp)
   11d28:	dc000117 	ldw	r16,4(sp)
   11d2c:	dec00b04 	addi	sp,sp,44
   11d30:	0010f241 	jmpi	10f24 <_malloc_r>
   11d34:	29800117 	ldw	r6,4(r5)
   11d38:	013fff04 	movi	r4,-4
   11d3c:	89c00404 	addi	r7,r17,16
   11d40:	310c703a 	and	r6,r6,r4
   11d44:	34c9883a 	add	r4,r6,r19
   11d48:	21c0340e 	bge	r4,r7,11e1c <_realloc_r+0x3b0>
   11d4c:	2809883a 	mov	r4,r5
   11d50:	003f7106 	br	11b18 <_realloc_r+0xac>
   11d54:	b8800317 	ldw	r2,12(r23)
   11d58:	b8c00217 	ldw	r3,8(r23)
   11d5c:	99bfff04 	addi	r6,r19,-4
   11d60:	01000904 	movi	r4,36
   11d64:	18800315 	stw	r2,12(r3)
   11d68:	10c00215 	stw	r3,8(r2)
   11d6c:	bc800204 	addi	r18,r23,8
   11d70:	21807836 	bltu	r4,r6,11f54 <_realloc_r+0x4e8>
   11d74:	008004c4 	movi	r2,19
   11d78:	1180732e 	bgeu	r2,r6,11f48 <_realloc_r+0x4dc>
   11d7c:	80800017 	ldw	r2,0(r16)
   11d80:	b8800215 	stw	r2,8(r23)
   11d84:	80800117 	ldw	r2,4(r16)
   11d88:	b8800315 	stw	r2,12(r23)
   11d8c:	008006c4 	movi	r2,27
   11d90:	11808936 	bltu	r2,r6,11fb8 <_realloc_r+0x54c>
   11d94:	b8800404 	addi	r2,r23,16
   11d98:	80c00204 	addi	r3,r16,8
   11d9c:	19000017 	ldw	r4,0(r3)
   11da0:	9021883a 	mov	r16,r18
   11da4:	3829883a 	mov	r20,r7
   11da8:	11000015 	stw	r4,0(r2)
   11dac:	19000117 	ldw	r4,4(r3)
   11db0:	b82d883a 	mov	r22,r23
   11db4:	11000115 	stw	r4,4(r2)
   11db8:	18c00217 	ldw	r3,8(r3)
   11dbc:	10c00215 	stw	r3,8(r2)
   11dc0:	b8800117 	ldw	r2,4(r23)
   11dc4:	003f7b06 	br	11bb4 <_realloc_r+0x148>
   11dc8:	80c00017 	ldw	r3,0(r16)
   11dcc:	90c00015 	stw	r3,0(r18)
   11dd0:	80c00117 	ldw	r3,4(r16)
   11dd4:	90c00115 	stw	r3,4(r18)
   11dd8:	00c006c4 	movi	r3,27
   11ddc:	19804636 	bltu	r3,r6,11ef8 <_realloc_r+0x48c>
   11de0:	90800204 	addi	r2,r18,8
   11de4:	80c00204 	addi	r3,r16,8
   11de8:	003fb906 	br	11cd0 <_realloc_r+0x264>
   11dec:	9005883a 	mov	r2,r18
   11df0:	8007883a 	mov	r3,r16
   11df4:	19000017 	ldw	r4,0(r3)
   11df8:	9021883a 	mov	r16,r18
   11dfc:	b82d883a 	mov	r22,r23
   11e00:	11000015 	stw	r4,0(r2)
   11e04:	19000117 	ldw	r4,4(r3)
   11e08:	11000115 	stw	r4,4(r2)
   11e0c:	18c00217 	ldw	r3,8(r3)
   11e10:	10c00215 	stw	r3,8(r2)
   11e14:	b8800117 	ldw	r2,4(r23)
   11e18:	003f6606 	br	11bb4 <_realloc_r+0x148>
   11e1c:	2445c83a 	sub	r2,r4,r17
   11e20:	b46d883a 	add	r22,r22,r17
   11e24:	10800054 	ori	r2,r2,1
   11e28:	b0800115 	stw	r2,4(r22)
   11e2c:	80bfff17 	ldw	r2,-4(r16)
   11e30:	a809883a 	mov	r4,r21
   11e34:	e5800215 	stw	r22,8(fp)
   11e38:	1080004c 	andi	r2,r2,1
   11e3c:	88a2b03a 	or	r17,r17,r2
   11e40:	847fff15 	stw	r17,-4(r16)
   11e44:	0013b740 	call	13b74 <__malloc_unlock>
   11e48:	8025883a 	mov	r18,r16
   11e4c:	003f6606 	br	11be8 <_realloc_r+0x17c>
   11e50:	9009883a 	mov	r4,r18
   11e54:	800b883a 	mov	r5,r16
   11e58:	00118e00 	call	118e0 <memmove>
   11e5c:	003fa206 	br	11ce8 <_realloc_r+0x27c>
   11e60:	88800404 	addi	r2,r17,16
   11e64:	a0bf8716 	blt	r20,r2,11c84 <_realloc_r+0x218>
   11e68:	b8800317 	ldw	r2,12(r23)
   11e6c:	b8c00217 	ldw	r3,8(r23)
   11e70:	99bfff04 	addi	r6,r19,-4
   11e74:	01000904 	movi	r4,36
   11e78:	18800315 	stw	r2,12(r3)
   11e7c:	10c00215 	stw	r3,8(r2)
   11e80:	bc800204 	addi	r18,r23,8
   11e84:	21806536 	bltu	r4,r6,1201c <_realloc_r+0x5b0>
   11e88:	008004c4 	movi	r2,19
   11e8c:	1180592e 	bgeu	r2,r6,11ff4 <_realloc_r+0x588>
   11e90:	80800017 	ldw	r2,0(r16)
   11e94:	b8800215 	stw	r2,8(r23)
   11e98:	80800117 	ldw	r2,4(r16)
   11e9c:	b8800315 	stw	r2,12(r23)
   11ea0:	008006c4 	movi	r2,27
   11ea4:	11806136 	bltu	r2,r6,1202c <_realloc_r+0x5c0>
   11ea8:	b8800404 	addi	r2,r23,16
   11eac:	80c00204 	addi	r3,r16,8
   11eb0:	19000017 	ldw	r4,0(r3)
   11eb4:	11000015 	stw	r4,0(r2)
   11eb8:	19000117 	ldw	r4,4(r3)
   11ebc:	11000115 	stw	r4,4(r2)
   11ec0:	18c00217 	ldw	r3,8(r3)
   11ec4:	10c00215 	stw	r3,8(r2)
   11ec8:	a447c83a 	sub	r3,r20,r17
   11ecc:	bc45883a 	add	r2,r23,r17
   11ed0:	18c00054 	ori	r3,r3,1
   11ed4:	10c00115 	stw	r3,4(r2)
   11ed8:	b8c00117 	ldw	r3,4(r23)
   11edc:	e0800215 	stw	r2,8(fp)
   11ee0:	a809883a 	mov	r4,r21
   11ee4:	1880004c 	andi	r2,r3,1
   11ee8:	88a2b03a 	or	r17,r17,r2
   11eec:	bc400115 	stw	r17,4(r23)
   11ef0:	0013b740 	call	13b74 <__malloc_unlock>
   11ef4:	003f3c06 	br	11be8 <_realloc_r+0x17c>
   11ef8:	80c00217 	ldw	r3,8(r16)
   11efc:	90c00215 	stw	r3,8(r18)
   11f00:	80c00317 	ldw	r3,12(r16)
   11f04:	90c00315 	stw	r3,12(r18)
   11f08:	30802426 	beq	r6,r2,11f9c <_realloc_r+0x530>
   11f0c:	90800404 	addi	r2,r18,16
   11f10:	80c00404 	addi	r3,r16,16
   11f14:	003f6e06 	br	11cd0 <_realloc_r+0x264>
   11f18:	953fff17 	ldw	r20,-4(r18)
   11f1c:	00ffff04 	movi	r3,-4
   11f20:	a0e8703a 	and	r20,r20,r3
   11f24:	a4e9883a 	add	r20,r20,r19
   11f28:	003f2206 	br	11bb4 <_realloc_r+0x148>
   11f2c:	800b883a 	mov	r5,r16
   11f30:	9009883a 	mov	r4,r18
   11f34:	00118e00 	call	118e0 <memmove>
   11f38:	9021883a 	mov	r16,r18
   11f3c:	b8800117 	ldw	r2,4(r23)
   11f40:	b82d883a 	mov	r22,r23
   11f44:	003f1b06 	br	11bb4 <_realloc_r+0x148>
   11f48:	9005883a 	mov	r2,r18
   11f4c:	8007883a 	mov	r3,r16
   11f50:	003f9206 	br	11d9c <_realloc_r+0x330>
   11f54:	800b883a 	mov	r5,r16
   11f58:	9009883a 	mov	r4,r18
   11f5c:	d9c00015 	stw	r7,0(sp)
   11f60:	00118e00 	call	118e0 <memmove>
   11f64:	d9c00017 	ldw	r7,0(sp)
   11f68:	9021883a 	mov	r16,r18
   11f6c:	b8800117 	ldw	r2,4(r23)
   11f70:	3829883a 	mov	r20,r7
   11f74:	b82d883a 	mov	r22,r23
   11f78:	003f0e06 	br	11bb4 <_realloc_r+0x148>
   11f7c:	80800217 	ldw	r2,8(r16)
   11f80:	b8800415 	stw	r2,16(r23)
   11f84:	80800317 	ldw	r2,12(r16)
   11f88:	b8800515 	stw	r2,20(r23)
   11f8c:	31001226 	beq	r6,r4,11fd8 <_realloc_r+0x56c>
   11f90:	b8800604 	addi	r2,r23,24
   11f94:	80c00404 	addi	r3,r16,16
   11f98:	003f9606 	br	11df4 <_realloc_r+0x388>
   11f9c:	81000417 	ldw	r4,16(r16)
   11fa0:	90800604 	addi	r2,r18,24
   11fa4:	80c00604 	addi	r3,r16,24
   11fa8:	91000415 	stw	r4,16(r18)
   11fac:	81000517 	ldw	r4,20(r16)
   11fb0:	91000515 	stw	r4,20(r18)
   11fb4:	003f4606 	br	11cd0 <_realloc_r+0x264>
   11fb8:	80800217 	ldw	r2,8(r16)
   11fbc:	b8800415 	stw	r2,16(r23)
   11fc0:	80800317 	ldw	r2,12(r16)
   11fc4:	b8800515 	stw	r2,20(r23)
   11fc8:	31000d26 	beq	r6,r4,12000 <_realloc_r+0x594>
   11fcc:	b8800604 	addi	r2,r23,24
   11fd0:	80c00404 	addi	r3,r16,16
   11fd4:	003f7106 	br	11d9c <_realloc_r+0x330>
   11fd8:	81000417 	ldw	r4,16(r16)
   11fdc:	b8800804 	addi	r2,r23,32
   11fe0:	80c00604 	addi	r3,r16,24
   11fe4:	b9000615 	stw	r4,24(r23)
   11fe8:	81000517 	ldw	r4,20(r16)
   11fec:	b9000715 	stw	r4,28(r23)
   11ff0:	003f8006 	br	11df4 <_realloc_r+0x388>
   11ff4:	9005883a 	mov	r2,r18
   11ff8:	8007883a 	mov	r3,r16
   11ffc:	003fac06 	br	11eb0 <_realloc_r+0x444>
   12000:	81000417 	ldw	r4,16(r16)
   12004:	b8800804 	addi	r2,r23,32
   12008:	80c00604 	addi	r3,r16,24
   1200c:	b9000615 	stw	r4,24(r23)
   12010:	81000517 	ldw	r4,20(r16)
   12014:	b9000715 	stw	r4,28(r23)
   12018:	003f6006 	br	11d9c <_realloc_r+0x330>
   1201c:	9009883a 	mov	r4,r18
   12020:	800b883a 	mov	r5,r16
   12024:	00118e00 	call	118e0 <memmove>
   12028:	003fa706 	br	11ec8 <_realloc_r+0x45c>
   1202c:	80800217 	ldw	r2,8(r16)
   12030:	b8800415 	stw	r2,16(r23)
   12034:	80800317 	ldw	r2,12(r16)
   12038:	b8800515 	stw	r2,20(r23)
   1203c:	31000326 	beq	r6,r4,1204c <_realloc_r+0x5e0>
   12040:	b8800604 	addi	r2,r23,24
   12044:	80c00404 	addi	r3,r16,16
   12048:	003f9906 	br	11eb0 <_realloc_r+0x444>
   1204c:	81000417 	ldw	r4,16(r16)
   12050:	b8800804 	addi	r2,r23,32
   12054:	80c00604 	addi	r3,r16,24
   12058:	b9000615 	stw	r4,24(r23)
   1205c:	81000517 	ldw	r4,20(r16)
   12060:	b9000715 	stw	r4,28(r23)
   12064:	003f9206 	br	11eb0 <_realloc_r+0x444>

00012068 <_sbrk_r>:
   12068:	defffd04 	addi	sp,sp,-12
   1206c:	dc400115 	stw	r17,4(sp)
   12070:	dc000015 	stw	r16,0(sp)
   12074:	2023883a 	mov	r17,r4
   12078:	040000b4 	movhi	r16,2
   1207c:	84279c04 	addi	r16,r16,-24976
   12080:	2809883a 	mov	r4,r5
   12084:	dfc00215 	stw	ra,8(sp)
   12088:	80000015 	stw	zero,0(r16)
   1208c:	0013d580 	call	13d58 <sbrk>
   12090:	00ffffc4 	movi	r3,-1
   12094:	10c00526 	beq	r2,r3,120ac <_sbrk_r+0x44>
   12098:	dfc00217 	ldw	ra,8(sp)
   1209c:	dc400117 	ldw	r17,4(sp)
   120a0:	dc000017 	ldw	r16,0(sp)
   120a4:	dec00304 	addi	sp,sp,12
   120a8:	f800283a 	ret
   120ac:	80c00017 	ldw	r3,0(r16)
   120b0:	183ff926 	beq	r3,zero,12098 <_sbrk_r+0x30>
   120b4:	88c00015 	stw	r3,0(r17)
   120b8:	dfc00217 	ldw	ra,8(sp)
   120bc:	dc400117 	ldw	r17,4(sp)
   120c0:	dc000017 	ldw	r16,0(sp)
   120c4:	dec00304 	addi	sp,sp,12
   120c8:	f800283a 	ret

000120cc <__swsetup_r>:
   120cc:	008000b4 	movhi	r2,2
   120d0:	10a0c804 	addi	r2,r2,-31968
   120d4:	10800017 	ldw	r2,0(r2)
   120d8:	defffd04 	addi	sp,sp,-12
   120dc:	dc400115 	stw	r17,4(sp)
   120e0:	dc000015 	stw	r16,0(sp)
   120e4:	dfc00215 	stw	ra,8(sp)
   120e8:	2023883a 	mov	r17,r4
   120ec:	2821883a 	mov	r16,r5
   120f0:	10000226 	beq	r2,zero,120fc <__swsetup_r+0x30>
   120f4:	10c00e17 	ldw	r3,56(r2)
   120f8:	18003d26 	beq	r3,zero,121f0 <__swsetup_r+0x124>
   120fc:	8080030b 	ldhu	r2,12(r16)
   12100:	10c0020c 	andi	r3,r2,8
   12104:	18ffffcc 	andi	r3,r3,65535
   12108:	18e0001c 	xori	r3,r3,32768
   1210c:	18e00004 	addi	r3,r3,-32768
   12110:	18001226 	beq	r3,zero,1215c <__swsetup_r+0x90>
   12114:	80c00417 	ldw	r3,16(r16)
   12118:	18001f26 	beq	r3,zero,12198 <__swsetup_r+0xcc>
   1211c:	1100004c 	andi	r4,r2,1
   12120:	2000261e 	bne	r4,zero,121bc <__swsetup_r+0xf0>
   12124:	1080008c 	andi	r2,r2,2
   12128:	10bfffcc 	andi	r2,r2,65535
   1212c:	10a0001c 	xori	r2,r2,32768
   12130:	10a00004 	addi	r2,r2,-32768
   12134:	1000311e 	bne	r2,zero,121fc <__swsetup_r+0x130>
   12138:	80800517 	ldw	r2,20(r16)
   1213c:	80800215 	stw	r2,8(r16)
   12140:	18002326 	beq	r3,zero,121d0 <__swsetup_r+0x104>
   12144:	0005883a 	mov	r2,zero
   12148:	dfc00217 	ldw	ra,8(sp)
   1214c:	dc400117 	ldw	r17,4(sp)
   12150:	dc000017 	ldw	r16,0(sp)
   12154:	dec00304 	addi	sp,sp,12
   12158:	f800283a 	ret
   1215c:	10c0040c 	andi	r3,r2,16
   12160:	18ffffcc 	andi	r3,r3,65535
   12164:	18e0001c 	xori	r3,r3,32768
   12168:	18e00004 	addi	r3,r3,-32768
   1216c:	18001e26 	beq	r3,zero,121e8 <__swsetup_r+0x11c>
   12170:	10c0010c 	andi	r3,r2,4
   12174:	18ffffcc 	andi	r3,r3,65535
   12178:	18e0001c 	xori	r3,r3,32768
   1217c:	18e00004 	addi	r3,r3,-32768
   12180:	1800211e 	bne	r3,zero,12208 <__swsetup_r+0x13c>
   12184:	80c00417 	ldw	r3,16(r16)
   12188:	11400214 	ori	r5,r2,8
   1218c:	8140030d 	sth	r5,12(r16)
   12190:	2805883a 	mov	r2,r5
   12194:	183fe11e 	bne	r3,zero,1211c <__swsetup_r+0x50>
   12198:	1140a00c 	andi	r5,r2,640
   1219c:	01008004 	movi	r4,512
   121a0:	293fde26 	beq	r5,r4,1211c <__swsetup_r+0x50>
   121a4:	8809883a 	mov	r4,r17
   121a8:	800b883a 	mov	r5,r16
   121ac:	0012cb00 	call	12cb0 <__smakebuf_r>
   121b0:	8080030b 	ldhu	r2,12(r16)
   121b4:	80c00417 	ldw	r3,16(r16)
   121b8:	003fd806 	br	1211c <__swsetup_r+0x50>
   121bc:	80800517 	ldw	r2,20(r16)
   121c0:	80000215 	stw	zero,8(r16)
   121c4:	0085c83a 	sub	r2,zero,r2
   121c8:	80800615 	stw	r2,24(r16)
   121cc:	183fdd1e 	bne	r3,zero,12144 <__swsetup_r+0x78>
   121d0:	8080030b 	ldhu	r2,12(r16)
   121d4:	1080200c 	andi	r2,r2,128
   121d8:	10bfffcc 	andi	r2,r2,65535
   121dc:	10a0001c 	xori	r2,r2,32768
   121e0:	10a00004 	addi	r2,r2,-32768
   121e4:	103fd826 	beq	r2,zero,12148 <__swsetup_r+0x7c>
   121e8:	00bfffc4 	movi	r2,-1
   121ec:	003fd606 	br	12148 <__swsetup_r+0x7c>
   121f0:	1009883a 	mov	r4,r2
   121f4:	00124fc0 	call	124fc <__sinit>
   121f8:	003fc006 	br	120fc <__swsetup_r+0x30>
   121fc:	0005883a 	mov	r2,zero
   12200:	80800215 	stw	r2,8(r16)
   12204:	003fce06 	br	12140 <__swsetup_r+0x74>
   12208:	81400c17 	ldw	r5,48(r16)
   1220c:	28000626 	beq	r5,zero,12228 <__swsetup_r+0x15c>
   12210:	80c01004 	addi	r3,r16,64
   12214:	28c00326 	beq	r5,r3,12224 <__swsetup_r+0x158>
   12218:	8809883a 	mov	r4,r17
   1221c:	00128800 	call	12880 <_free_r>
   12220:	8080030b 	ldhu	r2,12(r16)
   12224:	80000c15 	stw	zero,48(r16)
   12228:	80c00417 	ldw	r3,16(r16)
   1222c:	013ff6c4 	movi	r4,-37
   12230:	2084703a 	and	r2,r4,r2
   12234:	80000115 	stw	zero,4(r16)
   12238:	80c00015 	stw	r3,0(r16)
   1223c:	003fd206 	br	12188 <__swsetup_r+0xbc>

00012240 <_fflush_r>:
   12240:	defffb04 	addi	sp,sp,-20
   12244:	dcc00315 	stw	r19,12(sp)
   12248:	dc400115 	stw	r17,4(sp)
   1224c:	dfc00415 	stw	ra,16(sp)
   12250:	dc800215 	stw	r18,8(sp)
   12254:	dc000015 	stw	r16,0(sp)
   12258:	2027883a 	mov	r19,r4
   1225c:	2823883a 	mov	r17,r5
   12260:	20000226 	beq	r4,zero,1226c <_fflush_r+0x2c>
   12264:	20800e17 	ldw	r2,56(r4)
   12268:	10005726 	beq	r2,zero,123c8 <_fflush_r+0x188>
   1226c:	8880030b 	ldhu	r2,12(r17)
   12270:	10c0020c 	andi	r3,r2,8
   12274:	18ffffcc 	andi	r3,r3,65535
   12278:	18e0001c 	xori	r3,r3,32768
   1227c:	18e00004 	addi	r3,r3,-32768
   12280:	1800311e 	bne	r3,zero,12348 <_fflush_r+0x108>
   12284:	89000117 	ldw	r4,4(r17)
   12288:	10c20014 	ori	r3,r2,2048
   1228c:	88c0030d 	sth	r3,12(r17)
   12290:	180b883a 	mov	r5,r3
   12294:	0100520e 	bge	zero,r4,123e0 <_fflush_r+0x1a0>
   12298:	88c00a17 	ldw	r3,40(r17)
   1229c:	18002226 	beq	r3,zero,12328 <_fflush_r+0xe8>
   122a0:	1084000c 	andi	r2,r2,4096
   122a4:	10bfffcc 	andi	r2,r2,65535
   122a8:	10a0001c 	xori	r2,r2,32768
   122ac:	10a00004 	addi	r2,r2,-32768
   122b0:	10004e26 	beq	r2,zero,123ec <_fflush_r+0x1ac>
   122b4:	8c001417 	ldw	r16,80(r17)
   122b8:	2940010c 	andi	r5,r5,4
   122bc:	297fffcc 	andi	r5,r5,65535
   122c0:	2960001c 	xori	r5,r5,32768
   122c4:	29600004 	addi	r5,r5,-32768
   122c8:	28000626 	beq	r5,zero,122e4 <_fflush_r+0xa4>
   122cc:	89000117 	ldw	r4,4(r17)
   122d0:	88800c17 	ldw	r2,48(r17)
   122d4:	8121c83a 	sub	r16,r16,r4
   122d8:	10000226 	beq	r2,zero,122e4 <_fflush_r+0xa4>
   122dc:	88800f17 	ldw	r2,60(r17)
   122e0:	80a1c83a 	sub	r16,r16,r2
   122e4:	89400717 	ldw	r5,28(r17)
   122e8:	9809883a 	mov	r4,r19
   122ec:	800d883a 	mov	r6,r16
   122f0:	000f883a 	mov	r7,zero
   122f4:	183ee83a 	callr	r3
   122f8:	8080281e 	bne	r16,r2,1239c <_fflush_r+0x15c>
   122fc:	8880030b 	ldhu	r2,12(r17)
   12300:	88c00417 	ldw	r3,16(r17)
   12304:	88000115 	stw	zero,4(r17)
   12308:	113dffcc 	andi	r4,r2,63487
   1230c:	1084000c 	andi	r2,r2,4096
   12310:	10bfffcc 	andi	r2,r2,65535
   12314:	10a0001c 	xori	r2,r2,32768
   12318:	8900030d 	sth	r4,12(r17)
   1231c:	88c00015 	stw	r3,0(r17)
   12320:	10a00004 	addi	r2,r2,-32768
   12324:	10002c1e 	bne	r2,zero,123d8 <_fflush_r+0x198>
   12328:	0005883a 	mov	r2,zero
   1232c:	dfc00417 	ldw	ra,16(sp)
   12330:	dcc00317 	ldw	r19,12(sp)
   12334:	dc800217 	ldw	r18,8(sp)
   12338:	dc400117 	ldw	r17,4(sp)
   1233c:	dc000017 	ldw	r16,0(sp)
   12340:	dec00504 	addi	sp,sp,20
   12344:	f800283a 	ret
   12348:	8c800417 	ldw	r18,16(r17)
   1234c:	903ff626 	beq	r18,zero,12328 <_fflush_r+0xe8>
   12350:	8c000017 	ldw	r16,0(r17)
   12354:	108000cc 	andi	r2,r2,3
   12358:	8c800015 	stw	r18,0(r17)
   1235c:	84a1c83a 	sub	r16,r16,r18
   12360:	10001b1e 	bne	r2,zero,123d0 <_fflush_r+0x190>
   12364:	88800517 	ldw	r2,20(r17)
   12368:	88800215 	stw	r2,8(r17)
   1236c:	04000316 	blt	zero,r16,1237c <_fflush_r+0x13c>
   12370:	003fed06 	br	12328 <_fflush_r+0xe8>
   12374:	90a5883a 	add	r18,r18,r2
   12378:	043feb0e 	bge	zero,r16,12328 <_fflush_r+0xe8>
   1237c:	88800917 	ldw	r2,36(r17)
   12380:	89400717 	ldw	r5,28(r17)
   12384:	800f883a 	mov	r7,r16
   12388:	900d883a 	mov	r6,r18
   1238c:	9809883a 	mov	r4,r19
   12390:	103ee83a 	callr	r2
   12394:	80a1c83a 	sub	r16,r16,r2
   12398:	00bff616 	blt	zero,r2,12374 <_fflush_r+0x134>
   1239c:	88c0030b 	ldhu	r3,12(r17)
   123a0:	00bfffc4 	movi	r2,-1
   123a4:	18c01014 	ori	r3,r3,64
   123a8:	88c0030d 	sth	r3,12(r17)
   123ac:	dfc00417 	ldw	ra,16(sp)
   123b0:	dcc00317 	ldw	r19,12(sp)
   123b4:	dc800217 	ldw	r18,8(sp)
   123b8:	dc400117 	ldw	r17,4(sp)
   123bc:	dc000017 	ldw	r16,0(sp)
   123c0:	dec00504 	addi	sp,sp,20
   123c4:	f800283a 	ret
   123c8:	00124fc0 	call	124fc <__sinit>
   123cc:	003fa706 	br	1226c <_fflush_r+0x2c>
   123d0:	0005883a 	mov	r2,zero
   123d4:	003fe406 	br	12368 <_fflush_r+0x128>
   123d8:	8c001415 	stw	r16,80(r17)
   123dc:	003fd206 	br	12328 <_fflush_r+0xe8>
   123e0:	88c00f17 	ldw	r3,60(r17)
   123e4:	00ffac16 	blt	zero,r3,12298 <_fflush_r+0x58>
   123e8:	003fcf06 	br	12328 <_fflush_r+0xe8>
   123ec:	89400717 	ldw	r5,28(r17)
   123f0:	9809883a 	mov	r4,r19
   123f4:	000d883a 	mov	r6,zero
   123f8:	01c00044 	movi	r7,1
   123fc:	183ee83a 	callr	r3
   12400:	1021883a 	mov	r16,r2
   12404:	00bfffc4 	movi	r2,-1
   12408:	80800326 	beq	r16,r2,12418 <_fflush_r+0x1d8>
   1240c:	8940030b 	ldhu	r5,12(r17)
   12410:	88c00a17 	ldw	r3,40(r17)
   12414:	003fa806 	br	122b8 <_fflush_r+0x78>
   12418:	98c00017 	ldw	r3,0(r19)
   1241c:	00800744 	movi	r2,29
   12420:	18bfde1e 	bne	r3,r2,1239c <_fflush_r+0x15c>
   12424:	003fc006 	br	12328 <_fflush_r+0xe8>

00012428 <fflush>:
   12428:	200b883a 	mov	r5,r4
   1242c:	20000426 	beq	r4,zero,12440 <fflush+0x18>
   12430:	008000b4 	movhi	r2,2
   12434:	10a0c804 	addi	r2,r2,-31968
   12438:	11000017 	ldw	r4,0(r2)
   1243c:	00122401 	jmpi	12240 <_fflush_r>
   12440:	008000b4 	movhi	r2,2
   12444:	10a0c704 	addi	r2,r2,-31972
   12448:	11000017 	ldw	r4,0(r2)
   1244c:	01400074 	movhi	r5,1
   12450:	29489004 	addi	r5,r5,8768
   12454:	0012bf81 	jmpi	12bf8 <_fwalk_reent>

00012458 <__fp_lock>:
   12458:	0005883a 	mov	r2,zero
   1245c:	f800283a 	ret

00012460 <__fp_unlock>:
   12460:	0005883a 	mov	r2,zero
   12464:	f800283a 	ret

00012468 <_cleanup_r>:
   12468:	01400074 	movhi	r5,1
   1246c:	294ca004 	addi	r5,r5,12928
   12470:	0012b501 	jmpi	12b50 <_fwalk>

00012474 <__sfmoreglue>:
   12474:	defffc04 	addi	sp,sp,-16
   12478:	dc800215 	stw	r18,8(sp)
   1247c:	2825883a 	mov	r18,r5
   12480:	dc000015 	stw	r16,0(sp)
   12484:	01401704 	movi	r5,92
   12488:	2021883a 	mov	r16,r4
   1248c:	9009883a 	mov	r4,r18
   12490:	dfc00315 	stw	ra,12(sp)
   12494:	dc400115 	stw	r17,4(sp)
   12498:	00135680 	call	13568 <__mulsi3>
   1249c:	8009883a 	mov	r4,r16
   124a0:	11400304 	addi	r5,r2,12
   124a4:	1023883a 	mov	r17,r2
   124a8:	0010f240 	call	10f24 <_malloc_r>
   124ac:	1021883a 	mov	r16,r2
   124b0:	10000726 	beq	r2,zero,124d0 <__sfmoreglue+0x5c>
   124b4:	11000304 	addi	r4,r2,12
   124b8:	10000015 	stw	zero,0(r2)
   124bc:	14800115 	stw	r18,4(r2)
   124c0:	11000215 	stw	r4,8(r2)
   124c4:	000b883a 	mov	r5,zero
   124c8:	880d883a 	mov	r6,r17
   124cc:	0012e580 	call	12e58 <memset>
   124d0:	8005883a 	mov	r2,r16
   124d4:	dfc00317 	ldw	ra,12(sp)
   124d8:	dc800217 	ldw	r18,8(sp)
   124dc:	dc400117 	ldw	r17,4(sp)
   124e0:	dc000017 	ldw	r16,0(sp)
   124e4:	dec00404 	addi	sp,sp,16
   124e8:	f800283a 	ret

000124ec <_cleanup>:
   124ec:	008000b4 	movhi	r2,2
   124f0:	10a0c704 	addi	r2,r2,-31972
   124f4:	11000017 	ldw	r4,0(r2)
   124f8:	00124681 	jmpi	12468 <_cleanup_r>

000124fc <__sinit>:
   124fc:	20800e17 	ldw	r2,56(r4)
   12500:	1000401e 	bne	r2,zero,12604 <__sinit+0x108>
   12504:	21400117 	ldw	r5,4(r4)
   12508:	01800074 	movhi	r6,1
   1250c:	31891a04 	addi	r6,r6,9320
   12510:	20c00217 	ldw	r3,8(r4)
   12514:	21800f15 	stw	r6,60(r4)
   12518:	2080bb04 	addi	r2,r4,748
   1251c:	02400044 	movi	r9,1
   12520:	018000c4 	movi	r6,3
   12524:	2180b915 	stw	r6,740(r4)
   12528:	2080ba15 	stw	r2,744(r4)
   1252c:	22400e15 	stw	r9,56(r4)
   12530:	20800317 	ldw	r2,12(r4)
   12534:	2000b815 	stw	zero,736(r4)
   12538:	02000074 	movhi	r8,1
   1253c:	420bcd04 	addi	r8,r8,12084
   12540:	01c00074 	movhi	r7,1
   12544:	39cbe204 	addi	r7,r7,12168
   12548:	01800074 	movhi	r6,1
   1254c:	318c0404 	addi	r6,r6,12304
   12550:	01000074 	movhi	r4,1
   12554:	210c1b04 	addi	r4,r4,12396
   12558:	02800104 	movi	r10,4
   1255c:	28000015 	stw	zero,0(r5)
   12560:	28000115 	stw	zero,4(r5)
   12564:	28000215 	stw	zero,8(r5)
   12568:	2a80030d 	sth	r10,12(r5)
   1256c:	2800038d 	sth	zero,14(r5)
   12570:	28000415 	stw	zero,16(r5)
   12574:	28000515 	stw	zero,20(r5)
   12578:	28000615 	stw	zero,24(r5)
   1257c:	29400715 	stw	r5,28(r5)
   12580:	2a000815 	stw	r8,32(r5)
   12584:	29c00915 	stw	r7,36(r5)
   12588:	29800a15 	stw	r6,40(r5)
   1258c:	29000b15 	stw	r4,44(r5)
   12590:	01400284 	movi	r5,10
   12594:	18000015 	stw	zero,0(r3)
   12598:	18000115 	stw	zero,4(r3)
   1259c:	18000215 	stw	zero,8(r3)
   125a0:	1940030d 	sth	r5,12(r3)
   125a4:	1a40038d 	sth	r9,14(r3)
   125a8:	18000415 	stw	zero,16(r3)
   125ac:	18000515 	stw	zero,20(r3)
   125b0:	18000615 	stw	zero,24(r3)
   125b4:	18c00715 	stw	r3,28(r3)
   125b8:	1a000815 	stw	r8,32(r3)
   125bc:	19c00915 	stw	r7,36(r3)
   125c0:	19800a15 	stw	r6,40(r3)
   125c4:	19000b15 	stw	r4,44(r3)
   125c8:	00c00484 	movi	r3,18
   125cc:	10c0030d 	sth	r3,12(r2)
   125d0:	00c00084 	movi	r3,2
   125d4:	10000015 	stw	zero,0(r2)
   125d8:	10000115 	stw	zero,4(r2)
   125dc:	10000215 	stw	zero,8(r2)
   125e0:	10c0038d 	sth	r3,14(r2)
   125e4:	10000415 	stw	zero,16(r2)
   125e8:	10000515 	stw	zero,20(r2)
   125ec:	10000615 	stw	zero,24(r2)
   125f0:	10800715 	stw	r2,28(r2)
   125f4:	12000815 	stw	r8,32(r2)
   125f8:	11c00915 	stw	r7,36(r2)
   125fc:	11800a15 	stw	r6,40(r2)
   12600:	11000b15 	stw	r4,44(r2)
   12604:	f800283a 	ret

00012608 <__sfp>:
   12608:	defffc04 	addi	sp,sp,-16
   1260c:	008000b4 	movhi	r2,2
   12610:	10a0c704 	addi	r2,r2,-31972
   12614:	dc400115 	stw	r17,4(sp)
   12618:	14400017 	ldw	r17,0(r2)
   1261c:	dc800215 	stw	r18,8(sp)
   12620:	dfc00315 	stw	ra,12(sp)
   12624:	88800e17 	ldw	r2,56(r17)
   12628:	dc000015 	stw	r16,0(sp)
   1262c:	2025883a 	mov	r18,r4
   12630:	10002826 	beq	r2,zero,126d4 <__sfp+0xcc>
   12634:	8c40b804 	addi	r17,r17,736
   12638:	043fffc4 	movi	r16,-1
   1263c:	89400117 	ldw	r5,4(r17)
   12640:	88800217 	ldw	r2,8(r17)
   12644:	297fffc4 	addi	r5,r5,-1
   12648:	28000a16 	blt	r5,zero,12674 <__sfp+0x6c>
   1264c:	10c0030f 	ldh	r3,12(r2)
   12650:	18000c26 	beq	r3,zero,12684 <__sfp+0x7c>
   12654:	10c01a04 	addi	r3,r2,104
   12658:	00000206 	br	12664 <__sfp+0x5c>
   1265c:	19bfe90f 	ldh	r6,-92(r3)
   12660:	30000826 	beq	r6,zero,12684 <__sfp+0x7c>
   12664:	297fffc4 	addi	r5,r5,-1
   12668:	18bffd04 	addi	r2,r3,-12
   1266c:	18c01704 	addi	r3,r3,92
   12670:	2c3ffa1e 	bne	r5,r16,1265c <__sfp+0x54>
   12674:	88800017 	ldw	r2,0(r17)
   12678:	10001926 	beq	r2,zero,126e0 <__sfp+0xd8>
   1267c:	1023883a 	mov	r17,r2
   12680:	003fee06 	br	1263c <__sfp+0x34>
   12684:	00ffffc4 	movi	r3,-1
   12688:	10c0038d 	sth	r3,14(r2)
   1268c:	00c00044 	movi	r3,1
   12690:	10c0030d 	sth	r3,12(r2)
   12694:	10000015 	stw	zero,0(r2)
   12698:	10000215 	stw	zero,8(r2)
   1269c:	10000115 	stw	zero,4(r2)
   126a0:	10000415 	stw	zero,16(r2)
   126a4:	10000515 	stw	zero,20(r2)
   126a8:	10000615 	stw	zero,24(r2)
   126ac:	10000c15 	stw	zero,48(r2)
   126b0:	10000d15 	stw	zero,52(r2)
   126b4:	10001115 	stw	zero,68(r2)
   126b8:	10001215 	stw	zero,72(r2)
   126bc:	dfc00317 	ldw	ra,12(sp)
   126c0:	dc800217 	ldw	r18,8(sp)
   126c4:	dc400117 	ldw	r17,4(sp)
   126c8:	dc000017 	ldw	r16,0(sp)
   126cc:	dec00404 	addi	sp,sp,16
   126d0:	f800283a 	ret
   126d4:	8809883a 	mov	r4,r17
   126d8:	00124fc0 	call	124fc <__sinit>
   126dc:	003fd506 	br	12634 <__sfp+0x2c>
   126e0:	9009883a 	mov	r4,r18
   126e4:	01400104 	movi	r5,4
   126e8:	00124740 	call	12474 <__sfmoreglue>
   126ec:	88800015 	stw	r2,0(r17)
   126f0:	103fe21e 	bne	r2,zero,1267c <__sfp+0x74>
   126f4:	00800304 	movi	r2,12
   126f8:	90800015 	stw	r2,0(r18)
   126fc:	0005883a 	mov	r2,zero
   12700:	003fee06 	br	126bc <__sfp+0xb4>

00012704 <__sfp_lock_acquire>:
   12704:	f800283a 	ret

00012708 <__sfp_lock_release>:
   12708:	f800283a 	ret

0001270c <__sinit_lock_acquire>:
   1270c:	f800283a 	ret

00012710 <__sinit_lock_release>:
   12710:	f800283a 	ret

00012714 <__fp_lock_all>:
   12714:	008000b4 	movhi	r2,2
   12718:	10a0c804 	addi	r2,r2,-31968
   1271c:	11000017 	ldw	r4,0(r2)
   12720:	01400074 	movhi	r5,1
   12724:	29491604 	addi	r5,r5,9304
   12728:	0012b501 	jmpi	12b50 <_fwalk>

0001272c <__fp_unlock_all>:
   1272c:	008000b4 	movhi	r2,2
   12730:	10a0c804 	addi	r2,r2,-31968
   12734:	11000017 	ldw	r4,0(r2)
   12738:	01400074 	movhi	r5,1
   1273c:	29491804 	addi	r5,r5,9312
   12740:	0012b501 	jmpi	12b50 <_fwalk>

00012744 <_malloc_trim_r>:
   12744:	defffb04 	addi	sp,sp,-20
   12748:	dcc00315 	stw	r19,12(sp)
   1274c:	dc800215 	stw	r18,8(sp)
   12750:	dc400115 	stw	r17,4(sp)
   12754:	dc000015 	stw	r16,0(sp)
   12758:	2827883a 	mov	r19,r5
   1275c:	dfc00415 	stw	ra,16(sp)
   12760:	04400074 	movhi	r17,1
   12764:	8c5b1104 	addi	r17,r17,27716
   12768:	2021883a 	mov	r16,r4
   1276c:	0013b540 	call	13b54 <__malloc_lock>
   12770:	88800217 	ldw	r2,8(r17)
   12774:	14800117 	ldw	r18,4(r2)
   12778:	00bfff04 	movi	r2,-4
   1277c:	90a4703a 	and	r18,r18,r2
   12780:	9083fbc4 	addi	r2,r18,4079
   12784:	14e7c83a 	sub	r19,r2,r19
   12788:	9826d33a 	srli	r19,r19,12
   1278c:	0083ffc4 	movi	r2,4095
   12790:	9cffffc4 	addi	r19,r19,-1
   12794:	9826933a 	slli	r19,r19,12
   12798:	14c0060e 	bge	r2,r19,127b4 <_malloc_trim_r+0x70>
   1279c:	8009883a 	mov	r4,r16
   127a0:	000b883a 	mov	r5,zero
   127a4:	00120680 	call	12068 <_sbrk_r>
   127a8:	88c00217 	ldw	r3,8(r17)
   127ac:	1c87883a 	add	r3,r3,r18
   127b0:	10c00a26 	beq	r2,r3,127dc <_malloc_trim_r+0x98>
   127b4:	8009883a 	mov	r4,r16
   127b8:	0013b740 	call	13b74 <__malloc_unlock>
   127bc:	0005883a 	mov	r2,zero
   127c0:	dfc00417 	ldw	ra,16(sp)
   127c4:	dcc00317 	ldw	r19,12(sp)
   127c8:	dc800217 	ldw	r18,8(sp)
   127cc:	dc400117 	ldw	r17,4(sp)
   127d0:	dc000017 	ldw	r16,0(sp)
   127d4:	dec00504 	addi	sp,sp,20
   127d8:	f800283a 	ret
   127dc:	8009883a 	mov	r4,r16
   127e0:	04cbc83a 	sub	r5,zero,r19
   127e4:	00120680 	call	12068 <_sbrk_r>
   127e8:	00ffffc4 	movi	r3,-1
   127ec:	10c01326 	beq	r2,r3,1283c <_malloc_trim_r+0xf8>
   127f0:	008000b4 	movhi	r2,2
   127f4:	10a7a304 	addi	r2,r2,-24948
   127f8:	11000017 	ldw	r4,0(r2)
   127fc:	88c00217 	ldw	r3,8(r17)
   12800:	94e5c83a 	sub	r18,r18,r19
   12804:	94800054 	ori	r18,r18,1
   12808:	24e7c83a 	sub	r19,r4,r19
   1280c:	1c800115 	stw	r18,4(r3)
   12810:	8009883a 	mov	r4,r16
   12814:	14c00015 	stw	r19,0(r2)
   12818:	0013b740 	call	13b74 <__malloc_unlock>
   1281c:	00800044 	movi	r2,1
   12820:	dfc00417 	ldw	ra,16(sp)
   12824:	dcc00317 	ldw	r19,12(sp)
   12828:	dc800217 	ldw	r18,8(sp)
   1282c:	dc400117 	ldw	r17,4(sp)
   12830:	dc000017 	ldw	r16,0(sp)
   12834:	dec00504 	addi	sp,sp,20
   12838:	f800283a 	ret
   1283c:	8009883a 	mov	r4,r16
   12840:	000b883a 	mov	r5,zero
   12844:	00120680 	call	12068 <_sbrk_r>
   12848:	88c00217 	ldw	r3,8(r17)
   1284c:	014003c4 	movi	r5,15
   12850:	10c9c83a 	sub	r4,r2,r3
   12854:	293fd70e 	bge	r5,r4,127b4 <_malloc_trim_r+0x70>
   12858:	014000b4 	movhi	r5,2
   1285c:	2960c904 	addi	r5,r5,-31964
   12860:	29400017 	ldw	r5,0(r5)
   12864:	21000054 	ori	r4,r4,1
   12868:	19000115 	stw	r4,4(r3)
   1286c:	1145c83a 	sub	r2,r2,r5
   12870:	014000b4 	movhi	r5,2
   12874:	2967a304 	addi	r5,r5,-24948
   12878:	28800015 	stw	r2,0(r5)
   1287c:	003fcd06 	br	127b4 <_malloc_trim_r+0x70>

00012880 <_free_r>:
   12880:	defffd04 	addi	sp,sp,-12
   12884:	dc400115 	stw	r17,4(sp)
   12888:	dc000015 	stw	r16,0(sp)
   1288c:	dfc00215 	stw	ra,8(sp)
   12890:	2821883a 	mov	r16,r5
   12894:	2023883a 	mov	r17,r4
   12898:	28004b26 	beq	r5,zero,129c8 <_free_r+0x148>
   1289c:	0013b540 	call	13b54 <__malloc_lock>
   128a0:	823fff17 	ldw	r8,-4(r16)
   128a4:	00bfff84 	movi	r2,-2
   128a8:	81bffe04 	addi	r6,r16,-8
   128ac:	4084703a 	and	r2,r8,r2
   128b0:	3087883a 	add	r3,r6,r2
   128b4:	01400074 	movhi	r5,1
   128b8:	295b1104 	addi	r5,r5,27716
   128bc:	1a400117 	ldw	r9,4(r3)
   128c0:	29000217 	ldw	r4,8(r5)
   128c4:	01ffff04 	movi	r7,-4
   128c8:	49ce703a 	and	r7,r9,r7
   128cc:	20c06526 	beq	r4,r3,12a64 <_free_r+0x1e4>
   128d0:	19c00115 	stw	r7,4(r3)
   128d4:	4200004c 	andi	r8,r8,1
   128d8:	40003026 	beq	r8,zero,1299c <_free_r+0x11c>
   128dc:	0009883a 	mov	r4,zero
   128e0:	19d1883a 	add	r8,r3,r7
   128e4:	42000117 	ldw	r8,4(r8)
   128e8:	4200004c 	andi	r8,r8,1
   128ec:	4000061e 	bne	r8,zero,12908 <_free_r+0x88>
   128f0:	11c5883a 	add	r2,r2,r7
   128f4:	19c00217 	ldw	r7,8(r3)
   128f8:	20004e26 	beq	r4,zero,12a34 <_free_r+0x1b4>
   128fc:	18c00317 	ldw	r3,12(r3)
   12900:	38c00315 	stw	r3,12(r7)
   12904:	19c00215 	stw	r7,8(r3)
   12908:	11c00054 	ori	r7,r2,1
   1290c:	3087883a 	add	r3,r6,r2
   12910:	31c00115 	stw	r7,4(r6)
   12914:	18800015 	stw	r2,0(r3)
   12918:	20001a1e 	bne	r4,zero,12984 <_free_r+0x104>
   1291c:	00c07fc4 	movi	r3,511
   12920:	18802e2e 	bgeu	r3,r2,129dc <_free_r+0x15c>
   12924:	1006d27a 	srli	r3,r2,9
   12928:	01000104 	movi	r4,4
   1292c:	20c06636 	bltu	r4,r3,12ac8 <_free_r+0x248>
   12930:	1008d1ba 	srli	r4,r2,6
   12934:	21000e04 	addi	r4,r4,56
   12938:	210f883a 	add	r7,r4,r4
   1293c:	39cf883a 	add	r7,r7,r7
   12940:	39cf883a 	add	r7,r7,r7
   12944:	29cf883a 	add	r7,r5,r7
   12948:	38c00217 	ldw	r3,8(r7)
   1294c:	01400074 	movhi	r5,1
   12950:	295b1104 	addi	r5,r5,27716
   12954:	19c06126 	beq	r3,r7,12adc <_free_r+0x25c>
   12958:	013fff04 	movi	r4,-4
   1295c:	19400117 	ldw	r5,4(r3)
   12960:	290a703a 	and	r5,r5,r4
   12964:	1140022e 	bgeu	r2,r5,12970 <_free_r+0xf0>
   12968:	18c00217 	ldw	r3,8(r3)
   1296c:	38fffb1e 	bne	r7,r3,1295c <_free_r+0xdc>
   12970:	18800317 	ldw	r2,12(r3)
   12974:	30800315 	stw	r2,12(r6)
   12978:	30c00215 	stw	r3,8(r6)
   1297c:	11800215 	stw	r6,8(r2)
   12980:	19800315 	stw	r6,12(r3)
   12984:	8809883a 	mov	r4,r17
   12988:	dfc00217 	ldw	ra,8(sp)
   1298c:	dc400117 	ldw	r17,4(sp)
   12990:	dc000017 	ldw	r16,0(sp)
   12994:	dec00304 	addi	sp,sp,12
   12998:	0013b741 	jmpi	13b74 <__malloc_unlock>
   1299c:	813ffe17 	ldw	r4,-8(r16)
   129a0:	2a400204 	addi	r9,r5,8
   129a4:	310dc83a 	sub	r6,r6,r4
   129a8:	32000217 	ldw	r8,8(r6)
   129ac:	1105883a 	add	r2,r2,r4
   129b0:	42404326 	beq	r8,r9,12ac0 <_free_r+0x240>
   129b4:	32400317 	ldw	r9,12(r6)
   129b8:	0009883a 	mov	r4,zero
   129bc:	42400315 	stw	r9,12(r8)
   129c0:	4a000215 	stw	r8,8(r9)
   129c4:	003fc606 	br	128e0 <_free_r+0x60>
   129c8:	dfc00217 	ldw	ra,8(sp)
   129cc:	dc400117 	ldw	r17,4(sp)
   129d0:	dc000017 	ldw	r16,0(sp)
   129d4:	dec00304 	addi	sp,sp,12
   129d8:	f800283a 	ret
   129dc:	1004d0fa 	srli	r2,r2,3
   129e0:	02000044 	movi	r8,1
   129e4:	29c00117 	ldw	r7,4(r5)
   129e8:	1087883a 	add	r3,r2,r2
   129ec:	18c7883a 	add	r3,r3,r3
   129f0:	1005d0ba 	srai	r2,r2,2
   129f4:	18c7883a 	add	r3,r3,r3
   129f8:	28c7883a 	add	r3,r5,r3
   129fc:	19000217 	ldw	r4,8(r3)
   12a00:	4084983a 	sll	r2,r8,r2
   12a04:	30c00315 	stw	r3,12(r6)
   12a08:	31000215 	stw	r4,8(r6)
   12a0c:	11c4b03a 	or	r2,r2,r7
   12a10:	21800315 	stw	r6,12(r4)
   12a14:	8809883a 	mov	r4,r17
   12a18:	28800115 	stw	r2,4(r5)
   12a1c:	19800215 	stw	r6,8(r3)
   12a20:	dfc00217 	ldw	ra,8(sp)
   12a24:	dc400117 	ldw	r17,4(sp)
   12a28:	dc000017 	ldw	r16,0(sp)
   12a2c:	dec00304 	addi	sp,sp,12
   12a30:	0013b741 	jmpi	13b74 <__malloc_unlock>
   12a34:	02000074 	movhi	r8,1
   12a38:	421b1304 	addi	r8,r8,27724
   12a3c:	3a3faf1e 	bne	r7,r8,128fc <_free_r+0x7c>
   12a40:	29800515 	stw	r6,20(r5)
   12a44:	29800415 	stw	r6,16(r5)
   12a48:	11000054 	ori	r4,r2,1
   12a4c:	3087883a 	add	r3,r6,r2
   12a50:	31c00315 	stw	r7,12(r6)
   12a54:	31c00215 	stw	r7,8(r6)
   12a58:	31000115 	stw	r4,4(r6)
   12a5c:	18800015 	stw	r2,0(r3)
   12a60:	003fc806 	br	12984 <_free_r+0x104>
   12a64:	4200004c 	andi	r8,r8,1
   12a68:	3885883a 	add	r2,r7,r2
   12a6c:	4000071e 	bne	r8,zero,12a8c <_free_r+0x20c>
   12a70:	81fffe17 	ldw	r7,-8(r16)
   12a74:	31cdc83a 	sub	r6,r6,r7
   12a78:	30c00317 	ldw	r3,12(r6)
   12a7c:	31000217 	ldw	r4,8(r6)
   12a80:	11c5883a 	add	r2,r2,r7
   12a84:	20c00315 	stw	r3,12(r4)
   12a88:	19000215 	stw	r4,8(r3)
   12a8c:	00c000b4 	movhi	r3,2
   12a90:	18e0ca04 	addi	r3,r3,-31960
   12a94:	18c00017 	ldw	r3,0(r3)
   12a98:	11000054 	ori	r4,r2,1
   12a9c:	31000115 	stw	r4,4(r6)
   12aa0:	29800215 	stw	r6,8(r5)
   12aa4:	10ffb736 	bltu	r2,r3,12984 <_free_r+0x104>
   12aa8:	008000b4 	movhi	r2,2
   12aac:	10a79b04 	addi	r2,r2,-24980
   12ab0:	11400017 	ldw	r5,0(r2)
   12ab4:	8809883a 	mov	r4,r17
   12ab8:	00127440 	call	12744 <_malloc_trim_r>
   12abc:	003fb106 	br	12984 <_free_r+0x104>
   12ac0:	01000044 	movi	r4,1
   12ac4:	003f8606 	br	128e0 <_free_r+0x60>
   12ac8:	01000504 	movi	r4,20
   12acc:	20c00b36 	bltu	r4,r3,12afc <_free_r+0x27c>
   12ad0:	190016c4 	addi	r4,r3,91
   12ad4:	210f883a 	add	r7,r4,r4
   12ad8:	003f9806 	br	1293c <_free_r+0xbc>
   12adc:	2009d0ba 	srai	r4,r4,2
   12ae0:	00800044 	movi	r2,1
   12ae4:	29c00117 	ldw	r7,4(r5)
   12ae8:	1108983a 	sll	r4,r2,r4
   12aec:	1805883a 	mov	r2,r3
   12af0:	21c8b03a 	or	r4,r4,r7
   12af4:	29000115 	stw	r4,4(r5)
   12af8:	003f9e06 	br	12974 <_free_r+0xf4>
   12afc:	01001504 	movi	r4,84
   12b00:	20c00436 	bltu	r4,r3,12b14 <_free_r+0x294>
   12b04:	1008d33a 	srli	r4,r2,12
   12b08:	21001b84 	addi	r4,r4,110
   12b0c:	210f883a 	add	r7,r4,r4
   12b10:	003f8a06 	br	1293c <_free_r+0xbc>
   12b14:	01005504 	movi	r4,340
   12b18:	20c00436 	bltu	r4,r3,12b2c <_free_r+0x2ac>
   12b1c:	1008d3fa 	srli	r4,r2,15
   12b20:	21001dc4 	addi	r4,r4,119
   12b24:	210f883a 	add	r7,r4,r4
   12b28:	003f8406 	br	1293c <_free_r+0xbc>
   12b2c:	01015504 	movi	r4,1364
   12b30:	20c00436 	bltu	r4,r3,12b44 <_free_r+0x2c4>
   12b34:	1008d4ba 	srli	r4,r2,18
   12b38:	21001f04 	addi	r4,r4,124
   12b3c:	210f883a 	add	r7,r4,r4
   12b40:	003f7e06 	br	1293c <_free_r+0xbc>
   12b44:	01c03f04 	movi	r7,252
   12b48:	01001f84 	movi	r4,126
   12b4c:	003f7b06 	br	1293c <_free_r+0xbc>

00012b50 <_fwalk>:
   12b50:	defff904 	addi	sp,sp,-28
   12b54:	dcc00315 	stw	r19,12(sp)
   12b58:	24c0b804 	addi	r19,r4,736
   12b5c:	dd400515 	stw	r21,20(sp)
   12b60:	dd000415 	stw	r20,16(sp)
   12b64:	dfc00615 	stw	ra,24(sp)
   12b68:	dc800215 	stw	r18,8(sp)
   12b6c:	dc400115 	stw	r17,4(sp)
   12b70:	dc000015 	stw	r16,0(sp)
   12b74:	282b883a 	mov	r21,r5
   12b78:	0029883a 	mov	r20,zero
   12b7c:	00127040 	call	12704 <__sfp_lock_acquire>
   12b80:	98001226 	beq	r19,zero,12bcc <_fwalk+0x7c>
   12b84:	04bfffc4 	movi	r18,-1
   12b88:	9c400117 	ldw	r17,4(r19)
   12b8c:	9c000217 	ldw	r16,8(r19)
   12b90:	8c7fffc4 	addi	r17,r17,-1
   12b94:	88000b16 	blt	r17,zero,12bc4 <_fwalk+0x74>
   12b98:	84000304 	addi	r16,r16,12
   12b9c:	80c0000f 	ldh	r3,0(r16)
   12ba0:	8c7fffc4 	addi	r17,r17,-1
   12ba4:	813ffd04 	addi	r4,r16,-12
   12ba8:	18000426 	beq	r3,zero,12bbc <_fwalk+0x6c>
   12bac:	80c0008f 	ldh	r3,2(r16)
   12bb0:	1c800226 	beq	r3,r18,12bbc <_fwalk+0x6c>
   12bb4:	a83ee83a 	callr	r21
   12bb8:	a0a8b03a 	or	r20,r20,r2
   12bbc:	84001704 	addi	r16,r16,92
   12bc0:	8cbff61e 	bne	r17,r18,12b9c <_fwalk+0x4c>
   12bc4:	9cc00017 	ldw	r19,0(r19)
   12bc8:	983fef1e 	bne	r19,zero,12b88 <_fwalk+0x38>
   12bcc:	00127080 	call	12708 <__sfp_lock_release>
   12bd0:	a005883a 	mov	r2,r20
   12bd4:	dfc00617 	ldw	ra,24(sp)
   12bd8:	dd400517 	ldw	r21,20(sp)
   12bdc:	dd000417 	ldw	r20,16(sp)
   12be0:	dcc00317 	ldw	r19,12(sp)
   12be4:	dc800217 	ldw	r18,8(sp)
   12be8:	dc400117 	ldw	r17,4(sp)
   12bec:	dc000017 	ldw	r16,0(sp)
   12bf0:	dec00704 	addi	sp,sp,28
   12bf4:	f800283a 	ret

00012bf8 <_fwalk_reent>:
   12bf8:	defff804 	addi	sp,sp,-32
   12bfc:	dcc00315 	stw	r19,12(sp)
   12c00:	24c0b804 	addi	r19,r4,736
   12c04:	dd800615 	stw	r22,24(sp)
   12c08:	dd400515 	stw	r21,20(sp)
   12c0c:	dd000415 	stw	r20,16(sp)
   12c10:	dfc00715 	stw	ra,28(sp)
   12c14:	dc800215 	stw	r18,8(sp)
   12c18:	dc400115 	stw	r17,4(sp)
   12c1c:	dc000015 	stw	r16,0(sp)
   12c20:	2029883a 	mov	r20,r4
   12c24:	282b883a 	mov	r21,r5
   12c28:	002d883a 	mov	r22,zero
   12c2c:	00127040 	call	12704 <__sfp_lock_acquire>
   12c30:	98001326 	beq	r19,zero,12c80 <_fwalk_reent+0x88>
   12c34:	04bfffc4 	movi	r18,-1
   12c38:	9c400117 	ldw	r17,4(r19)
   12c3c:	9c000217 	ldw	r16,8(r19)
   12c40:	8c7fffc4 	addi	r17,r17,-1
   12c44:	88000c16 	blt	r17,zero,12c78 <_fwalk_reent+0x80>
   12c48:	84000304 	addi	r16,r16,12
   12c4c:	80c0000f 	ldh	r3,0(r16)
   12c50:	8c7fffc4 	addi	r17,r17,-1
   12c54:	817ffd04 	addi	r5,r16,-12
   12c58:	18000526 	beq	r3,zero,12c70 <_fwalk_reent+0x78>
   12c5c:	80c0008f 	ldh	r3,2(r16)
   12c60:	a009883a 	mov	r4,r20
   12c64:	1c800226 	beq	r3,r18,12c70 <_fwalk_reent+0x78>
   12c68:	a83ee83a 	callr	r21
   12c6c:	b0acb03a 	or	r22,r22,r2
   12c70:	84001704 	addi	r16,r16,92
   12c74:	8cbff51e 	bne	r17,r18,12c4c <_fwalk_reent+0x54>
   12c78:	9cc00017 	ldw	r19,0(r19)
   12c7c:	983fee1e 	bne	r19,zero,12c38 <_fwalk_reent+0x40>
   12c80:	00127080 	call	12708 <__sfp_lock_release>
   12c84:	b005883a 	mov	r2,r22
   12c88:	dfc00717 	ldw	ra,28(sp)
   12c8c:	dd800617 	ldw	r22,24(sp)
   12c90:	dd400517 	ldw	r21,20(sp)
   12c94:	dd000417 	ldw	r20,16(sp)
   12c98:	dcc00317 	ldw	r19,12(sp)
   12c9c:	dc800217 	ldw	r18,8(sp)
   12ca0:	dc400117 	ldw	r17,4(sp)
   12ca4:	dc000017 	ldw	r16,0(sp)
   12ca8:	dec00804 	addi	sp,sp,32
   12cac:	f800283a 	ret

00012cb0 <__smakebuf_r>:
   12cb0:	2880030b 	ldhu	r2,12(r5)
   12cb4:	deffed04 	addi	sp,sp,-76
   12cb8:	dc401015 	stw	r17,64(sp)
   12cbc:	10c0008c 	andi	r3,r2,2
   12cc0:	18ffffcc 	andi	r3,r3,65535
   12cc4:	18e0001c 	xori	r3,r3,32768
   12cc8:	dc000f15 	stw	r16,60(sp)
   12ccc:	dfc01215 	stw	ra,72(sp)
   12cd0:	dc801115 	stw	r18,68(sp)
   12cd4:	18e00004 	addi	r3,r3,-32768
   12cd8:	2821883a 	mov	r16,r5
   12cdc:	2023883a 	mov	r17,r4
   12ce0:	1800381e 	bne	r3,zero,12dc4 <__smakebuf_r+0x114>
   12ce4:	2940038f 	ldh	r5,14(r5)
   12ce8:	28002d16 	blt	r5,zero,12da0 <__smakebuf_r+0xf0>
   12cec:	d80d883a 	mov	r6,sp
   12cf0:	00132940 	call	13294 <_fstat_r>
   12cf4:	10002916 	blt	r2,zero,12d9c <__smakebuf_r+0xec>
   12cf8:	d8800117 	ldw	r2,4(sp)
   12cfc:	00e00014 	movui	r3,32768
   12d00:	10bc000c 	andi	r2,r2,61440
   12d04:	10c03c26 	beq	r2,r3,12df8 <__smakebuf_r+0x148>
   12d08:	80c0030b 	ldhu	r3,12(r16)
   12d0c:	18c20014 	ori	r3,r3,2048
   12d10:	80c0030d 	sth	r3,12(r16)
   12d14:	00c80004 	movi	r3,8192
   12d18:	10c00c1e 	bne	r2,r3,12d4c <__smakebuf_r+0x9c>
   12d1c:	8140038f 	ldh	r5,14(r16)
   12d20:	8809883a 	mov	r4,r17
   12d24:	00132fc0 	call	132fc <_isatty_r>
   12d28:	10000826 	beq	r2,zero,12d4c <__smakebuf_r+0x9c>
   12d2c:	80c0030b 	ldhu	r3,12(r16)
   12d30:	808010c4 	addi	r2,r16,67
   12d34:	80800015 	stw	r2,0(r16)
   12d38:	18c00054 	ori	r3,r3,1
   12d3c:	80800415 	stw	r2,16(r16)
   12d40:	00800044 	movi	r2,1
   12d44:	80c0030d 	sth	r3,12(r16)
   12d48:	80800515 	stw	r2,20(r16)
   12d4c:	04810004 	movi	r18,1024
   12d50:	8809883a 	mov	r4,r17
   12d54:	900b883a 	mov	r5,r18
   12d58:	0010f240 	call	10f24 <_malloc_r>
   12d5c:	10003026 	beq	r2,zero,12e20 <__smakebuf_r+0x170>
   12d60:	80c0030b 	ldhu	r3,12(r16)
   12d64:	01000074 	movhi	r4,1
   12d68:	21091a04 	addi	r4,r4,9320
   12d6c:	89000f15 	stw	r4,60(r17)
   12d70:	18c02014 	ori	r3,r3,128
   12d74:	80c0030d 	sth	r3,12(r16)
   12d78:	80800015 	stw	r2,0(r16)
   12d7c:	80800415 	stw	r2,16(r16)
   12d80:	84800515 	stw	r18,20(r16)
   12d84:	dfc01217 	ldw	ra,72(sp)
   12d88:	dc801117 	ldw	r18,68(sp)
   12d8c:	dc401017 	ldw	r17,64(sp)
   12d90:	dc000f17 	ldw	r16,60(sp)
   12d94:	dec01304 	addi	sp,sp,76
   12d98:	f800283a 	ret
   12d9c:	8080030b 	ldhu	r2,12(r16)
   12da0:	10c0200c 	andi	r3,r2,128
   12da4:	18ffffcc 	andi	r3,r3,65535
   12da8:	18e0001c 	xori	r3,r3,32768
   12dac:	18e00004 	addi	r3,r3,-32768
   12db0:	18000f1e 	bne	r3,zero,12df0 <__smakebuf_r+0x140>
   12db4:	04810004 	movi	r18,1024
   12db8:	10820014 	ori	r2,r2,2048
   12dbc:	8080030d 	sth	r2,12(r16)
   12dc0:	003fe306 	br	12d50 <__smakebuf_r+0xa0>
   12dc4:	288010c4 	addi	r2,r5,67
   12dc8:	28800015 	stw	r2,0(r5)
   12dcc:	28800415 	stw	r2,16(r5)
   12dd0:	00800044 	movi	r2,1
   12dd4:	28800515 	stw	r2,20(r5)
   12dd8:	dfc01217 	ldw	ra,72(sp)
   12ddc:	dc801117 	ldw	r18,68(sp)
   12de0:	dc401017 	ldw	r17,64(sp)
   12de4:	dc000f17 	ldw	r16,60(sp)
   12de8:	dec01304 	addi	sp,sp,76
   12dec:	f800283a 	ret
   12df0:	04801004 	movi	r18,64
   12df4:	003ff006 	br	12db8 <__smakebuf_r+0x108>
   12df8:	81000a17 	ldw	r4,40(r16)
   12dfc:	00c00074 	movhi	r3,1
   12e00:	18cc0404 	addi	r3,r3,12304
   12e04:	20ffc01e 	bne	r4,r3,12d08 <__smakebuf_r+0x58>
   12e08:	8080030b 	ldhu	r2,12(r16)
   12e0c:	00c10004 	movi	r3,1024
   12e10:	80c01315 	stw	r3,76(r16)
   12e14:	10c4b03a 	or	r2,r2,r3
   12e18:	8080030d 	sth	r2,12(r16)
   12e1c:	003fcb06 	br	12d4c <__smakebuf_r+0x9c>
   12e20:	8080030b 	ldhu	r2,12(r16)
   12e24:	10c0800c 	andi	r3,r2,512
   12e28:	18ffffcc 	andi	r3,r3,65535
   12e2c:	18e0001c 	xori	r3,r3,32768
   12e30:	18e00004 	addi	r3,r3,-32768
   12e34:	183fd31e 	bne	r3,zero,12d84 <__smakebuf_r+0xd4>
   12e38:	10800094 	ori	r2,r2,2
   12e3c:	80c010c4 	addi	r3,r16,67
   12e40:	8080030d 	sth	r2,12(r16)
   12e44:	00800044 	movi	r2,1
   12e48:	80c00015 	stw	r3,0(r16)
   12e4c:	80c00415 	stw	r3,16(r16)
   12e50:	80800515 	stw	r2,20(r16)
   12e54:	003fcb06 	br	12d84 <__smakebuf_r+0xd4>

00012e58 <memset>:
   12e58:	00c000c4 	movi	r3,3
   12e5c:	2005883a 	mov	r2,r4
   12e60:	29403fcc 	andi	r5,r5,255
   12e64:	19802d2e 	bgeu	r3,r6,12f1c <memset+0xc4>
   12e68:	20c6703a 	and	r3,r4,r3
   12e6c:	18002e1e 	bne	r3,zero,12f28 <memset+0xd0>
   12e70:	2806923a 	slli	r3,r5,8
   12e74:	010003c4 	movi	r4,15
   12e78:	3011883a 	mov	r8,r6
   12e7c:	1946b03a 	or	r3,r3,r5
   12e80:	180e943a 	slli	r7,r3,16
   12e84:	38ceb03a 	or	r7,r7,r3
   12e88:	1007883a 	mov	r3,r2
   12e8c:	21800f2e 	bgeu	r4,r6,12ecc <memset+0x74>
   12e90:	19c00015 	stw	r7,0(r3)
   12e94:	19c00115 	stw	r7,4(r3)
   12e98:	19c00215 	stw	r7,8(r3)
   12e9c:	19c00315 	stw	r7,12(r3)
   12ea0:	423ffc04 	addi	r8,r8,-16
   12ea4:	18c00404 	addi	r3,r3,16
   12ea8:	223ff936 	bltu	r4,r8,12e90 <memset+0x38>
   12eac:	30fffc04 	addi	r3,r6,-16
   12eb0:	1806d13a 	srli	r3,r3,4
   12eb4:	318003cc 	andi	r6,r6,15
   12eb8:	010000c4 	movi	r4,3
   12ebc:	18c00044 	addi	r3,r3,1
   12ec0:	1806913a 	slli	r3,r3,4
   12ec4:	10c7883a 	add	r3,r2,r3
   12ec8:	21800e2e 	bgeu	r4,r6,12f04 <memset+0xac>
   12ecc:	1813883a 	mov	r9,r3
   12ed0:	3011883a 	mov	r8,r6
   12ed4:	010000c4 	movi	r4,3
   12ed8:	49c00015 	stw	r7,0(r9)
   12edc:	423fff04 	addi	r8,r8,-4
   12ee0:	4a400104 	addi	r9,r9,4
   12ee4:	223ffc36 	bltu	r4,r8,12ed8 <memset+0x80>
   12ee8:	313fff04 	addi	r4,r6,-4
   12eec:	2008d0ba 	srli	r4,r4,2
   12ef0:	318000cc 	andi	r6,r6,3
   12ef4:	21000044 	addi	r4,r4,1
   12ef8:	2109883a 	add	r4,r4,r4
   12efc:	2109883a 	add	r4,r4,r4
   12f00:	1907883a 	add	r3,r3,r4
   12f04:	30000a26 	beq	r6,zero,12f30 <memset+0xd8>
   12f08:	198d883a 	add	r6,r3,r6
   12f0c:	19400005 	stb	r5,0(r3)
   12f10:	18c00044 	addi	r3,r3,1
   12f14:	19bffd1e 	bne	r3,r6,12f0c <memset+0xb4>
   12f18:	f800283a 	ret
   12f1c:	2007883a 	mov	r3,r4
   12f20:	303ff91e 	bne	r6,zero,12f08 <memset+0xb0>
   12f24:	00000206 	br	12f30 <memset+0xd8>
   12f28:	2007883a 	mov	r3,r4
   12f2c:	003ff606 	br	12f08 <memset+0xb0>
   12f30:	f800283a 	ret

00012f34 <__sread>:
   12f34:	defffe04 	addi	sp,sp,-8
   12f38:	dc000015 	stw	r16,0(sp)
   12f3c:	2821883a 	mov	r16,r5
   12f40:	2940038f 	ldh	r5,14(r5)
   12f44:	dfc00115 	stw	ra,4(sp)
   12f48:	00133cc0 	call	133cc <_read_r>
   12f4c:	10000716 	blt	r2,zero,12f6c <__sread+0x38>
   12f50:	80c01417 	ldw	r3,80(r16)
   12f54:	1887883a 	add	r3,r3,r2
   12f58:	80c01415 	stw	r3,80(r16)
   12f5c:	dfc00117 	ldw	ra,4(sp)
   12f60:	dc000017 	ldw	r16,0(sp)
   12f64:	dec00204 	addi	sp,sp,8
   12f68:	f800283a 	ret
   12f6c:	80c0030b 	ldhu	r3,12(r16)
   12f70:	18fbffcc 	andi	r3,r3,61439
   12f74:	80c0030d 	sth	r3,12(r16)
   12f78:	dfc00117 	ldw	ra,4(sp)
   12f7c:	dc000017 	ldw	r16,0(sp)
   12f80:	dec00204 	addi	sp,sp,8
   12f84:	f800283a 	ret

00012f88 <__swrite>:
   12f88:	2880030b 	ldhu	r2,12(r5)
   12f8c:	defffb04 	addi	sp,sp,-20
   12f90:	dcc00315 	stw	r19,12(sp)
   12f94:	10c0400c 	andi	r3,r2,256
   12f98:	18ffffcc 	andi	r3,r3,65535
   12f9c:	18e0001c 	xori	r3,r3,32768
   12fa0:	dc800215 	stw	r18,8(sp)
   12fa4:	dc400115 	stw	r17,4(sp)
   12fa8:	dc000015 	stw	r16,0(sp)
   12fac:	dfc00415 	stw	ra,16(sp)
   12fb0:	18e00004 	addi	r3,r3,-32768
   12fb4:	2821883a 	mov	r16,r5
   12fb8:	2027883a 	mov	r19,r4
   12fbc:	3025883a 	mov	r18,r6
   12fc0:	3823883a 	mov	r17,r7
   12fc4:	18000526 	beq	r3,zero,12fdc <__swrite+0x54>
   12fc8:	2940038f 	ldh	r5,14(r5)
   12fcc:	000d883a 	mov	r6,zero
   12fd0:	01c00084 	movi	r7,2
   12fd4:	00133600 	call	13360 <_lseek_r>
   12fd8:	8080030b 	ldhu	r2,12(r16)
   12fdc:	8140038f 	ldh	r5,14(r16)
   12fe0:	10bbffcc 	andi	r2,r2,61439
   12fe4:	9809883a 	mov	r4,r19
   12fe8:	900d883a 	mov	r6,r18
   12fec:	880f883a 	mov	r7,r17
   12ff0:	8080030d 	sth	r2,12(r16)
   12ff4:	dfc00417 	ldw	ra,16(sp)
   12ff8:	dcc00317 	ldw	r19,12(sp)
   12ffc:	dc800217 	ldw	r18,8(sp)
   13000:	dc400117 	ldw	r17,4(sp)
   13004:	dc000017 	ldw	r16,0(sp)
   13008:	dec00504 	addi	sp,sp,20
   1300c:	00130741 	jmpi	13074 <_write_r>

00013010 <__sseek>:
   13010:	defffe04 	addi	sp,sp,-8
   13014:	dc000015 	stw	r16,0(sp)
   13018:	2821883a 	mov	r16,r5
   1301c:	2940038f 	ldh	r5,14(r5)
   13020:	dfc00115 	stw	ra,4(sp)
   13024:	00133600 	call	13360 <_lseek_r>
   13028:	00ffffc4 	movi	r3,-1
   1302c:	10c00826 	beq	r2,r3,13050 <__sseek+0x40>
   13030:	80c0030b 	ldhu	r3,12(r16)
   13034:	80801415 	stw	r2,80(r16)
   13038:	18c40014 	ori	r3,r3,4096
   1303c:	80c0030d 	sth	r3,12(r16)
   13040:	dfc00117 	ldw	ra,4(sp)
   13044:	dc000017 	ldw	r16,0(sp)
   13048:	dec00204 	addi	sp,sp,8
   1304c:	f800283a 	ret
   13050:	80c0030b 	ldhu	r3,12(r16)
   13054:	18fbffcc 	andi	r3,r3,61439
   13058:	80c0030d 	sth	r3,12(r16)
   1305c:	dfc00117 	ldw	ra,4(sp)
   13060:	dc000017 	ldw	r16,0(sp)
   13064:	dec00204 	addi	sp,sp,8
   13068:	f800283a 	ret

0001306c <__sclose>:
   1306c:	2940038f 	ldh	r5,14(r5)
   13070:	00130e01 	jmpi	130e0 <_close_r>

00013074 <_write_r>:
   13074:	defffd04 	addi	sp,sp,-12
   13078:	dc400115 	stw	r17,4(sp)
   1307c:	dc000015 	stw	r16,0(sp)
   13080:	2023883a 	mov	r17,r4
   13084:	040000b4 	movhi	r16,2
   13088:	84279c04 	addi	r16,r16,-24976
   1308c:	2809883a 	mov	r4,r5
   13090:	300b883a 	mov	r5,r6
   13094:	380d883a 	mov	r6,r7
   13098:	dfc00215 	stw	ra,8(sp)
   1309c:	80000015 	stw	zero,0(r16)
   130a0:	0013e580 	call	13e58 <write>
   130a4:	00ffffc4 	movi	r3,-1
   130a8:	10c00526 	beq	r2,r3,130c0 <_write_r+0x4c>
   130ac:	dfc00217 	ldw	ra,8(sp)
   130b0:	dc400117 	ldw	r17,4(sp)
   130b4:	dc000017 	ldw	r16,0(sp)
   130b8:	dec00304 	addi	sp,sp,12
   130bc:	f800283a 	ret
   130c0:	80c00017 	ldw	r3,0(r16)
   130c4:	183ff926 	beq	r3,zero,130ac <_write_r+0x38>
   130c8:	88c00015 	stw	r3,0(r17)
   130cc:	dfc00217 	ldw	ra,8(sp)
   130d0:	dc400117 	ldw	r17,4(sp)
   130d4:	dc000017 	ldw	r16,0(sp)
   130d8:	dec00304 	addi	sp,sp,12
   130dc:	f800283a 	ret

000130e0 <_close_r>:
   130e0:	defffd04 	addi	sp,sp,-12
   130e4:	dc400115 	stw	r17,4(sp)
   130e8:	dc000015 	stw	r16,0(sp)
   130ec:	2023883a 	mov	r17,r4
   130f0:	040000b4 	movhi	r16,2
   130f4:	84279c04 	addi	r16,r16,-24976
   130f8:	2809883a 	mov	r4,r5
   130fc:	dfc00215 	stw	ra,8(sp)
   13100:	80000015 	stw	zero,0(r16)
   13104:	00135e00 	call	135e0 <close>
   13108:	00ffffc4 	movi	r3,-1
   1310c:	10c00526 	beq	r2,r3,13124 <_close_r+0x44>
   13110:	dfc00217 	ldw	ra,8(sp)
   13114:	dc400117 	ldw	r17,4(sp)
   13118:	dc000017 	ldw	r16,0(sp)
   1311c:	dec00304 	addi	sp,sp,12
   13120:	f800283a 	ret
   13124:	80c00017 	ldw	r3,0(r16)
   13128:	183ff926 	beq	r3,zero,13110 <_close_r+0x30>
   1312c:	88c00015 	stw	r3,0(r17)
   13130:	dfc00217 	ldw	ra,8(sp)
   13134:	dc400117 	ldw	r17,4(sp)
   13138:	dc000017 	ldw	r16,0(sp)
   1313c:	dec00304 	addi	sp,sp,12
   13140:	f800283a 	ret

00013144 <_fclose_r>:
   13144:	defffc04 	addi	sp,sp,-16
   13148:	dc400115 	stw	r17,4(sp)
   1314c:	dc000015 	stw	r16,0(sp)
   13150:	dfc00315 	stw	ra,12(sp)
   13154:	dc800215 	stw	r18,8(sp)
   13158:	2821883a 	mov	r16,r5
   1315c:	2023883a 	mov	r17,r4
   13160:	28003426 	beq	r5,zero,13234 <_fclose_r+0xf0>
   13164:	00127040 	call	12704 <__sfp_lock_acquire>
   13168:	88000226 	beq	r17,zero,13174 <_fclose_r+0x30>
   1316c:	88800e17 	ldw	r2,56(r17)
   13170:	10003826 	beq	r2,zero,13254 <_fclose_r+0x110>
   13174:	8080030f 	ldh	r2,12(r16)
   13178:	10002526 	beq	r2,zero,13210 <_fclose_r+0xcc>
   1317c:	8809883a 	mov	r4,r17
   13180:	800b883a 	mov	r5,r16
   13184:	00122400 	call	12240 <_fflush_r>
   13188:	1025883a 	mov	r18,r2
   1318c:	80800b17 	ldw	r2,44(r16)
   13190:	10000426 	beq	r2,zero,131a4 <_fclose_r+0x60>
   13194:	81400717 	ldw	r5,28(r16)
   13198:	8809883a 	mov	r4,r17
   1319c:	103ee83a 	callr	r2
   131a0:	10003516 	blt	r2,zero,13278 <_fclose_r+0x134>
   131a4:	8080030b 	ldhu	r2,12(r16)
   131a8:	1080200c 	andi	r2,r2,128
   131ac:	10bfffcc 	andi	r2,r2,65535
   131b0:	10a0001c 	xori	r2,r2,32768
   131b4:	10a00004 	addi	r2,r2,-32768
   131b8:	10002b1e 	bne	r2,zero,13268 <_fclose_r+0x124>
   131bc:	81400c17 	ldw	r5,48(r16)
   131c0:	28000526 	beq	r5,zero,131d8 <_fclose_r+0x94>
   131c4:	80801004 	addi	r2,r16,64
   131c8:	28800226 	beq	r5,r2,131d4 <_fclose_r+0x90>
   131cc:	8809883a 	mov	r4,r17
   131d0:	00128800 	call	12880 <_free_r>
   131d4:	80000c15 	stw	zero,48(r16)
   131d8:	81401117 	ldw	r5,68(r16)
   131dc:	28000326 	beq	r5,zero,131ec <_fclose_r+0xa8>
   131e0:	8809883a 	mov	r4,r17
   131e4:	00128800 	call	12880 <_free_r>
   131e8:	80001115 	stw	zero,68(r16)
   131ec:	8000030d 	sth	zero,12(r16)
   131f0:	00127080 	call	12708 <__sfp_lock_release>
   131f4:	9005883a 	mov	r2,r18
   131f8:	dfc00317 	ldw	ra,12(sp)
   131fc:	dc800217 	ldw	r18,8(sp)
   13200:	dc400117 	ldw	r17,4(sp)
   13204:	dc000017 	ldw	r16,0(sp)
   13208:	dec00404 	addi	sp,sp,16
   1320c:	f800283a 	ret
   13210:	00127080 	call	12708 <__sfp_lock_release>
   13214:	0025883a 	mov	r18,zero
   13218:	9005883a 	mov	r2,r18
   1321c:	dfc00317 	ldw	ra,12(sp)
   13220:	dc800217 	ldw	r18,8(sp)
   13224:	dc400117 	ldw	r17,4(sp)
   13228:	dc000017 	ldw	r16,0(sp)
   1322c:	dec00404 	addi	sp,sp,16
   13230:	f800283a 	ret
   13234:	0025883a 	mov	r18,zero
   13238:	9005883a 	mov	r2,r18
   1323c:	dfc00317 	ldw	ra,12(sp)
   13240:	dc800217 	ldw	r18,8(sp)
   13244:	dc400117 	ldw	r17,4(sp)
   13248:	dc000017 	ldw	r16,0(sp)
   1324c:	dec00404 	addi	sp,sp,16
   13250:	f800283a 	ret
   13254:	8809883a 	mov	r4,r17
   13258:	00124fc0 	call	124fc <__sinit>
   1325c:	8080030f 	ldh	r2,12(r16)
   13260:	103fc61e 	bne	r2,zero,1317c <_fclose_r+0x38>
   13264:	003fea06 	br	13210 <_fclose_r+0xcc>
   13268:	81400417 	ldw	r5,16(r16)
   1326c:	8809883a 	mov	r4,r17
   13270:	00128800 	call	12880 <_free_r>
   13274:	003fd106 	br	131bc <_fclose_r+0x78>
   13278:	04bfffc4 	movi	r18,-1
   1327c:	003fc906 	br	131a4 <_fclose_r+0x60>

00013280 <fclose>:
   13280:	008000b4 	movhi	r2,2
   13284:	10a0c804 	addi	r2,r2,-31968
   13288:	200b883a 	mov	r5,r4
   1328c:	11000017 	ldw	r4,0(r2)
   13290:	00131441 	jmpi	13144 <_fclose_r>

00013294 <_fstat_r>:
   13294:	defffd04 	addi	sp,sp,-12
   13298:	dc400115 	stw	r17,4(sp)
   1329c:	dc000015 	stw	r16,0(sp)
   132a0:	2023883a 	mov	r17,r4
   132a4:	040000b4 	movhi	r16,2
   132a8:	84279c04 	addi	r16,r16,-24976
   132ac:	2809883a 	mov	r4,r5
   132b0:	300b883a 	mov	r5,r6
   132b4:	dfc00215 	stw	ra,8(sp)
   132b8:	80000015 	stw	zero,0(r16)
   132bc:	00137280 	call	13728 <fstat>
   132c0:	00ffffc4 	movi	r3,-1
   132c4:	10c00526 	beq	r2,r3,132dc <_fstat_r+0x48>
   132c8:	dfc00217 	ldw	ra,8(sp)
   132cc:	dc400117 	ldw	r17,4(sp)
   132d0:	dc000017 	ldw	r16,0(sp)
   132d4:	dec00304 	addi	sp,sp,12
   132d8:	f800283a 	ret
   132dc:	80c00017 	ldw	r3,0(r16)
   132e0:	183ff926 	beq	r3,zero,132c8 <_fstat_r+0x34>
   132e4:	88c00015 	stw	r3,0(r17)
   132e8:	dfc00217 	ldw	ra,8(sp)
   132ec:	dc400117 	ldw	r17,4(sp)
   132f0:	dc000017 	ldw	r16,0(sp)
   132f4:	dec00304 	addi	sp,sp,12
   132f8:	f800283a 	ret

000132fc <_isatty_r>:
   132fc:	defffd04 	addi	sp,sp,-12
   13300:	dc400115 	stw	r17,4(sp)
   13304:	dc000015 	stw	r16,0(sp)
   13308:	2023883a 	mov	r17,r4
   1330c:	040000b4 	movhi	r16,2
   13310:	84279c04 	addi	r16,r16,-24976
   13314:	2809883a 	mov	r4,r5
   13318:	dfc00215 	stw	ra,8(sp)
   1331c:	80000015 	stw	zero,0(r16)
   13320:	00138280 	call	13828 <isatty>
   13324:	00ffffc4 	movi	r3,-1
   13328:	10c00526 	beq	r2,r3,13340 <_isatty_r+0x44>
   1332c:	dfc00217 	ldw	ra,8(sp)
   13330:	dc400117 	ldw	r17,4(sp)
   13334:	dc000017 	ldw	r16,0(sp)
   13338:	dec00304 	addi	sp,sp,12
   1333c:	f800283a 	ret
   13340:	80c00017 	ldw	r3,0(r16)
   13344:	183ff926 	beq	r3,zero,1332c <_isatty_r+0x30>
   13348:	88c00015 	stw	r3,0(r17)
   1334c:	dfc00217 	ldw	ra,8(sp)
   13350:	dc400117 	ldw	r17,4(sp)
   13354:	dc000017 	ldw	r16,0(sp)
   13358:	dec00304 	addi	sp,sp,12
   1335c:	f800283a 	ret

00013360 <_lseek_r>:
   13360:	defffd04 	addi	sp,sp,-12
   13364:	dc400115 	stw	r17,4(sp)
   13368:	dc000015 	stw	r16,0(sp)
   1336c:	2023883a 	mov	r17,r4
   13370:	040000b4 	movhi	r16,2
   13374:	84279c04 	addi	r16,r16,-24976
   13378:	2809883a 	mov	r4,r5
   1337c:	300b883a 	mov	r5,r6
   13380:	380d883a 	mov	r6,r7
   13384:	dfc00215 	stw	ra,8(sp)
   13388:	80000015 	stw	zero,0(r16)
   1338c:	0013a080 	call	13a08 <lseek>
   13390:	00ffffc4 	movi	r3,-1
   13394:	10c00526 	beq	r2,r3,133ac <_lseek_r+0x4c>
   13398:	dfc00217 	ldw	ra,8(sp)
   1339c:	dc400117 	ldw	r17,4(sp)
   133a0:	dc000017 	ldw	r16,0(sp)
   133a4:	dec00304 	addi	sp,sp,12
   133a8:	f800283a 	ret
   133ac:	80c00017 	ldw	r3,0(r16)
   133b0:	183ff926 	beq	r3,zero,13398 <_lseek_r+0x38>
   133b4:	88c00015 	stw	r3,0(r17)
   133b8:	dfc00217 	ldw	ra,8(sp)
   133bc:	dc400117 	ldw	r17,4(sp)
   133c0:	dc000017 	ldw	r16,0(sp)
   133c4:	dec00304 	addi	sp,sp,12
   133c8:	f800283a 	ret

000133cc <_read_r>:
   133cc:	defffd04 	addi	sp,sp,-12
   133d0:	dc400115 	stw	r17,4(sp)
   133d4:	dc000015 	stw	r16,0(sp)
   133d8:	2023883a 	mov	r17,r4
   133dc:	040000b4 	movhi	r16,2
   133e0:	84279c04 	addi	r16,r16,-24976
   133e4:	2809883a 	mov	r4,r5
   133e8:	300b883a 	mov	r5,r6
   133ec:	380d883a 	mov	r6,r7
   133f0:	dfc00215 	stw	ra,8(sp)
   133f4:	80000015 	stw	zero,0(r16)
   133f8:	0013be40 	call	13be4 <read>
   133fc:	00ffffc4 	movi	r3,-1
   13400:	10c00526 	beq	r2,r3,13418 <_read_r+0x4c>
   13404:	dfc00217 	ldw	ra,8(sp)
   13408:	dc400117 	ldw	r17,4(sp)
   1340c:	dc000017 	ldw	r16,0(sp)
   13410:	dec00304 	addi	sp,sp,12
   13414:	f800283a 	ret
   13418:	80c00017 	ldw	r3,0(r16)
   1341c:	183ff926 	beq	r3,zero,13404 <_read_r+0x38>
   13420:	88c00015 	stw	r3,0(r17)
   13424:	dfc00217 	ldw	ra,8(sp)
   13428:	dc400117 	ldw	r17,4(sp)
   1342c:	dc000017 	ldw	r16,0(sp)
   13430:	dec00304 	addi	sp,sp,12
   13434:	f800283a 	ret

00013438 <udivmodsi4>:
   13438:	2005883a 	mov	r2,r4
   1343c:	2900182e 	bgeu	r5,r4,134a0 <udivmodsi4+0x68>
   13440:	28001716 	blt	r5,zero,134a0 <udivmodsi4+0x68>
   13444:	01000804 	movi	r4,32
   13448:	00c00044 	movi	r3,1
   1344c:	00000206 	br	13458 <udivmodsi4+0x20>
   13450:	20001126 	beq	r4,zero,13498 <udivmodsi4+0x60>
   13454:	28000516 	blt	r5,zero,1346c <udivmodsi4+0x34>
   13458:	294b883a 	add	r5,r5,r5
   1345c:	213fffc4 	addi	r4,r4,-1
   13460:	18c7883a 	add	r3,r3,r3
   13464:	28bffa36 	bltu	r5,r2,13450 <udivmodsi4+0x18>
   13468:	18000b26 	beq	r3,zero,13498 <udivmodsi4+0x60>
   1346c:	0009883a 	mov	r4,zero
   13470:	11400236 	bltu	r2,r5,1347c <udivmodsi4+0x44>
   13474:	1145c83a 	sub	r2,r2,r5
   13478:	20c8b03a 	or	r4,r4,r3
   1347c:	1806d07a 	srli	r3,r3,1
   13480:	280ad07a 	srli	r5,r5,1
   13484:	183ffa1e 	bne	r3,zero,13470 <udivmodsi4+0x38>
   13488:	3000021e 	bne	r6,zero,13494 <udivmodsi4+0x5c>
   1348c:	2005883a 	mov	r2,r4
   13490:	f800283a 	ret
   13494:	f800283a 	ret
   13498:	0009883a 	mov	r4,zero
   1349c:	003ffa06 	br	13488 <udivmodsi4+0x50>
   134a0:	00c00044 	movi	r3,1
   134a4:	0009883a 	mov	r4,zero
   134a8:	003ff106 	br	13470 <udivmodsi4+0x38>

000134ac <__divsi3>:
   134ac:	defffe04 	addi	sp,sp,-8
   134b0:	dfc00115 	stw	ra,4(sp)
   134b4:	dc000015 	stw	r16,0(sp)
   134b8:	20000a16 	blt	r4,zero,134e4 <__divsi3+0x38>
   134bc:	0021883a 	mov	r16,zero
   134c0:	28000b16 	blt	r5,zero,134f0 <__divsi3+0x44>
   134c4:	000d883a 	mov	r6,zero
   134c8:	00134380 	call	13438 <udivmodsi4>
   134cc:	80000126 	beq	r16,zero,134d4 <__divsi3+0x28>
   134d0:	0085c83a 	sub	r2,zero,r2
   134d4:	dfc00117 	ldw	ra,4(sp)
   134d8:	dc000017 	ldw	r16,0(sp)
   134dc:	dec00204 	addi	sp,sp,8
   134e0:	f800283a 	ret
   134e4:	0109c83a 	sub	r4,zero,r4
   134e8:	04000044 	movi	r16,1
   134ec:	283ff50e 	bge	r5,zero,134c4 <__divsi3+0x18>
   134f0:	014bc83a 	sub	r5,zero,r5
   134f4:	8400005c 	xori	r16,r16,1
   134f8:	003ff206 	br	134c4 <__divsi3+0x18>

000134fc <__modsi3>:
   134fc:	deffff04 	addi	sp,sp,-4
   13500:	dfc00015 	stw	ra,0(sp)
   13504:	20000516 	blt	r4,zero,1351c <__modsi3+0x20>
   13508:	28000c16 	blt	r5,zero,1353c <__modsi3+0x40>
   1350c:	01800044 	movi	r6,1
   13510:	dfc00017 	ldw	ra,0(sp)
   13514:	dec00104 	addi	sp,sp,4
   13518:	00134381 	jmpi	13438 <udivmodsi4>
   1351c:	0109c83a 	sub	r4,zero,r4
   13520:	28000b16 	blt	r5,zero,13550 <__modsi3+0x54>
   13524:	01800044 	movi	r6,1
   13528:	00134380 	call	13438 <udivmodsi4>
   1352c:	0085c83a 	sub	r2,zero,r2
   13530:	dfc00017 	ldw	ra,0(sp)
   13534:	dec00104 	addi	sp,sp,4
   13538:	f800283a 	ret
   1353c:	014bc83a 	sub	r5,zero,r5
   13540:	01800044 	movi	r6,1
   13544:	dfc00017 	ldw	ra,0(sp)
   13548:	dec00104 	addi	sp,sp,4
   1354c:	00134381 	jmpi	13438 <udivmodsi4>
   13550:	014bc83a 	sub	r5,zero,r5
   13554:	003ff306 	br	13524 <__modsi3+0x28>

00013558 <__udivsi3>:
   13558:	000d883a 	mov	r6,zero
   1355c:	00134381 	jmpi	13438 <udivmodsi4>

00013560 <__umodsi3>:
   13560:	01800044 	movi	r6,1
   13564:	00134381 	jmpi	13438 <udivmodsi4>

00013568 <__mulsi3>:
   13568:	0005883a 	mov	r2,zero
   1356c:	20000726 	beq	r4,zero,1358c <__mulsi3+0x24>
   13570:	20c0004c 	andi	r3,r4,1
   13574:	2008d07a 	srli	r4,r4,1
   13578:	18000126 	beq	r3,zero,13580 <__mulsi3+0x18>
   1357c:	1145883a 	add	r2,r2,r5
   13580:	294b883a 	add	r5,r5,r5
   13584:	203ffa1e 	bne	r4,zero,13570 <__mulsi3+0x8>
   13588:	f800283a 	ret
   1358c:	f800283a 	ret

00013590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13590:	defffe04 	addi	sp,sp,-8
   13594:	dfc00115 	stw	ra,4(sp)
   13598:	df000015 	stw	fp,0(sp)
   1359c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135a0:	008000b4 	movhi	r2,2
   135a4:	10a0d004 	addi	r2,r2,-31936
   135a8:	10800017 	ldw	r2,0(r2)
   135ac:	10000526 	beq	r2,zero,135c4 <alt_get_errno+0x34>
   135b0:	008000b4 	movhi	r2,2
   135b4:	10a0d004 	addi	r2,r2,-31936
   135b8:	10800017 	ldw	r2,0(r2)
   135bc:	103ee83a 	callr	r2
   135c0:	00000206 	br	135cc <alt_get_errno+0x3c>
   135c4:	008000b4 	movhi	r2,2
   135c8:	10a79c04 	addi	r2,r2,-24976
}
   135cc:	e037883a 	mov	sp,fp
   135d0:	dfc00117 	ldw	ra,4(sp)
   135d4:	df000017 	ldw	fp,0(sp)
   135d8:	dec00204 	addi	sp,sp,8
   135dc:	f800283a 	ret

000135e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   135e0:	defffb04 	addi	sp,sp,-20
   135e4:	dfc00415 	stw	ra,16(sp)
   135e8:	df000315 	stw	fp,12(sp)
   135ec:	df000304 	addi	fp,sp,12
   135f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   135f4:	e0bfff17 	ldw	r2,-4(fp)
   135f8:	10000716 	blt	r2,zero,13618 <close+0x38>
   135fc:	e13fff17 	ldw	r4,-4(fp)
   13600:	01400304 	movi	r5,12
   13604:	00135680 	call	13568 <__mulsi3>
   13608:	00c00074 	movhi	r3,1
   1360c:	18dc1d04 	addi	r3,r3,28788
   13610:	10c5883a 	add	r2,r2,r3
   13614:	00000106 	br	1361c <close+0x3c>
   13618:	0005883a 	mov	r2,zero
   1361c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13620:	e0bffd17 	ldw	r2,-12(fp)
   13624:	10001826 	beq	r2,zero,13688 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13628:	e0bffd17 	ldw	r2,-12(fp)
   1362c:	10800017 	ldw	r2,0(r2)
   13630:	10800417 	ldw	r2,16(r2)
   13634:	10000626 	beq	r2,zero,13650 <close+0x70>
   13638:	e0bffd17 	ldw	r2,-12(fp)
   1363c:	10800017 	ldw	r2,0(r2)
   13640:	10800417 	ldw	r2,16(r2)
   13644:	e13ffd17 	ldw	r4,-12(fp)
   13648:	103ee83a 	callr	r2
   1364c:	00000106 	br	13654 <close+0x74>
   13650:	0005883a 	mov	r2,zero
   13654:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13658:	e13fff17 	ldw	r4,-4(fp)
   1365c:	0013cd80 	call	13cd8 <alt_release_fd>
    if (rval < 0)
   13660:	e0bffe17 	ldw	r2,-8(fp)
   13664:	1000060e 	bge	r2,zero,13680 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13668:	00135900 	call	13590 <alt_get_errno>
   1366c:	e0fffe17 	ldw	r3,-8(fp)
   13670:	00c7c83a 	sub	r3,zero,r3
   13674:	10c00015 	stw	r3,0(r2)
      return -1;
   13678:	00bfffc4 	movi	r2,-1
   1367c:	00000606 	br	13698 <close+0xb8>
    }
    return 0;
   13680:	0005883a 	mov	r2,zero
   13684:	00000406 	br	13698 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13688:	00135900 	call	13590 <alt_get_errno>
   1368c:	00c01444 	movi	r3,81
   13690:	10c00015 	stw	r3,0(r2)
    return -1;
   13694:	00bfffc4 	movi	r2,-1
  }
}
   13698:	e037883a 	mov	sp,fp
   1369c:	dfc00117 	ldw	ra,4(sp)
   136a0:	df000017 	ldw	fp,0(sp)
   136a4:	dec00204 	addi	sp,sp,8
   136a8:	f800283a 	ret

000136ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   136ac:	defffc04 	addi	sp,sp,-16
   136b0:	df000315 	stw	fp,12(sp)
   136b4:	df000304 	addi	fp,sp,12
   136b8:	e13ffd15 	stw	r4,-12(fp)
   136bc:	e17ffe15 	stw	r5,-8(fp)
   136c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   136c4:	e0bfff17 	ldw	r2,-4(fp)
}
   136c8:	e037883a 	mov	sp,fp
   136cc:	df000017 	ldw	fp,0(sp)
   136d0:	dec00104 	addi	sp,sp,4
   136d4:	f800283a 	ret

000136d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   136d8:	defffe04 	addi	sp,sp,-8
   136dc:	dfc00115 	stw	ra,4(sp)
   136e0:	df000015 	stw	fp,0(sp)
   136e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   136e8:	008000b4 	movhi	r2,2
   136ec:	10a0d004 	addi	r2,r2,-31936
   136f0:	10800017 	ldw	r2,0(r2)
   136f4:	10000526 	beq	r2,zero,1370c <alt_get_errno+0x34>
   136f8:	008000b4 	movhi	r2,2
   136fc:	10a0d004 	addi	r2,r2,-31936
   13700:	10800017 	ldw	r2,0(r2)
   13704:	103ee83a 	callr	r2
   13708:	00000206 	br	13714 <alt_get_errno+0x3c>
   1370c:	008000b4 	movhi	r2,2
   13710:	10a79c04 	addi	r2,r2,-24976
}
   13714:	e037883a 	mov	sp,fp
   13718:	dfc00117 	ldw	ra,4(sp)
   1371c:	df000017 	ldw	fp,0(sp)
   13720:	dec00204 	addi	sp,sp,8
   13724:	f800283a 	ret

00013728 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13728:	defffb04 	addi	sp,sp,-20
   1372c:	dfc00415 	stw	ra,16(sp)
   13730:	df000315 	stw	fp,12(sp)
   13734:	df000304 	addi	fp,sp,12
   13738:	e13ffe15 	stw	r4,-8(fp)
   1373c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13740:	e0bffe17 	ldw	r2,-8(fp)
   13744:	10000716 	blt	r2,zero,13764 <fstat+0x3c>
   13748:	e13ffe17 	ldw	r4,-8(fp)
   1374c:	01400304 	movi	r5,12
   13750:	00135680 	call	13568 <__mulsi3>
   13754:	00c00074 	movhi	r3,1
   13758:	18dc1d04 	addi	r3,r3,28788
   1375c:	10c5883a 	add	r2,r2,r3
   13760:	00000106 	br	13768 <fstat+0x40>
   13764:	0005883a 	mov	r2,zero
   13768:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1376c:	e0bffd17 	ldw	r2,-12(fp)
   13770:	10001026 	beq	r2,zero,137b4 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13774:	e0bffd17 	ldw	r2,-12(fp)
   13778:	10800017 	ldw	r2,0(r2)
   1377c:	10800817 	ldw	r2,32(r2)
   13780:	10000726 	beq	r2,zero,137a0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   13784:	e0bffd17 	ldw	r2,-12(fp)
   13788:	10800017 	ldw	r2,0(r2)
   1378c:	10800817 	ldw	r2,32(r2)
   13790:	e13ffd17 	ldw	r4,-12(fp)
   13794:	e17fff17 	ldw	r5,-4(fp)
   13798:	103ee83a 	callr	r2
   1379c:	00000906 	br	137c4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   137a0:	e0bfff17 	ldw	r2,-4(fp)
   137a4:	00c80004 	movi	r3,8192
   137a8:	10c00115 	stw	r3,4(r2)
      return 0;
   137ac:	0005883a 	mov	r2,zero
   137b0:	00000406 	br	137c4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   137b4:	00136d80 	call	136d8 <alt_get_errno>
   137b8:	00c01444 	movi	r3,81
   137bc:	10c00015 	stw	r3,0(r2)
    return -1;
   137c0:	00bfffc4 	movi	r2,-1
  }
}
   137c4:	e037883a 	mov	sp,fp
   137c8:	dfc00117 	ldw	ra,4(sp)
   137cc:	df000017 	ldw	fp,0(sp)
   137d0:	dec00204 	addi	sp,sp,8
   137d4:	f800283a 	ret

000137d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137d8:	defffe04 	addi	sp,sp,-8
   137dc:	dfc00115 	stw	ra,4(sp)
   137e0:	df000015 	stw	fp,0(sp)
   137e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137e8:	008000b4 	movhi	r2,2
   137ec:	10a0d004 	addi	r2,r2,-31936
   137f0:	10800017 	ldw	r2,0(r2)
   137f4:	10000526 	beq	r2,zero,1380c <alt_get_errno+0x34>
   137f8:	008000b4 	movhi	r2,2
   137fc:	10a0d004 	addi	r2,r2,-31936
   13800:	10800017 	ldw	r2,0(r2)
   13804:	103ee83a 	callr	r2
   13808:	00000206 	br	13814 <alt_get_errno+0x3c>
   1380c:	008000b4 	movhi	r2,2
   13810:	10a79c04 	addi	r2,r2,-24976
}
   13814:	e037883a 	mov	sp,fp
   13818:	dfc00117 	ldw	ra,4(sp)
   1381c:	df000017 	ldw	fp,0(sp)
   13820:	dec00204 	addi	sp,sp,8
   13824:	f800283a 	ret

00013828 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13828:	deffed04 	addi	sp,sp,-76
   1382c:	dfc01215 	stw	ra,72(sp)
   13830:	df001115 	stw	fp,68(sp)
   13834:	df001104 	addi	fp,sp,68
   13838:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1383c:	e0bfff17 	ldw	r2,-4(fp)
   13840:	10000716 	blt	r2,zero,13860 <isatty+0x38>
   13844:	e13fff17 	ldw	r4,-4(fp)
   13848:	01400304 	movi	r5,12
   1384c:	00135680 	call	13568 <__mulsi3>
   13850:	00c00074 	movhi	r3,1
   13854:	18dc1d04 	addi	r3,r3,28788
   13858:	10c5883a 	add	r2,r2,r3
   1385c:	00000106 	br	13864 <isatty+0x3c>
   13860:	0005883a 	mov	r2,zero
   13864:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13868:	e0bfef17 	ldw	r2,-68(fp)
   1386c:	10000e26 	beq	r2,zero,138a8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13870:	e0bfef17 	ldw	r2,-68(fp)
   13874:	10800017 	ldw	r2,0(r2)
   13878:	10800817 	ldw	r2,32(r2)
   1387c:	1000021e 	bne	r2,zero,13888 <isatty+0x60>
    {
      return 1;
   13880:	00800044 	movi	r2,1
   13884:	00000c06 	br	138b8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13888:	e0bff004 	addi	r2,fp,-64
   1388c:	e13fff17 	ldw	r4,-4(fp)
   13890:	100b883a 	mov	r5,r2
   13894:	00137280 	call	13728 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13898:	e0bff117 	ldw	r2,-60(fp)
   1389c:	10880020 	cmpeqi	r2,r2,8192
   138a0:	10803fcc 	andi	r2,r2,255
   138a4:	00000406 	br	138b8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   138a8:	00137d80 	call	137d8 <alt_get_errno>
   138ac:	00c01444 	movi	r3,81
   138b0:	10c00015 	stw	r3,0(r2)
    return 0;
   138b4:	0005883a 	mov	r2,zero
  }
}
   138b8:	e037883a 	mov	sp,fp
   138bc:	dfc00117 	ldw	ra,4(sp)
   138c0:	df000017 	ldw	fp,0(sp)
   138c4:	dec00204 	addi	sp,sp,8
   138c8:	f800283a 	ret

000138cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   138cc:	defffc04 	addi	sp,sp,-16
   138d0:	df000315 	stw	fp,12(sp)
   138d4:	df000304 	addi	fp,sp,12
   138d8:	e13ffd15 	stw	r4,-12(fp)
   138dc:	e17ffe15 	stw	r5,-8(fp)
   138e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   138e4:	e0fffe17 	ldw	r3,-8(fp)
   138e8:	e0bffd17 	ldw	r2,-12(fp)
   138ec:	18800e26 	beq	r3,r2,13928 <alt_load_section+0x5c>
  {
    while( to != end )
   138f0:	00000a06 	br	1391c <alt_load_section+0x50>
    {
      *to++ = *from++;
   138f4:	e0bffd17 	ldw	r2,-12(fp)
   138f8:	10c00017 	ldw	r3,0(r2)
   138fc:	e0bffe17 	ldw	r2,-8(fp)
   13900:	10c00015 	stw	r3,0(r2)
   13904:	e0bffe17 	ldw	r2,-8(fp)
   13908:	10800104 	addi	r2,r2,4
   1390c:	e0bffe15 	stw	r2,-8(fp)
   13910:	e0bffd17 	ldw	r2,-12(fp)
   13914:	10800104 	addi	r2,r2,4
   13918:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1391c:	e0fffe17 	ldw	r3,-8(fp)
   13920:	e0bfff17 	ldw	r2,-4(fp)
   13924:	18bff31e 	bne	r3,r2,138f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13928:	e037883a 	mov	sp,fp
   1392c:	df000017 	ldw	fp,0(sp)
   13930:	dec00104 	addi	sp,sp,4
   13934:	f800283a 	ret

00013938 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13938:	defffe04 	addi	sp,sp,-8
   1393c:	dfc00115 	stw	ra,4(sp)
   13940:	df000015 	stw	fp,0(sp)
   13944:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13948:	010000b4 	movhi	r4,2
   1394c:	2120d504 	addi	r4,r4,-31916
   13950:	01400074 	movhi	r5,1
   13954:	295a1104 	addi	r5,r5,26692
   13958:	018000b4 	movhi	r6,2
   1395c:	31a0d504 	addi	r6,r6,-31916
   13960:	00138cc0 	call	138cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13964:	01000074 	movhi	r4,1
   13968:	21000804 	addi	r4,r4,32
   1396c:	01400074 	movhi	r5,1
   13970:	29400804 	addi	r5,r5,32
   13974:	01800074 	movhi	r6,1
   13978:	31806e04 	addi	r6,r6,440
   1397c:	00138cc0 	call	138cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13980:	01000074 	movhi	r4,1
   13984:	21195804 	addi	r4,r4,25952
   13988:	01400074 	movhi	r5,1
   1398c:	29595804 	addi	r5,r5,25952
   13990:	01800074 	movhi	r6,1
   13994:	319a1104 	addi	r6,r6,26692
   13998:	00138cc0 	call	138cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1399c:	00154c00 	call	154c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   139a0:	00156840 	call	15684 <alt_icache_flush_all>
}
   139a4:	e037883a 	mov	sp,fp
   139a8:	dfc00117 	ldw	ra,4(sp)
   139ac:	df000017 	ldw	fp,0(sp)
   139b0:	dec00204 	addi	sp,sp,8
   139b4:	f800283a 	ret

000139b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139b8:	defffe04 	addi	sp,sp,-8
   139bc:	dfc00115 	stw	ra,4(sp)
   139c0:	df000015 	stw	fp,0(sp)
   139c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   139c8:	008000b4 	movhi	r2,2
   139cc:	10a0d004 	addi	r2,r2,-31936
   139d0:	10800017 	ldw	r2,0(r2)
   139d4:	10000526 	beq	r2,zero,139ec <alt_get_errno+0x34>
   139d8:	008000b4 	movhi	r2,2
   139dc:	10a0d004 	addi	r2,r2,-31936
   139e0:	10800017 	ldw	r2,0(r2)
   139e4:	103ee83a 	callr	r2
   139e8:	00000206 	br	139f4 <alt_get_errno+0x3c>
   139ec:	008000b4 	movhi	r2,2
   139f0:	10a79c04 	addi	r2,r2,-24976
}
   139f4:	e037883a 	mov	sp,fp
   139f8:	dfc00117 	ldw	ra,4(sp)
   139fc:	df000017 	ldw	fp,0(sp)
   13a00:	dec00204 	addi	sp,sp,8
   13a04:	f800283a 	ret

00013a08 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13a08:	defff904 	addi	sp,sp,-28
   13a0c:	dfc00615 	stw	ra,24(sp)
   13a10:	df000515 	stw	fp,20(sp)
   13a14:	df000504 	addi	fp,sp,20
   13a18:	e13ffd15 	stw	r4,-12(fp)
   13a1c:	e17ffe15 	stw	r5,-8(fp)
   13a20:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13a24:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a28:	e0bffd17 	ldw	r2,-12(fp)
   13a2c:	10000716 	blt	r2,zero,13a4c <lseek+0x44>
   13a30:	e13ffd17 	ldw	r4,-12(fp)
   13a34:	01400304 	movi	r5,12
   13a38:	00135680 	call	13568 <__mulsi3>
   13a3c:	00c00074 	movhi	r3,1
   13a40:	18dc1d04 	addi	r3,r3,28788
   13a44:	10c5883a 	add	r2,r2,r3
   13a48:	00000106 	br	13a50 <lseek+0x48>
   13a4c:	0005883a 	mov	r2,zero
   13a50:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13a54:	e0bffc17 	ldw	r2,-16(fp)
   13a58:	10001026 	beq	r2,zero,13a9c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13a5c:	e0bffc17 	ldw	r2,-16(fp)
   13a60:	10800017 	ldw	r2,0(r2)
   13a64:	10800717 	ldw	r2,28(r2)
   13a68:	10000926 	beq	r2,zero,13a90 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13a6c:	e0bffc17 	ldw	r2,-16(fp)
   13a70:	10800017 	ldw	r2,0(r2)
   13a74:	10800717 	ldw	r2,28(r2)
   13a78:	e13ffc17 	ldw	r4,-16(fp)
   13a7c:	e17ffe17 	ldw	r5,-8(fp)
   13a80:	e1bfff17 	ldw	r6,-4(fp)
   13a84:	103ee83a 	callr	r2
   13a88:	e0bffb15 	stw	r2,-20(fp)
   13a8c:	00000506 	br	13aa4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13a90:	00bfde84 	movi	r2,-134
   13a94:	e0bffb15 	stw	r2,-20(fp)
   13a98:	00000206 	br	13aa4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   13a9c:	00bfebc4 	movi	r2,-81
   13aa0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13aa4:	e0bffb17 	ldw	r2,-20(fp)
   13aa8:	1000060e 	bge	r2,zero,13ac4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13aac:	00139b80 	call	139b8 <alt_get_errno>
   13ab0:	e0fffb17 	ldw	r3,-20(fp)
   13ab4:	00c7c83a 	sub	r3,zero,r3
   13ab8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   13abc:	00bfffc4 	movi	r2,-1
   13ac0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13ac4:	e0bffb17 	ldw	r2,-20(fp)
}
   13ac8:	e037883a 	mov	sp,fp
   13acc:	dfc00117 	ldw	ra,4(sp)
   13ad0:	df000017 	ldw	fp,0(sp)
   13ad4:	dec00204 	addi	sp,sp,8
   13ad8:	f800283a 	ret

00013adc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13adc:	defffd04 	addi	sp,sp,-12
   13ae0:	dfc00215 	stw	ra,8(sp)
   13ae4:	df000115 	stw	fp,4(sp)
   13ae8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13aec:	0009883a 	mov	r4,zero
   13af0:	0013f800 	call	13f80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13af4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13af8:	0013fb40 	call	13fb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13afc:	01000074 	movhi	r4,1
   13b00:	211a0404 	addi	r4,r4,26640
   13b04:	01400074 	movhi	r5,1
   13b08:	295a0404 	addi	r5,r5,26640
   13b0c:	01800074 	movhi	r6,1
   13b10:	319a0404 	addi	r6,r6,26640
   13b14:	0015a480 	call	15a48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13b18:	00155cc0 	call	155cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13b1c:	01000074 	movhi	r4,1
   13b20:	21158a04 	addi	r4,r4,22056
   13b24:	001618c0 	call	1618c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13b28:	d126d717 	ldw	r4,-25764(gp)
   13b2c:	d0e6d817 	ldw	r3,-25760(gp)
   13b30:	d0a6d917 	ldw	r2,-25756(gp)
   13b34:	180b883a 	mov	r5,r3
   13b38:	100d883a 	mov	r6,r2
   13b3c:	001023c0 	call	1023c <main>
   13b40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13b44:	01000044 	movi	r4,1
   13b48:	00135e00 	call	135e0 <close>
  exit (result);
   13b4c:	e13fff17 	ldw	r4,-4(fp)
   13b50:	00161a00 	call	161a0 <exit>

00013b54 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13b54:	defffe04 	addi	sp,sp,-8
   13b58:	df000115 	stw	fp,4(sp)
   13b5c:	df000104 	addi	fp,sp,4
   13b60:	e13fff15 	stw	r4,-4(fp)
}
   13b64:	e037883a 	mov	sp,fp
   13b68:	df000017 	ldw	fp,0(sp)
   13b6c:	dec00104 	addi	sp,sp,4
   13b70:	f800283a 	ret

00013b74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13b74:	defffe04 	addi	sp,sp,-8
   13b78:	df000115 	stw	fp,4(sp)
   13b7c:	df000104 	addi	fp,sp,4
   13b80:	e13fff15 	stw	r4,-4(fp)
}
   13b84:	e037883a 	mov	sp,fp
   13b88:	df000017 	ldw	fp,0(sp)
   13b8c:	dec00104 	addi	sp,sp,4
   13b90:	f800283a 	ret

00013b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13b94:	defffe04 	addi	sp,sp,-8
   13b98:	dfc00115 	stw	ra,4(sp)
   13b9c:	df000015 	stw	fp,0(sp)
   13ba0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ba4:	008000b4 	movhi	r2,2
   13ba8:	10a0d004 	addi	r2,r2,-31936
   13bac:	10800017 	ldw	r2,0(r2)
   13bb0:	10000526 	beq	r2,zero,13bc8 <alt_get_errno+0x34>
   13bb4:	008000b4 	movhi	r2,2
   13bb8:	10a0d004 	addi	r2,r2,-31936
   13bbc:	10800017 	ldw	r2,0(r2)
   13bc0:	103ee83a 	callr	r2
   13bc4:	00000206 	br	13bd0 <alt_get_errno+0x3c>
   13bc8:	008000b4 	movhi	r2,2
   13bcc:	10a79c04 	addi	r2,r2,-24976
}
   13bd0:	e037883a 	mov	sp,fp
   13bd4:	dfc00117 	ldw	ra,4(sp)
   13bd8:	df000017 	ldw	fp,0(sp)
   13bdc:	dec00204 	addi	sp,sp,8
   13be0:	f800283a 	ret

00013be4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13be4:	defff904 	addi	sp,sp,-28
   13be8:	dfc00615 	stw	ra,24(sp)
   13bec:	df000515 	stw	fp,20(sp)
   13bf0:	df000504 	addi	fp,sp,20
   13bf4:	e13ffd15 	stw	r4,-12(fp)
   13bf8:	e17ffe15 	stw	r5,-8(fp)
   13bfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13c00:	e0bffd17 	ldw	r2,-12(fp)
   13c04:	10000716 	blt	r2,zero,13c24 <read+0x40>
   13c08:	e13ffd17 	ldw	r4,-12(fp)
   13c0c:	01400304 	movi	r5,12
   13c10:	00135680 	call	13568 <__mulsi3>
   13c14:	00c00074 	movhi	r3,1
   13c18:	18dc1d04 	addi	r3,r3,28788
   13c1c:	10c5883a 	add	r2,r2,r3
   13c20:	00000106 	br	13c28 <read+0x44>
   13c24:	0005883a 	mov	r2,zero
   13c28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13c2c:	e0bffb17 	ldw	r2,-20(fp)
   13c30:	10002026 	beq	r2,zero,13cb4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13c34:	e0bffb17 	ldw	r2,-20(fp)
   13c38:	10800217 	ldw	r2,8(r2)
   13c3c:	108000cc 	andi	r2,r2,3
   13c40:	10800060 	cmpeqi	r2,r2,1
   13c44:	1000171e 	bne	r2,zero,13ca4 <read+0xc0>
        (fd->dev->read))
   13c48:	e0bffb17 	ldw	r2,-20(fp)
   13c4c:	10800017 	ldw	r2,0(r2)
   13c50:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13c54:	10001326 	beq	r2,zero,13ca4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13c58:	e0bffb17 	ldw	r2,-20(fp)
   13c5c:	10800017 	ldw	r2,0(r2)
   13c60:	10c00517 	ldw	r3,20(r2)
   13c64:	e0bfff17 	ldw	r2,-4(fp)
   13c68:	e13ffb17 	ldw	r4,-20(fp)
   13c6c:	e17ffe17 	ldw	r5,-8(fp)
   13c70:	100d883a 	mov	r6,r2
   13c74:	183ee83a 	callr	r3
   13c78:	e0bffc15 	stw	r2,-16(fp)
   13c7c:	e0bffc17 	ldw	r2,-16(fp)
   13c80:	1000060e 	bge	r2,zero,13c9c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13c84:	0013b940 	call	13b94 <alt_get_errno>
   13c88:	e0fffc17 	ldw	r3,-16(fp)
   13c8c:	00c7c83a 	sub	r3,zero,r3
   13c90:	10c00015 	stw	r3,0(r2)
          return -1;
   13c94:	00bfffc4 	movi	r2,-1
   13c98:	00000a06 	br	13cc4 <read+0xe0>
        }
        return rval;
   13c9c:	e0bffc17 	ldw	r2,-16(fp)
   13ca0:	00000806 	br	13cc4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13ca4:	0013b940 	call	13b94 <alt_get_errno>
   13ca8:	00c00344 	movi	r3,13
   13cac:	10c00015 	stw	r3,0(r2)
   13cb0:	00000306 	br	13cc0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13cb4:	0013b940 	call	13b94 <alt_get_errno>
   13cb8:	00c01444 	movi	r3,81
   13cbc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13cc0:	00bfffc4 	movi	r2,-1
}
   13cc4:	e037883a 	mov	sp,fp
   13cc8:	dfc00117 	ldw	ra,4(sp)
   13ccc:	df000017 	ldw	fp,0(sp)
   13cd0:	dec00204 	addi	sp,sp,8
   13cd4:	f800283a 	ret

00013cd8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13cd8:	defffc04 	addi	sp,sp,-16
   13cdc:	dfc00315 	stw	ra,12(sp)
   13ce0:	df000215 	stw	fp,8(sp)
   13ce4:	dc000115 	stw	r16,4(sp)
   13ce8:	df000104 	addi	fp,sp,4
   13cec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13cf0:	e0bfff17 	ldw	r2,-4(fp)
   13cf4:	108000d0 	cmplti	r2,r2,3
   13cf8:	1000111e 	bne	r2,zero,13d40 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13cfc:	04000074 	movhi	r16,1
   13d00:	841c1d04 	addi	r16,r16,28788
   13d04:	e0bfff17 	ldw	r2,-4(fp)
   13d08:	1009883a 	mov	r4,r2
   13d0c:	01400304 	movi	r5,12
   13d10:	00135680 	call	13568 <__mulsi3>
   13d14:	8085883a 	add	r2,r16,r2
   13d18:	10800204 	addi	r2,r2,8
   13d1c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13d20:	04000074 	movhi	r16,1
   13d24:	841c1d04 	addi	r16,r16,28788
   13d28:	e0bfff17 	ldw	r2,-4(fp)
   13d2c:	1009883a 	mov	r4,r2
   13d30:	01400304 	movi	r5,12
   13d34:	00135680 	call	13568 <__mulsi3>
   13d38:	8085883a 	add	r2,r16,r2
   13d3c:	10000015 	stw	zero,0(r2)
  }
}
   13d40:	e037883a 	mov	sp,fp
   13d44:	dfc00217 	ldw	ra,8(sp)
   13d48:	df000117 	ldw	fp,4(sp)
   13d4c:	dc000017 	ldw	r16,0(sp)
   13d50:	dec00304 	addi	sp,sp,12
   13d54:	f800283a 	ret

00013d58 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13d58:	defff904 	addi	sp,sp,-28
   13d5c:	df000615 	stw	fp,24(sp)
   13d60:	df000604 	addi	fp,sp,24
   13d64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d68:	0005303a 	rdctl	r2,status
   13d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d70:	e0fffc17 	ldw	r3,-16(fp)
   13d74:	00bfff84 	movi	r2,-2
   13d78:	1884703a 	and	r2,r3,r2
   13d7c:	1001703a 	wrctl	status,r2
  
  return context;
   13d80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13d84:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13d88:	d0a00b17 	ldw	r2,-32724(gp)
   13d8c:	10c000c4 	addi	r3,r2,3
   13d90:	00bfff04 	movi	r2,-4
   13d94:	1884703a 	and	r2,r3,r2
   13d98:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13d9c:	d0e00b17 	ldw	r3,-32724(gp)
   13da0:	e0bfff17 	ldw	r2,-4(fp)
   13da4:	1885883a 	add	r2,r3,r2
   13da8:	00c000b4 	movhi	r3,2
   13dac:	18eee004 	addi	r3,r3,-17536
   13db0:	1880062e 	bgeu	r3,r2,13dcc <sbrk+0x74>
   13db4:	e0bffa17 	ldw	r2,-24(fp)
   13db8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dbc:	e0bffd17 	ldw	r2,-12(fp)
   13dc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13dc4:	00bfffc4 	movi	r2,-1
   13dc8:	00000b06 	br	13df8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13dcc:	d0a00b17 	ldw	r2,-32724(gp)
   13dd0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13dd4:	d0e00b17 	ldw	r3,-32724(gp)
   13dd8:	e0bfff17 	ldw	r2,-4(fp)
   13ddc:	1885883a 	add	r2,r3,r2
   13de0:	d0a00b15 	stw	r2,-32724(gp)
   13de4:	e0bffa17 	ldw	r2,-24(fp)
   13de8:	e0bffe15 	stw	r2,-8(fp)
   13dec:	e0bffe17 	ldw	r2,-8(fp)
   13df0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13df4:	e0bffb17 	ldw	r2,-20(fp)
} 
   13df8:	e037883a 	mov	sp,fp
   13dfc:	df000017 	ldw	fp,0(sp)
   13e00:	dec00104 	addi	sp,sp,4
   13e04:	f800283a 	ret

00013e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e08:	defffe04 	addi	sp,sp,-8
   13e0c:	dfc00115 	stw	ra,4(sp)
   13e10:	df000015 	stw	fp,0(sp)
   13e14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e18:	008000b4 	movhi	r2,2
   13e1c:	10a0d004 	addi	r2,r2,-31936
   13e20:	10800017 	ldw	r2,0(r2)
   13e24:	10000526 	beq	r2,zero,13e3c <alt_get_errno+0x34>
   13e28:	008000b4 	movhi	r2,2
   13e2c:	10a0d004 	addi	r2,r2,-31936
   13e30:	10800017 	ldw	r2,0(r2)
   13e34:	103ee83a 	callr	r2
   13e38:	00000206 	br	13e44 <alt_get_errno+0x3c>
   13e3c:	008000b4 	movhi	r2,2
   13e40:	10a79c04 	addi	r2,r2,-24976
}
   13e44:	e037883a 	mov	sp,fp
   13e48:	dfc00117 	ldw	ra,4(sp)
   13e4c:	df000017 	ldw	fp,0(sp)
   13e50:	dec00204 	addi	sp,sp,8
   13e54:	f800283a 	ret

00013e58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13e58:	defff904 	addi	sp,sp,-28
   13e5c:	dfc00615 	stw	ra,24(sp)
   13e60:	df000515 	stw	fp,20(sp)
   13e64:	df000504 	addi	fp,sp,20
   13e68:	e13ffd15 	stw	r4,-12(fp)
   13e6c:	e17ffe15 	stw	r5,-8(fp)
   13e70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e74:	e0bffd17 	ldw	r2,-12(fp)
   13e78:	10000716 	blt	r2,zero,13e98 <write+0x40>
   13e7c:	e13ffd17 	ldw	r4,-12(fp)
   13e80:	01400304 	movi	r5,12
   13e84:	00135680 	call	13568 <__mulsi3>
   13e88:	00c00074 	movhi	r3,1
   13e8c:	18dc1d04 	addi	r3,r3,28788
   13e90:	10c5883a 	add	r2,r2,r3
   13e94:	00000106 	br	13e9c <write+0x44>
   13e98:	0005883a 	mov	r2,zero
   13e9c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13ea0:	e0bffb17 	ldw	r2,-20(fp)
   13ea4:	10001f26 	beq	r2,zero,13f24 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13ea8:	e0bffb17 	ldw	r2,-20(fp)
   13eac:	10800217 	ldw	r2,8(r2)
   13eb0:	108000cc 	andi	r2,r2,3
   13eb4:	10001726 	beq	r2,zero,13f14 <write+0xbc>
   13eb8:	e0bffb17 	ldw	r2,-20(fp)
   13ebc:	10800017 	ldw	r2,0(r2)
   13ec0:	10800617 	ldw	r2,24(r2)
   13ec4:	10001326 	beq	r2,zero,13f14 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13ec8:	e0bffb17 	ldw	r2,-20(fp)
   13ecc:	10800017 	ldw	r2,0(r2)
   13ed0:	10c00617 	ldw	r3,24(r2)
   13ed4:	e0bfff17 	ldw	r2,-4(fp)
   13ed8:	e13ffb17 	ldw	r4,-20(fp)
   13edc:	e17ffe17 	ldw	r5,-8(fp)
   13ee0:	100d883a 	mov	r6,r2
   13ee4:	183ee83a 	callr	r3
   13ee8:	e0bffc15 	stw	r2,-16(fp)
   13eec:	e0bffc17 	ldw	r2,-16(fp)
   13ef0:	1000060e 	bge	r2,zero,13f0c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13ef4:	0013e080 	call	13e08 <alt_get_errno>
   13ef8:	e0fffc17 	ldw	r3,-16(fp)
   13efc:	00c7c83a 	sub	r3,zero,r3
   13f00:	10c00015 	stw	r3,0(r2)
        return -1;
   13f04:	00bfffc4 	movi	r2,-1
   13f08:	00000a06 	br	13f34 <write+0xdc>
      }
      return rval;
   13f0c:	e0bffc17 	ldw	r2,-16(fp)
   13f10:	00000806 	br	13f34 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13f14:	0013e080 	call	13e08 <alt_get_errno>
   13f18:	00c00344 	movi	r3,13
   13f1c:	10c00015 	stw	r3,0(r2)
   13f20:	00000306 	br	13f30 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13f24:	0013e080 	call	13e08 <alt_get_errno>
   13f28:	00c01444 	movi	r3,81
   13f2c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13f30:	00bfffc4 	movi	r2,-1
}
   13f34:	e037883a 	mov	sp,fp
   13f38:	dfc00117 	ldw	ra,4(sp)
   13f3c:	df000017 	ldw	fp,0(sp)
   13f40:	dec00204 	addi	sp,sp,8
   13f44:	f800283a 	ret

00013f48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13f48:	defffd04 	addi	sp,sp,-12
   13f4c:	dfc00215 	stw	ra,8(sp)
   13f50:	df000115 	stw	fp,4(sp)
   13f54:	df000104 	addi	fp,sp,4
   13f58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13f5c:	e13fff17 	ldw	r4,-4(fp)
   13f60:	014000b4 	movhi	r5,2
   13f64:	2960cd04 	addi	r5,r5,-31948
   13f68:	001552c0 	call	1552c <alt_dev_llist_insert>
}
   13f6c:	e037883a 	mov	sp,fp
   13f70:	dfc00117 	ldw	ra,4(sp)
   13f74:	df000017 	ldw	fp,0(sp)
   13f78:	dec00204 	addi	sp,sp,8
   13f7c:	f800283a 	ret

00013f80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13f80:	defffd04 	addi	sp,sp,-12
   13f84:	dfc00215 	stw	ra,8(sp)
   13f88:	df000115 	stw	fp,4(sp)
   13f8c:	df000104 	addi	fp,sp,4
   13f90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   13f94:	0015ef40 	call	15ef4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13f98:	00800044 	movi	r2,1
   13f9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13fa0:	e037883a 	mov	sp,fp
   13fa4:	dfc00117 	ldw	ra,4(sp)
   13fa8:	df000017 	ldw	fp,0(sp)
   13fac:	dec00204 	addi	sp,sp,8
   13fb0:	f800283a 	ret

00013fb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13fb4:	defffe04 	addi	sp,sp,-8
   13fb8:	dfc00115 	stw	ra,4(sp)
   13fbc:	df000015 	stw	fp,0(sp)
   13fc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13fc4:	01000074 	movhi	r4,1
   13fc8:	211c8704 	addi	r4,r4,29212
   13fcc:	000b883a 	mov	r5,zero
   13fd0:	000d883a 	mov	r6,zero
   13fd4:	001417c0 	call	1417c <altera_avalon_jtag_uart_init>
   13fd8:	01000074 	movhi	r4,1
   13fdc:	211c7d04 	addi	r4,r4,29172
   13fe0:	0013f480 	call	13f48 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   13fe4:	010000b4 	movhi	r4,2
   13fe8:	21209f04 	addi	r4,r4,-32132
   13fec:	000b883a 	mov	r5,zero
   13ff0:	01800044 	movi	r6,1
   13ff4:	0014b8c0 	call	14b8c <altera_avalon_uart_init>
   13ff8:	010000b4 	movhi	r4,2
   13ffc:	21209504 	addi	r4,r4,-32172
   14000:	0013f480 	call	13f48 <alt_dev_reg>
}
   14004:	e037883a 	mov	sp,fp
   14008:	dfc00117 	ldw	ra,4(sp)
   1400c:	df000017 	ldw	fp,0(sp)
   14010:	dec00204 	addi	sp,sp,8
   14014:	f800283a 	ret

00014018 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14018:	defffa04 	addi	sp,sp,-24
   1401c:	dfc00515 	stw	ra,20(sp)
   14020:	df000415 	stw	fp,16(sp)
   14024:	df000404 	addi	fp,sp,16
   14028:	e13ffd15 	stw	r4,-12(fp)
   1402c:	e17ffe15 	stw	r5,-8(fp)
   14030:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14034:	e0bffd17 	ldw	r2,-12(fp)
   14038:	10800017 	ldw	r2,0(r2)
   1403c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14040:	e0bffc17 	ldw	r2,-16(fp)
   14044:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14048:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1404c:	10800217 	ldw	r2,8(r2)
   14050:	1809883a 	mov	r4,r3
   14054:	e17ffe17 	ldw	r5,-8(fp)
   14058:	e1bfff17 	ldw	r6,-4(fp)
   1405c:	100f883a 	mov	r7,r2
   14060:	00146400 	call	14640 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14064:	e037883a 	mov	sp,fp
   14068:	dfc00117 	ldw	ra,4(sp)
   1406c:	df000017 	ldw	fp,0(sp)
   14070:	dec00204 	addi	sp,sp,8
   14074:	f800283a 	ret

00014078 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14078:	defffa04 	addi	sp,sp,-24
   1407c:	dfc00515 	stw	ra,20(sp)
   14080:	df000415 	stw	fp,16(sp)
   14084:	df000404 	addi	fp,sp,16
   14088:	e13ffd15 	stw	r4,-12(fp)
   1408c:	e17ffe15 	stw	r5,-8(fp)
   14090:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14094:	e0bffd17 	ldw	r2,-12(fp)
   14098:	10800017 	ldw	r2,0(r2)
   1409c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   140a0:	e0bffc17 	ldw	r2,-16(fp)
   140a4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   140a8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   140ac:	10800217 	ldw	r2,8(r2)
   140b0:	1809883a 	mov	r4,r3
   140b4:	e17ffe17 	ldw	r5,-8(fp)
   140b8:	e1bfff17 	ldw	r6,-4(fp)
   140bc:	100f883a 	mov	r7,r2
   140c0:	00148580 	call	14858 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   140c4:	e037883a 	mov	sp,fp
   140c8:	dfc00117 	ldw	ra,4(sp)
   140cc:	df000017 	ldw	fp,0(sp)
   140d0:	dec00204 	addi	sp,sp,8
   140d4:	f800283a 	ret

000140d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   140d8:	defffc04 	addi	sp,sp,-16
   140dc:	dfc00315 	stw	ra,12(sp)
   140e0:	df000215 	stw	fp,8(sp)
   140e4:	df000204 	addi	fp,sp,8
   140e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   140ec:	e0bfff17 	ldw	r2,-4(fp)
   140f0:	10800017 	ldw	r2,0(r2)
   140f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   140f8:	e0bffe17 	ldw	r2,-8(fp)
   140fc:	10c00a04 	addi	r3,r2,40
   14100:	e0bfff17 	ldw	r2,-4(fp)
   14104:	10800217 	ldw	r2,8(r2)
   14108:	1809883a 	mov	r4,r3
   1410c:	100b883a 	mov	r5,r2
   14110:	00144e40 	call	144e4 <altera_avalon_jtag_uart_close>
}
   14114:	e037883a 	mov	sp,fp
   14118:	dfc00117 	ldw	ra,4(sp)
   1411c:	df000017 	ldw	fp,0(sp)
   14120:	dec00204 	addi	sp,sp,8
   14124:	f800283a 	ret

00014128 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14128:	defffa04 	addi	sp,sp,-24
   1412c:	dfc00515 	stw	ra,20(sp)
   14130:	df000415 	stw	fp,16(sp)
   14134:	df000404 	addi	fp,sp,16
   14138:	e13ffd15 	stw	r4,-12(fp)
   1413c:	e17ffe15 	stw	r5,-8(fp)
   14140:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14144:	e0bffd17 	ldw	r2,-12(fp)
   14148:	10800017 	ldw	r2,0(r2)
   1414c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14150:	e0bffc17 	ldw	r2,-16(fp)
   14154:	10800a04 	addi	r2,r2,40
   14158:	1009883a 	mov	r4,r2
   1415c:	e17ffe17 	ldw	r5,-8(fp)
   14160:	e1bfff17 	ldw	r6,-4(fp)
   14164:	001454c0 	call	1454c <altera_avalon_jtag_uart_ioctl>
}
   14168:	e037883a 	mov	sp,fp
   1416c:	dfc00117 	ldw	ra,4(sp)
   14170:	df000017 	ldw	fp,0(sp)
   14174:	dec00204 	addi	sp,sp,8
   14178:	f800283a 	ret

0001417c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1417c:	defffa04 	addi	sp,sp,-24
   14180:	dfc00515 	stw	ra,20(sp)
   14184:	df000415 	stw	fp,16(sp)
   14188:	df000404 	addi	fp,sp,16
   1418c:	e13ffd15 	stw	r4,-12(fp)
   14190:	e17ffe15 	stw	r5,-8(fp)
   14194:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14198:	e0bffd17 	ldw	r2,-12(fp)
   1419c:	00c00044 	movi	r3,1
   141a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   141a4:	e0bffd17 	ldw	r2,-12(fp)
   141a8:	10800017 	ldw	r2,0(r2)
   141ac:	10800104 	addi	r2,r2,4
   141b0:	e0fffd17 	ldw	r3,-12(fp)
   141b4:	18c00817 	ldw	r3,32(r3)
   141b8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   141bc:	e0fffe17 	ldw	r3,-8(fp)
   141c0:	e0bfff17 	ldw	r2,-4(fp)
   141c4:	d8000015 	stw	zero,0(sp)
   141c8:	1809883a 	mov	r4,r3
   141cc:	100b883a 	mov	r5,r2
   141d0:	01800074 	movhi	r6,1
   141d4:	31908f04 	addi	r6,r6,16956
   141d8:	e1fffd17 	ldw	r7,-12(fp)
   141dc:	00156a00 	call	156a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   141e0:	e0bffd17 	ldw	r2,-12(fp)
   141e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   141e8:	e0bffd17 	ldw	r2,-12(fp)
   141ec:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   141f0:	008000b4 	movhi	r2,2
   141f4:	10a7a104 	addi	r2,r2,-24956
   141f8:	10800017 	ldw	r2,0(r2)
   141fc:	1809883a 	mov	r4,r3
   14200:	100b883a 	mov	r5,r2
   14204:	01800074 	movhi	r6,1
   14208:	31911004 	addi	r6,r6,17472
   1420c:	e1fffd17 	ldw	r7,-12(fp)
   14210:	00153800 	call	15380 <alt_alarm_start>
   14214:	1000040e 	bge	r2,zero,14228 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14218:	e0bffd17 	ldw	r2,-12(fp)
   1421c:	00e00034 	movhi	r3,32768
   14220:	18ffffc4 	addi	r3,r3,-1
   14224:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14228:	e037883a 	mov	sp,fp
   1422c:	dfc00117 	ldw	ra,4(sp)
   14230:	df000017 	ldw	fp,0(sp)
   14234:	dec00204 	addi	sp,sp,8
   14238:	f800283a 	ret

0001423c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1423c:	defff804 	addi	sp,sp,-32
   14240:	df000715 	stw	fp,28(sp)
   14244:	df000704 	addi	fp,sp,28
   14248:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1424c:	e0bfff17 	ldw	r2,-4(fp)
   14250:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14254:	e0bffb17 	ldw	r2,-20(fp)
   14258:	10800017 	ldw	r2,0(r2)
   1425c:	e0bffc15 	stw	r2,-16(fp)
   14260:	00000106 	br	14268 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   14264:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14268:	e0bffc17 	ldw	r2,-16(fp)
   1426c:	10800104 	addi	r2,r2,4
   14270:	10800037 	ldwio	r2,0(r2)
   14274:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14278:	e0bffd17 	ldw	r2,-12(fp)
   1427c:	1080c00c 	andi	r2,r2,768
   14280:	10006a26 	beq	r2,zero,1442c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14284:	e0bffd17 	ldw	r2,-12(fp)
   14288:	1080400c 	andi	r2,r2,256
   1428c:	10003326 	beq	r2,zero,1435c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14290:	00800074 	movhi	r2,1
   14294:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14298:	e0bffb17 	ldw	r2,-20(fp)
   1429c:	10800a17 	ldw	r2,40(r2)
   142a0:	10800044 	addi	r2,r2,1
   142a4:	1081ffcc 	andi	r2,r2,2047
   142a8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   142ac:	e0bffb17 	ldw	r2,-20(fp)
   142b0:	10c00b17 	ldw	r3,44(r2)
   142b4:	e0bffe17 	ldw	r2,-8(fp)
   142b8:	18801426 	beq	r3,r2,1430c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   142bc:	e0bffc17 	ldw	r2,-16(fp)
   142c0:	10800037 	ldwio	r2,0(r2)
   142c4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   142c8:	e0bff917 	ldw	r2,-28(fp)
   142cc:	10a0000c 	andi	r2,r2,32768
   142d0:	10001026 	beq	r2,zero,14314 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   142d4:	e0bffb17 	ldw	r2,-20(fp)
   142d8:	10800a17 	ldw	r2,40(r2)
   142dc:	e0fff917 	ldw	r3,-28(fp)
   142e0:	e13ffb17 	ldw	r4,-20(fp)
   142e4:	2085883a 	add	r2,r4,r2
   142e8:	10800e04 	addi	r2,r2,56
   142ec:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   142f0:	e0bffb17 	ldw	r2,-20(fp)
   142f4:	10800a17 	ldw	r2,40(r2)
   142f8:	10800044 	addi	r2,r2,1
   142fc:	10c1ffcc 	andi	r3,r2,2047
   14300:	e0bffb17 	ldw	r2,-20(fp)
   14304:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14308:	003fe306 	br	14298 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1430c:	0001883a 	nop
   14310:	00000106 	br	14318 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14314:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14318:	e0bff917 	ldw	r2,-28(fp)
   1431c:	10bfffec 	andhi	r2,r2,65535
   14320:	10000e26 	beq	r2,zero,1435c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14324:	e0bffb17 	ldw	r2,-20(fp)
   14328:	10c00817 	ldw	r3,32(r2)
   1432c:	00bfff84 	movi	r2,-2
   14330:	1886703a 	and	r3,r3,r2
   14334:	e0bffb17 	ldw	r2,-20(fp)
   14338:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1433c:	e0bffc17 	ldw	r2,-16(fp)
   14340:	10800104 	addi	r2,r2,4
   14344:	e0fffb17 	ldw	r3,-20(fp)
   14348:	18c00817 	ldw	r3,32(r3)
   1434c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14350:	e0bffc17 	ldw	r2,-16(fp)
   14354:	10800104 	addi	r2,r2,4
   14358:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1435c:	e0bffd17 	ldw	r2,-12(fp)
   14360:	1080800c 	andi	r2,r2,512
   14364:	103fbf26 	beq	r2,zero,14264 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14368:	e0bffd17 	ldw	r2,-12(fp)
   1436c:	1004d43a 	srli	r2,r2,16
   14370:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14374:	00001406 	br	143c8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14378:	e0bffc17 	ldw	r2,-16(fp)
   1437c:	e0fffb17 	ldw	r3,-20(fp)
   14380:	18c00d17 	ldw	r3,52(r3)
   14384:	e13ffb17 	ldw	r4,-20(fp)
   14388:	20c7883a 	add	r3,r4,r3
   1438c:	18c20e04 	addi	r3,r3,2104
   14390:	18c00003 	ldbu	r3,0(r3)
   14394:	18c03fcc 	andi	r3,r3,255
   14398:	18c0201c 	xori	r3,r3,128
   1439c:	18ffe004 	addi	r3,r3,-128
   143a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   143a4:	e0bffb17 	ldw	r2,-20(fp)
   143a8:	10800d17 	ldw	r2,52(r2)
   143ac:	10800044 	addi	r2,r2,1
   143b0:	10c1ffcc 	andi	r3,r2,2047
   143b4:	e0bffb17 	ldw	r2,-20(fp)
   143b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   143bc:	e0bffa17 	ldw	r2,-24(fp)
   143c0:	10bfffc4 	addi	r2,r2,-1
   143c4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   143c8:	e0bffa17 	ldw	r2,-24(fp)
   143cc:	10000526 	beq	r2,zero,143e4 <altera_avalon_jtag_uart_irq+0x1a8>
   143d0:	e0bffb17 	ldw	r2,-20(fp)
   143d4:	10c00d17 	ldw	r3,52(r2)
   143d8:	e0bffb17 	ldw	r2,-20(fp)
   143dc:	10800c17 	ldw	r2,48(r2)
   143e0:	18bfe51e 	bne	r3,r2,14378 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   143e4:	e0bffa17 	ldw	r2,-24(fp)
   143e8:	103f9e26 	beq	r2,zero,14264 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   143ec:	e0bffb17 	ldw	r2,-20(fp)
   143f0:	10c00817 	ldw	r3,32(r2)
   143f4:	00bfff44 	movi	r2,-3
   143f8:	1886703a 	and	r3,r3,r2
   143fc:	e0bffb17 	ldw	r2,-20(fp)
   14400:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14404:	e0bffb17 	ldw	r2,-20(fp)
   14408:	10800017 	ldw	r2,0(r2)
   1440c:	10800104 	addi	r2,r2,4
   14410:	e0fffb17 	ldw	r3,-20(fp)
   14414:	18c00817 	ldw	r3,32(r3)
   14418:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1441c:	e0bffc17 	ldw	r2,-16(fp)
   14420:	10800104 	addi	r2,r2,4
   14424:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14428:	003f8e06 	br	14264 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1442c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14430:	e037883a 	mov	sp,fp
   14434:	df000017 	ldw	fp,0(sp)
   14438:	dec00104 	addi	sp,sp,4
   1443c:	f800283a 	ret

00014440 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14440:	defffc04 	addi	sp,sp,-16
   14444:	df000315 	stw	fp,12(sp)
   14448:	df000304 	addi	fp,sp,12
   1444c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14450:	e0bfff17 	ldw	r2,-4(fp)
   14454:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14458:	e0bffd17 	ldw	r2,-12(fp)
   1445c:	10800017 	ldw	r2,0(r2)
   14460:	10800104 	addi	r2,r2,4
   14464:	10800037 	ldwio	r2,0(r2)
   14468:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1446c:	e0bffe17 	ldw	r2,-8(fp)
   14470:	1081000c 	andi	r2,r2,1024
   14474:	10000a26 	beq	r2,zero,144a0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14478:	e0bffd17 	ldw	r2,-12(fp)
   1447c:	10800017 	ldw	r2,0(r2)
   14480:	10800104 	addi	r2,r2,4
   14484:	e0fffd17 	ldw	r3,-12(fp)
   14488:	18c00817 	ldw	r3,32(r3)
   1448c:	18c10014 	ori	r3,r3,1024
   14490:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   14494:	e0bffd17 	ldw	r2,-12(fp)
   14498:	10000915 	stw	zero,36(r2)
   1449c:	00000a06 	br	144c8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   144a0:	e0bffd17 	ldw	r2,-12(fp)
   144a4:	10800917 	ldw	r2,36(r2)
   144a8:	00e00034 	movhi	r3,32768
   144ac:	18ffff04 	addi	r3,r3,-4
   144b0:	18800536 	bltu	r3,r2,144c8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   144b4:	e0bffd17 	ldw	r2,-12(fp)
   144b8:	10800917 	ldw	r2,36(r2)
   144bc:	10c00044 	addi	r3,r2,1
   144c0:	e0bffd17 	ldw	r2,-12(fp)
   144c4:	10c00915 	stw	r3,36(r2)
   144c8:	008000b4 	movhi	r2,2
   144cc:	10a7a104 	addi	r2,r2,-24956
   144d0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   144d4:	e037883a 	mov	sp,fp
   144d8:	df000017 	ldw	fp,0(sp)
   144dc:	dec00104 	addi	sp,sp,4
   144e0:	f800283a 	ret

000144e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   144e4:	defffd04 	addi	sp,sp,-12
   144e8:	df000215 	stw	fp,8(sp)
   144ec:	df000204 	addi	fp,sp,8
   144f0:	e13ffe15 	stw	r4,-8(fp)
   144f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   144f8:	00000506 	br	14510 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   144fc:	e0bfff17 	ldw	r2,-4(fp)
   14500:	1090000c 	andi	r2,r2,16384
   14504:	10000226 	beq	r2,zero,14510 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14508:	00bffd44 	movi	r2,-11
   1450c:	00000b06 	br	1453c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14510:	e0bffe17 	ldw	r2,-8(fp)
   14514:	10c00d17 	ldw	r3,52(r2)
   14518:	e0bffe17 	ldw	r2,-8(fp)
   1451c:	10800c17 	ldw	r2,48(r2)
   14520:	18800526 	beq	r3,r2,14538 <altera_avalon_jtag_uart_close+0x54>
   14524:	e0bffe17 	ldw	r2,-8(fp)
   14528:	10c00917 	ldw	r3,36(r2)
   1452c:	e0bffe17 	ldw	r2,-8(fp)
   14530:	10800117 	ldw	r2,4(r2)
   14534:	18bff136 	bltu	r3,r2,144fc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14538:	0005883a 	mov	r2,zero
}
   1453c:	e037883a 	mov	sp,fp
   14540:	df000017 	ldw	fp,0(sp)
   14544:	dec00104 	addi	sp,sp,4
   14548:	f800283a 	ret

0001454c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1454c:	defffa04 	addi	sp,sp,-24
   14550:	df000515 	stw	fp,20(sp)
   14554:	df000504 	addi	fp,sp,20
   14558:	e13ffd15 	stw	r4,-12(fp)
   1455c:	e17ffe15 	stw	r5,-8(fp)
   14560:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14564:	00bff9c4 	movi	r2,-25
   14568:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1456c:	e0bffe17 	ldw	r2,-8(fp)
   14570:	10da8060 	cmpeqi	r3,r2,27137
   14574:	1800031e 	bne	r3,zero,14584 <altera_avalon_jtag_uart_ioctl+0x38>
   14578:	109a80a0 	cmpeqi	r2,r2,27138
   1457c:	1000181e 	bne	r2,zero,145e0 <altera_avalon_jtag_uart_ioctl+0x94>
   14580:	00002606 	br	1461c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14584:	e0bffd17 	ldw	r2,-12(fp)
   14588:	10c00117 	ldw	r3,4(r2)
   1458c:	00a00034 	movhi	r2,32768
   14590:	10bfffc4 	addi	r2,r2,-1
   14594:	18802226 	beq	r3,r2,14620 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   14598:	e0bfff17 	ldw	r2,-4(fp)
   1459c:	10800017 	ldw	r2,0(r2)
   145a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   145a4:	e0bffc17 	ldw	r2,-16(fp)
   145a8:	10800090 	cmplti	r2,r2,2
   145ac:	1000061e 	bne	r2,zero,145c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   145b0:	e0fffc17 	ldw	r3,-16(fp)
   145b4:	00a00034 	movhi	r2,32768
   145b8:	10bfffc4 	addi	r2,r2,-1
   145bc:	18800226 	beq	r3,r2,145c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   145c0:	e0bffc17 	ldw	r2,-16(fp)
   145c4:	00000206 	br	145d0 <altera_avalon_jtag_uart_ioctl+0x84>
   145c8:	00a00034 	movhi	r2,32768
   145cc:	10bfff84 	addi	r2,r2,-2
   145d0:	e0fffd17 	ldw	r3,-12(fp)
   145d4:	18800115 	stw	r2,4(r3)
      rc = 0;
   145d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   145dc:	00001006 	br	14620 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	10c00117 	ldw	r3,4(r2)
   145e8:	00a00034 	movhi	r2,32768
   145ec:	10bfffc4 	addi	r2,r2,-1
   145f0:	18800d26 	beq	r3,r2,14628 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   145f4:	e0bffd17 	ldw	r2,-12(fp)
   145f8:	10c00917 	ldw	r3,36(r2)
   145fc:	e0bffd17 	ldw	r2,-12(fp)
   14600:	10800117 	ldw	r2,4(r2)
   14604:	1885803a 	cmpltu	r2,r3,r2
   14608:	10c03fcc 	andi	r3,r2,255
   1460c:	e0bfff17 	ldw	r2,-4(fp)
   14610:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14614:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14618:	00000306 	br	14628 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1461c:	00000306 	br	1462c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14620:	0001883a 	nop
   14624:	00000106 	br	1462c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14628:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1462c:	e0bffb17 	ldw	r2,-20(fp)
}
   14630:	e037883a 	mov	sp,fp
   14634:	df000017 	ldw	fp,0(sp)
   14638:	dec00104 	addi	sp,sp,4
   1463c:	f800283a 	ret

00014640 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14640:	defff304 	addi	sp,sp,-52
   14644:	dfc00c15 	stw	ra,48(sp)
   14648:	df000b15 	stw	fp,44(sp)
   1464c:	df000b04 	addi	fp,sp,44
   14650:	e13ffc15 	stw	r4,-16(fp)
   14654:	e17ffd15 	stw	r5,-12(fp)
   14658:	e1bffe15 	stw	r6,-8(fp)
   1465c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14660:	e0bffd17 	ldw	r2,-12(fp)
   14664:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14668:	00004706 	br	14788 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1466c:	e0bffc17 	ldw	r2,-16(fp)
   14670:	10800a17 	ldw	r2,40(r2)
   14674:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14678:	e0bffc17 	ldw	r2,-16(fp)
   1467c:	10800b17 	ldw	r2,44(r2)
   14680:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14684:	e0fff717 	ldw	r3,-36(fp)
   14688:	e0bff817 	ldw	r2,-32(fp)
   1468c:	18800536 	bltu	r3,r2,146a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14690:	e0fff717 	ldw	r3,-36(fp)
   14694:	e0bff817 	ldw	r2,-32(fp)
   14698:	1885c83a 	sub	r2,r3,r2
   1469c:	e0bff615 	stw	r2,-40(fp)
   146a0:	00000406 	br	146b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   146a4:	00c20004 	movi	r3,2048
   146a8:	e0bff817 	ldw	r2,-32(fp)
   146ac:	1885c83a 	sub	r2,r3,r2
   146b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   146b4:	e0bff617 	ldw	r2,-40(fp)
   146b8:	10001e26 	beq	r2,zero,14734 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   146bc:	e0fffe17 	ldw	r3,-8(fp)
   146c0:	e0bff617 	ldw	r2,-40(fp)
   146c4:	1880022e 	bgeu	r3,r2,146d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   146c8:	e0bffe17 	ldw	r2,-8(fp)
   146cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   146d0:	e0bff817 	ldw	r2,-32(fp)
   146d4:	10800e04 	addi	r2,r2,56
   146d8:	e0fffc17 	ldw	r3,-16(fp)
   146dc:	1885883a 	add	r2,r3,r2
   146e0:	e13ff517 	ldw	r4,-44(fp)
   146e4:	100b883a 	mov	r5,r2
   146e8:	e1bff617 	ldw	r6,-40(fp)
   146ec:	00117a00 	call	117a0 <memcpy>
      ptr   += n;
   146f0:	e0fff517 	ldw	r3,-44(fp)
   146f4:	e0bff617 	ldw	r2,-40(fp)
   146f8:	1885883a 	add	r2,r3,r2
   146fc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14700:	e0fffe17 	ldw	r3,-8(fp)
   14704:	e0bff617 	ldw	r2,-40(fp)
   14708:	1885c83a 	sub	r2,r3,r2
   1470c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14710:	e0fff817 	ldw	r3,-32(fp)
   14714:	e0bff617 	ldw	r2,-40(fp)
   14718:	1885883a 	add	r2,r3,r2
   1471c:	10c1ffcc 	andi	r3,r2,2047
   14720:	e0bffc17 	ldw	r2,-16(fp)
   14724:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14728:	e0bffe17 	ldw	r2,-8(fp)
   1472c:	00bfcf16 	blt	zero,r2,1466c <altera_avalon_jtag_uart_read+0x2c>
   14730:	00000106 	br	14738 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14734:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14738:	e0fff517 	ldw	r3,-44(fp)
   1473c:	e0bffd17 	ldw	r2,-12(fp)
   14740:	1880141e 	bne	r3,r2,14794 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14744:	e0bfff17 	ldw	r2,-4(fp)
   14748:	1090000c 	andi	r2,r2,16384
   1474c:	1000131e 	bne	r2,zero,1479c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14750:	0001883a 	nop
   14754:	e0bffc17 	ldw	r2,-16(fp)
   14758:	10c00a17 	ldw	r3,40(r2)
   1475c:	e0bff717 	ldw	r2,-36(fp)
   14760:	1880051e 	bne	r3,r2,14778 <altera_avalon_jtag_uart_read+0x138>
   14764:	e0bffc17 	ldw	r2,-16(fp)
   14768:	10c00917 	ldw	r3,36(r2)
   1476c:	e0bffc17 	ldw	r2,-16(fp)
   14770:	10800117 	ldw	r2,4(r2)
   14774:	18bff736 	bltu	r3,r2,14754 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14778:	e0bffc17 	ldw	r2,-16(fp)
   1477c:	10c00a17 	ldw	r3,40(r2)
   14780:	e0bff717 	ldw	r2,-36(fp)
   14784:	18800726 	beq	r3,r2,147a4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14788:	e0bffe17 	ldw	r2,-8(fp)
   1478c:	00bfb716 	blt	zero,r2,1466c <altera_avalon_jtag_uart_read+0x2c>
   14790:	00000506 	br	147a8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14794:	0001883a 	nop
   14798:	00000306 	br	147a8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1479c:	0001883a 	nop
   147a0:	00000106 	br	147a8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   147a4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   147a8:	e0fff517 	ldw	r3,-44(fp)
   147ac:	e0bffd17 	ldw	r2,-12(fp)
   147b0:	18801726 	beq	r3,r2,14810 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147b4:	0005303a 	rdctl	r2,status
   147b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147bc:	e0fffa17 	ldw	r3,-24(fp)
   147c0:	00bfff84 	movi	r2,-2
   147c4:	1884703a 	and	r2,r3,r2
   147c8:	1001703a 	wrctl	status,r2
  
  return context;
   147cc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   147d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   147d4:	e0bffc17 	ldw	r2,-16(fp)
   147d8:	10800817 	ldw	r2,32(r2)
   147dc:	10c00054 	ori	r3,r2,1
   147e0:	e0bffc17 	ldw	r2,-16(fp)
   147e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   147e8:	e0bffc17 	ldw	r2,-16(fp)
   147ec:	10800017 	ldw	r2,0(r2)
   147f0:	10800104 	addi	r2,r2,4
   147f4:	e0fffc17 	ldw	r3,-16(fp)
   147f8:	18c00817 	ldw	r3,32(r3)
   147fc:	10c00035 	stwio	r3,0(r2)
   14800:	e0bff917 	ldw	r2,-28(fp)
   14804:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14808:	e0bffb17 	ldw	r2,-20(fp)
   1480c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14810:	e0fff517 	ldw	r3,-44(fp)
   14814:	e0bffd17 	ldw	r2,-12(fp)
   14818:	18800426 	beq	r3,r2,1482c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1481c:	e0fff517 	ldw	r3,-44(fp)
   14820:	e0bffd17 	ldw	r2,-12(fp)
   14824:	1885c83a 	sub	r2,r3,r2
   14828:	00000606 	br	14844 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1482c:	e0bfff17 	ldw	r2,-4(fp)
   14830:	1090000c 	andi	r2,r2,16384
   14834:	10000226 	beq	r2,zero,14840 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   14838:	00bffd44 	movi	r2,-11
   1483c:	00000106 	br	14844 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   14840:	00bffec4 	movi	r2,-5
}
   14844:	e037883a 	mov	sp,fp
   14848:	dfc00117 	ldw	ra,4(sp)
   1484c:	df000017 	ldw	fp,0(sp)
   14850:	dec00204 	addi	sp,sp,8
   14854:	f800283a 	ret

00014858 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14858:	defff304 	addi	sp,sp,-52
   1485c:	dfc00c15 	stw	ra,48(sp)
   14860:	df000b15 	stw	fp,44(sp)
   14864:	df000b04 	addi	fp,sp,44
   14868:	e13ffc15 	stw	r4,-16(fp)
   1486c:	e17ffd15 	stw	r5,-12(fp)
   14870:	e1bffe15 	stw	r6,-8(fp)
   14874:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14878:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1487c:	e0bffd17 	ldw	r2,-12(fp)
   14880:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14884:	00003706 	br	14964 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14888:	e0bffc17 	ldw	r2,-16(fp)
   1488c:	10800c17 	ldw	r2,48(r2)
   14890:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14894:	e0bffc17 	ldw	r2,-16(fp)
   14898:	10800d17 	ldw	r2,52(r2)
   1489c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   148a0:	e0fff817 	ldw	r3,-32(fp)
   148a4:	e0bff517 	ldw	r2,-44(fp)
   148a8:	1880062e 	bgeu	r3,r2,148c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   148ac:	e0fff517 	ldw	r3,-44(fp)
   148b0:	e0bff817 	ldw	r2,-32(fp)
   148b4:	1885c83a 	sub	r2,r3,r2
   148b8:	10bfffc4 	addi	r2,r2,-1
   148bc:	e0bff615 	stw	r2,-40(fp)
   148c0:	00000b06 	br	148f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   148c4:	e0bff517 	ldw	r2,-44(fp)
   148c8:	10000526 	beq	r2,zero,148e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   148cc:	00c20004 	movi	r3,2048
   148d0:	e0bff817 	ldw	r2,-32(fp)
   148d4:	1885c83a 	sub	r2,r3,r2
   148d8:	e0bff615 	stw	r2,-40(fp)
   148dc:	00000406 	br	148f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   148e0:	00c1ffc4 	movi	r3,2047
   148e4:	e0bff817 	ldw	r2,-32(fp)
   148e8:	1885c83a 	sub	r2,r3,r2
   148ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   148f0:	e0bff617 	ldw	r2,-40(fp)
   148f4:	10001e26 	beq	r2,zero,14970 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   148f8:	e0fffe17 	ldw	r3,-8(fp)
   148fc:	e0bff617 	ldw	r2,-40(fp)
   14900:	1880022e 	bgeu	r3,r2,1490c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14904:	e0bffe17 	ldw	r2,-8(fp)
   14908:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1490c:	e0bff817 	ldw	r2,-32(fp)
   14910:	10820e04 	addi	r2,r2,2104
   14914:	e0fffc17 	ldw	r3,-16(fp)
   14918:	1885883a 	add	r2,r3,r2
   1491c:	1009883a 	mov	r4,r2
   14920:	e17ffd17 	ldw	r5,-12(fp)
   14924:	e1bff617 	ldw	r6,-40(fp)
   14928:	00117a00 	call	117a0 <memcpy>
      ptr   += n;
   1492c:	e0fffd17 	ldw	r3,-12(fp)
   14930:	e0bff617 	ldw	r2,-40(fp)
   14934:	1885883a 	add	r2,r3,r2
   14938:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1493c:	e0fffe17 	ldw	r3,-8(fp)
   14940:	e0bff617 	ldw	r2,-40(fp)
   14944:	1885c83a 	sub	r2,r3,r2
   14948:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1494c:	e0fff817 	ldw	r3,-32(fp)
   14950:	e0bff617 	ldw	r2,-40(fp)
   14954:	1885883a 	add	r2,r3,r2
   14958:	10c1ffcc 	andi	r3,r2,2047
   1495c:	e0bffc17 	ldw	r2,-16(fp)
   14960:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14964:	e0bffe17 	ldw	r2,-8(fp)
   14968:	00bfc716 	blt	zero,r2,14888 <altera_avalon_jtag_uart_write+0x30>
   1496c:	00000106 	br	14974 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14970:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14974:	0005303a 	rdctl	r2,status
   14978:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1497c:	e0fffa17 	ldw	r3,-24(fp)
   14980:	00bfff84 	movi	r2,-2
   14984:	1884703a 	and	r2,r3,r2
   14988:	1001703a 	wrctl	status,r2
  
  return context;
   1498c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14990:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14994:	e0bffc17 	ldw	r2,-16(fp)
   14998:	10800817 	ldw	r2,32(r2)
   1499c:	10c00094 	ori	r3,r2,2
   149a0:	e0bffc17 	ldw	r2,-16(fp)
   149a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   149a8:	e0bffc17 	ldw	r2,-16(fp)
   149ac:	10800017 	ldw	r2,0(r2)
   149b0:	10800104 	addi	r2,r2,4
   149b4:	e0fffc17 	ldw	r3,-16(fp)
   149b8:	18c00817 	ldw	r3,32(r3)
   149bc:	10c00035 	stwio	r3,0(r2)
   149c0:	e0bff917 	ldw	r2,-28(fp)
   149c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149c8:	e0bffb17 	ldw	r2,-20(fp)
   149cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   149d0:	e0bffe17 	ldw	r2,-8(fp)
   149d4:	0080110e 	bge	zero,r2,14a1c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   149d8:	e0bfff17 	ldw	r2,-4(fp)
   149dc:	1090000c 	andi	r2,r2,16384
   149e0:	1000111e 	bne	r2,zero,14a28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   149e4:	0001883a 	nop
   149e8:	e0bffc17 	ldw	r2,-16(fp)
   149ec:	10c00d17 	ldw	r3,52(r2)
   149f0:	e0bff517 	ldw	r2,-44(fp)
   149f4:	1880051e 	bne	r3,r2,14a0c <altera_avalon_jtag_uart_write+0x1b4>
   149f8:	e0bffc17 	ldw	r2,-16(fp)
   149fc:	10c00917 	ldw	r3,36(r2)
   14a00:	e0bffc17 	ldw	r2,-16(fp)
   14a04:	10800117 	ldw	r2,4(r2)
   14a08:	18bff736 	bltu	r3,r2,149e8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14a0c:	e0bffc17 	ldw	r2,-16(fp)
   14a10:	10c00d17 	ldw	r3,52(r2)
   14a14:	e0bff517 	ldw	r2,-44(fp)
   14a18:	18800526 	beq	r3,r2,14a30 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14a1c:	e0bffe17 	ldw	r2,-8(fp)
   14a20:	00bfd016 	blt	zero,r2,14964 <altera_avalon_jtag_uart_write+0x10c>
   14a24:	00000306 	br	14a34 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14a28:	0001883a 	nop
   14a2c:	00000106 	br	14a34 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   14a30:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14a34:	e0fffd17 	ldw	r3,-12(fp)
   14a38:	e0bff717 	ldw	r2,-36(fp)
   14a3c:	18800426 	beq	r3,r2,14a50 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14a40:	e0fffd17 	ldw	r3,-12(fp)
   14a44:	e0bff717 	ldw	r2,-36(fp)
   14a48:	1885c83a 	sub	r2,r3,r2
   14a4c:	00000606 	br	14a68 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14a50:	e0bfff17 	ldw	r2,-4(fp)
   14a54:	1090000c 	andi	r2,r2,16384
   14a58:	10000226 	beq	r2,zero,14a64 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14a5c:	00bffd44 	movi	r2,-11
   14a60:	00000106 	br	14a68 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14a64:	00bffec4 	movi	r2,-5
}
   14a68:	e037883a 	mov	sp,fp
   14a6c:	dfc00117 	ldw	ra,4(sp)
   14a70:	df000017 	ldw	fp,0(sp)
   14a74:	dec00204 	addi	sp,sp,8
   14a78:	f800283a 	ret

00014a7c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14a7c:	defffa04 	addi	sp,sp,-24
   14a80:	dfc00515 	stw	ra,20(sp)
   14a84:	df000415 	stw	fp,16(sp)
   14a88:	df000404 	addi	fp,sp,16
   14a8c:	e13ffd15 	stw	r4,-12(fp)
   14a90:	e17ffe15 	stw	r5,-8(fp)
   14a94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   14a98:	e0bffd17 	ldw	r2,-12(fp)
   14a9c:	10800017 	ldw	r2,0(r2)
   14aa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   14aa4:	e0bffc17 	ldw	r2,-16(fp)
   14aa8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14aac:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   14ab0:	10800217 	ldw	r2,8(r2)
   14ab4:	1809883a 	mov	r4,r3
   14ab8:	e17ffe17 	ldw	r5,-8(fp)
   14abc:	e1bfff17 	ldw	r6,-4(fp)
   14ac0:	100f883a 	mov	r7,r2
   14ac4:	0014f840 	call	14f84 <altera_avalon_uart_read>
      fd->fd_flags);
}
   14ac8:	e037883a 	mov	sp,fp
   14acc:	dfc00117 	ldw	ra,4(sp)
   14ad0:	df000017 	ldw	fp,0(sp)
   14ad4:	dec00204 	addi	sp,sp,8
   14ad8:	f800283a 	ret

00014adc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14adc:	defffa04 	addi	sp,sp,-24
   14ae0:	dfc00515 	stw	ra,20(sp)
   14ae4:	df000415 	stw	fp,16(sp)
   14ae8:	df000404 	addi	fp,sp,16
   14aec:	e13ffd15 	stw	r4,-12(fp)
   14af0:	e17ffe15 	stw	r5,-8(fp)
   14af4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   14af8:	e0bffd17 	ldw	r2,-12(fp)
   14afc:	10800017 	ldw	r2,0(r2)
   14b00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   14b04:	e0bffc17 	ldw	r2,-16(fp)
   14b08:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14b0c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   14b10:	10800217 	ldw	r2,8(r2)
   14b14:	1809883a 	mov	r4,r3
   14b18:	e17ffe17 	ldw	r5,-8(fp)
   14b1c:	e1bfff17 	ldw	r6,-4(fp)
   14b20:	100f883a 	mov	r7,r2
   14b24:	00151d80 	call	151d8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   14b28:	e037883a 	mov	sp,fp
   14b2c:	dfc00117 	ldw	ra,4(sp)
   14b30:	df000017 	ldw	fp,0(sp)
   14b34:	dec00204 	addi	sp,sp,8
   14b38:	f800283a 	ret

00014b3c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   14b3c:	defffc04 	addi	sp,sp,-16
   14b40:	dfc00315 	stw	ra,12(sp)
   14b44:	df000215 	stw	fp,8(sp)
   14b48:	df000204 	addi	fp,sp,8
   14b4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   14b50:	e0bfff17 	ldw	r2,-4(fp)
   14b54:	10800017 	ldw	r2,0(r2)
   14b58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   14b5c:	e0bffe17 	ldw	r2,-8(fp)
   14b60:	10c00a04 	addi	r3,r2,40
   14b64:	e0bfff17 	ldw	r2,-4(fp)
   14b68:	10800217 	ldw	r2,8(r2)
   14b6c:	1809883a 	mov	r4,r3
   14b70:	100b883a 	mov	r5,r2
   14b74:	0014ee00 	call	14ee0 <altera_avalon_uart_close>
}
   14b78:	e037883a 	mov	sp,fp
   14b7c:	dfc00117 	ldw	ra,4(sp)
   14b80:	df000017 	ldw	fp,0(sp)
   14b84:	dec00204 	addi	sp,sp,8
   14b88:	f800283a 	ret

00014b8c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   14b8c:	defff804 	addi	sp,sp,-32
   14b90:	dfc00715 	stw	ra,28(sp)
   14b94:	df000615 	stw	fp,24(sp)
   14b98:	df000604 	addi	fp,sp,24
   14b9c:	e13ffd15 	stw	r4,-12(fp)
   14ba0:	e17ffe15 	stw	r5,-8(fp)
   14ba4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   14ba8:	e0bffd17 	ldw	r2,-12(fp)
   14bac:	10800017 	ldw	r2,0(r2)
   14bb0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   14bb4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   14bb8:	1000041e 	bne	r2,zero,14bcc <altera_avalon_uart_init+0x40>
   14bbc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   14bc0:	1000021e 	bne	r2,zero,14bcc <altera_avalon_uart_init+0x40>
   14bc4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   14bc8:	10000226 	beq	r2,zero,14bd4 <altera_avalon_uart_init+0x48>
   14bcc:	00800044 	movi	r2,1
   14bd0:	00000106 	br	14bd8 <altera_avalon_uart_init+0x4c>
   14bd4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   14bd8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   14bdc:	e0bffc17 	ldw	r2,-16(fp)
   14be0:	10000f1e 	bne	r2,zero,14c20 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   14be4:	e0bffd17 	ldw	r2,-12(fp)
   14be8:	00c32004 	movi	r3,3200
   14bec:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   14bf0:	e0bffb17 	ldw	r2,-20(fp)
   14bf4:	10800304 	addi	r2,r2,12
   14bf8:	e0fffd17 	ldw	r3,-12(fp)
   14bfc:	18c00117 	ldw	r3,4(r3)
   14c00:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   14c04:	d8000015 	stw	zero,0(sp)
   14c08:	e13ffe17 	ldw	r4,-8(fp)
   14c0c:	e17fff17 	ldw	r5,-4(fp)
   14c10:	01800074 	movhi	r6,1
   14c14:	31930d04 	addi	r6,r6,19508
   14c18:	e1fffd17 	ldw	r7,-12(fp)
   14c1c:	00156a00 	call	156a0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   14c20:	e037883a 	mov	sp,fp
   14c24:	dfc00117 	ldw	ra,4(sp)
   14c28:	df000017 	ldw	fp,0(sp)
   14c2c:	dec00204 	addi	sp,sp,8
   14c30:	f800283a 	ret

00014c34 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   14c34:	defffa04 	addi	sp,sp,-24
   14c38:	dfc00515 	stw	ra,20(sp)
   14c3c:	df000415 	stw	fp,16(sp)
   14c40:	df000404 	addi	fp,sp,16
   14c44:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   14c48:	e0bfff17 	ldw	r2,-4(fp)
   14c4c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   14c50:	e0bffc17 	ldw	r2,-16(fp)
   14c54:	10800017 	ldw	r2,0(r2)
   14c58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   14c5c:	e0bffd17 	ldw	r2,-12(fp)
   14c60:	10800204 	addi	r2,r2,8
   14c64:	10800037 	ldwio	r2,0(r2)
   14c68:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   14c6c:	e0bffd17 	ldw	r2,-12(fp)
   14c70:	10800204 	addi	r2,r2,8
   14c74:	0007883a 	mov	r3,zero
   14c78:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   14c7c:	e0bffd17 	ldw	r2,-12(fp)
   14c80:	10800204 	addi	r2,r2,8
   14c84:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   14c88:	e0bffe17 	ldw	r2,-8(fp)
   14c8c:	1080200c 	andi	r2,r2,128
   14c90:	10000326 	beq	r2,zero,14ca0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   14c94:	e13ffc17 	ldw	r4,-16(fp)
   14c98:	e17ffe17 	ldw	r5,-8(fp)
   14c9c:	0014ccc0 	call	14ccc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   14ca0:	e0bffe17 	ldw	r2,-8(fp)
   14ca4:	1081100c 	andi	r2,r2,1088
   14ca8:	10000326 	beq	r2,zero,14cb8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   14cac:	e13ffc17 	ldw	r4,-16(fp)
   14cb0:	e17ffe17 	ldw	r5,-8(fp)
   14cb4:	0014da40 	call	14da4 <altera_avalon_uart_txirq>
  }
  

}
   14cb8:	e037883a 	mov	sp,fp
   14cbc:	dfc00117 	ldw	ra,4(sp)
   14cc0:	df000017 	ldw	fp,0(sp)
   14cc4:	dec00204 	addi	sp,sp,8
   14cc8:	f800283a 	ret

00014ccc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   14ccc:	defffc04 	addi	sp,sp,-16
   14cd0:	df000315 	stw	fp,12(sp)
   14cd4:	df000304 	addi	fp,sp,12
   14cd8:	e13ffe15 	stw	r4,-8(fp)
   14cdc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   14ce0:	e0bfff17 	ldw	r2,-4(fp)
   14ce4:	108000cc 	andi	r2,r2,3
   14ce8:	1000291e 	bne	r2,zero,14d90 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   14cec:	e0bffe17 	ldw	r2,-8(fp)
   14cf0:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   14cf4:	e0bffe17 	ldw	r2,-8(fp)
   14cf8:	10800317 	ldw	r2,12(r2)
   14cfc:	10800044 	addi	r2,r2,1
   14d00:	10800fcc 	andi	r2,r2,63
   14d04:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	10800317 	ldw	r2,12(r2)
   14d10:	e0fffe17 	ldw	r3,-8(fp)
   14d14:	18c00017 	ldw	r3,0(r3)
   14d18:	18c00037 	ldwio	r3,0(r3)
   14d1c:	e13ffe17 	ldw	r4,-8(fp)
   14d20:	2085883a 	add	r2,r4,r2
   14d24:	10800704 	addi	r2,r2,28
   14d28:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   14d2c:	e0bffe17 	ldw	r2,-8(fp)
   14d30:	e0fffd17 	ldw	r3,-12(fp)
   14d34:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   14d38:	e0bffe17 	ldw	r2,-8(fp)
   14d3c:	10800317 	ldw	r2,12(r2)
   14d40:	10800044 	addi	r2,r2,1
   14d44:	10800fcc 	andi	r2,r2,63
   14d48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   14d4c:	e0bffe17 	ldw	r2,-8(fp)
   14d50:	10c00217 	ldw	r3,8(r2)
   14d54:	e0bffd17 	ldw	r2,-12(fp)
   14d58:	18800e1e 	bne	r3,r2,14d94 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   14d5c:	e0bffe17 	ldw	r2,-8(fp)
   14d60:	10c00117 	ldw	r3,4(r2)
   14d64:	00bfdfc4 	movi	r2,-129
   14d68:	1886703a 	and	r3,r3,r2
   14d6c:	e0bffe17 	ldw	r2,-8(fp)
   14d70:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   14d74:	e0bffe17 	ldw	r2,-8(fp)
   14d78:	10800017 	ldw	r2,0(r2)
   14d7c:	10800304 	addi	r2,r2,12
   14d80:	e0fffe17 	ldw	r3,-8(fp)
   14d84:	18c00117 	ldw	r3,4(r3)
   14d88:	10c00035 	stwio	r3,0(r2)
   14d8c:	00000106 	br	14d94 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   14d90:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   14d94:	e037883a 	mov	sp,fp
   14d98:	df000017 	ldw	fp,0(sp)
   14d9c:	dec00104 	addi	sp,sp,4
   14da0:	f800283a 	ret

00014da4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   14da4:	defffd04 	addi	sp,sp,-12
   14da8:	df000215 	stw	fp,8(sp)
   14dac:	df000204 	addi	fp,sp,8
   14db0:	e13ffe15 	stw	r4,-8(fp)
   14db4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   14db8:	e0bffe17 	ldw	r2,-8(fp)
   14dbc:	10c00417 	ldw	r3,16(r2)
   14dc0:	e0bffe17 	ldw	r2,-8(fp)
   14dc4:	10800517 	ldw	r2,20(r2)
   14dc8:	18803026 	beq	r3,r2,14e8c <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   14dcc:	e0bffe17 	ldw	r2,-8(fp)
   14dd0:	10800617 	ldw	r2,24(r2)
   14dd4:	1080008c 	andi	r2,r2,2
   14dd8:	10000326 	beq	r2,zero,14de8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   14ddc:	e0bfff17 	ldw	r2,-4(fp)
   14de0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   14de4:	10001b26 	beq	r2,zero,14e54 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   14de8:	e0bffe17 	ldw	r2,-8(fp)
   14dec:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   14df0:	e0bffe17 	ldw	r2,-8(fp)
   14df4:	10800017 	ldw	r2,0(r2)
   14df8:	10800104 	addi	r2,r2,4
   14dfc:	e0fffe17 	ldw	r3,-8(fp)
   14e00:	18c00417 	ldw	r3,16(r3)
   14e04:	e13ffe17 	ldw	r4,-8(fp)
   14e08:	20c7883a 	add	r3,r4,r3
   14e0c:	18c01704 	addi	r3,r3,92
   14e10:	18c00003 	ldbu	r3,0(r3)
   14e14:	18c03fcc 	andi	r3,r3,255
   14e18:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   14e1c:	e0bffe17 	ldw	r2,-8(fp)
   14e20:	10800417 	ldw	r2,16(r2)
   14e24:	10800044 	addi	r2,r2,1
   14e28:	e0fffe17 	ldw	r3,-8(fp)
   14e2c:	18800415 	stw	r2,16(r3)
   14e30:	10c00fcc 	andi	r3,r2,63
   14e34:	e0bffe17 	ldw	r2,-8(fp)
   14e38:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   14e3c:	e0bffe17 	ldw	r2,-8(fp)
   14e40:	10800117 	ldw	r2,4(r2)
   14e44:	10c01014 	ori	r3,r2,64
   14e48:	e0bffe17 	ldw	r2,-8(fp)
   14e4c:	10c00115 	stw	r3,4(r2)
   14e50:	00000e06 	br	14e8c <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   14e54:	e0bffe17 	ldw	r2,-8(fp)
   14e58:	10800017 	ldw	r2,0(r2)
   14e5c:	10800204 	addi	r2,r2,8
   14e60:	10800037 	ldwio	r2,0(r2)
   14e64:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   14e68:	e0bfff17 	ldw	r2,-4(fp)
   14e6c:	1082000c 	andi	r2,r2,2048
   14e70:	1000061e 	bne	r2,zero,14e8c <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   14e74:	e0bffe17 	ldw	r2,-8(fp)
   14e78:	10c00117 	ldw	r3,4(r2)
   14e7c:	00bfefc4 	movi	r2,-65
   14e80:	1886703a 	and	r3,r3,r2
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   14e8c:	e0bffe17 	ldw	r2,-8(fp)
   14e90:	10c00417 	ldw	r3,16(r2)
   14e94:	e0bffe17 	ldw	r2,-8(fp)
   14e98:	10800517 	ldw	r2,20(r2)
   14e9c:	1880061e 	bne	r3,r2,14eb8 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   14ea0:	e0bffe17 	ldw	r2,-8(fp)
   14ea4:	10c00117 	ldw	r3,4(r2)
   14ea8:	00beefc4 	movi	r2,-1089
   14eac:	1886703a 	and	r3,r3,r2
   14eb0:	e0bffe17 	ldw	r2,-8(fp)
   14eb4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   14eb8:	e0bffe17 	ldw	r2,-8(fp)
   14ebc:	10800017 	ldw	r2,0(r2)
   14ec0:	10800304 	addi	r2,r2,12
   14ec4:	e0fffe17 	ldw	r3,-8(fp)
   14ec8:	18c00117 	ldw	r3,4(r3)
   14ecc:	10c00035 	stwio	r3,0(r2)
}
   14ed0:	e037883a 	mov	sp,fp
   14ed4:	df000017 	ldw	fp,0(sp)
   14ed8:	dec00104 	addi	sp,sp,4
   14edc:	f800283a 	ret

00014ee0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   14ee0:	defffd04 	addi	sp,sp,-12
   14ee4:	df000215 	stw	fp,8(sp)
   14ee8:	df000204 	addi	fp,sp,8
   14eec:	e13ffe15 	stw	r4,-8(fp)
   14ef0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   14ef4:	00000506 	br	14f0c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14ef8:	e0bfff17 	ldw	r2,-4(fp)
   14efc:	1090000c 	andi	r2,r2,16384
   14f00:	10000226 	beq	r2,zero,14f0c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14f04:	00bffd44 	movi	r2,-11
   14f08:	00000606 	br	14f24 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   14f0c:	e0bffe17 	ldw	r2,-8(fp)
   14f10:	10c00417 	ldw	r3,16(r2)
   14f14:	e0bffe17 	ldw	r2,-8(fp)
   14f18:	10800517 	ldw	r2,20(r2)
   14f1c:	18bff61e 	bne	r3,r2,14ef8 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14f20:	0005883a 	mov	r2,zero
}
   14f24:	e037883a 	mov	sp,fp
   14f28:	df000017 	ldw	fp,0(sp)
   14f2c:	dec00104 	addi	sp,sp,4
   14f30:	f800283a 	ret

00014f34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14f34:	defffe04 	addi	sp,sp,-8
   14f38:	dfc00115 	stw	ra,4(sp)
   14f3c:	df000015 	stw	fp,0(sp)
   14f40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14f44:	008000b4 	movhi	r2,2
   14f48:	10a0d004 	addi	r2,r2,-31936
   14f4c:	10800017 	ldw	r2,0(r2)
   14f50:	10000526 	beq	r2,zero,14f68 <alt_get_errno+0x34>
   14f54:	008000b4 	movhi	r2,2
   14f58:	10a0d004 	addi	r2,r2,-31936
   14f5c:	10800017 	ldw	r2,0(r2)
   14f60:	103ee83a 	callr	r2
   14f64:	00000206 	br	14f70 <alt_get_errno+0x3c>
   14f68:	008000b4 	movhi	r2,2
   14f6c:	10a79c04 	addi	r2,r2,-24976
}
   14f70:	e037883a 	mov	sp,fp
   14f74:	dfc00117 	ldw	ra,4(sp)
   14f78:	df000017 	ldw	fp,0(sp)
   14f7c:	dec00204 	addi	sp,sp,8
   14f80:	f800283a 	ret

00014f84 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   14f84:	defff104 	addi	sp,sp,-60
   14f88:	dfc00e15 	stw	ra,56(sp)
   14f8c:	df000d15 	stw	fp,52(sp)
   14f90:	df000d04 	addi	fp,sp,52
   14f94:	e13ffc15 	stw	r4,-16(fp)
   14f98:	e17ffd15 	stw	r5,-12(fp)
   14f9c:	e1bffe15 	stw	r6,-8(fp)
   14fa0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   14fa4:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
   14fa8:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   14fac:	e0bfff17 	ldw	r2,-4(fp)
   14fb0:	1090000c 	andi	r2,r2,16384
   14fb4:	1005003a 	cmpeq	r2,r2,zero
   14fb8:	10803fcc 	andi	r2,r2,255
   14fbc:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   14fc0:	e0bffc17 	ldw	r2,-16(fp)
   14fc4:	10800217 	ldw	r2,8(r2)
   14fc8:	10800044 	addi	r2,r2,1
   14fcc:	10800fcc 	andi	r2,r2,63
   14fd0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   14fd4:	00001906 	br	1503c <altera_avalon_uart_read+0xb8>
    {
      count++;
   14fd8:	e0bff417 	ldw	r2,-48(fp)
   14fdc:	10800044 	addi	r2,r2,1
   14fe0:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   14fe4:	e0bffc17 	ldw	r2,-16(fp)
   14fe8:	10800217 	ldw	r2,8(r2)
   14fec:	e0fffc17 	ldw	r3,-16(fp)
   14ff0:	1885883a 	add	r2,r3,r2
   14ff4:	10800704 	addi	r2,r2,28
   14ff8:	10800003 	ldbu	r2,0(r2)
   14ffc:	1007883a 	mov	r3,r2
   15000:	e0bffd17 	ldw	r2,-12(fp)
   15004:	10c00005 	stb	r3,0(r2)
   15008:	e0bffd17 	ldw	r2,-12(fp)
   1500c:	10800044 	addi	r2,r2,1
   15010:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   15014:	e0bffc17 	ldw	r2,-16(fp)
   15018:	10800217 	ldw	r2,8(r2)
   1501c:	10c00044 	addi	r3,r2,1
   15020:	e0bffc17 	ldw	r2,-16(fp)
   15024:	10c00215 	stw	r3,8(r2)
   15028:	e0bffc17 	ldw	r2,-16(fp)
   1502c:	10800217 	ldw	r2,8(r2)
   15030:	10c00fcc 	andi	r3,r2,63
   15034:	e0bffc17 	ldw	r2,-16(fp)
   15038:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1503c:	e0fff417 	ldw	r3,-48(fp)
   15040:	e0bffe17 	ldw	r2,-8(fp)
   15044:	1880050e 	bge	r3,r2,1505c <altera_avalon_uart_read+0xd8>
   15048:	e0bffc17 	ldw	r2,-16(fp)
   1504c:	10c00217 	ldw	r3,8(r2)
   15050:	e0bffc17 	ldw	r2,-16(fp)
   15054:	10800317 	ldw	r2,12(r2)
   15058:	18bfdf1e 	bne	r3,r2,14fd8 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   1505c:	e0bff417 	ldw	r2,-48(fp)
   15060:	1000241e 	bne	r2,zero,150f4 <altera_avalon_uart_read+0x170>
   15064:	e0bffc17 	ldw	r2,-16(fp)
   15068:	10c00217 	ldw	r3,8(r2)
   1506c:	e0bffc17 	ldw	r2,-16(fp)
   15070:	10800317 	ldw	r2,12(r2)
   15074:	18801f1e 	bne	r3,r2,150f4 <altera_avalon_uart_read+0x170>
    {
      if (!block)
   15078:	e0bff517 	ldw	r2,-44(fp)
   1507c:	1000061e 	bne	r2,zero,15098 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   15080:	0014f340 	call	14f34 <alt_get_errno>
   15084:	00c002c4 	movi	r3,11
   15088:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   1508c:	00800044 	movi	r2,1
   15090:	e0bff305 	stb	r2,-52(fp)
        break;
   15094:	00001b06 	br	15104 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15098:	0005303a 	rdctl	r2,status
   1509c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150a0:	e0fff817 	ldw	r3,-32(fp)
   150a4:	00bfff84 	movi	r2,-2
   150a8:	1884703a 	and	r2,r3,r2
   150ac:	1001703a 	wrctl	status,r2
  
  return context;
   150b0:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   150b4:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   150b8:	e0bffc17 	ldw	r2,-16(fp)
   150bc:	10800117 	ldw	r2,4(r2)
   150c0:	10c02014 	ori	r3,r2,128
   150c4:	e0bffc17 	ldw	r2,-16(fp)
   150c8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   150cc:	e0bffc17 	ldw	r2,-16(fp)
   150d0:	10800017 	ldw	r2,0(r2)
   150d4:	10800304 	addi	r2,r2,12
   150d8:	e0fffc17 	ldw	r3,-16(fp)
   150dc:	18c00117 	ldw	r3,4(r3)
   150e0:	10c00035 	stwio	r3,0(r2)
   150e4:	e0bff717 	ldw	r2,-36(fp)
   150e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150ec:	e0bff917 	ldw	r2,-28(fp)
   150f0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   150f4:	e0bff417 	ldw	r2,-48(fp)
   150f8:	1000021e 	bne	r2,zero,15104 <altera_avalon_uart_read+0x180>
   150fc:	e0bffe17 	ldw	r2,-8(fp)
   15100:	103fce1e 	bne	r2,zero,1503c <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15104:	0005303a 	rdctl	r2,status
   15108:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1510c:	e0fffa17 	ldw	r3,-24(fp)
   15110:	00bfff84 	movi	r2,-2
   15114:	1884703a 	and	r2,r3,r2
   15118:	1001703a 	wrctl	status,r2
  
  return context;
   1511c:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   15120:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   15124:	e0bffc17 	ldw	r2,-16(fp)
   15128:	10800117 	ldw	r2,4(r2)
   1512c:	10c02014 	ori	r3,r2,128
   15130:	e0bffc17 	ldw	r2,-16(fp)
   15134:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   15138:	e0bffc17 	ldw	r2,-16(fp)
   1513c:	10800017 	ldw	r2,0(r2)
   15140:	10800304 	addi	r2,r2,12
   15144:	e0fffc17 	ldw	r3,-16(fp)
   15148:	18c00117 	ldw	r3,4(r3)
   1514c:	10c00035 	stwio	r3,0(r2)
   15150:	e0bff717 	ldw	r2,-36(fp)
   15154:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15158:	e0bffb17 	ldw	r2,-20(fp)
   1515c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   15160:	e0bff303 	ldbu	r2,-52(fp)
   15164:	10000226 	beq	r2,zero,15170 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
   15168:	00bffd44 	movi	r2,-11
   1516c:	00000106 	br	15174 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
   15170:	e0bff417 	ldw	r2,-48(fp)
  }
}
   15174:	e037883a 	mov	sp,fp
   15178:	dfc00117 	ldw	ra,4(sp)
   1517c:	df000017 	ldw	fp,0(sp)
   15180:	dec00204 	addi	sp,sp,8
   15184:	f800283a 	ret

00015188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15188:	defffe04 	addi	sp,sp,-8
   1518c:	dfc00115 	stw	ra,4(sp)
   15190:	df000015 	stw	fp,0(sp)
   15194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15198:	008000b4 	movhi	r2,2
   1519c:	10a0d004 	addi	r2,r2,-31936
   151a0:	10800017 	ldw	r2,0(r2)
   151a4:	10000526 	beq	r2,zero,151bc <alt_get_errno+0x34>
   151a8:	008000b4 	movhi	r2,2
   151ac:	10a0d004 	addi	r2,r2,-31936
   151b0:	10800017 	ldw	r2,0(r2)
   151b4:	103ee83a 	callr	r2
   151b8:	00000206 	br	151c4 <alt_get_errno+0x3c>
   151bc:	008000b4 	movhi	r2,2
   151c0:	10a79c04 	addi	r2,r2,-24976
}
   151c4:	e037883a 	mov	sp,fp
   151c8:	dfc00117 	ldw	ra,4(sp)
   151cc:	df000017 	ldw	fp,0(sp)
   151d0:	dec00204 	addi	sp,sp,8
   151d4:	f800283a 	ret

000151d8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   151d8:	defff204 	addi	sp,sp,-56
   151dc:	dfc00d15 	stw	ra,52(sp)
   151e0:	df000c15 	stw	fp,48(sp)
   151e4:	df000c04 	addi	fp,sp,48
   151e8:	e13ffc15 	stw	r4,-16(fp)
   151ec:	e17ffd15 	stw	r5,-12(fp)
   151f0:	e1bffe15 	stw	r6,-8(fp)
   151f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   151f8:	e0bffe17 	ldw	r2,-8(fp)
   151fc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   15200:	e0bfff17 	ldw	r2,-4(fp)
   15204:	1090000c 	andi	r2,r2,16384
   15208:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1520c:	00003b06 	br	152fc <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   15210:	e0bffc17 	ldw	r2,-16(fp)
   15214:	10800517 	ldw	r2,20(r2)
   15218:	10800044 	addi	r2,r2,1
   1521c:	10800fcc 	andi	r2,r2,63
   15220:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   15224:	e0bffc17 	ldw	r2,-16(fp)
   15228:	10c00417 	ldw	r3,16(r2)
   1522c:	e0bff617 	ldw	r2,-40(fp)
   15230:	1880211e 	bne	r3,r2,152b8 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
   15234:	e0bff517 	ldw	r2,-44(fp)
   15238:	10000426 	beq	r2,zero,1524c <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   1523c:	00151880 	call	15188 <alt_get_errno>
   15240:	00c002c4 	movi	r3,11
   15244:	10c00015 	stw	r3,0(r2)
        break;
   15248:	00002e06 	br	15304 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1524c:	0005303a 	rdctl	r2,status
   15250:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15254:	e0fff817 	ldw	r3,-32(fp)
   15258:	00bfff84 	movi	r2,-2
   1525c:	1884703a 	and	r2,r3,r2
   15260:	1001703a 	wrctl	status,r2
  
  return context;
   15264:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   15268:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1526c:	e0bffc17 	ldw	r2,-16(fp)
   15270:	10800117 	ldw	r2,4(r2)
   15274:	10c11014 	ori	r3,r2,1088
   15278:	e0bffc17 	ldw	r2,-16(fp)
   1527c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   15280:	e0bffc17 	ldw	r2,-16(fp)
   15284:	10800017 	ldw	r2,0(r2)
   15288:	10800304 	addi	r2,r2,12
   1528c:	e0fffc17 	ldw	r3,-16(fp)
   15290:	18c00117 	ldw	r3,4(r3)
   15294:	10c00035 	stwio	r3,0(r2)
   15298:	e0bff717 	ldw	r2,-36(fp)
   1529c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152a0:	e0bff917 	ldw	r2,-28(fp)
   152a4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   152a8:	e0bffc17 	ldw	r2,-16(fp)
   152ac:	10c00417 	ldw	r3,16(r2)
   152b0:	e0bff617 	ldw	r2,-40(fp)
   152b4:	18bffc26 	beq	r3,r2,152a8 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
   152b8:	e0bff417 	ldw	r2,-48(fp)
   152bc:	10bfffc4 	addi	r2,r2,-1
   152c0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   152c4:	e0bffc17 	ldw	r2,-16(fp)
   152c8:	10800517 	ldw	r2,20(r2)
   152cc:	e0fffd17 	ldw	r3,-12(fp)
   152d0:	18c00003 	ldbu	r3,0(r3)
   152d4:	e13ffc17 	ldw	r4,-16(fp)
   152d8:	2085883a 	add	r2,r4,r2
   152dc:	10801704 	addi	r2,r2,92
   152e0:	10c00005 	stb	r3,0(r2)
   152e4:	e0bffd17 	ldw	r2,-12(fp)
   152e8:	10800044 	addi	r2,r2,1
   152ec:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   152f0:	e0bffc17 	ldw	r2,-16(fp)
   152f4:	e0fff617 	ldw	r3,-40(fp)
   152f8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   152fc:	e0bff417 	ldw	r2,-48(fp)
   15300:	103fc31e 	bne	r2,zero,15210 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15304:	0005303a 	rdctl	r2,status
   15308:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1530c:	e0fffa17 	ldw	r3,-24(fp)
   15310:	00bfff84 	movi	r2,-2
   15314:	1884703a 	and	r2,r3,r2
   15318:	1001703a 	wrctl	status,r2
  
  return context;
   1531c:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   15320:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   15324:	e0bffc17 	ldw	r2,-16(fp)
   15328:	10800117 	ldw	r2,4(r2)
   1532c:	10c11014 	ori	r3,r2,1088
   15330:	e0bffc17 	ldw	r2,-16(fp)
   15334:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   15338:	e0bffc17 	ldw	r2,-16(fp)
   1533c:	10800017 	ldw	r2,0(r2)
   15340:	10800304 	addi	r2,r2,12
   15344:	e0fffc17 	ldw	r3,-16(fp)
   15348:	18c00117 	ldw	r3,4(r3)
   1534c:	10c00035 	stwio	r3,0(r2)
   15350:	e0bff717 	ldw	r2,-36(fp)
   15354:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15358:	e0bffb17 	ldw	r2,-20(fp)
   1535c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   15360:	e0fffe17 	ldw	r3,-8(fp)
   15364:	e0bff417 	ldw	r2,-48(fp)
   15368:	1885c83a 	sub	r2,r3,r2
}
   1536c:	e037883a 	mov	sp,fp
   15370:	dfc00117 	ldw	ra,4(sp)
   15374:	df000017 	ldw	fp,0(sp)
   15378:	dec00204 	addi	sp,sp,8
   1537c:	f800283a 	ret

00015380 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   15380:	defff504 	addi	sp,sp,-44
   15384:	df000a15 	stw	fp,40(sp)
   15388:	df000a04 	addi	fp,sp,40
   1538c:	e13ffc15 	stw	r4,-16(fp)
   15390:	e17ffd15 	stw	r5,-12(fp)
   15394:	e1bffe15 	stw	r6,-8(fp)
   15398:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1539c:	e03ff615 	stw	zero,-40(fp)
   153a0:	008000b4 	movhi	r2,2
   153a4:	10a7a104 	addi	r2,r2,-24956
   153a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   153ac:	10003f26 	beq	r2,zero,154ac <alt_alarm_start+0x12c>
  {
    if (alarm)
   153b0:	e0bffc17 	ldw	r2,-16(fp)
   153b4:	10003b26 	beq	r2,zero,154a4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   153b8:	e0bffc17 	ldw	r2,-16(fp)
   153bc:	e0fffe17 	ldw	r3,-8(fp)
   153c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   153c4:	e0bffc17 	ldw	r2,-16(fp)
   153c8:	e0ffff17 	ldw	r3,-4(fp)
   153cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153d0:	0005303a 	rdctl	r2,status
   153d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153d8:	e0fff817 	ldw	r3,-32(fp)
   153dc:	00bfff84 	movi	r2,-2
   153e0:	1884703a 	and	r2,r3,r2
   153e4:	1001703a 	wrctl	status,r2
  
  return context;
   153e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   153ec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   153f0:	008000b4 	movhi	r2,2
   153f4:	10a7a204 	addi	r2,r2,-24952
   153f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   153fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15400:	e0fffd17 	ldw	r3,-12(fp)
   15404:	e0bff617 	ldw	r2,-40(fp)
   15408:	1885883a 	add	r2,r3,r2
   1540c:	10c00044 	addi	r3,r2,1
   15410:	e0bffc17 	ldw	r2,-16(fp)
   15414:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15418:	e0bffc17 	ldw	r2,-16(fp)
   1541c:	10c00217 	ldw	r3,8(r2)
   15420:	e0bff617 	ldw	r2,-40(fp)
   15424:	1880042e 	bgeu	r3,r2,15438 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   15428:	e0bffc17 	ldw	r2,-16(fp)
   1542c:	00c00044 	movi	r3,1
   15430:	10c00405 	stb	r3,16(r2)
   15434:	00000206 	br	15440 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   15438:	e0bffc17 	ldw	r2,-16(fp)
   1543c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15440:	e0bffc17 	ldw	r2,-16(fp)
   15444:	00c000b4 	movhi	r3,2
   15448:	18e0d304 	addi	r3,r3,-31924
   1544c:	e0fff915 	stw	r3,-28(fp)
   15450:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15454:	e0bffa17 	ldw	r2,-24(fp)
   15458:	e0fff917 	ldw	r3,-28(fp)
   1545c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15460:	e0bff917 	ldw	r2,-28(fp)
   15464:	10c00017 	ldw	r3,0(r2)
   15468:	e0bffa17 	ldw	r2,-24(fp)
   1546c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15470:	e0bff917 	ldw	r2,-28(fp)
   15474:	10800017 	ldw	r2,0(r2)
   15478:	e0fffa17 	ldw	r3,-24(fp)
   1547c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15480:	e0bff917 	ldw	r2,-28(fp)
   15484:	e0fffa17 	ldw	r3,-24(fp)
   15488:	10c00015 	stw	r3,0(r2)
   1548c:	e0bff717 	ldw	r2,-36(fp)
   15490:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15494:	e0bffb17 	ldw	r2,-20(fp)
   15498:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1549c:	0005883a 	mov	r2,zero
   154a0:	00000306 	br	154b0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   154a4:	00bffa84 	movi	r2,-22
   154a8:	00000106 	br	154b0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   154ac:	00bfde84 	movi	r2,-134
  }
}
   154b0:	e037883a 	mov	sp,fp
   154b4:	df000017 	ldw	fp,0(sp)
   154b8:	dec00104 	addi	sp,sp,4
   154bc:	f800283a 	ret

000154c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   154c0:	deffff04 	addi	sp,sp,-4
   154c4:	df000015 	stw	fp,0(sp)
   154c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   154cc:	e037883a 	mov	sp,fp
   154d0:	df000017 	ldw	fp,0(sp)
   154d4:	dec00104 	addi	sp,sp,4
   154d8:	f800283a 	ret

000154dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   154dc:	defffe04 	addi	sp,sp,-8
   154e0:	dfc00115 	stw	ra,4(sp)
   154e4:	df000015 	stw	fp,0(sp)
   154e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   154ec:	008000b4 	movhi	r2,2
   154f0:	10a0d004 	addi	r2,r2,-31936
   154f4:	10800017 	ldw	r2,0(r2)
   154f8:	10000526 	beq	r2,zero,15510 <alt_get_errno+0x34>
   154fc:	008000b4 	movhi	r2,2
   15500:	10a0d004 	addi	r2,r2,-31936
   15504:	10800017 	ldw	r2,0(r2)
   15508:	103ee83a 	callr	r2
   1550c:	00000206 	br	15518 <alt_get_errno+0x3c>
   15510:	008000b4 	movhi	r2,2
   15514:	10a79c04 	addi	r2,r2,-24976
}
   15518:	e037883a 	mov	sp,fp
   1551c:	dfc00117 	ldw	ra,4(sp)
   15520:	df000017 	ldw	fp,0(sp)
   15524:	dec00204 	addi	sp,sp,8
   15528:	f800283a 	ret

0001552c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1552c:	defffa04 	addi	sp,sp,-24
   15530:	dfc00515 	stw	ra,20(sp)
   15534:	df000415 	stw	fp,16(sp)
   15538:	df000404 	addi	fp,sp,16
   1553c:	e13ffe15 	stw	r4,-8(fp)
   15540:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15544:	e0bffe17 	ldw	r2,-8(fp)
   15548:	10000326 	beq	r2,zero,15558 <alt_dev_llist_insert+0x2c>
   1554c:	e0bffe17 	ldw	r2,-8(fp)
   15550:	10800217 	ldw	r2,8(r2)
   15554:	1000051e 	bne	r2,zero,1556c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   15558:	00154dc0 	call	154dc <alt_get_errno>
   1555c:	00c00584 	movi	r3,22
   15560:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   15564:	00bffa84 	movi	r2,-22
   15568:	00001306 	br	155b8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1556c:	e0bffe17 	ldw	r2,-8(fp)
   15570:	e0ffff17 	ldw	r3,-4(fp)
   15574:	e0fffc15 	stw	r3,-16(fp)
   15578:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1557c:	e0bffd17 	ldw	r2,-12(fp)
   15580:	e0fffc17 	ldw	r3,-16(fp)
   15584:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15588:	e0bffc17 	ldw	r2,-16(fp)
   1558c:	10c00017 	ldw	r3,0(r2)
   15590:	e0bffd17 	ldw	r2,-12(fp)
   15594:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15598:	e0bffc17 	ldw	r2,-16(fp)
   1559c:	10800017 	ldw	r2,0(r2)
   155a0:	e0fffd17 	ldw	r3,-12(fp)
   155a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   155a8:	e0bffc17 	ldw	r2,-16(fp)
   155ac:	e0fffd17 	ldw	r3,-12(fp)
   155b0:	10c00015 	stw	r3,0(r2)

  return 0;  
   155b4:	0005883a 	mov	r2,zero
}
   155b8:	e037883a 	mov	sp,fp
   155bc:	dfc00117 	ldw	ra,4(sp)
   155c0:	df000017 	ldw	fp,0(sp)
   155c4:	dec00204 	addi	sp,sp,8
   155c8:	f800283a 	ret

000155cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   155cc:	defffd04 	addi	sp,sp,-12
   155d0:	dfc00215 	stw	ra,8(sp)
   155d4:	df000115 	stw	fp,4(sp)
   155d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   155dc:	00800074 	movhi	r2,1
   155e0:	10995704 	addi	r2,r2,25948
   155e4:	e0bfff15 	stw	r2,-4(fp)
   155e8:	00000606 	br	15604 <_do_ctors+0x38>
        (*ctor) (); 
   155ec:	e0bfff17 	ldw	r2,-4(fp)
   155f0:	10800017 	ldw	r2,0(r2)
   155f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   155f8:	e0bfff17 	ldw	r2,-4(fp)
   155fc:	10bfff04 	addi	r2,r2,-4
   15600:	e0bfff15 	stw	r2,-4(fp)
   15604:	e0ffff17 	ldw	r3,-4(fp)
   15608:	00800074 	movhi	r2,1
   1560c:	10995804 	addi	r2,r2,25952
   15610:	18bff62e 	bgeu	r3,r2,155ec <_do_ctors+0x20>
        (*ctor) (); 
}
   15614:	e037883a 	mov	sp,fp
   15618:	dfc00117 	ldw	ra,4(sp)
   1561c:	df000017 	ldw	fp,0(sp)
   15620:	dec00204 	addi	sp,sp,8
   15624:	f800283a 	ret

00015628 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15628:	defffd04 	addi	sp,sp,-12
   1562c:	dfc00215 	stw	ra,8(sp)
   15630:	df000115 	stw	fp,4(sp)
   15634:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15638:	00800074 	movhi	r2,1
   1563c:	10995704 	addi	r2,r2,25948
   15640:	e0bfff15 	stw	r2,-4(fp)
   15644:	00000606 	br	15660 <_do_dtors+0x38>
        (*dtor) (); 
   15648:	e0bfff17 	ldw	r2,-4(fp)
   1564c:	10800017 	ldw	r2,0(r2)
   15650:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15654:	e0bfff17 	ldw	r2,-4(fp)
   15658:	10bfff04 	addi	r2,r2,-4
   1565c:	e0bfff15 	stw	r2,-4(fp)
   15660:	e0ffff17 	ldw	r3,-4(fp)
   15664:	00800074 	movhi	r2,1
   15668:	10995804 	addi	r2,r2,25952
   1566c:	18bff62e 	bgeu	r3,r2,15648 <_do_dtors+0x20>
        (*dtor) (); 
}
   15670:	e037883a 	mov	sp,fp
   15674:	dfc00117 	ldw	ra,4(sp)
   15678:	df000017 	ldw	fp,0(sp)
   1567c:	dec00204 	addi	sp,sp,8
   15680:	f800283a 	ret

00015684 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15684:	deffff04 	addi	sp,sp,-4
   15688:	df000015 	stw	fp,0(sp)
   1568c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15690:	e037883a 	mov	sp,fp
   15694:	df000017 	ldw	fp,0(sp)
   15698:	dec00104 	addi	sp,sp,4
   1569c:	f800283a 	ret

000156a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   156a0:	defff904 	addi	sp,sp,-28
   156a4:	dfc00615 	stw	ra,24(sp)
   156a8:	df000515 	stw	fp,20(sp)
   156ac:	df000504 	addi	fp,sp,20
   156b0:	e13ffc15 	stw	r4,-16(fp)
   156b4:	e17ffd15 	stw	r5,-12(fp)
   156b8:	e1bffe15 	stw	r6,-8(fp)
   156bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   156c0:	e0800217 	ldw	r2,8(fp)
   156c4:	d8800015 	stw	r2,0(sp)
   156c8:	e13ffc17 	ldw	r4,-16(fp)
   156cc:	e17ffd17 	ldw	r5,-12(fp)
   156d0:	e1bffe17 	ldw	r6,-8(fp)
   156d4:	e1ffff17 	ldw	r7,-4(fp)
   156d8:	00158780 	call	15878 <alt_iic_isr_register>
}  
   156dc:	e037883a 	mov	sp,fp
   156e0:	dfc00117 	ldw	ra,4(sp)
   156e4:	df000017 	ldw	fp,0(sp)
   156e8:	dec00204 	addi	sp,sp,8
   156ec:	f800283a 	ret

000156f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   156f0:	defff904 	addi	sp,sp,-28
   156f4:	df000615 	stw	fp,24(sp)
   156f8:	df000604 	addi	fp,sp,24
   156fc:	e13ffe15 	stw	r4,-8(fp)
   15700:	e17fff15 	stw	r5,-4(fp)
   15704:	e0bfff17 	ldw	r2,-4(fp)
   15708:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1570c:	0005303a 	rdctl	r2,status
   15710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15714:	e0fffb17 	ldw	r3,-20(fp)
   15718:	00bfff84 	movi	r2,-2
   1571c:	1884703a 	and	r2,r3,r2
   15720:	1001703a 	wrctl	status,r2
  
  return context;
   15724:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15728:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1572c:	e0bffa17 	ldw	r2,-24(fp)
   15730:	00c00044 	movi	r3,1
   15734:	1884983a 	sll	r2,r3,r2
   15738:	1007883a 	mov	r3,r2
   1573c:	008000b4 	movhi	r2,2
   15740:	10a7a004 	addi	r2,r2,-24960
   15744:	10800017 	ldw	r2,0(r2)
   15748:	1886b03a 	or	r3,r3,r2
   1574c:	008000b4 	movhi	r2,2
   15750:	10a7a004 	addi	r2,r2,-24960
   15754:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15758:	008000b4 	movhi	r2,2
   1575c:	10a7a004 	addi	r2,r2,-24960
   15760:	10800017 	ldw	r2,0(r2)
   15764:	100170fa 	wrctl	ienable,r2
   15768:	e0bffc17 	ldw	r2,-16(fp)
   1576c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15770:	e0bffd17 	ldw	r2,-12(fp)
   15774:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15778:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1577c:	e037883a 	mov	sp,fp
   15780:	df000017 	ldw	fp,0(sp)
   15784:	dec00104 	addi	sp,sp,4
   15788:	f800283a 	ret

0001578c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1578c:	defff904 	addi	sp,sp,-28
   15790:	df000615 	stw	fp,24(sp)
   15794:	df000604 	addi	fp,sp,24
   15798:	e13ffe15 	stw	r4,-8(fp)
   1579c:	e17fff15 	stw	r5,-4(fp)
   157a0:	e0bfff17 	ldw	r2,-4(fp)
   157a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157a8:	0005303a 	rdctl	r2,status
   157ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157b0:	e0fffb17 	ldw	r3,-20(fp)
   157b4:	00bfff84 	movi	r2,-2
   157b8:	1884703a 	and	r2,r3,r2
   157bc:	1001703a 	wrctl	status,r2
  
  return context;
   157c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   157c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   157c8:	e0bffa17 	ldw	r2,-24(fp)
   157cc:	00c00044 	movi	r3,1
   157d0:	1884983a 	sll	r2,r3,r2
   157d4:	0084303a 	nor	r2,zero,r2
   157d8:	1007883a 	mov	r3,r2
   157dc:	008000b4 	movhi	r2,2
   157e0:	10a7a004 	addi	r2,r2,-24960
   157e4:	10800017 	ldw	r2,0(r2)
   157e8:	1886703a 	and	r3,r3,r2
   157ec:	008000b4 	movhi	r2,2
   157f0:	10a7a004 	addi	r2,r2,-24960
   157f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   157f8:	008000b4 	movhi	r2,2
   157fc:	10a7a004 	addi	r2,r2,-24960
   15800:	10800017 	ldw	r2,0(r2)
   15804:	100170fa 	wrctl	ienable,r2
   15808:	e0bffc17 	ldw	r2,-16(fp)
   1580c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15810:	e0bffd17 	ldw	r2,-12(fp)
   15814:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15818:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1581c:	e037883a 	mov	sp,fp
   15820:	df000017 	ldw	fp,0(sp)
   15824:	dec00104 	addi	sp,sp,4
   15828:	f800283a 	ret

0001582c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1582c:	defffc04 	addi	sp,sp,-16
   15830:	df000315 	stw	fp,12(sp)
   15834:	df000304 	addi	fp,sp,12
   15838:	e13ffe15 	stw	r4,-8(fp)
   1583c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15840:	000530fa 	rdctl	r2,ienable
   15844:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15848:	e0bfff17 	ldw	r2,-4(fp)
   1584c:	00c00044 	movi	r3,1
   15850:	1884983a 	sll	r2,r3,r2
   15854:	1007883a 	mov	r3,r2
   15858:	e0bffd17 	ldw	r2,-12(fp)
   1585c:	1884703a 	and	r2,r3,r2
   15860:	1004c03a 	cmpne	r2,r2,zero
   15864:	10803fcc 	andi	r2,r2,255
}
   15868:	e037883a 	mov	sp,fp
   1586c:	df000017 	ldw	fp,0(sp)
   15870:	dec00104 	addi	sp,sp,4
   15874:	f800283a 	ret

00015878 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15878:	defff504 	addi	sp,sp,-44
   1587c:	dfc00a15 	stw	ra,40(sp)
   15880:	df000915 	stw	fp,36(sp)
   15884:	df000904 	addi	fp,sp,36
   15888:	e13ffc15 	stw	r4,-16(fp)
   1588c:	e17ffd15 	stw	r5,-12(fp)
   15890:	e1bffe15 	stw	r6,-8(fp)
   15894:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15898:	00bffa84 	movi	r2,-22
   1589c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   158a0:	e0bffd17 	ldw	r2,-12(fp)
   158a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   158a8:	e0bff817 	ldw	r2,-32(fp)
   158ac:	10800808 	cmpgei	r2,r2,32
   158b0:	1000271e 	bne	r2,zero,15950 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158b4:	0005303a 	rdctl	r2,status
   158b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158bc:	e0fffa17 	ldw	r3,-24(fp)
   158c0:	00bfff84 	movi	r2,-2
   158c4:	1884703a 	and	r2,r3,r2
   158c8:	1001703a 	wrctl	status,r2
  
  return context;
   158cc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   158d0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   158d4:	00c000b4 	movhi	r3,2
   158d8:	18e7ad04 	addi	r3,r3,-24908
   158dc:	e0bff817 	ldw	r2,-32(fp)
   158e0:	100490fa 	slli	r2,r2,3
   158e4:	1885883a 	add	r2,r3,r2
   158e8:	e0fffe17 	ldw	r3,-8(fp)
   158ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   158f0:	00c000b4 	movhi	r3,2
   158f4:	18e7ad04 	addi	r3,r3,-24908
   158f8:	e0bff817 	ldw	r2,-32(fp)
   158fc:	100490fa 	slli	r2,r2,3
   15900:	1885883a 	add	r2,r3,r2
   15904:	10800104 	addi	r2,r2,4
   15908:	e0ffff17 	ldw	r3,-4(fp)
   1590c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   15910:	e0bffe17 	ldw	r2,-8(fp)
   15914:	10000526 	beq	r2,zero,1592c <alt_iic_isr_register+0xb4>
   15918:	e0bff817 	ldw	r2,-32(fp)
   1591c:	e13ffc17 	ldw	r4,-16(fp)
   15920:	100b883a 	mov	r5,r2
   15924:	00156f00 	call	156f0 <alt_ic_irq_enable>
   15928:	00000406 	br	1593c <alt_iic_isr_register+0xc4>
   1592c:	e0bff817 	ldw	r2,-32(fp)
   15930:	e13ffc17 	ldw	r4,-16(fp)
   15934:	100b883a 	mov	r5,r2
   15938:	001578c0 	call	1578c <alt_ic_irq_disable>
   1593c:	e0bff715 	stw	r2,-36(fp)
   15940:	e0bff917 	ldw	r2,-28(fp)
   15944:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15948:	e0bffb17 	ldw	r2,-20(fp)
   1594c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15950:	e0bff717 	ldw	r2,-36(fp)
}
   15954:	e037883a 	mov	sp,fp
   15958:	dfc00117 	ldw	ra,4(sp)
   1595c:	df000017 	ldw	fp,0(sp)
   15960:	dec00204 	addi	sp,sp,8
   15964:	f800283a 	ret

00015968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15968:	defff804 	addi	sp,sp,-32
   1596c:	dfc00715 	stw	ra,28(sp)
   15970:	df000615 	stw	fp,24(sp)
   15974:	dc000515 	stw	r16,20(sp)
   15978:	df000504 	addi	fp,sp,20
   1597c:	e13ffc15 	stw	r4,-16(fp)
   15980:	e17ffd15 	stw	r5,-12(fp)
   15984:	e1bffe15 	stw	r6,-8(fp)
   15988:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1598c:	e13ffd17 	ldw	r4,-12(fp)
   15990:	e17ffe17 	ldw	r5,-8(fp)
   15994:	e1bfff17 	ldw	r6,-4(fp)
   15998:	0015c000 	call	15c00 <open>
   1599c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   159a0:	e0bffb17 	ldw	r2,-20(fp)
   159a4:	10002216 	blt	r2,zero,15a30 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   159a8:	04000074 	movhi	r16,1
   159ac:	841c1d04 	addi	r16,r16,28788
   159b0:	e0bffb17 	ldw	r2,-20(fp)
   159b4:	1009883a 	mov	r4,r2
   159b8:	01400304 	movi	r5,12
   159bc:	00135680 	call	13568 <__mulsi3>
   159c0:	8085883a 	add	r2,r16,r2
   159c4:	10c00017 	ldw	r3,0(r2)
   159c8:	e0bffc17 	ldw	r2,-16(fp)
   159cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   159d0:	04000074 	movhi	r16,1
   159d4:	841c1d04 	addi	r16,r16,28788
   159d8:	e0bffb17 	ldw	r2,-20(fp)
   159dc:	1009883a 	mov	r4,r2
   159e0:	01400304 	movi	r5,12
   159e4:	00135680 	call	13568 <__mulsi3>
   159e8:	8085883a 	add	r2,r16,r2
   159ec:	10800104 	addi	r2,r2,4
   159f0:	10c00017 	ldw	r3,0(r2)
   159f4:	e0bffc17 	ldw	r2,-16(fp)
   159f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   159fc:	04000074 	movhi	r16,1
   15a00:	841c1d04 	addi	r16,r16,28788
   15a04:	e0bffb17 	ldw	r2,-20(fp)
   15a08:	1009883a 	mov	r4,r2
   15a0c:	01400304 	movi	r5,12
   15a10:	00135680 	call	13568 <__mulsi3>
   15a14:	8085883a 	add	r2,r16,r2
   15a18:	10800204 	addi	r2,r2,8
   15a1c:	10c00017 	ldw	r3,0(r2)
   15a20:	e0bffc17 	ldw	r2,-16(fp)
   15a24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15a28:	e13ffb17 	ldw	r4,-20(fp)
   15a2c:	0013cd80 	call	13cd8 <alt_release_fd>
  }
} 
   15a30:	e037883a 	mov	sp,fp
   15a34:	dfc00217 	ldw	ra,8(sp)
   15a38:	df000117 	ldw	fp,4(sp)
   15a3c:	dc000017 	ldw	r16,0(sp)
   15a40:	dec00304 	addi	sp,sp,12
   15a44:	f800283a 	ret

00015a48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15a48:	defffb04 	addi	sp,sp,-20
   15a4c:	dfc00415 	stw	ra,16(sp)
   15a50:	df000315 	stw	fp,12(sp)
   15a54:	df000304 	addi	fp,sp,12
   15a58:	e13ffd15 	stw	r4,-12(fp)
   15a5c:	e17ffe15 	stw	r5,-8(fp)
   15a60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15a64:	01000074 	movhi	r4,1
   15a68:	211c2004 	addi	r4,r4,28800
   15a6c:	e17ffd17 	ldw	r5,-12(fp)
   15a70:	01800044 	movi	r6,1
   15a74:	01c07fc4 	movi	r7,511
   15a78:	00159680 	call	15968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15a7c:	01000074 	movhi	r4,1
   15a80:	211c1d04 	addi	r4,r4,28788
   15a84:	e17ffe17 	ldw	r5,-8(fp)
   15a88:	000d883a 	mov	r6,zero
   15a8c:	01c07fc4 	movi	r7,511
   15a90:	00159680 	call	15968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15a94:	01000074 	movhi	r4,1
   15a98:	211c2304 	addi	r4,r4,28812
   15a9c:	e17fff17 	ldw	r5,-4(fp)
   15aa0:	01800044 	movi	r6,1
   15aa4:	01c07fc4 	movi	r7,511
   15aa8:	00159680 	call	15968 <alt_open_fd>
}  
   15aac:	e037883a 	mov	sp,fp
   15ab0:	dfc00117 	ldw	ra,4(sp)
   15ab4:	df000017 	ldw	fp,0(sp)
   15ab8:	dec00204 	addi	sp,sp,8
   15abc:	f800283a 	ret

00015ac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15ac0:	defffe04 	addi	sp,sp,-8
   15ac4:	dfc00115 	stw	ra,4(sp)
   15ac8:	df000015 	stw	fp,0(sp)
   15acc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15ad0:	008000b4 	movhi	r2,2
   15ad4:	10a0d004 	addi	r2,r2,-31936
   15ad8:	10800017 	ldw	r2,0(r2)
   15adc:	10000526 	beq	r2,zero,15af4 <alt_get_errno+0x34>
   15ae0:	008000b4 	movhi	r2,2
   15ae4:	10a0d004 	addi	r2,r2,-31936
   15ae8:	10800017 	ldw	r2,0(r2)
   15aec:	103ee83a 	callr	r2
   15af0:	00000206 	br	15afc <alt_get_errno+0x3c>
   15af4:	008000b4 	movhi	r2,2
   15af8:	10a79c04 	addi	r2,r2,-24976
}
   15afc:	e037883a 	mov	sp,fp
   15b00:	dfc00117 	ldw	ra,4(sp)
   15b04:	df000017 	ldw	fp,0(sp)
   15b08:	dec00204 	addi	sp,sp,8
   15b0c:	f800283a 	ret

00015b10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15b10:	defffb04 	addi	sp,sp,-20
   15b14:	dfc00415 	stw	ra,16(sp)
   15b18:	df000315 	stw	fp,12(sp)
   15b1c:	dc000215 	stw	r16,8(sp)
   15b20:	df000204 	addi	fp,sp,8
   15b24:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15b28:	e0bfff17 	ldw	r2,-4(fp)
   15b2c:	10800217 	ldw	r2,8(r2)
   15b30:	10d00034 	orhi	r3,r2,16384
   15b34:	e0bfff17 	ldw	r2,-4(fp)
   15b38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15b3c:	e03ffe15 	stw	zero,-8(fp)
   15b40:	00002206 	br	15bcc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b44:	04000074 	movhi	r16,1
   15b48:	841c1d04 	addi	r16,r16,28788
   15b4c:	e0bffe17 	ldw	r2,-8(fp)
   15b50:	1009883a 	mov	r4,r2
   15b54:	01400304 	movi	r5,12
   15b58:	00135680 	call	13568 <__mulsi3>
   15b5c:	8085883a 	add	r2,r16,r2
   15b60:	10c00017 	ldw	r3,0(r2)
   15b64:	e0bfff17 	ldw	r2,-4(fp)
   15b68:	10800017 	ldw	r2,0(r2)
   15b6c:	1880141e 	bne	r3,r2,15bc0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b70:	04000074 	movhi	r16,1
   15b74:	841c1d04 	addi	r16,r16,28788
   15b78:	e0bffe17 	ldw	r2,-8(fp)
   15b7c:	1009883a 	mov	r4,r2
   15b80:	01400304 	movi	r5,12
   15b84:	00135680 	call	13568 <__mulsi3>
   15b88:	8085883a 	add	r2,r16,r2
   15b8c:	10800204 	addi	r2,r2,8
   15b90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b94:	10000a0e 	bge	r2,zero,15bc0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15b98:	e13ffe17 	ldw	r4,-8(fp)
   15b9c:	01400304 	movi	r5,12
   15ba0:	00135680 	call	13568 <__mulsi3>
   15ba4:	00c00074 	movhi	r3,1
   15ba8:	18dc1d04 	addi	r3,r3,28788
   15bac:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15bb0:	e0bfff17 	ldw	r2,-4(fp)
   15bb4:	18800226 	beq	r3,r2,15bc0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15bb8:	00bffcc4 	movi	r2,-13
   15bbc:	00000a06 	br	15be8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15bc0:	e0bffe17 	ldw	r2,-8(fp)
   15bc4:	10800044 	addi	r2,r2,1
   15bc8:	e0bffe15 	stw	r2,-8(fp)
   15bcc:	008000b4 	movhi	r2,2
   15bd0:	10a0cf04 	addi	r2,r2,-31940
   15bd4:	10800017 	ldw	r2,0(r2)
   15bd8:	1007883a 	mov	r3,r2
   15bdc:	e0bffe17 	ldw	r2,-8(fp)
   15be0:	18bfd82e 	bgeu	r3,r2,15b44 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15be4:	0005883a 	mov	r2,zero
}
   15be8:	e037883a 	mov	sp,fp
   15bec:	dfc00217 	ldw	ra,8(sp)
   15bf0:	df000117 	ldw	fp,4(sp)
   15bf4:	dc000017 	ldw	r16,0(sp)
   15bf8:	dec00304 	addi	sp,sp,12
   15bfc:	f800283a 	ret

00015c00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15c00:	defff604 	addi	sp,sp,-40
   15c04:	dfc00915 	stw	ra,36(sp)
   15c08:	df000815 	stw	fp,32(sp)
   15c0c:	df000804 	addi	fp,sp,32
   15c10:	e13ffd15 	stw	r4,-12(fp)
   15c14:	e17ffe15 	stw	r5,-8(fp)
   15c18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15c1c:	00bfffc4 	movi	r2,-1
   15c20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15c24:	00bffb44 	movi	r2,-19
   15c28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15c2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15c30:	e13ffd17 	ldw	r4,-12(fp)
   15c34:	014000b4 	movhi	r5,2
   15c38:	2960cd04 	addi	r5,r5,-31948
   15c3c:	0015f140 	call	15f14 <alt_find_dev>
   15c40:	e0bff815 	stw	r2,-32(fp)
   15c44:	e0bff817 	ldw	r2,-32(fp)
   15c48:	1000051e 	bne	r2,zero,15c60 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15c4c:	e13ffd17 	ldw	r4,-12(fp)
   15c50:	0015fa40 	call	15fa4 <alt_find_file>
   15c54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15c58:	00800044 	movi	r2,1
   15c5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15c60:	e0bff817 	ldw	r2,-32(fp)
   15c64:	10002a26 	beq	r2,zero,15d10 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15c68:	e13ff817 	ldw	r4,-32(fp)
   15c6c:	00160b80 	call	160b8 <alt_get_fd>
   15c70:	e0bff915 	stw	r2,-28(fp)
   15c74:	e0bff917 	ldw	r2,-28(fp)
   15c78:	1000030e 	bge	r2,zero,15c88 <open+0x88>
    {
      status = index;
   15c7c:	e0bff917 	ldw	r2,-28(fp)
   15c80:	e0bffa15 	stw	r2,-24(fp)
   15c84:	00002406 	br	15d18 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15c88:	e13ff917 	ldw	r4,-28(fp)
   15c8c:	01400304 	movi	r5,12
   15c90:	00135680 	call	13568 <__mulsi3>
   15c94:	00c00074 	movhi	r3,1
   15c98:	18dc1d04 	addi	r3,r3,28788
   15c9c:	10c5883a 	add	r2,r2,r3
   15ca0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15ca4:	e0fffe17 	ldw	r3,-8(fp)
   15ca8:	00900034 	movhi	r2,16384
   15cac:	10bfffc4 	addi	r2,r2,-1
   15cb0:	1886703a 	and	r3,r3,r2
   15cb4:	e0bffc17 	ldw	r2,-16(fp)
   15cb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15cbc:	e0bffb17 	ldw	r2,-20(fp)
   15cc0:	1000051e 	bne	r2,zero,15cd8 <open+0xd8>
   15cc4:	e13ffc17 	ldw	r4,-16(fp)
   15cc8:	0015b100 	call	15b10 <alt_file_locked>
   15ccc:	e0bffa15 	stw	r2,-24(fp)
   15cd0:	e0bffa17 	ldw	r2,-24(fp)
   15cd4:	10001016 	blt	r2,zero,15d18 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15cd8:	e0bff817 	ldw	r2,-32(fp)
   15cdc:	10800317 	ldw	r2,12(r2)
   15ce0:	10000826 	beq	r2,zero,15d04 <open+0x104>
   15ce4:	e0bff817 	ldw	r2,-32(fp)
   15ce8:	10800317 	ldw	r2,12(r2)
   15cec:	e13ffc17 	ldw	r4,-16(fp)
   15cf0:	e17ffd17 	ldw	r5,-12(fp)
   15cf4:	e1bffe17 	ldw	r6,-8(fp)
   15cf8:	e1ffff17 	ldw	r7,-4(fp)
   15cfc:	103ee83a 	callr	r2
   15d00:	00000106 	br	15d08 <open+0x108>
   15d04:	0005883a 	mov	r2,zero
   15d08:	e0bffa15 	stw	r2,-24(fp)
   15d0c:	00000206 	br	15d18 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15d10:	00bffb44 	movi	r2,-19
   15d14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15d18:	e0bffa17 	ldw	r2,-24(fp)
   15d1c:	1000080e 	bge	r2,zero,15d40 <open+0x140>
  {
    alt_release_fd (index);  
   15d20:	e13ff917 	ldw	r4,-28(fp)
   15d24:	0013cd80 	call	13cd8 <alt_release_fd>
    ALT_ERRNO = -status;
   15d28:	0015ac00 	call	15ac0 <alt_get_errno>
   15d2c:	e0fffa17 	ldw	r3,-24(fp)
   15d30:	00c7c83a 	sub	r3,zero,r3
   15d34:	10c00015 	stw	r3,0(r2)
    return -1;
   15d38:	00bfffc4 	movi	r2,-1
   15d3c:	00000106 	br	15d44 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   15d40:	e0bff917 	ldw	r2,-28(fp)
}
   15d44:	e037883a 	mov	sp,fp
   15d48:	dfc00117 	ldw	ra,4(sp)
   15d4c:	df000017 	ldw	fp,0(sp)
   15d50:	dec00204 	addi	sp,sp,8
   15d54:	f800283a 	ret

00015d58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15d58:	defffa04 	addi	sp,sp,-24
   15d5c:	df000515 	stw	fp,20(sp)
   15d60:	df000504 	addi	fp,sp,20
   15d64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d68:	0005303a 	rdctl	r2,status
   15d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d70:	e0fffc17 	ldw	r3,-16(fp)
   15d74:	00bfff84 	movi	r2,-2
   15d78:	1884703a 	and	r2,r3,r2
   15d7c:	1001703a 	wrctl	status,r2
  
  return context;
   15d80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15d84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15d88:	e0bfff17 	ldw	r2,-4(fp)
   15d8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15d90:	e0bffd17 	ldw	r2,-12(fp)
   15d94:	10800017 	ldw	r2,0(r2)
   15d98:	e0fffd17 	ldw	r3,-12(fp)
   15d9c:	18c00117 	ldw	r3,4(r3)
   15da0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15da4:	e0bffd17 	ldw	r2,-12(fp)
   15da8:	10800117 	ldw	r2,4(r2)
   15dac:	e0fffd17 	ldw	r3,-12(fp)
   15db0:	18c00017 	ldw	r3,0(r3)
   15db4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15db8:	e0bffd17 	ldw	r2,-12(fp)
   15dbc:	e0fffd17 	ldw	r3,-12(fp)
   15dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15dc4:	e0bffd17 	ldw	r2,-12(fp)
   15dc8:	e0fffd17 	ldw	r3,-12(fp)
   15dcc:	10c00015 	stw	r3,0(r2)
   15dd0:	e0bffb17 	ldw	r2,-20(fp)
   15dd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15dd8:	e0bffe17 	ldw	r2,-8(fp)
   15ddc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15de0:	e037883a 	mov	sp,fp
   15de4:	df000017 	ldw	fp,0(sp)
   15de8:	dec00104 	addi	sp,sp,4
   15dec:	f800283a 	ret

00015df0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15df0:	defffb04 	addi	sp,sp,-20
   15df4:	dfc00415 	stw	ra,16(sp)
   15df8:	df000315 	stw	fp,12(sp)
   15dfc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15e00:	d0a00d17 	ldw	r2,-32716(gp)
   15e04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15e08:	d0a6dc17 	ldw	r2,-25744(gp)
   15e0c:	10800044 	addi	r2,r2,1
   15e10:	d0a6dc15 	stw	r2,-25744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15e14:	00002e06 	br	15ed0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15e18:	e0bffd17 	ldw	r2,-12(fp)
   15e1c:	10800017 	ldw	r2,0(r2)
   15e20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15e24:	e0bffd17 	ldw	r2,-12(fp)
   15e28:	10800403 	ldbu	r2,16(r2)
   15e2c:	10803fcc 	andi	r2,r2,255
   15e30:	10000426 	beq	r2,zero,15e44 <alt_tick+0x54>
   15e34:	d0a6dc17 	ldw	r2,-25744(gp)
   15e38:	1000021e 	bne	r2,zero,15e44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15e3c:	e0bffd17 	ldw	r2,-12(fp)
   15e40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15e44:	e0bffd17 	ldw	r2,-12(fp)
   15e48:	10800217 	ldw	r2,8(r2)
   15e4c:	d0e6dc17 	ldw	r3,-25744(gp)
   15e50:	18801d36 	bltu	r3,r2,15ec8 <alt_tick+0xd8>
   15e54:	e0bffd17 	ldw	r2,-12(fp)
   15e58:	10800403 	ldbu	r2,16(r2)
   15e5c:	10803fcc 	andi	r2,r2,255
   15e60:	1000191e 	bne	r2,zero,15ec8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15e64:	e0bffd17 	ldw	r2,-12(fp)
   15e68:	10c00317 	ldw	r3,12(r2)
   15e6c:	e0bffd17 	ldw	r2,-12(fp)
   15e70:	10800517 	ldw	r2,20(r2)
   15e74:	1009883a 	mov	r4,r2
   15e78:	183ee83a 	callr	r3
   15e7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15e80:	e0bfff17 	ldw	r2,-4(fp)
   15e84:	1000031e 	bne	r2,zero,15e94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15e88:	e13ffd17 	ldw	r4,-12(fp)
   15e8c:	0015d580 	call	15d58 <alt_alarm_stop>
   15e90:	00000d06 	br	15ec8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15e94:	e0bffd17 	ldw	r2,-12(fp)
   15e98:	10c00217 	ldw	r3,8(r2)
   15e9c:	e0bfff17 	ldw	r2,-4(fp)
   15ea0:	1887883a 	add	r3,r3,r2
   15ea4:	e0bffd17 	ldw	r2,-12(fp)
   15ea8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15eac:	e0bffd17 	ldw	r2,-12(fp)
   15eb0:	10c00217 	ldw	r3,8(r2)
   15eb4:	d0a6dc17 	ldw	r2,-25744(gp)
   15eb8:	1880032e 	bgeu	r3,r2,15ec8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15ebc:	e0bffd17 	ldw	r2,-12(fp)
   15ec0:	00c00044 	movi	r3,1
   15ec4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15ec8:	e0bffe17 	ldw	r2,-8(fp)
   15ecc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15ed0:	e0fffd17 	ldw	r3,-12(fp)
   15ed4:	d0a00d04 	addi	r2,gp,-32716
   15ed8:	18bfcf1e 	bne	r3,r2,15e18 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15edc:	0001883a 	nop
}
   15ee0:	e037883a 	mov	sp,fp
   15ee4:	dfc00117 	ldw	ra,4(sp)
   15ee8:	df000017 	ldw	fp,0(sp)
   15eec:	dec00204 	addi	sp,sp,8
   15ef0:	f800283a 	ret

00015ef4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   15ef4:	deffff04 	addi	sp,sp,-4
   15ef8:	df000015 	stw	fp,0(sp)
   15efc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15f00:	000170fa 	wrctl	ienable,zero
}
   15f04:	e037883a 	mov	sp,fp
   15f08:	df000017 	ldw	fp,0(sp)
   15f0c:	dec00104 	addi	sp,sp,4
   15f10:	f800283a 	ret

00015f14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15f14:	defffa04 	addi	sp,sp,-24
   15f18:	dfc00515 	stw	ra,20(sp)
   15f1c:	df000415 	stw	fp,16(sp)
   15f20:	df000404 	addi	fp,sp,16
   15f24:	e13ffe15 	stw	r4,-8(fp)
   15f28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15f2c:	e0bfff17 	ldw	r2,-4(fp)
   15f30:	10800017 	ldw	r2,0(r2)
   15f34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15f38:	e13ffe17 	ldw	r4,-8(fp)
   15f3c:	00107180 	call	10718 <strlen>
   15f40:	10800044 	addi	r2,r2,1
   15f44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15f48:	00000d06 	br	15f80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15f4c:	e0bffc17 	ldw	r2,-16(fp)
   15f50:	10c00217 	ldw	r3,8(r2)
   15f54:	e0bffd17 	ldw	r2,-12(fp)
   15f58:	1809883a 	mov	r4,r3
   15f5c:	e17ffe17 	ldw	r5,-8(fp)
   15f60:	100d883a 	mov	r6,r2
   15f64:	00161d80 	call	161d8 <memcmp>
   15f68:	1000021e 	bne	r2,zero,15f74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15f6c:	e0bffc17 	ldw	r2,-16(fp)
   15f70:	00000706 	br	15f90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15f74:	e0bffc17 	ldw	r2,-16(fp)
   15f78:	10800017 	ldw	r2,0(r2)
   15f7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15f80:	e0fffc17 	ldw	r3,-16(fp)
   15f84:	e0bfff17 	ldw	r2,-4(fp)
   15f88:	18bff01e 	bne	r3,r2,15f4c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15f8c:	0005883a 	mov	r2,zero
}
   15f90:	e037883a 	mov	sp,fp
   15f94:	dfc00117 	ldw	ra,4(sp)
   15f98:	df000017 	ldw	fp,0(sp)
   15f9c:	dec00204 	addi	sp,sp,8
   15fa0:	f800283a 	ret

00015fa4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15fa4:	defffb04 	addi	sp,sp,-20
   15fa8:	dfc00415 	stw	ra,16(sp)
   15fac:	df000315 	stw	fp,12(sp)
   15fb0:	df000304 	addi	fp,sp,12
   15fb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15fb8:	008000b4 	movhi	r2,2
   15fbc:	10a0cb04 	addi	r2,r2,-31956
   15fc0:	10800017 	ldw	r2,0(r2)
   15fc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15fc8:	00003106 	br	16090 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   15fcc:	e0bffd17 	ldw	r2,-12(fp)
   15fd0:	10800217 	ldw	r2,8(r2)
   15fd4:	1009883a 	mov	r4,r2
   15fd8:	00107180 	call	10718 <strlen>
   15fdc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15fe0:	e0bffd17 	ldw	r2,-12(fp)
   15fe4:	10c00217 	ldw	r3,8(r2)
   15fe8:	e0bffe17 	ldw	r2,-8(fp)
   15fec:	10bfffc4 	addi	r2,r2,-1
   15ff0:	1885883a 	add	r2,r3,r2
   15ff4:	10800003 	ldbu	r2,0(r2)
   15ff8:	10803fcc 	andi	r2,r2,255
   15ffc:	1080201c 	xori	r2,r2,128
   16000:	10bfe004 	addi	r2,r2,-128
   16004:	10800bd8 	cmpnei	r2,r2,47
   16008:	1000031e 	bne	r2,zero,16018 <alt_find_file+0x74>
    {
      len -= 1;
   1600c:	e0bffe17 	ldw	r2,-8(fp)
   16010:	10bfffc4 	addi	r2,r2,-1
   16014:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16018:	e0bffe17 	ldw	r2,-8(fp)
   1601c:	e0ffff17 	ldw	r3,-4(fp)
   16020:	1885883a 	add	r2,r3,r2
   16024:	10800003 	ldbu	r2,0(r2)
   16028:	10803fcc 	andi	r2,r2,255
   1602c:	1080201c 	xori	r2,r2,128
   16030:	10bfe004 	addi	r2,r2,-128
   16034:	10800be0 	cmpeqi	r2,r2,47
   16038:	1000081e 	bne	r2,zero,1605c <alt_find_file+0xb8>
   1603c:	e0bffe17 	ldw	r2,-8(fp)
   16040:	e0ffff17 	ldw	r3,-4(fp)
   16044:	1885883a 	add	r2,r3,r2
   16048:	10800003 	ldbu	r2,0(r2)
   1604c:	10803fcc 	andi	r2,r2,255
   16050:	1080201c 	xori	r2,r2,128
   16054:	10bfe004 	addi	r2,r2,-128
   16058:	10000a1e 	bne	r2,zero,16084 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1605c:	e0bffd17 	ldw	r2,-12(fp)
   16060:	10c00217 	ldw	r3,8(r2)
   16064:	e0bffe17 	ldw	r2,-8(fp)
   16068:	1809883a 	mov	r4,r3
   1606c:	e17fff17 	ldw	r5,-4(fp)
   16070:	100d883a 	mov	r6,r2
   16074:	00161d80 	call	161d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16078:	1000021e 	bne	r2,zero,16084 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1607c:	e0bffd17 	ldw	r2,-12(fp)
   16080:	00000806 	br	160a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   16084:	e0bffd17 	ldw	r2,-12(fp)
   16088:	10800017 	ldw	r2,0(r2)
   1608c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16090:	e0fffd17 	ldw	r3,-12(fp)
   16094:	008000b4 	movhi	r2,2
   16098:	10a0cb04 	addi	r2,r2,-31956
   1609c:	18bfcb1e 	bne	r3,r2,15fcc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   160a0:	0005883a 	mov	r2,zero
}
   160a4:	e037883a 	mov	sp,fp
   160a8:	dfc00117 	ldw	ra,4(sp)
   160ac:	df000017 	ldw	fp,0(sp)
   160b0:	dec00204 	addi	sp,sp,8
   160b4:	f800283a 	ret

000160b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   160b8:	defffa04 	addi	sp,sp,-24
   160bc:	dfc00515 	stw	ra,20(sp)
   160c0:	df000415 	stw	fp,16(sp)
   160c4:	dc000315 	stw	r16,12(sp)
   160c8:	df000304 	addi	fp,sp,12
   160cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   160d0:	00bffa04 	movi	r2,-24
   160d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   160d8:	e03ffd15 	stw	zero,-12(fp)
   160dc:	00002106 	br	16164 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   160e0:	04000074 	movhi	r16,1
   160e4:	841c1d04 	addi	r16,r16,28788
   160e8:	e0bffd17 	ldw	r2,-12(fp)
   160ec:	1009883a 	mov	r4,r2
   160f0:	01400304 	movi	r5,12
   160f4:	00135680 	call	13568 <__mulsi3>
   160f8:	8085883a 	add	r2,r16,r2
   160fc:	10800017 	ldw	r2,0(r2)
   16100:	1000151e 	bne	r2,zero,16158 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   16104:	04000074 	movhi	r16,1
   16108:	841c1d04 	addi	r16,r16,28788
   1610c:	e0bffd17 	ldw	r2,-12(fp)
   16110:	1009883a 	mov	r4,r2
   16114:	01400304 	movi	r5,12
   16118:	00135680 	call	13568 <__mulsi3>
   1611c:	8085883a 	add	r2,r16,r2
   16120:	e0ffff17 	ldw	r3,-4(fp)
   16124:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   16128:	008000b4 	movhi	r2,2
   1612c:	10a0cf04 	addi	r2,r2,-31940
   16130:	10c00017 	ldw	r3,0(r2)
   16134:	e0bffd17 	ldw	r2,-12(fp)
   16138:	1880040e 	bge	r3,r2,1614c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1613c:	008000b4 	movhi	r2,2
   16140:	10a0cf04 	addi	r2,r2,-31940
   16144:	e0fffd17 	ldw	r3,-12(fp)
   16148:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1614c:	e0bffd17 	ldw	r2,-12(fp)
   16150:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   16154:	00000606 	br	16170 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16158:	e0bffd17 	ldw	r2,-12(fp)
   1615c:	10800044 	addi	r2,r2,1
   16160:	e0bffd15 	stw	r2,-12(fp)
   16164:	e0bffd17 	ldw	r2,-12(fp)
   16168:	10800810 	cmplti	r2,r2,32
   1616c:	103fdc1e 	bne	r2,zero,160e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16170:	e0bffe17 	ldw	r2,-8(fp)
}
   16174:	e037883a 	mov	sp,fp
   16178:	dfc00217 	ldw	ra,8(sp)
   1617c:	df000117 	ldw	fp,4(sp)
   16180:	dc000017 	ldw	r16,0(sp)
   16184:	dec00304 	addi	sp,sp,12
   16188:	f800283a 	ret

0001618c <atexit>:
   1618c:	200b883a 	mov	r5,r4
   16190:	000d883a 	mov	r6,zero
   16194:	0009883a 	mov	r4,zero
   16198:	000f883a 	mov	r7,zero
   1619c:	00162541 	jmpi	16254 <__register_exitproc>

000161a0 <exit>:
   161a0:	defffe04 	addi	sp,sp,-8
   161a4:	000b883a 	mov	r5,zero
   161a8:	dc000015 	stw	r16,0(sp)
   161ac:	dfc00115 	stw	ra,4(sp)
   161b0:	2021883a 	mov	r16,r4
   161b4:	00163840 	call	16384 <__call_exitprocs>
   161b8:	008000b4 	movhi	r2,2
   161bc:	10a0c704 	addi	r2,r2,-31972
   161c0:	11000017 	ldw	r4,0(r2)
   161c4:	20800f17 	ldw	r2,60(r4)
   161c8:	10000126 	beq	r2,zero,161d0 <exit+0x30>
   161cc:	103ee83a 	callr	r2
   161d0:	8009883a 	mov	r4,r16
   161d4:	00165240 	call	16524 <_exit>

000161d8 <memcmp>:
   161d8:	01c000c4 	movi	r7,3
   161dc:	3980192e 	bgeu	r7,r6,16244 <memcmp+0x6c>
   161e0:	2904b03a 	or	r2,r5,r4
   161e4:	11c4703a 	and	r2,r2,r7
   161e8:	10000f26 	beq	r2,zero,16228 <memcmp+0x50>
   161ec:	20c00003 	ldbu	r3,0(r4)
   161f0:	28800003 	ldbu	r2,0(r5)
   161f4:	1880151e 	bne	r3,r2,1624c <memcmp+0x74>
   161f8:	31bfff84 	addi	r6,r6,-2
   161fc:	01ffffc4 	movi	r7,-1
   16200:	00000406 	br	16214 <memcmp+0x3c>
   16204:	20c00003 	ldbu	r3,0(r4)
   16208:	28800003 	ldbu	r2,0(r5)
   1620c:	31bfffc4 	addi	r6,r6,-1
   16210:	18800e1e 	bne	r3,r2,1624c <memcmp+0x74>
   16214:	21000044 	addi	r4,r4,1
   16218:	29400044 	addi	r5,r5,1
   1621c:	31fff91e 	bne	r6,r7,16204 <memcmp+0x2c>
   16220:	0005883a 	mov	r2,zero
   16224:	f800283a 	ret
   16228:	20c00017 	ldw	r3,0(r4)
   1622c:	28800017 	ldw	r2,0(r5)
   16230:	1880041e 	bne	r3,r2,16244 <memcmp+0x6c>
   16234:	31bfff04 	addi	r6,r6,-4
   16238:	21000104 	addi	r4,r4,4
   1623c:	29400104 	addi	r5,r5,4
   16240:	39bff936 	bltu	r7,r6,16228 <memcmp+0x50>
   16244:	303fe91e 	bne	r6,zero,161ec <memcmp+0x14>
   16248:	003ff506 	br	16220 <memcmp+0x48>
   1624c:	1885c83a 	sub	r2,r3,r2
   16250:	f800283a 	ret

00016254 <__register_exitproc>:
   16254:	defffa04 	addi	sp,sp,-24
   16258:	008000b4 	movhi	r2,2
   1625c:	10a0c704 	addi	r2,r2,-31972
   16260:	dc000315 	stw	r16,12(sp)
   16264:	14000017 	ldw	r16,0(r2)
   16268:	dc400415 	stw	r17,16(sp)
   1626c:	dfc00515 	stw	ra,20(sp)
   16270:	80805217 	ldw	r2,328(r16)
   16274:	2023883a 	mov	r17,r4
   16278:	10003e26 	beq	r2,zero,16374 <__register_exitproc+0x120>
   1627c:	10c00117 	ldw	r3,4(r2)
   16280:	020007c4 	movi	r8,31
   16284:	40c0180e 	bge	r8,r3,162e8 <__register_exitproc+0x94>
   16288:	00800034 	movhi	r2,0
   1628c:	10800004 	addi	r2,r2,0
   16290:	1000061e 	bne	r2,zero,162ac <__register_exitproc+0x58>
   16294:	00bfffc4 	movi	r2,-1
   16298:	dfc00517 	ldw	ra,20(sp)
   1629c:	dc400417 	ldw	r17,16(sp)
   162a0:	dc000317 	ldw	r16,12(sp)
   162a4:	dec00604 	addi	sp,sp,24
   162a8:	f800283a 	ret
   162ac:	01006404 	movi	r4,400
   162b0:	d9400015 	stw	r5,0(sp)
   162b4:	d9800115 	stw	r6,4(sp)
   162b8:	d9c00215 	stw	r7,8(sp)
   162bc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   162c0:	d9400017 	ldw	r5,0(sp)
   162c4:	d9800117 	ldw	r6,4(sp)
   162c8:	d9c00217 	ldw	r7,8(sp)
   162cc:	103ff126 	beq	r2,zero,16294 <__register_exitproc+0x40>
   162d0:	80c05217 	ldw	r3,328(r16)
   162d4:	10000115 	stw	zero,4(r2)
   162d8:	10c00015 	stw	r3,0(r2)
   162dc:	80805215 	stw	r2,328(r16)
   162e0:	10006215 	stw	zero,392(r2)
   162e4:	10006315 	stw	zero,396(r2)
   162e8:	10c00117 	ldw	r3,4(r2)
   162ec:	88000d1e 	bne	r17,zero,16324 <__register_exitproc+0xd0>
   162f0:	19000084 	addi	r4,r3,2
   162f4:	2109883a 	add	r4,r4,r4
   162f8:	18c00044 	addi	r3,r3,1
   162fc:	2109883a 	add	r4,r4,r4
   16300:	1109883a 	add	r4,r2,r4
   16304:	10c00115 	stw	r3,4(r2)
   16308:	0005883a 	mov	r2,zero
   1630c:	21400015 	stw	r5,0(r4)
   16310:	dfc00517 	ldw	ra,20(sp)
   16314:	dc400417 	ldw	r17,16(sp)
   16318:	dc000317 	ldw	r16,12(sp)
   1631c:	dec00604 	addi	sp,sp,24
   16320:	f800283a 	ret
   16324:	02400044 	movi	r9,1
   16328:	12806217 	ldw	r10,392(r2)
   1632c:	48d2983a 	sll	r9,r9,r3
   16330:	19000804 	addi	r4,r3,32
   16334:	18d1883a 	add	r8,r3,r3
   16338:	2109883a 	add	r4,r4,r4
   1633c:	4211883a 	add	r8,r8,r8
   16340:	2109883a 	add	r4,r4,r4
   16344:	1109883a 	add	r4,r2,r4
   16348:	1211883a 	add	r8,r2,r8
   1634c:	5254b03a 	or	r10,r10,r9
   16350:	21c02215 	stw	r7,136(r4)
   16354:	41802215 	stw	r6,136(r8)
   16358:	12806215 	stw	r10,392(r2)
   1635c:	01000084 	movi	r4,2
   16360:	893fe31e 	bne	r17,r4,162f0 <__register_exitproc+0x9c>
   16364:	11006317 	ldw	r4,396(r2)
   16368:	2252b03a 	or	r9,r4,r9
   1636c:	12406315 	stw	r9,396(r2)
   16370:	003fdf06 	br	162f0 <__register_exitproc+0x9c>
   16374:	008000b4 	movhi	r2,2
   16378:	10a7ed04 	addi	r2,r2,-24652
   1637c:	80805215 	stw	r2,328(r16)
   16380:	003fbe06 	br	1627c <__register_exitproc+0x28>

00016384 <__call_exitprocs>:
   16384:	008000b4 	movhi	r2,2
   16388:	10a0c704 	addi	r2,r2,-31972
   1638c:	10800017 	ldw	r2,0(r2)
   16390:	defff304 	addi	sp,sp,-52
   16394:	df000b15 	stw	fp,44(sp)
   16398:	d8800015 	stw	r2,0(sp)
   1639c:	10805204 	addi	r2,r2,328
   163a0:	dd400815 	stw	r21,32(sp)
   163a4:	dfc00c15 	stw	ra,48(sp)
   163a8:	ddc00a15 	stw	r23,40(sp)
   163ac:	dd800915 	stw	r22,36(sp)
   163b0:	dd000715 	stw	r20,28(sp)
   163b4:	dcc00615 	stw	r19,24(sp)
   163b8:	dc800515 	stw	r18,20(sp)
   163bc:	dc400415 	stw	r17,16(sp)
   163c0:	dc000315 	stw	r16,12(sp)
   163c4:	d9000115 	stw	r4,4(sp)
   163c8:	2839883a 	mov	fp,r5
   163cc:	d8800215 	stw	r2,8(sp)
   163d0:	057fffc4 	movi	r21,-1
   163d4:	d8800017 	ldw	r2,0(sp)
   163d8:	ddc00217 	ldw	r23,8(sp)
   163dc:	14805217 	ldw	r18,328(r2)
   163e0:	90001726 	beq	r18,zero,16440 <__call_exitprocs+0xbc>
   163e4:	94400117 	ldw	r17,4(r18)
   163e8:	8c3fffc4 	addi	r16,r17,-1
   163ec:	80001116 	blt	r16,zero,16434 <__call_exitprocs+0xb0>
   163f0:	8c400044 	addi	r17,r17,1
   163f4:	8427883a 	add	r19,r16,r16
   163f8:	8c63883a 	add	r17,r17,r17
   163fc:	95802204 	addi	r22,r18,136
   16400:	9ce7883a 	add	r19,r19,r19
   16404:	8c63883a 	add	r17,r17,r17
   16408:	b4e7883a 	add	r19,r22,r19
   1640c:	9463883a 	add	r17,r18,r17
   16410:	e0001726 	beq	fp,zero,16470 <__call_exitprocs+0xec>
   16414:	8c87c83a 	sub	r3,r17,r18
   16418:	b0c7883a 	add	r3,r22,r3
   1641c:	18c01e17 	ldw	r3,120(r3)
   16420:	1f001326 	beq	r3,fp,16470 <__call_exitprocs+0xec>
   16424:	843fffc4 	addi	r16,r16,-1
   16428:	9cffff04 	addi	r19,r19,-4
   1642c:	8c7fff04 	addi	r17,r17,-4
   16430:	857ff71e 	bne	r16,r21,16410 <__call_exitprocs+0x8c>
   16434:	00800034 	movhi	r2,0
   16438:	10800004 	addi	r2,r2,0
   1643c:	10002a1e 	bne	r2,zero,164e8 <__call_exitprocs+0x164>
   16440:	dfc00c17 	ldw	ra,48(sp)
   16444:	df000b17 	ldw	fp,44(sp)
   16448:	ddc00a17 	ldw	r23,40(sp)
   1644c:	dd800917 	ldw	r22,36(sp)
   16450:	dd400817 	ldw	r21,32(sp)
   16454:	dd000717 	ldw	r20,28(sp)
   16458:	dcc00617 	ldw	r19,24(sp)
   1645c:	dc800517 	ldw	r18,20(sp)
   16460:	dc400417 	ldw	r17,16(sp)
   16464:	dc000317 	ldw	r16,12(sp)
   16468:	dec00d04 	addi	sp,sp,52
   1646c:	f800283a 	ret
   16470:	91000117 	ldw	r4,4(r18)
   16474:	88c00017 	ldw	r3,0(r17)
   16478:	213fffc4 	addi	r4,r4,-1
   1647c:	24001526 	beq	r4,r16,164d4 <__call_exitprocs+0x150>
   16480:	88000015 	stw	zero,0(r17)
   16484:	183fe726 	beq	r3,zero,16424 <__call_exitprocs+0xa0>
   16488:	00800044 	movi	r2,1
   1648c:	1408983a 	sll	r4,r2,r16
   16490:	91406217 	ldw	r5,392(r18)
   16494:	95000117 	ldw	r20,4(r18)
   16498:	214a703a 	and	r5,r4,r5
   1649c:	28000b26 	beq	r5,zero,164cc <__call_exitprocs+0x148>
   164a0:	91406317 	ldw	r5,396(r18)
   164a4:	2148703a 	and	r4,r4,r5
   164a8:	20000c1e 	bne	r4,zero,164dc <__call_exitprocs+0x158>
   164ac:	99400017 	ldw	r5,0(r19)
   164b0:	d9000117 	ldw	r4,4(sp)
   164b4:	183ee83a 	callr	r3
   164b8:	90c00117 	ldw	r3,4(r18)
   164bc:	1d3fc51e 	bne	r3,r20,163d4 <__call_exitprocs+0x50>
   164c0:	b8c00017 	ldw	r3,0(r23)
   164c4:	1cbfd726 	beq	r3,r18,16424 <__call_exitprocs+0xa0>
   164c8:	003fc206 	br	163d4 <__call_exitprocs+0x50>
   164cc:	183ee83a 	callr	r3
   164d0:	003ff906 	br	164b8 <__call_exitprocs+0x134>
   164d4:	94000115 	stw	r16,4(r18)
   164d8:	003fea06 	br	16484 <__call_exitprocs+0x100>
   164dc:	99000017 	ldw	r4,0(r19)
   164e0:	183ee83a 	callr	r3
   164e4:	003ff406 	br	164b8 <__call_exitprocs+0x134>
   164e8:	90c00117 	ldw	r3,4(r18)
   164ec:	1800071e 	bne	r3,zero,1650c <__call_exitprocs+0x188>
   164f0:	90c00017 	ldw	r3,0(r18)
   164f4:	18000926 	beq	r3,zero,1651c <__call_exitprocs+0x198>
   164f8:	9009883a 	mov	r4,r18
   164fc:	b8c00015 	stw	r3,0(r23)
   16500:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   16504:	bc800017 	ldw	r18,0(r23)
   16508:	003fb506 	br	163e0 <__call_exitprocs+0x5c>
   1650c:	90c00017 	ldw	r3,0(r18)
   16510:	902f883a 	mov	r23,r18
   16514:	1825883a 	mov	r18,r3
   16518:	003fb106 	br	163e0 <__call_exitprocs+0x5c>
   1651c:	0007883a 	mov	r3,zero
   16520:	003ffb06 	br	16510 <__call_exitprocs+0x18c>

00016524 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16524:	defffc04 	addi	sp,sp,-16
   16528:	df000315 	stw	fp,12(sp)
   1652c:	df000304 	addi	fp,sp,12
   16530:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   16534:	0001883a 	nop
   16538:	e0bfff17 	ldw	r2,-4(fp)
   1653c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   16540:	e0bffd17 	ldw	r2,-12(fp)
   16544:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16548:	e0bffe17 	ldw	r2,-8(fp)
   1654c:	10000226 	beq	r2,zero,16558 <_exit+0x34>
    ALT_SIM_FAIL();
   16550:	002af070 	cmpltui	zero,zero,43969
   16554:	00000106 	br	1655c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   16558:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1655c:	003fff06 	br	1655c <_exit+0x38>
