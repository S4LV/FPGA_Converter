
analysis_custom_parallel_port_onchip_dis_dis.elf:     file format elf32-littlenios2
analysis_custom_parallel_port_onchip_dis_dis.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x08000000 align 2**12
         filesz 0x00000230 memsz 0x00000230 flags r-x
    LOAD off    0x00002230 vaddr 0x08000230 paddr 0x08000230 align 2**12
         filesz 0x0000256c memsz 0x0000256c flags r-x
    LOAD off    0x0000479c vaddr 0x0800279c paddr 0x08003df4 align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x0000644c vaddr 0x0800544c paddr 0x0800544c align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  00040020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002534  08000230  08000230  00002230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  08002764  08002764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  0800279c  08003df4  0000479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0800544c  0800544c  0000644c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00040250  00040250  00005df4  2**0
                  CONTENTS
  7 .sdram_controller_0 00000000  08005574  08005574  00005df4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005df4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005b8  00000000  00000000  00005e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007861  00000000  00000000  000063d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a72  00000000  00000000  0000dc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002a89  00000000  00000000  000106a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bb0  00000000  00000000  0001312c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ba3  00000000  00000000  00013cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000770  00000000  00000000  0001587f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00015ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000178  00000000  00000000  00016000  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00017dd6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00017dd9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00017de5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00017de6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00017de7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00017df2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00017dfd  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00017e08  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000050  00000000  00000000  00017e12  2**0
                  CONTENTS, READONLY
 27 .jdi          00005b4d  00000000  00000000  00017e62  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0029db49  00000000  00000000  0001d9af  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08002764 l    d  .rodata	00000000 .rodata
0800279c l    d  .rwdata	00000000 .rwdata
0800544c l    d  .bss	00000000 .bss
00040250 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08005574 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/embeddedlabs/RTES_lab1/onchip_instrCacheDisabled_dataCacheDisabled/sw/analysis_custom_parallel_port_onchip_dis_dis_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
080002dc l     F .text	0000003c isr_parallel_port_responsive
0800037c l     F .text	0000003c isr_parallel_port_recovery
08000480 l     F .text	00000030 isr_latency_parallel
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0800077c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
080008e4 l     F .text	00000034 alt_dev_reg
0800279c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08000bdc l     F .text	0000020c altera_avalon_jtag_uart_irq
08000de8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08001420 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08001640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800176c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08001798 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080019f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08001b34 l     F .text	0000003c alt_get_errno
08001b70 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
080039a4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08005464 g     O .bss	00000004 alt_instruction_exception_handler
08000868 g     F .text	0000007c alt_main
08005474 g     O .bss	00000100 alt_irq
0800544c g     O .bss	00000004 snap
08003df4 g       *ABS*	00000000 __flash_rwdata_start
0800026c g     F .text	00000070 responsive_parallel
08001f90 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
08000000 g       *ABS*	00000000 __flash_exceptions_start
08005470 g     O .bss	00000004 errno
0800545c g     O .bss	00000004 alt_argv
0800bdc8 g       *ABS*	00000000 _gp
08003824 g     O .rwdata	00000180 alt_fd_list
08001fb4 g     F .text	00000090 alt_find_dev
080022b8 g     F .text	00000148 memcpy
08001ab8 g     F .text	0000007c alt_io_redirect
08002764 g       *ABS*	00000000 __DTOR_END__
08001958 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08000fe0 g     F .text	0000021c altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08005450 g     O .bss	00000004 flag
08003ddc g     O .rwdata	00000004 alt_max_fd
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
08003dec g     O .rwdata	00000004 _global_impure_ptr
08005574 g       *ABS*	00000000 __bss_end
0800068c g     F .text	000000f0 alt_iic_isr_register
08001e88 g     F .text	00000108 alt_tick
08000640 g     F .text	0000004c alt_ic_irq_enabled
08001dec g     F .text	0000009c alt_alarm_stop
08005454 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000e0 alt_irq_handler
080037fc g     O .rwdata	00000028 alt_dev_null
0800174c g     F .text	00000020 alt_dcache_flush_all
08003df4 g       *ABS*	00000000 __ram_rwdata_end
08003dd4 g     O .rwdata	00000008 alt_dev_list
0800279c g       *ABS*	00000000 __ram_rodata_end
08005574 g       *ABS*	00000000 end
08000b1c g     F .text	000000c0 altera_avalon_jtag_uart_init
000401dc g     F .exceptions	00000074 alt_instruction_exception_entry
08002764 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08001498 g     F .text	0000007c alt_avalon_timer_sc_init
080011fc g     F .text	00000224 altera_avalon_jtag_uart_write
080025b0 g     F .text	00000180 __call_exitprocs
08000230 g     F .text	0000003c _start
08005468 g     O .bss	00000004 _alt_tick_rate
0800546c g     O .bss	00000004 _alt_nticks
08000950 g     F .text	00000068 alt_sys_init
080003b8 g     F .text	00000058 analysis_setting_parallel_port
08002498 g     F .text	00000118 __register_exitproc
08000e88 g     F .text	00000068 altera_avalon_jtag_uart_close
0800279c g       *ABS*	00000000 __ram_rwdata_start
08002764 g       *ABS*	00000000 __ram_rodata_start
080009b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800214c g     F .text	000000a4 alt_get_fd
0800223c g     F .text	0000007c memcmp
08000a78 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08005574 g       *ABS*	00000000 __alt_stack_base
08000ac8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002044 g     F .text	00000108 alt_find_file
080017d4 g     F .text	000000a4 alt_dev_llist_insert
0800544c g       *ABS*	00000000 __bss_start
080004b0 g     F .text	0000002c main
08005460 g     O .bss	00000004 alt_envp
08000a18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08003de0 g     O .rwdata	00000004 alt_errno
08002764 g       *ABS*	00000000 __CTOR_END__
08002764 g       *ABS*	00000000 __flash_rodata_start
08002764 g       *ABS*	00000000 __DTOR_LIST__
08000918 g     F .text	00000038 alt_irq_init
08001d88 g     F .text	00000064 alt_release_fd
080021f0 g     F .text	00000014 atexit
08003df0 g     O .rwdata	00000004 _impure_ptr
08005458 g     O .bss	00000004 alt_argc
080018d8 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
08000410 g     F .text	00000070 measure_latency_parallel
08003dcc g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
080004dc g     F .text	00000050 alt_ic_isr_register
08003df4 g       *ABS*	00000000 _edata
08005574 g       *ABS*	00000000 _end
00040250 g       *ABS*	00000000 __ram_exceptions_end
08000ef0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080005b4 g     F .text	0000008c alt_ic_irq_disable
08002204 g     F .text	00000038 exit
0c000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
08002730 g     F .text	00000034 _exit
08001514 g     F .text	0000012c alt_alarm_start
08002400 g     F .text	00000098 strlen
08001c34 g     F .text	00000154 open
08000318 g     F .text	00000064 recovery_parallel
08001938 g     F .text	00000020 alt_icache_flush_all
08003dc8 g     O .rwdata	00000004 alt_priority_mask
0800052c g     F .text	00000088 alt_ic_irq_enable
08003de4 g     O .rwdata	00000008 alt_alarm_list
08001878 g     F .text	00000060 _do_ctors
0800167c g     F .text	000000d0 close
080007e4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401dc0 	call	401dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
	IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
   4010c:	0007883a 	mov	r3,zero
   40110:	00800084 	movi	r2,2
   40114:	10c00025 	stbio	r3,0(r2)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   40118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4011c:	0005313a 	rdctl	r2,ipending
   40120:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   4012c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40130:	00800044 	movi	r2,1
   40134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40138:	e0fffb17 	ldw	r3,-20(fp)
   4013c:	e0bffc17 	ldw	r2,-16(fp)
   40140:	1884703a 	and	r2,r3,r2
   40144:	10001426 	beq	r2,zero,40198 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   40148:	00820034 	movhi	r2,2048
   4014c:	10951d04 	addi	r2,r2,21620
   40150:	e0fffd17 	ldw	r3,-12(fp)
   40154:	180690fa 	slli	r3,r3,3
   40158:	10c5883a 	add	r2,r2,r3
   4015c:	10c00017 	ldw	r3,0(r2)
   40160:	00820034 	movhi	r2,2048
   40164:	10951d04 	addi	r2,r2,21620
   40168:	e13ffd17 	ldw	r4,-12(fp)
   4016c:	200890fa 	slli	r4,r4,3
   40170:	1105883a 	add	r2,r2,r4
   40174:	10800104 	addi	r2,r2,4
   40178:	10800017 	ldw	r2,0(r2)
   4017c:	1009883a 	mov	r4,r2
   40180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40188:	0005313a 	rdctl	r2,ipending
   4018c:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40190:	e0bfff17 	ldw	r2,-4(fp)
   40194:	00000706 	br	401b4 <alt_irq_handler+0xb8>
      }
      mask <<= 1;
   40198:	e0bffc17 	ldw	r2,-16(fp)
   4019c:	1085883a 	add	r2,r2,r2
   401a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
   401a4:	e0bffd17 	ldw	r2,-12(fp)
   401a8:	10800044 	addi	r2,r2,1
   401ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401b0:	003fe106 	br	40138 <__alt_data_end+0xf4040138>

    active = alt_irq_pending ();
   401b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401b8:	e0bffb17 	ldw	r2,-20(fp)
   401bc:	103fdb1e 	bne	r2,zero,4012c <__alt_data_end+0xf404012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401c0:	0001883a 	nop
}
   401c4:	0001883a 	nop
   401c8:	e037883a 	mov	sp,fp
   401cc:	dfc00117 	ldw	ra,4(sp)
   401d0:	df000017 	ldw	fp,0(sp)
   401d4:	dec00204 	addi	sp,sp,8
   401d8:	f800283a 	ret

000401dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401dc:	defffb04 	addi	sp,sp,-20
   401e0:	dfc00415 	stw	ra,16(sp)
   401e4:	df000315 	stw	fp,12(sp)
   401e8:	df000304 	addi	fp,sp,12
   401ec:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401f0:	000531fa 	rdctl	r2,exception
   401f4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401f8:	e0bffd17 	ldw	r2,-12(fp)
   401fc:	10801f0c 	andi	r2,r2,124
   40200:	1004d0ba 	srli	r2,r2,2
   40204:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   40208:	0005333a 	rdctl	r2,badaddr
   4020c:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40210:	d0a5a717 	ldw	r2,-26980(gp)
   40214:	10000726 	beq	r2,zero,40234 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40218:	d0a5a717 	ldw	r2,-26980(gp)
   4021c:	e0fffd17 	ldw	r3,-12(fp)
   40220:	e1bffe17 	ldw	r6,-8(fp)
   40224:	e17fff17 	ldw	r5,-4(fp)
   40228:	1809883a 	mov	r4,r3
   4022c:	103ee83a 	callr	r2
   40230:	00000206 	br	4023c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40234:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40238:	0005883a 	mov	r2,zero
}
   4023c:	e037883a 	mov	sp,fp
   40240:	dfc00117 	ldw	ra,4(sp)
   40244:	df000017 	ldw	fp,0(sp)
   40248:	dec00204 	addi	sp,sp,8
   4024c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800023c:	d6af7214 	ori	gp,gp,48584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000244:	10951314 	ori	r2,r2,21580

    movhi r3, %hi(__bss_end)
 8000248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800024c:	18d55d14 	ori	r3,r3,21876

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80007e40 	call	80007e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80008680 	call	8000868 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <responsive_parallel>:

//3.2 Logic Analyzer measurement


void responsive_parallel()
{
 800026c:	defffc04 	addi	sp,sp,-16
 8000270:	dfc00315 	stw	ra,12(sp)
 8000274:	df000215 	stw	fp,8(sp)
 8000278:	df000204 	addi	fp,sp,8
	void *POINT_NULL;
	int k;
	 alt_ic_isr_register(CUSTOM_PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,4,isr_parallel_port_responsive, POINT_NULL,POINT_NULL);
 800027c:	e0bfff17 	ldw	r2,-4(fp)
 8000280:	d8800015 	stw	r2,0(sp)
 8000284:	e1ffff17 	ldw	r7,-4(fp)
 8000288:	01820034 	movhi	r6,2048
 800028c:	3180b704 	addi	r6,r6,732
 8000290:	01400104 	movi	r5,4
 8000294:	013fffc4 	movi	r4,-1
 8000298:	80004dc0 	call	80004dc <alt_ic_isr_register>
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT);
 800029c:	00bfffc4 	movi	r2,-1
 80002a0:	0007883a 	mov	r3,zero
 80002a4:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT); //Selected as output
 80002a8:	00bfffc4 	movi	r2,-1
 80002ac:	0007883a 	mov	r3,zero
 80002b0:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
 80002b4:	0007883a 	mov	r3,zero
 80002b8:	00800084 	movi	r2,2
 80002bc:	10c00025 	stbio	r3,0(r2)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,IRQ_REG_ADDR,ALL_IRQ_EN);//Enable IRQ on each bit
 80002c0:	00ffffc4 	movi	r3,-1
 80002c4:	00800144 	movi	r2,5
 80002c8:	10c00025 	stbio	r3,0(r2)
	while(1)
	{
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01); //Bit1 is SET st IRQ
 80002cc:	00c00044 	movi	r3,1
 80002d0:	00800084 	movi	r2,2
 80002d4:	10c00025 	stbio	r3,0(r2)
	}
 80002d8:	003ffc06 	br	80002cc <__alt_data_end+0xfc0002cc>

080002dc <isr_parallel_port_responsive>:
}

static void isr_parallel_port_responsive(void* context)
{
 80002dc:	defffe04 	addi	sp,sp,-8
 80002e0:	df000115 	stw	fp,4(sp)
 80002e4:	df000104 	addi	fp,sp,4
 80002e8:	e13fff15 	stw	r4,-4(fp)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0);
 80002ec:	0007883a 	mov	r3,zero
 80002f0:	00800084 	movi	r2,2
 80002f4:	10c00025 	stbio	r3,0(r2)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,CLR_END_CYCLE_ADDR,ALL_IRQ_CLR); //CLEAR IRQ
 80002f8:	00ffffc4 	movi	r3,-1
 80002fc:	00800184 	movi	r2,6
 8000300:	10c00025 	stbio	r3,0(r2)
}
 8000304:	0001883a 	nop
 8000308:	e037883a 	mov	sp,fp
 800030c:	df000017 	ldw	fp,0(sp)
 8000310:	dec00104 	addi	sp,sp,4
 8000314:	f800283a 	ret

08000318 <recovery_parallel>:

static void isr_parallel_port_recovery(void* context);
void recovery_parallel()
{
 8000318:	defffc04 	addi	sp,sp,-16
 800031c:	dfc00315 	stw	ra,12(sp)
 8000320:	df000215 	stw	fp,8(sp)
 8000324:	df000204 	addi	fp,sp,8
	void *POINT_NULL;
	int k;
	 alt_ic_isr_register(CUSTOM_PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,4,isr_parallel_port_recovery, POINT_NULL,POINT_NULL);
 8000328:	e0bfff17 	ldw	r2,-4(fp)
 800032c:	d8800015 	stw	r2,0(sp)
 8000330:	e1ffff17 	ldw	r7,-4(fp)
 8000334:	01820034 	movhi	r6,2048
 8000338:	3180df04 	addi	r6,r6,892
 800033c:	01400104 	movi	r5,4
 8000340:	013fffc4 	movi	r4,-1
 8000344:	80004dc0 	call	80004dc <alt_ic_isr_register>
//	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT);
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT); //Selected as output
 8000348:	00bfffc4 	movi	r2,-1
 800034c:	0007883a 	mov	r3,zero
 8000350:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
 8000354:	00c00044 	movi	r3,1
 8000358:	00800084 	movi	r2,2
 800035c:	10c00025 	stbio	r3,0(r2)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,IRQ_REG_ADDR,ALL_IRQ_EN);//Enable IRQ on each bit
 8000360:	00ffffc4 	movi	r3,-1
 8000364:	00800144 	movi	r2,5
 8000368:	10c00025 	stbio	r3,0(r2)
	while(1)
	{
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00); //Bit0 is SET st IRQ
 800036c:	0007883a 	mov	r3,zero
 8000370:	00800084 	movi	r2,2
 8000374:	10c00025 	stbio	r3,0(r2)
	}
 8000378:	003ffc06 	br	800036c <__alt_data_end+0xfc00036c>

0800037c <isr_parallel_port_recovery>:
}

static void isr_parallel_port_recovery(void* context)
{
 800037c:	defffe04 	addi	sp,sp,-8
 8000380:	df000115 	stw	fp,4(sp)
 8000384:	df000104 	addi	fp,sp,4
 8000388:	e13fff15 	stw	r4,-4(fp)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
 800038c:	00c00044 	movi	r3,1
 8000390:	00800084 	movi	r2,2
 8000394:	10c00025 	stbio	r3,0(r2)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,CLR_END_CYCLE_ADDR,ALL_IRQ_CLR); //CLEAR IRQ
 8000398:	00ffffc4 	movi	r3,-1
 800039c:	00800184 	movi	r2,6
 80003a0:	10c00025 	stbio	r3,0(r2)
}
 80003a4:	0001883a 	nop
 80003a8:	e037883a 	mov	sp,fp
 80003ac:	df000017 	ldw	fp,0(sp)
 80003b0:	dec00104 	addi	sp,sp,4
 80003b4:	f800283a 	ret

080003b8 <analysis_setting_parallel_port>:


void analysis_setting_parallel_port()
{
 80003b8:	deffff04 	addi	sp,sp,-4
 80003bc:	df000015 	stw	fp,0(sp)
 80003c0:	d839883a 	mov	fp,sp

	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,MODE_ALL_OUTPUT);
 80003c4:	00ffffc4 	movi	r3,-1
 80003c8:	00800084 	movi	r2,2
 80003cc:	10c00025 	stbio	r3,0(r2)
	 //Select Parport as output
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
 80003d0:	0007883a 	mov	r3,zero
 80003d4:	00800084 	movi	r2,2
 80003d8:	10c00025 	stbio	r3,0(r2)
	 while(1)
	 {
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
 80003dc:	00c00044 	movi	r3,1
 80003e0:	00800084 	movi	r2,2
 80003e4:	10c00025 	stbio	r3,0(r2)
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
 80003e8:	0007883a 	mov	r3,zero
 80003ec:	00800084 	movi	r2,2
 80003f0:	10c00025 	stbio	r3,0(r2)
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
 80003f4:	00c00044 	movi	r3,1
 80003f8:	00800084 	movi	r2,2
 80003fc:	10c00025 	stbio	r3,0(r2)
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
 8000400:	0007883a 	mov	r3,zero
 8000404:	00800084 	movi	r2,2
 8000408:	10c00025 	stbio	r3,0(r2)
	 }
 800040c:	003ff306 	br	80003dc <__alt_data_end+0xfc0003dc>

08000410 <measure_latency_parallel>:

}
static void isr_latency_parallel(void* context);

void measure_latency_parallel()
{
 8000410:	defffc04 	addi	sp,sp,-16
 8000414:	dfc00315 	stw	ra,12(sp)
 8000418:	df000215 	stw	fp,8(sp)
 800041c:	df000204 	addi	fp,sp,8


	void *POINT_NULL;
	int k;
	 alt_ic_isr_register(CUSTOM_PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,4,isr_latency_parallel, POINT_NULL,POINT_NULL);
 8000420:	e0bfff17 	ldw	r2,-4(fp)
 8000424:	d8800015 	stw	r2,0(sp)
 8000428:	e1ffff17 	ldw	r7,-4(fp)
 800042c:	01820034 	movhi	r6,2048
 8000430:	31812004 	addi	r6,r6,1152
 8000434:	01400104 	movi	r5,4
 8000438:	013fffc4 	movi	r4,-1
 800043c:	80004dc0 	call	80004dc <alt_ic_isr_register>
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT);
 8000440:	00bfffc4 	movi	r2,-1
 8000444:	0007883a 	mov	r3,zero
 8000448:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT); //Selected as output
 800044c:	00bfffc4 	movi	r2,-1
 8000450:	0007883a 	mov	r3,zero
 8000454:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
 8000458:	0007883a 	mov	r3,zero
 800045c:	00800084 	movi	r2,2
 8000460:	10c00025 	stbio	r3,0(r2)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,IRQ_REG_ADDR,ALL_IRQ_EN);//Enable IRQ on each bit
 8000464:	00ffffc4 	movi	r3,-1
 8000468:	00800144 	movi	r2,5
 800046c:	10c00025 	stbio	r3,0(r2)
	while(1)
	{
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01); //Bit1 is SET st IRQ
 8000470:	00c00044 	movi	r3,1
 8000474:	00800084 	movi	r2,2
 8000478:	10c00025 	stbio	r3,0(r2)
	}
 800047c:	003ffc06 	br	8000470 <__alt_data_end+0xfc000470>

08000480 <isr_latency_parallel>:

}


static void isr_latency_parallel(void* context)
{
 8000480:	defffe04 	addi	sp,sp,-8
 8000484:	df000115 	stw	fp,4(sp)
 8000488:	df000104 	addi	fp,sp,4
 800048c:	e13fff15 	stw	r4,-4(fp)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,CLR_END_CYCLE_ADDR,ALL_IRQ_CLR); //CLEAR IRQ
 8000490:	00ffffc4 	movi	r3,-1
 8000494:	00800184 	movi	r2,6
 8000498:	10c00025 	stbio	r3,0(r2)
}
 800049c:	0001883a 	nop
 80004a0:	e037883a 	mov	sp,fp
 80004a4:	df000017 	ldw	fp,0(sp)
 80004a8:	dec00104 	addi	sp,sp,4
 80004ac:	f800283a 	ret

080004b0 <main>:
int main()
{
 80004b0:	defffe04 	addi	sp,sp,-8
 80004b4:	dfc00115 	stw	ra,4(sp)
 80004b8:	df000015 	stw	fp,0(sp)
 80004bc:	d839883a 	mov	fp,sp

//	test_parallel_port();
//	responsive_parallel();
//	recovery_parallel();
	measure_latency_parallel();
 80004c0:	80004100 	call	8000410 <measure_latency_parallel>

  return 0;
 80004c4:	0005883a 	mov	r2,zero
}
 80004c8:	e037883a 	mov	sp,fp
 80004cc:	dfc00117 	ldw	ra,4(sp)
 80004d0:	df000017 	ldw	fp,0(sp)
 80004d4:	dec00204 	addi	sp,sp,8
 80004d8:	f800283a 	ret

080004dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80004dc:	defff904 	addi	sp,sp,-28
 80004e0:	dfc00615 	stw	ra,24(sp)
 80004e4:	df000515 	stw	fp,20(sp)
 80004e8:	df000504 	addi	fp,sp,20
 80004ec:	e13ffc15 	stw	r4,-16(fp)
 80004f0:	e17ffd15 	stw	r5,-12(fp)
 80004f4:	e1bffe15 	stw	r6,-8(fp)
 80004f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80004fc:	e0800217 	ldw	r2,8(fp)
 8000500:	d8800015 	stw	r2,0(sp)
 8000504:	e1ffff17 	ldw	r7,-4(fp)
 8000508:	e1bffe17 	ldw	r6,-8(fp)
 800050c:	e17ffd17 	ldw	r5,-12(fp)
 8000510:	e13ffc17 	ldw	r4,-16(fp)
 8000514:	800068c0 	call	800068c <alt_iic_isr_register>
}  
 8000518:	e037883a 	mov	sp,fp
 800051c:	dfc00117 	ldw	ra,4(sp)
 8000520:	df000017 	ldw	fp,0(sp)
 8000524:	dec00204 	addi	sp,sp,8
 8000528:	f800283a 	ret

0800052c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800052c:	defff904 	addi	sp,sp,-28
 8000530:	df000615 	stw	fp,24(sp)
 8000534:	df000604 	addi	fp,sp,24
 8000538:	e13ffe15 	stw	r4,-8(fp)
 800053c:	e17fff15 	stw	r5,-4(fp)
 8000540:	e0bfff17 	ldw	r2,-4(fp)
 8000544:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000548:	0005303a 	rdctl	r2,status
 800054c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000550:	e0fffb17 	ldw	r3,-20(fp)
 8000554:	00bfff84 	movi	r2,-2
 8000558:	1884703a 	and	r2,r3,r2
 800055c:	1001703a 	wrctl	status,r2
  
  return context;
 8000560:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8000564:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8000568:	00c00044 	movi	r3,1
 800056c:	e0bffa17 	ldw	r2,-24(fp)
 8000570:	1884983a 	sll	r2,r3,r2
 8000574:	1007883a 	mov	r3,r2
 8000578:	d0a5a317 	ldw	r2,-26996(gp)
 800057c:	1884b03a 	or	r2,r3,r2
 8000580:	d0a5a315 	stw	r2,-26996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8000584:	d0a5a317 	ldw	r2,-26996(gp)
 8000588:	100170fa 	wrctl	ienable,r2
 800058c:	e0bffc17 	ldw	r2,-16(fp)
 8000590:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000594:	e0bffd17 	ldw	r2,-12(fp)
 8000598:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800059c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80005a0:	0001883a 	nop
}
 80005a4:	e037883a 	mov	sp,fp
 80005a8:	df000017 	ldw	fp,0(sp)
 80005ac:	dec00104 	addi	sp,sp,4
 80005b0:	f800283a 	ret

080005b4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80005b4:	defff904 	addi	sp,sp,-28
 80005b8:	df000615 	stw	fp,24(sp)
 80005bc:	df000604 	addi	fp,sp,24
 80005c0:	e13ffe15 	stw	r4,-8(fp)
 80005c4:	e17fff15 	stw	r5,-4(fp)
 80005c8:	e0bfff17 	ldw	r2,-4(fp)
 80005cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80005d0:	0005303a 	rdctl	r2,status
 80005d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80005d8:	e0fffb17 	ldw	r3,-20(fp)
 80005dc:	00bfff84 	movi	r2,-2
 80005e0:	1884703a 	and	r2,r3,r2
 80005e4:	1001703a 	wrctl	status,r2
  
  return context;
 80005e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80005ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80005f0:	00c00044 	movi	r3,1
 80005f4:	e0bffa17 	ldw	r2,-24(fp)
 80005f8:	1884983a 	sll	r2,r3,r2
 80005fc:	0084303a 	nor	r2,zero,r2
 8000600:	1007883a 	mov	r3,r2
 8000604:	d0a5a317 	ldw	r2,-26996(gp)
 8000608:	1884703a 	and	r2,r3,r2
 800060c:	d0a5a315 	stw	r2,-26996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8000610:	d0a5a317 	ldw	r2,-26996(gp)
 8000614:	100170fa 	wrctl	ienable,r2
 8000618:	e0bffc17 	ldw	r2,-16(fp)
 800061c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000620:	e0bffd17 	ldw	r2,-12(fp)
 8000624:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8000628:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800062c:	0001883a 	nop
}
 8000630:	e037883a 	mov	sp,fp
 8000634:	df000017 	ldw	fp,0(sp)
 8000638:	dec00104 	addi	sp,sp,4
 800063c:	f800283a 	ret

08000640 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8000640:	defffc04 	addi	sp,sp,-16
 8000644:	df000315 	stw	fp,12(sp)
 8000648:	df000304 	addi	fp,sp,12
 800064c:	e13ffe15 	stw	r4,-8(fp)
 8000650:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8000654:	000530fa 	rdctl	r2,ienable
 8000658:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800065c:	00c00044 	movi	r3,1
 8000660:	e0bfff17 	ldw	r2,-4(fp)
 8000664:	1884983a 	sll	r2,r3,r2
 8000668:	1007883a 	mov	r3,r2
 800066c:	e0bffd17 	ldw	r2,-12(fp)
 8000670:	1884703a 	and	r2,r3,r2
 8000674:	1004c03a 	cmpne	r2,r2,zero
 8000678:	10803fcc 	andi	r2,r2,255
}
 800067c:	e037883a 	mov	sp,fp
 8000680:	df000017 	ldw	fp,0(sp)
 8000684:	dec00104 	addi	sp,sp,4
 8000688:	f800283a 	ret

0800068c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800068c:	defff504 	addi	sp,sp,-44
 8000690:	dfc00a15 	stw	ra,40(sp)
 8000694:	df000915 	stw	fp,36(sp)
 8000698:	df000904 	addi	fp,sp,36
 800069c:	e13ffc15 	stw	r4,-16(fp)
 80006a0:	e17ffd15 	stw	r5,-12(fp)
 80006a4:	e1bffe15 	stw	r6,-8(fp)
 80006a8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80006ac:	00bffa84 	movi	r2,-22
 80006b0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80006b4:	e0bffd17 	ldw	r2,-12(fp)
 80006b8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80006bc:	e0bff817 	ldw	r2,-32(fp)
 80006c0:	10800808 	cmpgei	r2,r2,32
 80006c4:	1000271e 	bne	r2,zero,8000764 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80006c8:	0005303a 	rdctl	r2,status
 80006cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80006d0:	e0fffb17 	ldw	r3,-20(fp)
 80006d4:	00bfff84 	movi	r2,-2
 80006d8:	1884703a 	and	r2,r3,r2
 80006dc:	1001703a 	wrctl	status,r2
  
  return context;
 80006e0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80006e4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80006e8:	00820034 	movhi	r2,2048
 80006ec:	10951d04 	addi	r2,r2,21620
 80006f0:	e0fff817 	ldw	r3,-32(fp)
 80006f4:	180690fa 	slli	r3,r3,3
 80006f8:	10c5883a 	add	r2,r2,r3
 80006fc:	e0fffe17 	ldw	r3,-8(fp)
 8000700:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8000704:	00820034 	movhi	r2,2048
 8000708:	10951d04 	addi	r2,r2,21620
 800070c:	e0fff817 	ldw	r3,-32(fp)
 8000710:	180690fa 	slli	r3,r3,3
 8000714:	10c5883a 	add	r2,r2,r3
 8000718:	10800104 	addi	r2,r2,4
 800071c:	e0ffff17 	ldw	r3,-4(fp)
 8000720:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8000724:	e0bffe17 	ldw	r2,-8(fp)
 8000728:	10000526 	beq	r2,zero,8000740 <alt_iic_isr_register+0xb4>
 800072c:	e0bff817 	ldw	r2,-32(fp)
 8000730:	100b883a 	mov	r5,r2
 8000734:	e13ffc17 	ldw	r4,-16(fp)
 8000738:	800052c0 	call	800052c <alt_ic_irq_enable>
 800073c:	00000406 	br	8000750 <alt_iic_isr_register+0xc4>
 8000740:	e0bff817 	ldw	r2,-32(fp)
 8000744:	100b883a 	mov	r5,r2
 8000748:	e13ffc17 	ldw	r4,-16(fp)
 800074c:	80005b40 	call	80005b4 <alt_ic_irq_disable>
 8000750:	e0bff715 	stw	r2,-36(fp)
 8000754:	e0bffa17 	ldw	r2,-24(fp)
 8000758:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800075c:	e0bff917 	ldw	r2,-28(fp)
 8000760:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8000764:	e0bff717 	ldw	r2,-36(fp)
}
 8000768:	e037883a 	mov	sp,fp
 800076c:	dfc00117 	ldw	ra,4(sp)
 8000770:	df000017 	ldw	fp,0(sp)
 8000774:	dec00204 	addi	sp,sp,8
 8000778:	f800283a 	ret

0800077c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800077c:	defffc04 	addi	sp,sp,-16
 8000780:	df000315 	stw	fp,12(sp)
 8000784:	df000304 	addi	fp,sp,12
 8000788:	e13ffd15 	stw	r4,-12(fp)
 800078c:	e17ffe15 	stw	r5,-8(fp)
 8000790:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8000794:	e0fffe17 	ldw	r3,-8(fp)
 8000798:	e0bffd17 	ldw	r2,-12(fp)
 800079c:	18800c26 	beq	r3,r2,80007d0 <alt_load_section+0x54>
  {
    while( to != end )
 80007a0:	00000806 	br	80007c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80007a4:	e0bffe17 	ldw	r2,-8(fp)
 80007a8:	10c00104 	addi	r3,r2,4
 80007ac:	e0fffe15 	stw	r3,-8(fp)
 80007b0:	e0fffd17 	ldw	r3,-12(fp)
 80007b4:	19000104 	addi	r4,r3,4
 80007b8:	e13ffd15 	stw	r4,-12(fp)
 80007bc:	18c00017 	ldw	r3,0(r3)
 80007c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80007c4:	e0fffe17 	ldw	r3,-8(fp)
 80007c8:	e0bfff17 	ldw	r2,-4(fp)
 80007cc:	18bff51e 	bne	r3,r2,80007a4 <__alt_data_end+0xfc0007a4>
    {
      *to++ = *from++;
    }
  }
}
 80007d0:	0001883a 	nop
 80007d4:	e037883a 	mov	sp,fp
 80007d8:	df000017 	ldw	fp,0(sp)
 80007dc:	dec00104 	addi	sp,sp,4
 80007e0:	f800283a 	ret

080007e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80007e4:	defffe04 	addi	sp,sp,-8
 80007e8:	dfc00115 	stw	ra,4(sp)
 80007ec:	df000015 	stw	fp,0(sp)
 80007f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80007f4:	01820034 	movhi	r6,2048
 80007f8:	318f7d04 	addi	r6,r6,15860
 80007fc:	01420034 	movhi	r5,2048
 8000800:	2949e704 	addi	r5,r5,10140
 8000804:	01020034 	movhi	r4,2048
 8000808:	210f7d04 	addi	r4,r4,15860
 800080c:	800077c0 	call	800077c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8000810:	01800134 	movhi	r6,4
 8000814:	31809404 	addi	r6,r6,592
 8000818:	01400134 	movhi	r5,4
 800081c:	29400804 	addi	r5,r5,32
 8000820:	01020034 	movhi	r4,2048
 8000824:	21000004 	addi	r4,r4,0
 8000828:	800077c0 	call	800077c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800082c:	01820034 	movhi	r6,2048
 8000830:	3189e704 	addi	r6,r6,10140
 8000834:	01420034 	movhi	r5,2048
 8000838:	2949d904 	addi	r5,r5,10084
 800083c:	01020034 	movhi	r4,2048
 8000840:	2109d904 	addi	r4,r4,10084
 8000844:	800077c0 	call	800077c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8000848:	800174c0 	call	800174c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800084c:	80019380 	call	8001938 <alt_icache_flush_all>
}
 8000850:	0001883a 	nop
 8000854:	e037883a 	mov	sp,fp
 8000858:	dfc00117 	ldw	ra,4(sp)
 800085c:	df000017 	ldw	fp,0(sp)
 8000860:	dec00204 	addi	sp,sp,8
 8000864:	f800283a 	ret

08000868 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000868:	defffd04 	addi	sp,sp,-12
 800086c:	dfc00215 	stw	ra,8(sp)
 8000870:	df000115 	stw	fp,4(sp)
 8000874:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000878:	0009883a 	mov	r4,zero
 800087c:	80009180 	call	8000918 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8000880:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000884:	80009500 	call	8000950 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8000888:	01820034 	movhi	r6,2048
 800088c:	3189d904 	addi	r6,r6,10084
 8000890:	01420034 	movhi	r5,2048
 8000894:	2949d904 	addi	r5,r5,10084
 8000898:	01020034 	movhi	r4,2048
 800089c:	2109d904 	addi	r4,r4,10084
 80008a0:	8001ab80 	call	8001ab8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80008a4:	80018780 	call	8001878 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80008a8:	01020034 	movhi	r4,2048
 80008ac:	21063604 	addi	r4,r4,6360
 80008b0:	80021f00 	call	80021f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80008b4:	d0a5a417 	ldw	r2,-26992(gp)
 80008b8:	d0e5a517 	ldw	r3,-26988(gp)
 80008bc:	d125a617 	ldw	r4,-26984(gp)
 80008c0:	200d883a 	mov	r6,r4
 80008c4:	180b883a 	mov	r5,r3
 80008c8:	1009883a 	mov	r4,r2
 80008cc:	80004b00 	call	80004b0 <main>
 80008d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80008d4:	01000044 	movi	r4,1
 80008d8:	800167c0 	call	800167c <close>
  exit (result);
 80008dc:	e13fff17 	ldw	r4,-4(fp)
 80008e0:	80022040 	call	8002204 <exit>

080008e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80008e4:	defffd04 	addi	sp,sp,-12
 80008e8:	dfc00215 	stw	ra,8(sp)
 80008ec:	df000115 	stw	fp,4(sp)
 80008f0:	df000104 	addi	fp,sp,4
 80008f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80008f8:	d1600304 	addi	r5,gp,-32756
 80008fc:	e13fff17 	ldw	r4,-4(fp)
 8000900:	80017d40 	call	80017d4 <alt_dev_llist_insert>
}
 8000904:	e037883a 	mov	sp,fp
 8000908:	dfc00117 	ldw	ra,4(sp)
 800090c:	df000017 	ldw	fp,0(sp)
 8000910:	dec00204 	addi	sp,sp,8
 8000914:	f800283a 	ret

08000918 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8000918:	defffd04 	addi	sp,sp,-12
 800091c:	dfc00215 	stw	ra,8(sp)
 8000920:	df000115 	stw	fp,4(sp)
 8000924:	df000104 	addi	fp,sp,4
 8000928:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800092c:	8001f900 	call	8001f90 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8000930:	00800044 	movi	r2,1
 8000934:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000938:	0001883a 	nop
 800093c:	e037883a 	mov	sp,fp
 8000940:	dfc00117 	ldw	ra,4(sp)
 8000944:	df000017 	ldw	fp,0(sp)
 8000948:	dec00204 	addi	sp,sp,8
 800094c:	f800283a 	ret

08000950 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8000950:	defffe04 	addi	sp,sp,-8
 8000954:	dfc00115 	stw	ra,4(sp)
 8000958:	df000015 	stw	fp,0(sp)
 800095c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8000960:	01c0fa04 	movi	r7,1000
 8000964:	01800084 	movi	r6,2
 8000968:	000b883a 	mov	r5,zero
 800096c:	01000804 	movi	r4,32
 8000970:	80014980 	call	8001498 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8000974:	01800044 	movi	r6,1
 8000978:	000b883a 	mov	r5,zero
 800097c:	01020034 	movhi	r4,2048
 8000980:	2109f104 	addi	r4,r4,10180
 8000984:	8000b1c0 	call	8000b1c <altera_avalon_jtag_uart_init>
 8000988:	01020034 	movhi	r4,2048
 800098c:	2109e704 	addi	r4,r4,10140
 8000990:	80008e40 	call	80008e4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8000994:	00c00044 	movi	r3,1
 8000998:	00801004 	movi	r2,64
 800099c:	10c00035 	stwio	r3,0(r2)
}
 80009a0:	0001883a 	nop
 80009a4:	e037883a 	mov	sp,fp
 80009a8:	dfc00117 	ldw	ra,4(sp)
 80009ac:	df000017 	ldw	fp,0(sp)
 80009b0:	dec00204 	addi	sp,sp,8
 80009b4:	f800283a 	ret

080009b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80009b8:	defffa04 	addi	sp,sp,-24
 80009bc:	dfc00515 	stw	ra,20(sp)
 80009c0:	df000415 	stw	fp,16(sp)
 80009c4:	df000404 	addi	fp,sp,16
 80009c8:	e13ffd15 	stw	r4,-12(fp)
 80009cc:	e17ffe15 	stw	r5,-8(fp)
 80009d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80009d4:	e0bffd17 	ldw	r2,-12(fp)
 80009d8:	10800017 	ldw	r2,0(r2)
 80009dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80009e0:	e0bffc17 	ldw	r2,-16(fp)
 80009e4:	10c00a04 	addi	r3,r2,40
 80009e8:	e0bffd17 	ldw	r2,-12(fp)
 80009ec:	10800217 	ldw	r2,8(r2)
 80009f0:	100f883a 	mov	r7,r2
 80009f4:	e1bfff17 	ldw	r6,-4(fp)
 80009f8:	e17ffe17 	ldw	r5,-8(fp)
 80009fc:	1809883a 	mov	r4,r3
 8000a00:	8000fe00 	call	8000fe0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8000a04:	e037883a 	mov	sp,fp
 8000a08:	dfc00117 	ldw	ra,4(sp)
 8000a0c:	df000017 	ldw	fp,0(sp)
 8000a10:	dec00204 	addi	sp,sp,8
 8000a14:	f800283a 	ret

08000a18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8000a18:	defffa04 	addi	sp,sp,-24
 8000a1c:	dfc00515 	stw	ra,20(sp)
 8000a20:	df000415 	stw	fp,16(sp)
 8000a24:	df000404 	addi	fp,sp,16
 8000a28:	e13ffd15 	stw	r4,-12(fp)
 8000a2c:	e17ffe15 	stw	r5,-8(fp)
 8000a30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000a34:	e0bffd17 	ldw	r2,-12(fp)
 8000a38:	10800017 	ldw	r2,0(r2)
 8000a3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8000a40:	e0bffc17 	ldw	r2,-16(fp)
 8000a44:	10c00a04 	addi	r3,r2,40
 8000a48:	e0bffd17 	ldw	r2,-12(fp)
 8000a4c:	10800217 	ldw	r2,8(r2)
 8000a50:	100f883a 	mov	r7,r2
 8000a54:	e1bfff17 	ldw	r6,-4(fp)
 8000a58:	e17ffe17 	ldw	r5,-8(fp)
 8000a5c:	1809883a 	mov	r4,r3
 8000a60:	80011fc0 	call	80011fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8000a64:	e037883a 	mov	sp,fp
 8000a68:	dfc00117 	ldw	ra,4(sp)
 8000a6c:	df000017 	ldw	fp,0(sp)
 8000a70:	dec00204 	addi	sp,sp,8
 8000a74:	f800283a 	ret

08000a78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8000a78:	defffc04 	addi	sp,sp,-16
 8000a7c:	dfc00315 	stw	ra,12(sp)
 8000a80:	df000215 	stw	fp,8(sp)
 8000a84:	df000204 	addi	fp,sp,8
 8000a88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000a8c:	e0bfff17 	ldw	r2,-4(fp)
 8000a90:	10800017 	ldw	r2,0(r2)
 8000a94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8000a98:	e0bffe17 	ldw	r2,-8(fp)
 8000a9c:	10c00a04 	addi	r3,r2,40
 8000aa0:	e0bfff17 	ldw	r2,-4(fp)
 8000aa4:	10800217 	ldw	r2,8(r2)
 8000aa8:	100b883a 	mov	r5,r2
 8000aac:	1809883a 	mov	r4,r3
 8000ab0:	8000e880 	call	8000e88 <altera_avalon_jtag_uart_close>
}
 8000ab4:	e037883a 	mov	sp,fp
 8000ab8:	dfc00117 	ldw	ra,4(sp)
 8000abc:	df000017 	ldw	fp,0(sp)
 8000ac0:	dec00204 	addi	sp,sp,8
 8000ac4:	f800283a 	ret

08000ac8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8000ac8:	defffa04 	addi	sp,sp,-24
 8000acc:	dfc00515 	stw	ra,20(sp)
 8000ad0:	df000415 	stw	fp,16(sp)
 8000ad4:	df000404 	addi	fp,sp,16
 8000ad8:	e13ffd15 	stw	r4,-12(fp)
 8000adc:	e17ffe15 	stw	r5,-8(fp)
 8000ae0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8000ae4:	e0bffd17 	ldw	r2,-12(fp)
 8000ae8:	10800017 	ldw	r2,0(r2)
 8000aec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8000af0:	e0bffc17 	ldw	r2,-16(fp)
 8000af4:	10800a04 	addi	r2,r2,40
 8000af8:	e1bfff17 	ldw	r6,-4(fp)
 8000afc:	e17ffe17 	ldw	r5,-8(fp)
 8000b00:	1009883a 	mov	r4,r2
 8000b04:	8000ef00 	call	8000ef0 <altera_avalon_jtag_uart_ioctl>
}
 8000b08:	e037883a 	mov	sp,fp
 8000b0c:	dfc00117 	ldw	ra,4(sp)
 8000b10:	df000017 	ldw	fp,0(sp)
 8000b14:	dec00204 	addi	sp,sp,8
 8000b18:	f800283a 	ret

08000b1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8000b1c:	defffa04 	addi	sp,sp,-24
 8000b20:	dfc00515 	stw	ra,20(sp)
 8000b24:	df000415 	stw	fp,16(sp)
 8000b28:	df000404 	addi	fp,sp,16
 8000b2c:	e13ffd15 	stw	r4,-12(fp)
 8000b30:	e17ffe15 	stw	r5,-8(fp)
 8000b34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000b38:	e0bffd17 	ldw	r2,-12(fp)
 8000b3c:	00c00044 	movi	r3,1
 8000b40:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8000b44:	e0bffd17 	ldw	r2,-12(fp)
 8000b48:	10800017 	ldw	r2,0(r2)
 8000b4c:	10800104 	addi	r2,r2,4
 8000b50:	1007883a 	mov	r3,r2
 8000b54:	e0bffd17 	ldw	r2,-12(fp)
 8000b58:	10800817 	ldw	r2,32(r2)
 8000b5c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8000b60:	e0bffe17 	ldw	r2,-8(fp)
 8000b64:	e0ffff17 	ldw	r3,-4(fp)
 8000b68:	d8000015 	stw	zero,0(sp)
 8000b6c:	e1fffd17 	ldw	r7,-12(fp)
 8000b70:	01820034 	movhi	r6,2048
 8000b74:	3182f704 	addi	r6,r6,3036
 8000b78:	180b883a 	mov	r5,r3
 8000b7c:	1009883a 	mov	r4,r2
 8000b80:	80004dc0 	call	80004dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8000b84:	e0bffd17 	ldw	r2,-12(fp)
 8000b88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8000b8c:	e0bffd17 	ldw	r2,-12(fp)
 8000b90:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8000b94:	d0e5a817 	ldw	r3,-26976(gp)
 8000b98:	e1fffd17 	ldw	r7,-12(fp)
 8000b9c:	01820034 	movhi	r6,2048
 8000ba0:	31837a04 	addi	r6,r6,3560
 8000ba4:	180b883a 	mov	r5,r3
 8000ba8:	1009883a 	mov	r4,r2
 8000bac:	80015140 	call	8001514 <alt_alarm_start>
 8000bb0:	1000040e 	bge	r2,zero,8000bc4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8000bb4:	e0fffd17 	ldw	r3,-12(fp)
 8000bb8:	00a00034 	movhi	r2,32768
 8000bbc:	10bfffc4 	addi	r2,r2,-1
 8000bc0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8000bc4:	0001883a 	nop
 8000bc8:	e037883a 	mov	sp,fp
 8000bcc:	dfc00117 	ldw	ra,4(sp)
 8000bd0:	df000017 	ldw	fp,0(sp)
 8000bd4:	dec00204 	addi	sp,sp,8
 8000bd8:	f800283a 	ret

08000bdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8000bdc:	defff804 	addi	sp,sp,-32
 8000be0:	df000715 	stw	fp,28(sp)
 8000be4:	df000704 	addi	fp,sp,28
 8000be8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8000bec:	e0bfff17 	ldw	r2,-4(fp)
 8000bf0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8000bf4:	e0bffb17 	ldw	r2,-20(fp)
 8000bf8:	10800017 	ldw	r2,0(r2)
 8000bfc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000c00:	e0bffc17 	ldw	r2,-16(fp)
 8000c04:	10800104 	addi	r2,r2,4
 8000c08:	10800037 	ldwio	r2,0(r2)
 8000c0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8000c10:	e0bffd17 	ldw	r2,-12(fp)
 8000c14:	1080c00c 	andi	r2,r2,768
 8000c18:	10006d26 	beq	r2,zero,8000dd0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8000c1c:	e0bffd17 	ldw	r2,-12(fp)
 8000c20:	1080400c 	andi	r2,r2,256
 8000c24:	10003526 	beq	r2,zero,8000cfc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8000c28:	00800074 	movhi	r2,1
 8000c2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000c30:	e0bffb17 	ldw	r2,-20(fp)
 8000c34:	10800a17 	ldw	r2,40(r2)
 8000c38:	10800044 	addi	r2,r2,1
 8000c3c:	1081ffcc 	andi	r2,r2,2047
 8000c40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8000c44:	e0bffb17 	ldw	r2,-20(fp)
 8000c48:	10c00b17 	ldw	r3,44(r2)
 8000c4c:	e0bffe17 	ldw	r2,-8(fp)
 8000c50:	18801526 	beq	r3,r2,8000ca8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8000c54:	e0bffc17 	ldw	r2,-16(fp)
 8000c58:	10800037 	ldwio	r2,0(r2)
 8000c5c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8000c60:	e0bff917 	ldw	r2,-28(fp)
 8000c64:	10a0000c 	andi	r2,r2,32768
 8000c68:	10001126 	beq	r2,zero,8000cb0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8000c6c:	e0bffb17 	ldw	r2,-20(fp)
 8000c70:	10800a17 	ldw	r2,40(r2)
 8000c74:	e0fff917 	ldw	r3,-28(fp)
 8000c78:	1809883a 	mov	r4,r3
 8000c7c:	e0fffb17 	ldw	r3,-20(fp)
 8000c80:	1885883a 	add	r2,r3,r2
 8000c84:	10800e04 	addi	r2,r2,56
 8000c88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000c8c:	e0bffb17 	ldw	r2,-20(fp)
 8000c90:	10800a17 	ldw	r2,40(r2)
 8000c94:	10800044 	addi	r2,r2,1
 8000c98:	10c1ffcc 	andi	r3,r2,2047
 8000c9c:	e0bffb17 	ldw	r2,-20(fp)
 8000ca0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8000ca4:	003fe206 	br	8000c30 <__alt_data_end+0xfc000c30>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8000ca8:	0001883a 	nop
 8000cac:	00000106 	br	8000cb4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8000cb0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8000cb4:	e0bff917 	ldw	r2,-28(fp)
 8000cb8:	10bfffec 	andhi	r2,r2,65535
 8000cbc:	10000f26 	beq	r2,zero,8000cfc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000cc0:	e0bffb17 	ldw	r2,-20(fp)
 8000cc4:	10c00817 	ldw	r3,32(r2)
 8000cc8:	00bfff84 	movi	r2,-2
 8000ccc:	1886703a 	and	r3,r3,r2
 8000cd0:	e0bffb17 	ldw	r2,-20(fp)
 8000cd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8000cd8:	e0bffc17 	ldw	r2,-16(fp)
 8000cdc:	10800104 	addi	r2,r2,4
 8000ce0:	1007883a 	mov	r3,r2
 8000ce4:	e0bffb17 	ldw	r2,-20(fp)
 8000ce8:	10800817 	ldw	r2,32(r2)
 8000cec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000cf0:	e0bffc17 	ldw	r2,-16(fp)
 8000cf4:	10800104 	addi	r2,r2,4
 8000cf8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8000cfc:	e0bffd17 	ldw	r2,-12(fp)
 8000d00:	1080800c 	andi	r2,r2,512
 8000d04:	103fbe26 	beq	r2,zero,8000c00 <__alt_data_end+0xfc000c00>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8000d08:	e0bffd17 	ldw	r2,-12(fp)
 8000d0c:	1004d43a 	srli	r2,r2,16
 8000d10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000d14:	00001406 	br	8000d68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8000d18:	e0bffc17 	ldw	r2,-16(fp)
 8000d1c:	e0fffb17 	ldw	r3,-20(fp)
 8000d20:	18c00d17 	ldw	r3,52(r3)
 8000d24:	e13ffb17 	ldw	r4,-20(fp)
 8000d28:	20c7883a 	add	r3,r4,r3
 8000d2c:	18c20e04 	addi	r3,r3,2104
 8000d30:	18c00003 	ldbu	r3,0(r3)
 8000d34:	18c03fcc 	andi	r3,r3,255
 8000d38:	18c0201c 	xori	r3,r3,128
 8000d3c:	18ffe004 	addi	r3,r3,-128
 8000d40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000d44:	e0bffb17 	ldw	r2,-20(fp)
 8000d48:	10800d17 	ldw	r2,52(r2)
 8000d4c:	10800044 	addi	r2,r2,1
 8000d50:	10c1ffcc 	andi	r3,r2,2047
 8000d54:	e0bffb17 	ldw	r2,-20(fp)
 8000d58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8000d5c:	e0bffa17 	ldw	r2,-24(fp)
 8000d60:	10bfffc4 	addi	r2,r2,-1
 8000d64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000d68:	e0bffa17 	ldw	r2,-24(fp)
 8000d6c:	10000526 	beq	r2,zero,8000d84 <altera_avalon_jtag_uart_irq+0x1a8>
 8000d70:	e0bffb17 	ldw	r2,-20(fp)
 8000d74:	10c00d17 	ldw	r3,52(r2)
 8000d78:	e0bffb17 	ldw	r2,-20(fp)
 8000d7c:	10800c17 	ldw	r2,48(r2)
 8000d80:	18bfe51e 	bne	r3,r2,8000d18 <__alt_data_end+0xfc000d18>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8000d84:	e0bffa17 	ldw	r2,-24(fp)
 8000d88:	103f9d26 	beq	r2,zero,8000c00 <__alt_data_end+0xfc000c00>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000d8c:	e0bffb17 	ldw	r2,-20(fp)
 8000d90:	10c00817 	ldw	r3,32(r2)
 8000d94:	00bfff44 	movi	r2,-3
 8000d98:	1886703a 	and	r3,r3,r2
 8000d9c:	e0bffb17 	ldw	r2,-20(fp)
 8000da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000da4:	e0bffb17 	ldw	r2,-20(fp)
 8000da8:	10800017 	ldw	r2,0(r2)
 8000dac:	10800104 	addi	r2,r2,4
 8000db0:	1007883a 	mov	r3,r2
 8000db4:	e0bffb17 	ldw	r2,-20(fp)
 8000db8:	10800817 	ldw	r2,32(r2)
 8000dbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000dc0:	e0bffc17 	ldw	r2,-16(fp)
 8000dc4:	10800104 	addi	r2,r2,4
 8000dc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8000dcc:	003f8c06 	br	8000c00 <__alt_data_end+0xfc000c00>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8000dd0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8000dd4:	0001883a 	nop
 8000dd8:	e037883a 	mov	sp,fp
 8000ddc:	df000017 	ldw	fp,0(sp)
 8000de0:	dec00104 	addi	sp,sp,4
 8000de4:	f800283a 	ret

08000de8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8000de8:	defff804 	addi	sp,sp,-32
 8000dec:	df000715 	stw	fp,28(sp)
 8000df0:	df000704 	addi	fp,sp,28
 8000df4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8000df8:	e0bffb17 	ldw	r2,-20(fp)
 8000dfc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8000e00:	e0bff917 	ldw	r2,-28(fp)
 8000e04:	10800017 	ldw	r2,0(r2)
 8000e08:	10800104 	addi	r2,r2,4
 8000e0c:	10800037 	ldwio	r2,0(r2)
 8000e10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8000e14:	e0bffa17 	ldw	r2,-24(fp)
 8000e18:	1081000c 	andi	r2,r2,1024
 8000e1c:	10000b26 	beq	r2,zero,8000e4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8000e20:	e0bff917 	ldw	r2,-28(fp)
 8000e24:	10800017 	ldw	r2,0(r2)
 8000e28:	10800104 	addi	r2,r2,4
 8000e2c:	1007883a 	mov	r3,r2
 8000e30:	e0bff917 	ldw	r2,-28(fp)
 8000e34:	10800817 	ldw	r2,32(r2)
 8000e38:	10810014 	ori	r2,r2,1024
 8000e3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8000e40:	e0bff917 	ldw	r2,-28(fp)
 8000e44:	10000915 	stw	zero,36(r2)
 8000e48:	00000a06 	br	8000e74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8000e4c:	e0bff917 	ldw	r2,-28(fp)
 8000e50:	10c00917 	ldw	r3,36(r2)
 8000e54:	00a00034 	movhi	r2,32768
 8000e58:	10bfff04 	addi	r2,r2,-4
 8000e5c:	10c00536 	bltu	r2,r3,8000e74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8000e60:	e0bff917 	ldw	r2,-28(fp)
 8000e64:	10800917 	ldw	r2,36(r2)
 8000e68:	10c00044 	addi	r3,r2,1
 8000e6c:	e0bff917 	ldw	r2,-28(fp)
 8000e70:	10c00915 	stw	r3,36(r2)
 8000e74:	d0a5a817 	ldw	r2,-26976(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8000e78:	e037883a 	mov	sp,fp
 8000e7c:	df000017 	ldw	fp,0(sp)
 8000e80:	dec00104 	addi	sp,sp,4
 8000e84:	f800283a 	ret

08000e88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8000e88:	defffd04 	addi	sp,sp,-12
 8000e8c:	df000215 	stw	fp,8(sp)
 8000e90:	df000204 	addi	fp,sp,8
 8000e94:	e13ffe15 	stw	r4,-8(fp)
 8000e98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000e9c:	00000506 	br	8000eb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8000ea0:	e0bfff17 	ldw	r2,-4(fp)
 8000ea4:	1090000c 	andi	r2,r2,16384
 8000ea8:	10000226 	beq	r2,zero,8000eb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8000eac:	00bffd44 	movi	r2,-11
 8000eb0:	00000b06 	br	8000ee0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000eb4:	e0bffe17 	ldw	r2,-8(fp)
 8000eb8:	10c00d17 	ldw	r3,52(r2)
 8000ebc:	e0bffe17 	ldw	r2,-8(fp)
 8000ec0:	10800c17 	ldw	r2,48(r2)
 8000ec4:	18800526 	beq	r3,r2,8000edc <altera_avalon_jtag_uart_close+0x54>
 8000ec8:	e0bffe17 	ldw	r2,-8(fp)
 8000ecc:	10c00917 	ldw	r3,36(r2)
 8000ed0:	e0bffe17 	ldw	r2,-8(fp)
 8000ed4:	10800117 	ldw	r2,4(r2)
 8000ed8:	18bff136 	bltu	r3,r2,8000ea0 <__alt_data_end+0xfc000ea0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8000edc:	0005883a 	mov	r2,zero
}
 8000ee0:	e037883a 	mov	sp,fp
 8000ee4:	df000017 	ldw	fp,0(sp)
 8000ee8:	dec00104 	addi	sp,sp,4
 8000eec:	f800283a 	ret

08000ef0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8000ef0:	defffa04 	addi	sp,sp,-24
 8000ef4:	df000515 	stw	fp,20(sp)
 8000ef8:	df000504 	addi	fp,sp,20
 8000efc:	e13ffd15 	stw	r4,-12(fp)
 8000f00:	e17ffe15 	stw	r5,-8(fp)
 8000f04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8000f08:	00bff9c4 	movi	r2,-25
 8000f0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8000f10:	e0bffe17 	ldw	r2,-8(fp)
 8000f14:	10da8060 	cmpeqi	r3,r2,27137
 8000f18:	1800031e 	bne	r3,zero,8000f28 <altera_avalon_jtag_uart_ioctl+0x38>
 8000f1c:	109a80a0 	cmpeqi	r2,r2,27138
 8000f20:	1000181e 	bne	r2,zero,8000f84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8000f24:	00002906 	br	8000fcc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8000f28:	e0bffd17 	ldw	r2,-12(fp)
 8000f2c:	10c00117 	ldw	r3,4(r2)
 8000f30:	00a00034 	movhi	r2,32768
 8000f34:	10bfffc4 	addi	r2,r2,-1
 8000f38:	18802126 	beq	r3,r2,8000fc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8000f3c:	e0bfff17 	ldw	r2,-4(fp)
 8000f40:	10800017 	ldw	r2,0(r2)
 8000f44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8000f48:	e0bffc17 	ldw	r2,-16(fp)
 8000f4c:	10800090 	cmplti	r2,r2,2
 8000f50:	1000061e 	bne	r2,zero,8000f6c <altera_avalon_jtag_uart_ioctl+0x7c>
 8000f54:	e0fffc17 	ldw	r3,-16(fp)
 8000f58:	00a00034 	movhi	r2,32768
 8000f5c:	10bfffc4 	addi	r2,r2,-1
 8000f60:	18800226 	beq	r3,r2,8000f6c <altera_avalon_jtag_uart_ioctl+0x7c>
 8000f64:	e0bffc17 	ldw	r2,-16(fp)
 8000f68:	00000206 	br	8000f74 <altera_avalon_jtag_uart_ioctl+0x84>
 8000f6c:	00a00034 	movhi	r2,32768
 8000f70:	10bfff84 	addi	r2,r2,-2
 8000f74:	e0fffd17 	ldw	r3,-12(fp)
 8000f78:	18800115 	stw	r2,4(r3)
      rc = 0;
 8000f7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000f80:	00000f06 	br	8000fc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8000f84:	e0bffd17 	ldw	r2,-12(fp)
 8000f88:	10c00117 	ldw	r3,4(r2)
 8000f8c:	00a00034 	movhi	r2,32768
 8000f90:	10bfffc4 	addi	r2,r2,-1
 8000f94:	18800c26 	beq	r3,r2,8000fc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8000f98:	e0bffd17 	ldw	r2,-12(fp)
 8000f9c:	10c00917 	ldw	r3,36(r2)
 8000fa0:	e0bffd17 	ldw	r2,-12(fp)
 8000fa4:	10800117 	ldw	r2,4(r2)
 8000fa8:	1885803a 	cmpltu	r2,r3,r2
 8000fac:	10c03fcc 	andi	r3,r2,255
 8000fb0:	e0bfff17 	ldw	r2,-4(fp)
 8000fb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8000fb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000fbc:	00000206 	br	8000fc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8000fc0:	0001883a 	nop
 8000fc4:	00000106 	br	8000fcc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8000fc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8000fcc:	e0bffb17 	ldw	r2,-20(fp)
}
 8000fd0:	e037883a 	mov	sp,fp
 8000fd4:	df000017 	ldw	fp,0(sp)
 8000fd8:	dec00104 	addi	sp,sp,4
 8000fdc:	f800283a 	ret

08000fe0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8000fe0:	defff304 	addi	sp,sp,-52
 8000fe4:	dfc00c15 	stw	ra,48(sp)
 8000fe8:	df000b15 	stw	fp,44(sp)
 8000fec:	df000b04 	addi	fp,sp,44
 8000ff0:	e13ffc15 	stw	r4,-16(fp)
 8000ff4:	e17ffd15 	stw	r5,-12(fp)
 8000ff8:	e1bffe15 	stw	r6,-8(fp)
 8000ffc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8001000:	e0bffd17 	ldw	r2,-12(fp)
 8001004:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8001008:	00004706 	br	8001128 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800100c:	e0bffc17 	ldw	r2,-16(fp)
 8001010:	10800a17 	ldw	r2,40(r2)
 8001014:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8001018:	e0bffc17 	ldw	r2,-16(fp)
 800101c:	10800b17 	ldw	r2,44(r2)
 8001020:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8001024:	e0fff717 	ldw	r3,-36(fp)
 8001028:	e0bff817 	ldw	r2,-32(fp)
 800102c:	18800536 	bltu	r3,r2,8001044 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8001030:	e0fff717 	ldw	r3,-36(fp)
 8001034:	e0bff817 	ldw	r2,-32(fp)
 8001038:	1885c83a 	sub	r2,r3,r2
 800103c:	e0bff615 	stw	r2,-40(fp)
 8001040:	00000406 	br	8001054 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8001044:	00c20004 	movi	r3,2048
 8001048:	e0bff817 	ldw	r2,-32(fp)
 800104c:	1885c83a 	sub	r2,r3,r2
 8001050:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8001054:	e0bff617 	ldw	r2,-40(fp)
 8001058:	10001e26 	beq	r2,zero,80010d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800105c:	e0fffe17 	ldw	r3,-8(fp)
 8001060:	e0bff617 	ldw	r2,-40(fp)
 8001064:	1880022e 	bgeu	r3,r2,8001070 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8001068:	e0bffe17 	ldw	r2,-8(fp)
 800106c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8001070:	e0bffc17 	ldw	r2,-16(fp)
 8001074:	10c00e04 	addi	r3,r2,56
 8001078:	e0bff817 	ldw	r2,-32(fp)
 800107c:	1885883a 	add	r2,r3,r2
 8001080:	e1bff617 	ldw	r6,-40(fp)
 8001084:	100b883a 	mov	r5,r2
 8001088:	e13ff517 	ldw	r4,-44(fp)
 800108c:	80022b80 	call	80022b8 <memcpy>
      ptr   += n;
 8001090:	e0fff517 	ldw	r3,-44(fp)
 8001094:	e0bff617 	ldw	r2,-40(fp)
 8001098:	1885883a 	add	r2,r3,r2
 800109c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80010a0:	e0fffe17 	ldw	r3,-8(fp)
 80010a4:	e0bff617 	ldw	r2,-40(fp)
 80010a8:	1885c83a 	sub	r2,r3,r2
 80010ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80010b0:	e0fff817 	ldw	r3,-32(fp)
 80010b4:	e0bff617 	ldw	r2,-40(fp)
 80010b8:	1885883a 	add	r2,r3,r2
 80010bc:	10c1ffcc 	andi	r3,r2,2047
 80010c0:	e0bffc17 	ldw	r2,-16(fp)
 80010c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80010c8:	e0bffe17 	ldw	r2,-8(fp)
 80010cc:	00bfcf16 	blt	zero,r2,800100c <__alt_data_end+0xfc00100c>
 80010d0:	00000106 	br	80010d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80010d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80010d8:	e0fff517 	ldw	r3,-44(fp)
 80010dc:	e0bffd17 	ldw	r2,-12(fp)
 80010e0:	1880141e 	bne	r3,r2,8001134 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80010e4:	e0bfff17 	ldw	r2,-4(fp)
 80010e8:	1090000c 	andi	r2,r2,16384
 80010ec:	1000131e 	bne	r2,zero,800113c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80010f0:	0001883a 	nop
 80010f4:	e0bffc17 	ldw	r2,-16(fp)
 80010f8:	10c00a17 	ldw	r3,40(r2)
 80010fc:	e0bff717 	ldw	r2,-36(fp)
 8001100:	1880051e 	bne	r3,r2,8001118 <altera_avalon_jtag_uart_read+0x138>
 8001104:	e0bffc17 	ldw	r2,-16(fp)
 8001108:	10c00917 	ldw	r3,36(r2)
 800110c:	e0bffc17 	ldw	r2,-16(fp)
 8001110:	10800117 	ldw	r2,4(r2)
 8001114:	18bff736 	bltu	r3,r2,80010f4 <__alt_data_end+0xfc0010f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8001118:	e0bffc17 	ldw	r2,-16(fp)
 800111c:	10c00a17 	ldw	r3,40(r2)
 8001120:	e0bff717 	ldw	r2,-36(fp)
 8001124:	18800726 	beq	r3,r2,8001144 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8001128:	e0bffe17 	ldw	r2,-8(fp)
 800112c:	00bfb716 	blt	zero,r2,800100c <__alt_data_end+0xfc00100c>
 8001130:	00000506 	br	8001148 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8001134:	0001883a 	nop
 8001138:	00000306 	br	8001148 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800113c:	0001883a 	nop
 8001140:	00000106 	br	8001148 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8001144:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8001148:	e0fff517 	ldw	r3,-44(fp)
 800114c:	e0bffd17 	ldw	r2,-12(fp)
 8001150:	18801826 	beq	r3,r2,80011b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001154:	0005303a 	rdctl	r2,status
 8001158:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800115c:	e0fffb17 	ldw	r3,-20(fp)
 8001160:	00bfff84 	movi	r2,-2
 8001164:	1884703a 	and	r2,r3,r2
 8001168:	1001703a 	wrctl	status,r2
  
  return context;
 800116c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8001170:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8001174:	e0bffc17 	ldw	r2,-16(fp)
 8001178:	10800817 	ldw	r2,32(r2)
 800117c:	10c00054 	ori	r3,r2,1
 8001180:	e0bffc17 	ldw	r2,-16(fp)
 8001184:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8001188:	e0bffc17 	ldw	r2,-16(fp)
 800118c:	10800017 	ldw	r2,0(r2)
 8001190:	10800104 	addi	r2,r2,4
 8001194:	1007883a 	mov	r3,r2
 8001198:	e0bffc17 	ldw	r2,-16(fp)
 800119c:	10800817 	ldw	r2,32(r2)
 80011a0:	18800035 	stwio	r2,0(r3)
 80011a4:	e0bffa17 	ldw	r2,-24(fp)
 80011a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80011ac:	e0bff917 	ldw	r2,-28(fp)
 80011b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80011b4:	e0fff517 	ldw	r3,-44(fp)
 80011b8:	e0bffd17 	ldw	r2,-12(fp)
 80011bc:	18800426 	beq	r3,r2,80011d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80011c0:	e0fff517 	ldw	r3,-44(fp)
 80011c4:	e0bffd17 	ldw	r2,-12(fp)
 80011c8:	1885c83a 	sub	r2,r3,r2
 80011cc:	00000606 	br	80011e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80011d0:	e0bfff17 	ldw	r2,-4(fp)
 80011d4:	1090000c 	andi	r2,r2,16384
 80011d8:	10000226 	beq	r2,zero,80011e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80011dc:	00bffd44 	movi	r2,-11
 80011e0:	00000106 	br	80011e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80011e4:	00bffec4 	movi	r2,-5
}
 80011e8:	e037883a 	mov	sp,fp
 80011ec:	dfc00117 	ldw	ra,4(sp)
 80011f0:	df000017 	ldw	fp,0(sp)
 80011f4:	dec00204 	addi	sp,sp,8
 80011f8:	f800283a 	ret

080011fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80011fc:	defff304 	addi	sp,sp,-52
 8001200:	dfc00c15 	stw	ra,48(sp)
 8001204:	df000b15 	stw	fp,44(sp)
 8001208:	df000b04 	addi	fp,sp,44
 800120c:	e13ffc15 	stw	r4,-16(fp)
 8001210:	e17ffd15 	stw	r5,-12(fp)
 8001214:	e1bffe15 	stw	r6,-8(fp)
 8001218:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800121c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8001220:	e0bffd17 	ldw	r2,-12(fp)
 8001224:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8001228:	00003706 	br	8001308 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800122c:	e0bffc17 	ldw	r2,-16(fp)
 8001230:	10800c17 	ldw	r2,48(r2)
 8001234:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8001238:	e0bffc17 	ldw	r2,-16(fp)
 800123c:	10800d17 	ldw	r2,52(r2)
 8001240:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8001244:	e0fff917 	ldw	r3,-28(fp)
 8001248:	e0bff517 	ldw	r2,-44(fp)
 800124c:	1880062e 	bgeu	r3,r2,8001268 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8001250:	e0fff517 	ldw	r3,-44(fp)
 8001254:	e0bff917 	ldw	r2,-28(fp)
 8001258:	1885c83a 	sub	r2,r3,r2
 800125c:	10bfffc4 	addi	r2,r2,-1
 8001260:	e0bff615 	stw	r2,-40(fp)
 8001264:	00000b06 	br	8001294 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8001268:	e0bff517 	ldw	r2,-44(fp)
 800126c:	10000526 	beq	r2,zero,8001284 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8001270:	00c20004 	movi	r3,2048
 8001274:	e0bff917 	ldw	r2,-28(fp)
 8001278:	1885c83a 	sub	r2,r3,r2
 800127c:	e0bff615 	stw	r2,-40(fp)
 8001280:	00000406 	br	8001294 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8001284:	00c1ffc4 	movi	r3,2047
 8001288:	e0bff917 	ldw	r2,-28(fp)
 800128c:	1885c83a 	sub	r2,r3,r2
 8001290:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8001294:	e0bff617 	ldw	r2,-40(fp)
 8001298:	10001e26 	beq	r2,zero,8001314 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800129c:	e0fffe17 	ldw	r3,-8(fp)
 80012a0:	e0bff617 	ldw	r2,-40(fp)
 80012a4:	1880022e 	bgeu	r3,r2,80012b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80012a8:	e0bffe17 	ldw	r2,-8(fp)
 80012ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80012b0:	e0bffc17 	ldw	r2,-16(fp)
 80012b4:	10c20e04 	addi	r3,r2,2104
 80012b8:	e0bff917 	ldw	r2,-28(fp)
 80012bc:	1885883a 	add	r2,r3,r2
 80012c0:	e1bff617 	ldw	r6,-40(fp)
 80012c4:	e17ffd17 	ldw	r5,-12(fp)
 80012c8:	1009883a 	mov	r4,r2
 80012cc:	80022b80 	call	80022b8 <memcpy>
      ptr   += n;
 80012d0:	e0fffd17 	ldw	r3,-12(fp)
 80012d4:	e0bff617 	ldw	r2,-40(fp)
 80012d8:	1885883a 	add	r2,r3,r2
 80012dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80012e0:	e0fffe17 	ldw	r3,-8(fp)
 80012e4:	e0bff617 	ldw	r2,-40(fp)
 80012e8:	1885c83a 	sub	r2,r3,r2
 80012ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80012f0:	e0fff917 	ldw	r3,-28(fp)
 80012f4:	e0bff617 	ldw	r2,-40(fp)
 80012f8:	1885883a 	add	r2,r3,r2
 80012fc:	10c1ffcc 	andi	r3,r2,2047
 8001300:	e0bffc17 	ldw	r2,-16(fp)
 8001304:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8001308:	e0bffe17 	ldw	r2,-8(fp)
 800130c:	00bfc716 	blt	zero,r2,800122c <__alt_data_end+0xfc00122c>
 8001310:	00000106 	br	8001318 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8001314:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001318:	0005303a 	rdctl	r2,status
 800131c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001320:	e0fffb17 	ldw	r3,-20(fp)
 8001324:	00bfff84 	movi	r2,-2
 8001328:	1884703a 	and	r2,r3,r2
 800132c:	1001703a 	wrctl	status,r2
  
  return context;
 8001330:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8001334:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8001338:	e0bffc17 	ldw	r2,-16(fp)
 800133c:	10800817 	ldw	r2,32(r2)
 8001340:	10c00094 	ori	r3,r2,2
 8001344:	e0bffc17 	ldw	r2,-16(fp)
 8001348:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800134c:	e0bffc17 	ldw	r2,-16(fp)
 8001350:	10800017 	ldw	r2,0(r2)
 8001354:	10800104 	addi	r2,r2,4
 8001358:	1007883a 	mov	r3,r2
 800135c:	e0bffc17 	ldw	r2,-16(fp)
 8001360:	10800817 	ldw	r2,32(r2)
 8001364:	18800035 	stwio	r2,0(r3)
 8001368:	e0bffa17 	ldw	r2,-24(fp)
 800136c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001370:	e0bff817 	ldw	r2,-32(fp)
 8001374:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8001378:	e0bffe17 	ldw	r2,-8(fp)
 800137c:	0080100e 	bge	zero,r2,80013c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8001380:	e0bfff17 	ldw	r2,-4(fp)
 8001384:	1090000c 	andi	r2,r2,16384
 8001388:	1000101e 	bne	r2,zero,80013cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800138c:	0001883a 	nop
 8001390:	e0bffc17 	ldw	r2,-16(fp)
 8001394:	10c00d17 	ldw	r3,52(r2)
 8001398:	e0bff517 	ldw	r2,-44(fp)
 800139c:	1880051e 	bne	r3,r2,80013b4 <altera_avalon_jtag_uart_write+0x1b8>
 80013a0:	e0bffc17 	ldw	r2,-16(fp)
 80013a4:	10c00917 	ldw	r3,36(r2)
 80013a8:	e0bffc17 	ldw	r2,-16(fp)
 80013ac:	10800117 	ldw	r2,4(r2)
 80013b0:	18bff736 	bltu	r3,r2,8001390 <__alt_data_end+0xfc001390>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80013b4:	e0bffc17 	ldw	r2,-16(fp)
 80013b8:	10800917 	ldw	r2,36(r2)
 80013bc:	1000051e 	bne	r2,zero,80013d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80013c0:	e0bffe17 	ldw	r2,-8(fp)
 80013c4:	00bfd016 	blt	zero,r2,8001308 <__alt_data_end+0xfc001308>
 80013c8:	00000306 	br	80013d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80013cc:	0001883a 	nop
 80013d0:	00000106 	br	80013d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80013d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80013d8:	e0fffd17 	ldw	r3,-12(fp)
 80013dc:	e0bff717 	ldw	r2,-36(fp)
 80013e0:	18800426 	beq	r3,r2,80013f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80013e4:	e0fffd17 	ldw	r3,-12(fp)
 80013e8:	e0bff717 	ldw	r2,-36(fp)
 80013ec:	1885c83a 	sub	r2,r3,r2
 80013f0:	00000606 	br	800140c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80013f4:	e0bfff17 	ldw	r2,-4(fp)
 80013f8:	1090000c 	andi	r2,r2,16384
 80013fc:	10000226 	beq	r2,zero,8001408 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8001400:	00bffd44 	movi	r2,-11
 8001404:	00000106 	br	800140c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8001408:	00bffec4 	movi	r2,-5
}
 800140c:	e037883a 	mov	sp,fp
 8001410:	dfc00117 	ldw	ra,4(sp)
 8001414:	df000017 	ldw	fp,0(sp)
 8001418:	dec00204 	addi	sp,sp,8
 800141c:	f800283a 	ret

08001420 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8001420:	defffa04 	addi	sp,sp,-24
 8001424:	dfc00515 	stw	ra,20(sp)
 8001428:	df000415 	stw	fp,16(sp)
 800142c:	df000404 	addi	fp,sp,16
 8001430:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8001434:	0007883a 	mov	r3,zero
 8001438:	e0bfff17 	ldw	r2,-4(fp)
 800143c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8001440:	e0bfff17 	ldw	r2,-4(fp)
 8001444:	10800104 	addi	r2,r2,4
 8001448:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800144c:	0005303a 	rdctl	r2,status
 8001450:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001454:	e0fffd17 	ldw	r3,-12(fp)
 8001458:	00bfff84 	movi	r2,-2
 800145c:	1884703a 	and	r2,r3,r2
 8001460:	1001703a 	wrctl	status,r2
  
  return context;
 8001464:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8001468:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800146c:	8001e880 	call	8001e88 <alt_tick>
 8001470:	e0bffc17 	ldw	r2,-16(fp)
 8001474:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001478:	e0bffe17 	ldw	r2,-8(fp)
 800147c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8001480:	0001883a 	nop
 8001484:	e037883a 	mov	sp,fp
 8001488:	dfc00117 	ldw	ra,4(sp)
 800148c:	df000017 	ldw	fp,0(sp)
 8001490:	dec00204 	addi	sp,sp,8
 8001494:	f800283a 	ret

08001498 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8001498:	defff804 	addi	sp,sp,-32
 800149c:	dfc00715 	stw	ra,28(sp)
 80014a0:	df000615 	stw	fp,24(sp)
 80014a4:	df000604 	addi	fp,sp,24
 80014a8:	e13ffc15 	stw	r4,-16(fp)
 80014ac:	e17ffd15 	stw	r5,-12(fp)
 80014b0:	e1bffe15 	stw	r6,-8(fp)
 80014b4:	e1ffff15 	stw	r7,-4(fp)
 80014b8:	e0bfff17 	ldw	r2,-4(fp)
 80014bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80014c0:	d0a5a817 	ldw	r2,-26976(gp)
 80014c4:	1000021e 	bne	r2,zero,80014d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80014c8:	e0bffb17 	ldw	r2,-20(fp)
 80014cc:	d0a5a815 	stw	r2,-26976(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80014d0:	e0bffc17 	ldw	r2,-16(fp)
 80014d4:	10800104 	addi	r2,r2,4
 80014d8:	00c001c4 	movi	r3,7
 80014dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80014e0:	d8000015 	stw	zero,0(sp)
 80014e4:	e1fffc17 	ldw	r7,-16(fp)
 80014e8:	01820034 	movhi	r6,2048
 80014ec:	31850804 	addi	r6,r6,5152
 80014f0:	e17ffe17 	ldw	r5,-8(fp)
 80014f4:	e13ffd17 	ldw	r4,-12(fp)
 80014f8:	80004dc0 	call	80004dc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80014fc:	0001883a 	nop
 8001500:	e037883a 	mov	sp,fp
 8001504:	dfc00117 	ldw	ra,4(sp)
 8001508:	df000017 	ldw	fp,0(sp)
 800150c:	dec00204 	addi	sp,sp,8
 8001510:	f800283a 	ret

08001514 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8001514:	defff504 	addi	sp,sp,-44
 8001518:	df000a15 	stw	fp,40(sp)
 800151c:	df000a04 	addi	fp,sp,40
 8001520:	e13ffc15 	stw	r4,-16(fp)
 8001524:	e17ffd15 	stw	r5,-12(fp)
 8001528:	e1bffe15 	stw	r6,-8(fp)
 800152c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8001530:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001534:	d0a5a817 	ldw	r2,-26976(gp)
  
  if (alt_ticks_per_second ())
 8001538:	10003c26 	beq	r2,zero,800162c <alt_alarm_start+0x118>
  {
    if (alarm)
 800153c:	e0bffc17 	ldw	r2,-16(fp)
 8001540:	10003826 	beq	r2,zero,8001624 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8001544:	e0bffc17 	ldw	r2,-16(fp)
 8001548:	e0fffe17 	ldw	r3,-8(fp)
 800154c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8001550:	e0bffc17 	ldw	r2,-16(fp)
 8001554:	e0ffff17 	ldw	r3,-4(fp)
 8001558:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800155c:	0005303a 	rdctl	r2,status
 8001560:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001564:	e0fff917 	ldw	r3,-28(fp)
 8001568:	00bfff84 	movi	r2,-2
 800156c:	1884703a 	and	r2,r3,r2
 8001570:	1001703a 	wrctl	status,r2
  
  return context;
 8001574:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8001578:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800157c:	d0a5a917 	ldw	r2,-26972(gp)
      
      current_nticks = alt_nticks();
 8001580:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8001584:	e0fffd17 	ldw	r3,-12(fp)
 8001588:	e0bff617 	ldw	r2,-40(fp)
 800158c:	1885883a 	add	r2,r3,r2
 8001590:	10c00044 	addi	r3,r2,1
 8001594:	e0bffc17 	ldw	r2,-16(fp)
 8001598:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800159c:	e0bffc17 	ldw	r2,-16(fp)
 80015a0:	10c00217 	ldw	r3,8(r2)
 80015a4:	e0bff617 	ldw	r2,-40(fp)
 80015a8:	1880042e 	bgeu	r3,r2,80015bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80015ac:	e0bffc17 	ldw	r2,-16(fp)
 80015b0:	00c00044 	movi	r3,1
 80015b4:	10c00405 	stb	r3,16(r2)
 80015b8:	00000206 	br	80015c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80015bc:	e0bffc17 	ldw	r2,-16(fp)
 80015c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80015c4:	e0bffc17 	ldw	r2,-16(fp)
 80015c8:	d0e00704 	addi	r3,gp,-32740
 80015cc:	e0fffa15 	stw	r3,-24(fp)
 80015d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80015d4:	e0bffb17 	ldw	r2,-20(fp)
 80015d8:	e0fffa17 	ldw	r3,-24(fp)
 80015dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80015e0:	e0bffa17 	ldw	r2,-24(fp)
 80015e4:	10c00017 	ldw	r3,0(r2)
 80015e8:	e0bffb17 	ldw	r2,-20(fp)
 80015ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80015f0:	e0bffa17 	ldw	r2,-24(fp)
 80015f4:	10800017 	ldw	r2,0(r2)
 80015f8:	e0fffb17 	ldw	r3,-20(fp)
 80015fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8001600:	e0bffa17 	ldw	r2,-24(fp)
 8001604:	e0fffb17 	ldw	r3,-20(fp)
 8001608:	10c00015 	stw	r3,0(r2)
 800160c:	e0bff817 	ldw	r2,-32(fp)
 8001610:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001614:	e0bff717 	ldw	r2,-36(fp)
 8001618:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800161c:	0005883a 	mov	r2,zero
 8001620:	00000306 	br	8001630 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8001624:	00bffa84 	movi	r2,-22
 8001628:	00000106 	br	8001630 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800162c:	00bfde84 	movi	r2,-134
  }
}
 8001630:	e037883a 	mov	sp,fp
 8001634:	df000017 	ldw	fp,0(sp)
 8001638:	dec00104 	addi	sp,sp,4
 800163c:	f800283a 	ret

08001640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001640:	defffe04 	addi	sp,sp,-8
 8001644:	dfc00115 	stw	ra,4(sp)
 8001648:	df000015 	stw	fp,0(sp)
 800164c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001650:	d0a00617 	ldw	r2,-32744(gp)
 8001654:	10000326 	beq	r2,zero,8001664 <alt_get_errno+0x24>
 8001658:	d0a00617 	ldw	r2,-32744(gp)
 800165c:	103ee83a 	callr	r2
 8001660:	00000106 	br	8001668 <alt_get_errno+0x28>
 8001664:	d0a5aa04 	addi	r2,gp,-26968
}
 8001668:	e037883a 	mov	sp,fp
 800166c:	dfc00117 	ldw	ra,4(sp)
 8001670:	df000017 	ldw	fp,0(sp)
 8001674:	dec00204 	addi	sp,sp,8
 8001678:	f800283a 	ret

0800167c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800167c:	defffb04 	addi	sp,sp,-20
 8001680:	dfc00415 	stw	ra,16(sp)
 8001684:	df000315 	stw	fp,12(sp)
 8001688:	df000304 	addi	fp,sp,12
 800168c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8001690:	e0bfff17 	ldw	r2,-4(fp)
 8001694:	10000616 	blt	r2,zero,80016b0 <close+0x34>
 8001698:	e0bfff17 	ldw	r2,-4(fp)
 800169c:	10c00324 	muli	r3,r2,12
 80016a0:	00820034 	movhi	r2,2048
 80016a4:	108e0904 	addi	r2,r2,14372
 80016a8:	1885883a 	add	r2,r3,r2
 80016ac:	00000106 	br	80016b4 <close+0x38>
 80016b0:	0005883a 	mov	r2,zero
 80016b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80016b8:	e0bffd17 	ldw	r2,-12(fp)
 80016bc:	10001926 	beq	r2,zero,8001724 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80016c0:	e0bffd17 	ldw	r2,-12(fp)
 80016c4:	10800017 	ldw	r2,0(r2)
 80016c8:	10800417 	ldw	r2,16(r2)
 80016cc:	10000626 	beq	r2,zero,80016e8 <close+0x6c>
 80016d0:	e0bffd17 	ldw	r2,-12(fp)
 80016d4:	10800017 	ldw	r2,0(r2)
 80016d8:	10800417 	ldw	r2,16(r2)
 80016dc:	e13ffd17 	ldw	r4,-12(fp)
 80016e0:	103ee83a 	callr	r2
 80016e4:	00000106 	br	80016ec <close+0x70>
 80016e8:	0005883a 	mov	r2,zero
 80016ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80016f0:	e13fff17 	ldw	r4,-4(fp)
 80016f4:	8001d880 	call	8001d88 <alt_release_fd>
    if (rval < 0)
 80016f8:	e0bffe17 	ldw	r2,-8(fp)
 80016fc:	1000070e 	bge	r2,zero,800171c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8001700:	80016400 	call	8001640 <alt_get_errno>
 8001704:	1007883a 	mov	r3,r2
 8001708:	e0bffe17 	ldw	r2,-8(fp)
 800170c:	0085c83a 	sub	r2,zero,r2
 8001710:	18800015 	stw	r2,0(r3)
      return -1;
 8001714:	00bfffc4 	movi	r2,-1
 8001718:	00000706 	br	8001738 <close+0xbc>
    }
    return 0;
 800171c:	0005883a 	mov	r2,zero
 8001720:	00000506 	br	8001738 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8001724:	80016400 	call	8001640 <alt_get_errno>
 8001728:	1007883a 	mov	r3,r2
 800172c:	00801444 	movi	r2,81
 8001730:	18800015 	stw	r2,0(r3)
    return -1;
 8001734:	00bfffc4 	movi	r2,-1
  }
}
 8001738:	e037883a 	mov	sp,fp
 800173c:	dfc00117 	ldw	ra,4(sp)
 8001740:	df000017 	ldw	fp,0(sp)
 8001744:	dec00204 	addi	sp,sp,8
 8001748:	f800283a 	ret

0800174c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800174c:	deffff04 	addi	sp,sp,-4
 8001750:	df000015 	stw	fp,0(sp)
 8001754:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8001758:	0001883a 	nop
 800175c:	e037883a 	mov	sp,fp
 8001760:	df000017 	ldw	fp,0(sp)
 8001764:	dec00104 	addi	sp,sp,4
 8001768:	f800283a 	ret

0800176c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800176c:	defffc04 	addi	sp,sp,-16
 8001770:	df000315 	stw	fp,12(sp)
 8001774:	df000304 	addi	fp,sp,12
 8001778:	e13ffd15 	stw	r4,-12(fp)
 800177c:	e17ffe15 	stw	r5,-8(fp)
 8001780:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8001784:	e0bfff17 	ldw	r2,-4(fp)
}
 8001788:	e037883a 	mov	sp,fp
 800178c:	df000017 	ldw	fp,0(sp)
 8001790:	dec00104 	addi	sp,sp,4
 8001794:	f800283a 	ret

08001798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001798:	defffe04 	addi	sp,sp,-8
 800179c:	dfc00115 	stw	ra,4(sp)
 80017a0:	df000015 	stw	fp,0(sp)
 80017a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80017a8:	d0a00617 	ldw	r2,-32744(gp)
 80017ac:	10000326 	beq	r2,zero,80017bc <alt_get_errno+0x24>
 80017b0:	d0a00617 	ldw	r2,-32744(gp)
 80017b4:	103ee83a 	callr	r2
 80017b8:	00000106 	br	80017c0 <alt_get_errno+0x28>
 80017bc:	d0a5aa04 	addi	r2,gp,-26968
}
 80017c0:	e037883a 	mov	sp,fp
 80017c4:	dfc00117 	ldw	ra,4(sp)
 80017c8:	df000017 	ldw	fp,0(sp)
 80017cc:	dec00204 	addi	sp,sp,8
 80017d0:	f800283a 	ret

080017d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80017d4:	defffa04 	addi	sp,sp,-24
 80017d8:	dfc00515 	stw	ra,20(sp)
 80017dc:	df000415 	stw	fp,16(sp)
 80017e0:	df000404 	addi	fp,sp,16
 80017e4:	e13ffe15 	stw	r4,-8(fp)
 80017e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80017ec:	e0bffe17 	ldw	r2,-8(fp)
 80017f0:	10000326 	beq	r2,zero,8001800 <alt_dev_llist_insert+0x2c>
 80017f4:	e0bffe17 	ldw	r2,-8(fp)
 80017f8:	10800217 	ldw	r2,8(r2)
 80017fc:	1000061e 	bne	r2,zero,8001818 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8001800:	80017980 	call	8001798 <alt_get_errno>
 8001804:	1007883a 	mov	r3,r2
 8001808:	00800584 	movi	r2,22
 800180c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8001810:	00bffa84 	movi	r2,-22
 8001814:	00001306 	br	8001864 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8001818:	e0bffe17 	ldw	r2,-8(fp)
 800181c:	e0ffff17 	ldw	r3,-4(fp)
 8001820:	e0fffc15 	stw	r3,-16(fp)
 8001824:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8001828:	e0bffd17 	ldw	r2,-12(fp)
 800182c:	e0fffc17 	ldw	r3,-16(fp)
 8001830:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8001834:	e0bffc17 	ldw	r2,-16(fp)
 8001838:	10c00017 	ldw	r3,0(r2)
 800183c:	e0bffd17 	ldw	r2,-12(fp)
 8001840:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8001844:	e0bffc17 	ldw	r2,-16(fp)
 8001848:	10800017 	ldw	r2,0(r2)
 800184c:	e0fffd17 	ldw	r3,-12(fp)
 8001850:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8001854:	e0bffc17 	ldw	r2,-16(fp)
 8001858:	e0fffd17 	ldw	r3,-12(fp)
 800185c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8001860:	0005883a 	mov	r2,zero
}
 8001864:	e037883a 	mov	sp,fp
 8001868:	dfc00117 	ldw	ra,4(sp)
 800186c:	df000017 	ldw	fp,0(sp)
 8001870:	dec00204 	addi	sp,sp,8
 8001874:	f800283a 	ret

08001878 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8001878:	defffd04 	addi	sp,sp,-12
 800187c:	dfc00215 	stw	ra,8(sp)
 8001880:	df000115 	stw	fp,4(sp)
 8001884:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8001888:	00820034 	movhi	r2,2048
 800188c:	1089d804 	addi	r2,r2,10080
 8001890:	e0bfff15 	stw	r2,-4(fp)
 8001894:	00000606 	br	80018b0 <_do_ctors+0x38>
        (*ctor) (); 
 8001898:	e0bfff17 	ldw	r2,-4(fp)
 800189c:	10800017 	ldw	r2,0(r2)
 80018a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80018a4:	e0bfff17 	ldw	r2,-4(fp)
 80018a8:	10bfff04 	addi	r2,r2,-4
 80018ac:	e0bfff15 	stw	r2,-4(fp)
 80018b0:	e0ffff17 	ldw	r3,-4(fp)
 80018b4:	00820034 	movhi	r2,2048
 80018b8:	1089d904 	addi	r2,r2,10084
 80018bc:	18bff62e 	bgeu	r3,r2,8001898 <__alt_data_end+0xfc001898>
        (*ctor) (); 
}
 80018c0:	0001883a 	nop
 80018c4:	e037883a 	mov	sp,fp
 80018c8:	dfc00117 	ldw	ra,4(sp)
 80018cc:	df000017 	ldw	fp,0(sp)
 80018d0:	dec00204 	addi	sp,sp,8
 80018d4:	f800283a 	ret

080018d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80018d8:	defffd04 	addi	sp,sp,-12
 80018dc:	dfc00215 	stw	ra,8(sp)
 80018e0:	df000115 	stw	fp,4(sp)
 80018e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80018e8:	00820034 	movhi	r2,2048
 80018ec:	1089d804 	addi	r2,r2,10080
 80018f0:	e0bfff15 	stw	r2,-4(fp)
 80018f4:	00000606 	br	8001910 <_do_dtors+0x38>
        (*dtor) (); 
 80018f8:	e0bfff17 	ldw	r2,-4(fp)
 80018fc:	10800017 	ldw	r2,0(r2)
 8001900:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8001904:	e0bfff17 	ldw	r2,-4(fp)
 8001908:	10bfff04 	addi	r2,r2,-4
 800190c:	e0bfff15 	stw	r2,-4(fp)
 8001910:	e0ffff17 	ldw	r3,-4(fp)
 8001914:	00820034 	movhi	r2,2048
 8001918:	1089d904 	addi	r2,r2,10084
 800191c:	18bff62e 	bgeu	r3,r2,80018f8 <__alt_data_end+0xfc0018f8>
        (*dtor) (); 
}
 8001920:	0001883a 	nop
 8001924:	e037883a 	mov	sp,fp
 8001928:	dfc00117 	ldw	ra,4(sp)
 800192c:	df000017 	ldw	fp,0(sp)
 8001930:	dec00204 	addi	sp,sp,8
 8001934:	f800283a 	ret

08001938 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8001938:	deffff04 	addi	sp,sp,-4
 800193c:	df000015 	stw	fp,0(sp)
 8001940:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8001944:	0001883a 	nop
 8001948:	e037883a 	mov	sp,fp
 800194c:	df000017 	ldw	fp,0(sp)
 8001950:	dec00104 	addi	sp,sp,4
 8001954:	f800283a 	ret

08001958 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8001958:	defffe04 	addi	sp,sp,-8
 800195c:	df000115 	stw	fp,4(sp)
 8001960:	df000104 	addi	fp,sp,4
 8001964:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8001968:	e0bfff17 	ldw	r2,-4(fp)
 800196c:	10bffe84 	addi	r2,r2,-6
 8001970:	10c00428 	cmpgeui	r3,r2,16
 8001974:	18001a1e 	bne	r3,zero,80019e0 <alt_exception_cause_generated_bad_addr+0x88>
 8001978:	100690ba 	slli	r3,r2,2
 800197c:	00820034 	movhi	r2,2048
 8001980:	10866404 	addi	r2,r2,6544
 8001984:	1885883a 	add	r2,r3,r2
 8001988:	10800017 	ldw	r2,0(r2)
 800198c:	1000683a 	jmp	r2
 8001990:	080019d0 	cmplti	zero,at,103
 8001994:	080019d0 	cmplti	zero,at,103
 8001998:	080019e0 	cmpeqi	zero,at,103
 800199c:	080019e0 	cmpeqi	zero,at,103
 80019a0:	080019e0 	cmpeqi	zero,at,103
 80019a4:	080019d0 	cmplti	zero,at,103
 80019a8:	080019d8 	cmpnei	zero,at,103
 80019ac:	080019e0 	cmpeqi	zero,at,103
 80019b0:	080019d0 	cmplti	zero,at,103
 80019b4:	080019d0 	cmplti	zero,at,103
 80019b8:	080019e0 	cmpeqi	zero,at,103
 80019bc:	080019d0 	cmplti	zero,at,103
 80019c0:	080019d8 	cmpnei	zero,at,103
 80019c4:	080019e0 	cmpeqi	zero,at,103
 80019c8:	080019e0 	cmpeqi	zero,at,103
 80019cc:	080019d0 	cmplti	zero,at,103
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80019d0:	00800044 	movi	r2,1
 80019d4:	00000306 	br	80019e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80019d8:	0005883a 	mov	r2,zero
 80019dc:	00000106 	br	80019e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80019e0:	0005883a 	mov	r2,zero
  }
}
 80019e4:	e037883a 	mov	sp,fp
 80019e8:	df000017 	ldw	fp,0(sp)
 80019ec:	dec00104 	addi	sp,sp,4
 80019f0:	f800283a 	ret

080019f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80019f4:	defff904 	addi	sp,sp,-28
 80019f8:	dfc00615 	stw	ra,24(sp)
 80019fc:	df000515 	stw	fp,20(sp)
 8001a00:	df000504 	addi	fp,sp,20
 8001a04:	e13ffc15 	stw	r4,-16(fp)
 8001a08:	e17ffd15 	stw	r5,-12(fp)
 8001a0c:	e1bffe15 	stw	r6,-8(fp)
 8001a10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8001a14:	e1bfff17 	ldw	r6,-4(fp)
 8001a18:	e17ffe17 	ldw	r5,-8(fp)
 8001a1c:	e13ffd17 	ldw	r4,-12(fp)
 8001a20:	8001c340 	call	8001c34 <open>
 8001a24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8001a28:	e0bffb17 	ldw	r2,-20(fp)
 8001a2c:	10001c16 	blt	r2,zero,8001aa0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8001a30:	00820034 	movhi	r2,2048
 8001a34:	108e0904 	addi	r2,r2,14372
 8001a38:	e0fffb17 	ldw	r3,-20(fp)
 8001a3c:	18c00324 	muli	r3,r3,12
 8001a40:	10c5883a 	add	r2,r2,r3
 8001a44:	10c00017 	ldw	r3,0(r2)
 8001a48:	e0bffc17 	ldw	r2,-16(fp)
 8001a4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8001a50:	00820034 	movhi	r2,2048
 8001a54:	108e0904 	addi	r2,r2,14372
 8001a58:	e0fffb17 	ldw	r3,-20(fp)
 8001a5c:	18c00324 	muli	r3,r3,12
 8001a60:	10c5883a 	add	r2,r2,r3
 8001a64:	10800104 	addi	r2,r2,4
 8001a68:	10c00017 	ldw	r3,0(r2)
 8001a6c:	e0bffc17 	ldw	r2,-16(fp)
 8001a70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8001a74:	00820034 	movhi	r2,2048
 8001a78:	108e0904 	addi	r2,r2,14372
 8001a7c:	e0fffb17 	ldw	r3,-20(fp)
 8001a80:	18c00324 	muli	r3,r3,12
 8001a84:	10c5883a 	add	r2,r2,r3
 8001a88:	10800204 	addi	r2,r2,8
 8001a8c:	10c00017 	ldw	r3,0(r2)
 8001a90:	e0bffc17 	ldw	r2,-16(fp)
 8001a94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8001a98:	e13ffb17 	ldw	r4,-20(fp)
 8001a9c:	8001d880 	call	8001d88 <alt_release_fd>
  }
} 
 8001aa0:	0001883a 	nop
 8001aa4:	e037883a 	mov	sp,fp
 8001aa8:	dfc00117 	ldw	ra,4(sp)
 8001aac:	df000017 	ldw	fp,0(sp)
 8001ab0:	dec00204 	addi	sp,sp,8
 8001ab4:	f800283a 	ret

08001ab8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8001ab8:	defffb04 	addi	sp,sp,-20
 8001abc:	dfc00415 	stw	ra,16(sp)
 8001ac0:	df000315 	stw	fp,12(sp)
 8001ac4:	df000304 	addi	fp,sp,12
 8001ac8:	e13ffd15 	stw	r4,-12(fp)
 8001acc:	e17ffe15 	stw	r5,-8(fp)
 8001ad0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8001ad4:	01c07fc4 	movi	r7,511
 8001ad8:	01800044 	movi	r6,1
 8001adc:	e17ffd17 	ldw	r5,-12(fp)
 8001ae0:	01020034 	movhi	r4,2048
 8001ae4:	210e0c04 	addi	r4,r4,14384
 8001ae8:	80019f40 	call	80019f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8001aec:	01c07fc4 	movi	r7,511
 8001af0:	000d883a 	mov	r6,zero
 8001af4:	e17ffe17 	ldw	r5,-8(fp)
 8001af8:	01020034 	movhi	r4,2048
 8001afc:	210e0904 	addi	r4,r4,14372
 8001b00:	80019f40 	call	80019f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8001b04:	01c07fc4 	movi	r7,511
 8001b08:	01800044 	movi	r6,1
 8001b0c:	e17fff17 	ldw	r5,-4(fp)
 8001b10:	01020034 	movhi	r4,2048
 8001b14:	210e0f04 	addi	r4,r4,14396
 8001b18:	80019f40 	call	80019f4 <alt_open_fd>
}  
 8001b1c:	0001883a 	nop
 8001b20:	e037883a 	mov	sp,fp
 8001b24:	dfc00117 	ldw	ra,4(sp)
 8001b28:	df000017 	ldw	fp,0(sp)
 8001b2c:	dec00204 	addi	sp,sp,8
 8001b30:	f800283a 	ret

08001b34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001b34:	defffe04 	addi	sp,sp,-8
 8001b38:	dfc00115 	stw	ra,4(sp)
 8001b3c:	df000015 	stw	fp,0(sp)
 8001b40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001b44:	d0a00617 	ldw	r2,-32744(gp)
 8001b48:	10000326 	beq	r2,zero,8001b58 <alt_get_errno+0x24>
 8001b4c:	d0a00617 	ldw	r2,-32744(gp)
 8001b50:	103ee83a 	callr	r2
 8001b54:	00000106 	br	8001b5c <alt_get_errno+0x28>
 8001b58:	d0a5aa04 	addi	r2,gp,-26968
}
 8001b5c:	e037883a 	mov	sp,fp
 8001b60:	dfc00117 	ldw	ra,4(sp)
 8001b64:	df000017 	ldw	fp,0(sp)
 8001b68:	dec00204 	addi	sp,sp,8
 8001b6c:	f800283a 	ret

08001b70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8001b70:	defffd04 	addi	sp,sp,-12
 8001b74:	df000215 	stw	fp,8(sp)
 8001b78:	df000204 	addi	fp,sp,8
 8001b7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8001b80:	e0bfff17 	ldw	r2,-4(fp)
 8001b84:	10800217 	ldw	r2,8(r2)
 8001b88:	10d00034 	orhi	r3,r2,16384
 8001b8c:	e0bfff17 	ldw	r2,-4(fp)
 8001b90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001b94:	e03ffe15 	stw	zero,-8(fp)
 8001b98:	00001d06 	br	8001c10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001b9c:	00820034 	movhi	r2,2048
 8001ba0:	108e0904 	addi	r2,r2,14372
 8001ba4:	e0fffe17 	ldw	r3,-8(fp)
 8001ba8:	18c00324 	muli	r3,r3,12
 8001bac:	10c5883a 	add	r2,r2,r3
 8001bb0:	10c00017 	ldw	r3,0(r2)
 8001bb4:	e0bfff17 	ldw	r2,-4(fp)
 8001bb8:	10800017 	ldw	r2,0(r2)
 8001bbc:	1880111e 	bne	r3,r2,8001c04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8001bc0:	00820034 	movhi	r2,2048
 8001bc4:	108e0904 	addi	r2,r2,14372
 8001bc8:	e0fffe17 	ldw	r3,-8(fp)
 8001bcc:	18c00324 	muli	r3,r3,12
 8001bd0:	10c5883a 	add	r2,r2,r3
 8001bd4:	10800204 	addi	r2,r2,8
 8001bd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001bdc:	1000090e 	bge	r2,zero,8001c04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8001be0:	e0bffe17 	ldw	r2,-8(fp)
 8001be4:	10c00324 	muli	r3,r2,12
 8001be8:	00820034 	movhi	r2,2048
 8001bec:	108e0904 	addi	r2,r2,14372
 8001bf0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8001bf4:	e0bfff17 	ldw	r2,-4(fp)
 8001bf8:	18800226 	beq	r3,r2,8001c04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8001bfc:	00bffcc4 	movi	r2,-13
 8001c00:	00000806 	br	8001c24 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001c04:	e0bffe17 	ldw	r2,-8(fp)
 8001c08:	10800044 	addi	r2,r2,1
 8001c0c:	e0bffe15 	stw	r2,-8(fp)
 8001c10:	d0a00517 	ldw	r2,-32748(gp)
 8001c14:	1007883a 	mov	r3,r2
 8001c18:	e0bffe17 	ldw	r2,-8(fp)
 8001c1c:	18bfdf2e 	bgeu	r3,r2,8001b9c <__alt_data_end+0xfc001b9c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8001c20:	0005883a 	mov	r2,zero
}
 8001c24:	e037883a 	mov	sp,fp
 8001c28:	df000017 	ldw	fp,0(sp)
 8001c2c:	dec00104 	addi	sp,sp,4
 8001c30:	f800283a 	ret

08001c34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8001c34:	defff604 	addi	sp,sp,-40
 8001c38:	dfc00915 	stw	ra,36(sp)
 8001c3c:	df000815 	stw	fp,32(sp)
 8001c40:	df000804 	addi	fp,sp,32
 8001c44:	e13ffd15 	stw	r4,-12(fp)
 8001c48:	e17ffe15 	stw	r5,-8(fp)
 8001c4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8001c50:	00bfffc4 	movi	r2,-1
 8001c54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8001c58:	00bffb44 	movi	r2,-19
 8001c5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8001c60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8001c64:	d1600304 	addi	r5,gp,-32756
 8001c68:	e13ffd17 	ldw	r4,-12(fp)
 8001c6c:	8001fb40 	call	8001fb4 <alt_find_dev>
 8001c70:	e0bff815 	stw	r2,-32(fp)
 8001c74:	e0bff817 	ldw	r2,-32(fp)
 8001c78:	1000051e 	bne	r2,zero,8001c90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8001c7c:	e13ffd17 	ldw	r4,-12(fp)
 8001c80:	80020440 	call	8002044 <alt_find_file>
 8001c84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8001c88:	00800044 	movi	r2,1
 8001c8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8001c90:	e0bff817 	ldw	r2,-32(fp)
 8001c94:	10002926 	beq	r2,zero,8001d3c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8001c98:	e13ff817 	ldw	r4,-32(fp)
 8001c9c:	800214c0 	call	800214c <alt_get_fd>
 8001ca0:	e0bff915 	stw	r2,-28(fp)
 8001ca4:	e0bff917 	ldw	r2,-28(fp)
 8001ca8:	1000030e 	bge	r2,zero,8001cb8 <open+0x84>
    {
      status = index;
 8001cac:	e0bff917 	ldw	r2,-28(fp)
 8001cb0:	e0bffa15 	stw	r2,-24(fp)
 8001cb4:	00002306 	br	8001d44 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8001cb8:	e0bff917 	ldw	r2,-28(fp)
 8001cbc:	10c00324 	muli	r3,r2,12
 8001cc0:	00820034 	movhi	r2,2048
 8001cc4:	108e0904 	addi	r2,r2,14372
 8001cc8:	1885883a 	add	r2,r3,r2
 8001ccc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8001cd0:	e0fffe17 	ldw	r3,-8(fp)
 8001cd4:	00900034 	movhi	r2,16384
 8001cd8:	10bfffc4 	addi	r2,r2,-1
 8001cdc:	1886703a 	and	r3,r3,r2
 8001ce0:	e0bffc17 	ldw	r2,-16(fp)
 8001ce4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8001ce8:	e0bffb17 	ldw	r2,-20(fp)
 8001cec:	1000051e 	bne	r2,zero,8001d04 <open+0xd0>
 8001cf0:	e13ffc17 	ldw	r4,-16(fp)
 8001cf4:	8001b700 	call	8001b70 <alt_file_locked>
 8001cf8:	e0bffa15 	stw	r2,-24(fp)
 8001cfc:	e0bffa17 	ldw	r2,-24(fp)
 8001d00:	10001016 	blt	r2,zero,8001d44 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8001d04:	e0bff817 	ldw	r2,-32(fp)
 8001d08:	10800317 	ldw	r2,12(r2)
 8001d0c:	10000826 	beq	r2,zero,8001d30 <open+0xfc>
 8001d10:	e0bff817 	ldw	r2,-32(fp)
 8001d14:	10800317 	ldw	r2,12(r2)
 8001d18:	e1ffff17 	ldw	r7,-4(fp)
 8001d1c:	e1bffe17 	ldw	r6,-8(fp)
 8001d20:	e17ffd17 	ldw	r5,-12(fp)
 8001d24:	e13ffc17 	ldw	r4,-16(fp)
 8001d28:	103ee83a 	callr	r2
 8001d2c:	00000106 	br	8001d34 <open+0x100>
 8001d30:	0005883a 	mov	r2,zero
 8001d34:	e0bffa15 	stw	r2,-24(fp)
 8001d38:	00000206 	br	8001d44 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8001d3c:	00bffb44 	movi	r2,-19
 8001d40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8001d44:	e0bffa17 	ldw	r2,-24(fp)
 8001d48:	1000090e 	bge	r2,zero,8001d70 <open+0x13c>
  {
    alt_release_fd (index);  
 8001d4c:	e13ff917 	ldw	r4,-28(fp)
 8001d50:	8001d880 	call	8001d88 <alt_release_fd>
    ALT_ERRNO = -status;
 8001d54:	8001b340 	call	8001b34 <alt_get_errno>
 8001d58:	1007883a 	mov	r3,r2
 8001d5c:	e0bffa17 	ldw	r2,-24(fp)
 8001d60:	0085c83a 	sub	r2,zero,r2
 8001d64:	18800015 	stw	r2,0(r3)
    return -1;
 8001d68:	00bfffc4 	movi	r2,-1
 8001d6c:	00000106 	br	8001d74 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8001d70:	e0bff917 	ldw	r2,-28(fp)
}
 8001d74:	e037883a 	mov	sp,fp
 8001d78:	dfc00117 	ldw	ra,4(sp)
 8001d7c:	df000017 	ldw	fp,0(sp)
 8001d80:	dec00204 	addi	sp,sp,8
 8001d84:	f800283a 	ret

08001d88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8001d88:	defffe04 	addi	sp,sp,-8
 8001d8c:	df000115 	stw	fp,4(sp)
 8001d90:	df000104 	addi	fp,sp,4
 8001d94:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8001d98:	e0bfff17 	ldw	r2,-4(fp)
 8001d9c:	108000d0 	cmplti	r2,r2,3
 8001da0:	10000d1e 	bne	r2,zero,8001dd8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8001da4:	00820034 	movhi	r2,2048
 8001da8:	108e0904 	addi	r2,r2,14372
 8001dac:	e0ffff17 	ldw	r3,-4(fp)
 8001db0:	18c00324 	muli	r3,r3,12
 8001db4:	10c5883a 	add	r2,r2,r3
 8001db8:	10800204 	addi	r2,r2,8
 8001dbc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8001dc0:	00820034 	movhi	r2,2048
 8001dc4:	108e0904 	addi	r2,r2,14372
 8001dc8:	e0ffff17 	ldw	r3,-4(fp)
 8001dcc:	18c00324 	muli	r3,r3,12
 8001dd0:	10c5883a 	add	r2,r2,r3
 8001dd4:	10000015 	stw	zero,0(r2)
  }
}
 8001dd8:	0001883a 	nop
 8001ddc:	e037883a 	mov	sp,fp
 8001de0:	df000017 	ldw	fp,0(sp)
 8001de4:	dec00104 	addi	sp,sp,4
 8001de8:	f800283a 	ret

08001dec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8001dec:	defffa04 	addi	sp,sp,-24
 8001df0:	df000515 	stw	fp,20(sp)
 8001df4:	df000504 	addi	fp,sp,20
 8001df8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001dfc:	0005303a 	rdctl	r2,status
 8001e00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001e04:	e0fffc17 	ldw	r3,-16(fp)
 8001e08:	00bfff84 	movi	r2,-2
 8001e0c:	1884703a 	and	r2,r3,r2
 8001e10:	1001703a 	wrctl	status,r2
  
  return context;
 8001e14:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8001e18:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8001e1c:	e0bfff17 	ldw	r2,-4(fp)
 8001e20:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8001e24:	e0bffd17 	ldw	r2,-12(fp)
 8001e28:	10800017 	ldw	r2,0(r2)
 8001e2c:	e0fffd17 	ldw	r3,-12(fp)
 8001e30:	18c00117 	ldw	r3,4(r3)
 8001e34:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8001e38:	e0bffd17 	ldw	r2,-12(fp)
 8001e3c:	10800117 	ldw	r2,4(r2)
 8001e40:	e0fffd17 	ldw	r3,-12(fp)
 8001e44:	18c00017 	ldw	r3,0(r3)
 8001e48:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8001e4c:	e0bffd17 	ldw	r2,-12(fp)
 8001e50:	e0fffd17 	ldw	r3,-12(fp)
 8001e54:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8001e58:	e0bffd17 	ldw	r2,-12(fp)
 8001e5c:	e0fffd17 	ldw	r3,-12(fp)
 8001e60:	10c00015 	stw	r3,0(r2)
 8001e64:	e0bffb17 	ldw	r2,-20(fp)
 8001e68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001e6c:	e0bffe17 	ldw	r2,-8(fp)
 8001e70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8001e74:	0001883a 	nop
 8001e78:	e037883a 	mov	sp,fp
 8001e7c:	df000017 	ldw	fp,0(sp)
 8001e80:	dec00104 	addi	sp,sp,4
 8001e84:	f800283a 	ret

08001e88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8001e88:	defffb04 	addi	sp,sp,-20
 8001e8c:	dfc00415 	stw	ra,16(sp)
 8001e90:	df000315 	stw	fp,12(sp)
 8001e94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8001e98:	d0a00717 	ldw	r2,-32740(gp)
 8001e9c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8001ea0:	d0a5a917 	ldw	r2,-26972(gp)
 8001ea4:	10800044 	addi	r2,r2,1
 8001ea8:	d0a5a915 	stw	r2,-26972(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8001eac:	00002e06 	br	8001f68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8001eb0:	e0bffd17 	ldw	r2,-12(fp)
 8001eb4:	10800017 	ldw	r2,0(r2)
 8001eb8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8001ebc:	e0bffd17 	ldw	r2,-12(fp)
 8001ec0:	10800403 	ldbu	r2,16(r2)
 8001ec4:	10803fcc 	andi	r2,r2,255
 8001ec8:	10000426 	beq	r2,zero,8001edc <alt_tick+0x54>
 8001ecc:	d0a5a917 	ldw	r2,-26972(gp)
 8001ed0:	1000021e 	bne	r2,zero,8001edc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8001ed4:	e0bffd17 	ldw	r2,-12(fp)
 8001ed8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8001edc:	e0bffd17 	ldw	r2,-12(fp)
 8001ee0:	10800217 	ldw	r2,8(r2)
 8001ee4:	d0e5a917 	ldw	r3,-26972(gp)
 8001ee8:	18801d36 	bltu	r3,r2,8001f60 <alt_tick+0xd8>
 8001eec:	e0bffd17 	ldw	r2,-12(fp)
 8001ef0:	10800403 	ldbu	r2,16(r2)
 8001ef4:	10803fcc 	andi	r2,r2,255
 8001ef8:	1000191e 	bne	r2,zero,8001f60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8001efc:	e0bffd17 	ldw	r2,-12(fp)
 8001f00:	10800317 	ldw	r2,12(r2)
 8001f04:	e0fffd17 	ldw	r3,-12(fp)
 8001f08:	18c00517 	ldw	r3,20(r3)
 8001f0c:	1809883a 	mov	r4,r3
 8001f10:	103ee83a 	callr	r2
 8001f14:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8001f18:	e0bfff17 	ldw	r2,-4(fp)
 8001f1c:	1000031e 	bne	r2,zero,8001f2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8001f20:	e13ffd17 	ldw	r4,-12(fp)
 8001f24:	8001dec0 	call	8001dec <alt_alarm_stop>
 8001f28:	00000d06 	br	8001f60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8001f2c:	e0bffd17 	ldw	r2,-12(fp)
 8001f30:	10c00217 	ldw	r3,8(r2)
 8001f34:	e0bfff17 	ldw	r2,-4(fp)
 8001f38:	1887883a 	add	r3,r3,r2
 8001f3c:	e0bffd17 	ldw	r2,-12(fp)
 8001f40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8001f44:	e0bffd17 	ldw	r2,-12(fp)
 8001f48:	10c00217 	ldw	r3,8(r2)
 8001f4c:	d0a5a917 	ldw	r2,-26972(gp)
 8001f50:	1880032e 	bgeu	r3,r2,8001f60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8001f54:	e0bffd17 	ldw	r2,-12(fp)
 8001f58:	00c00044 	movi	r3,1
 8001f5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8001f60:	e0bffe17 	ldw	r2,-8(fp)
 8001f64:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8001f68:	e0fffd17 	ldw	r3,-12(fp)
 8001f6c:	d0a00704 	addi	r2,gp,-32740
 8001f70:	18bfcf1e 	bne	r3,r2,8001eb0 <__alt_data_end+0xfc001eb0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8001f74:	0001883a 	nop
}
 8001f78:	0001883a 	nop
 8001f7c:	e037883a 	mov	sp,fp
 8001f80:	dfc00117 	ldw	ra,4(sp)
 8001f84:	df000017 	ldw	fp,0(sp)
 8001f88:	dec00204 	addi	sp,sp,8
 8001f8c:	f800283a 	ret

08001f90 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8001f90:	deffff04 	addi	sp,sp,-4
 8001f94:	df000015 	stw	fp,0(sp)
 8001f98:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8001f9c:	000170fa 	wrctl	ienable,zero
}
 8001fa0:	0001883a 	nop
 8001fa4:	e037883a 	mov	sp,fp
 8001fa8:	df000017 	ldw	fp,0(sp)
 8001fac:	dec00104 	addi	sp,sp,4
 8001fb0:	f800283a 	ret

08001fb4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8001fb4:	defffa04 	addi	sp,sp,-24
 8001fb8:	dfc00515 	stw	ra,20(sp)
 8001fbc:	df000415 	stw	fp,16(sp)
 8001fc0:	df000404 	addi	fp,sp,16
 8001fc4:	e13ffe15 	stw	r4,-8(fp)
 8001fc8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8001fcc:	e0bfff17 	ldw	r2,-4(fp)
 8001fd0:	10800017 	ldw	r2,0(r2)
 8001fd4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8001fd8:	e13ffe17 	ldw	r4,-8(fp)
 8001fdc:	80024000 	call	8002400 <strlen>
 8001fe0:	10800044 	addi	r2,r2,1
 8001fe4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001fe8:	00000d06 	br	8002020 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8001fec:	e0bffc17 	ldw	r2,-16(fp)
 8001ff0:	10800217 	ldw	r2,8(r2)
 8001ff4:	e0fffd17 	ldw	r3,-12(fp)
 8001ff8:	180d883a 	mov	r6,r3
 8001ffc:	e17ffe17 	ldw	r5,-8(fp)
 8002000:	1009883a 	mov	r4,r2
 8002004:	800223c0 	call	800223c <memcmp>
 8002008:	1000021e 	bne	r2,zero,8002014 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800200c:	e0bffc17 	ldw	r2,-16(fp)
 8002010:	00000706 	br	8002030 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8002014:	e0bffc17 	ldw	r2,-16(fp)
 8002018:	10800017 	ldw	r2,0(r2)
 800201c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8002020:	e0fffc17 	ldw	r3,-16(fp)
 8002024:	e0bfff17 	ldw	r2,-4(fp)
 8002028:	18bff01e 	bne	r3,r2,8001fec <__alt_data_end+0xfc001fec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800202c:	0005883a 	mov	r2,zero
}
 8002030:	e037883a 	mov	sp,fp
 8002034:	dfc00117 	ldw	ra,4(sp)
 8002038:	df000017 	ldw	fp,0(sp)
 800203c:	dec00204 	addi	sp,sp,8
 8002040:	f800283a 	ret

08002044 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8002044:	defffb04 	addi	sp,sp,-20
 8002048:	dfc00415 	stw	ra,16(sp)
 800204c:	df000315 	stw	fp,12(sp)
 8002050:	df000304 	addi	fp,sp,12
 8002054:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8002058:	d0a00117 	ldw	r2,-32764(gp)
 800205c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8002060:	00003106 	br	8002128 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8002064:	e0bffd17 	ldw	r2,-12(fp)
 8002068:	10800217 	ldw	r2,8(r2)
 800206c:	1009883a 	mov	r4,r2
 8002070:	80024000 	call	8002400 <strlen>
 8002074:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8002078:	e0bffd17 	ldw	r2,-12(fp)
 800207c:	10c00217 	ldw	r3,8(r2)
 8002080:	e0bffe17 	ldw	r2,-8(fp)
 8002084:	10bfffc4 	addi	r2,r2,-1
 8002088:	1885883a 	add	r2,r3,r2
 800208c:	10800003 	ldbu	r2,0(r2)
 8002090:	10803fcc 	andi	r2,r2,255
 8002094:	1080201c 	xori	r2,r2,128
 8002098:	10bfe004 	addi	r2,r2,-128
 800209c:	10800bd8 	cmpnei	r2,r2,47
 80020a0:	1000031e 	bne	r2,zero,80020b0 <alt_find_file+0x6c>
    {
      len -= 1;
 80020a4:	e0bffe17 	ldw	r2,-8(fp)
 80020a8:	10bfffc4 	addi	r2,r2,-1
 80020ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80020b0:	e0bffe17 	ldw	r2,-8(fp)
 80020b4:	e0ffff17 	ldw	r3,-4(fp)
 80020b8:	1885883a 	add	r2,r3,r2
 80020bc:	10800003 	ldbu	r2,0(r2)
 80020c0:	10803fcc 	andi	r2,r2,255
 80020c4:	1080201c 	xori	r2,r2,128
 80020c8:	10bfe004 	addi	r2,r2,-128
 80020cc:	10800be0 	cmpeqi	r2,r2,47
 80020d0:	1000081e 	bne	r2,zero,80020f4 <alt_find_file+0xb0>
 80020d4:	e0bffe17 	ldw	r2,-8(fp)
 80020d8:	e0ffff17 	ldw	r3,-4(fp)
 80020dc:	1885883a 	add	r2,r3,r2
 80020e0:	10800003 	ldbu	r2,0(r2)
 80020e4:	10803fcc 	andi	r2,r2,255
 80020e8:	1080201c 	xori	r2,r2,128
 80020ec:	10bfe004 	addi	r2,r2,-128
 80020f0:	10000a1e 	bne	r2,zero,800211c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80020f4:	e0bffd17 	ldw	r2,-12(fp)
 80020f8:	10800217 	ldw	r2,8(r2)
 80020fc:	e0fffe17 	ldw	r3,-8(fp)
 8002100:	180d883a 	mov	r6,r3
 8002104:	e17fff17 	ldw	r5,-4(fp)
 8002108:	1009883a 	mov	r4,r2
 800210c:	800223c0 	call	800223c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8002110:	1000021e 	bne	r2,zero,800211c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8002114:	e0bffd17 	ldw	r2,-12(fp)
 8002118:	00000706 	br	8002138 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800211c:	e0bffd17 	ldw	r2,-12(fp)
 8002120:	10800017 	ldw	r2,0(r2)
 8002124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8002128:	e0fffd17 	ldw	r3,-12(fp)
 800212c:	d0a00104 	addi	r2,gp,-32764
 8002130:	18bfcc1e 	bne	r3,r2,8002064 <__alt_data_end+0xfc002064>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8002134:	0005883a 	mov	r2,zero
}
 8002138:	e037883a 	mov	sp,fp
 800213c:	dfc00117 	ldw	ra,4(sp)
 8002140:	df000017 	ldw	fp,0(sp)
 8002144:	dec00204 	addi	sp,sp,8
 8002148:	f800283a 	ret

0800214c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800214c:	defffc04 	addi	sp,sp,-16
 8002150:	df000315 	stw	fp,12(sp)
 8002154:	df000304 	addi	fp,sp,12
 8002158:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800215c:	00bffa04 	movi	r2,-24
 8002160:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8002164:	e03ffd15 	stw	zero,-12(fp)
 8002168:	00001906 	br	80021d0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 800216c:	00820034 	movhi	r2,2048
 8002170:	108e0904 	addi	r2,r2,14372
 8002174:	e0fffd17 	ldw	r3,-12(fp)
 8002178:	18c00324 	muli	r3,r3,12
 800217c:	10c5883a 	add	r2,r2,r3
 8002180:	10800017 	ldw	r2,0(r2)
 8002184:	10000f1e 	bne	r2,zero,80021c4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8002188:	00820034 	movhi	r2,2048
 800218c:	108e0904 	addi	r2,r2,14372
 8002190:	e0fffd17 	ldw	r3,-12(fp)
 8002194:	18c00324 	muli	r3,r3,12
 8002198:	10c5883a 	add	r2,r2,r3
 800219c:	e0ffff17 	ldw	r3,-4(fp)
 80021a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80021a4:	d0e00517 	ldw	r3,-32748(gp)
 80021a8:	e0bffd17 	ldw	r2,-12(fp)
 80021ac:	1880020e 	bge	r3,r2,80021b8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 80021b0:	e0bffd17 	ldw	r2,-12(fp)
 80021b4:	d0a00515 	stw	r2,-32748(gp)
      }
      rc = i;
 80021b8:	e0bffd17 	ldw	r2,-12(fp)
 80021bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80021c0:	00000606 	br	80021dc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80021c4:	e0bffd17 	ldw	r2,-12(fp)
 80021c8:	10800044 	addi	r2,r2,1
 80021cc:	e0bffd15 	stw	r2,-12(fp)
 80021d0:	e0bffd17 	ldw	r2,-12(fp)
 80021d4:	10800810 	cmplti	r2,r2,32
 80021d8:	103fe41e 	bne	r2,zero,800216c <__alt_data_end+0xfc00216c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80021dc:	e0bffe17 	ldw	r2,-8(fp)
}
 80021e0:	e037883a 	mov	sp,fp
 80021e4:	df000017 	ldw	fp,0(sp)
 80021e8:	dec00104 	addi	sp,sp,4
 80021ec:	f800283a 	ret

080021f0 <atexit>:
 80021f0:	200b883a 	mov	r5,r4
 80021f4:	000f883a 	mov	r7,zero
 80021f8:	000d883a 	mov	r6,zero
 80021fc:	0009883a 	mov	r4,zero
 8002200:	80024981 	jmpi	8002498 <__register_exitproc>

08002204 <exit>:
 8002204:	defffe04 	addi	sp,sp,-8
 8002208:	000b883a 	mov	r5,zero
 800220c:	dc000015 	stw	r16,0(sp)
 8002210:	dfc00115 	stw	ra,4(sp)
 8002214:	2021883a 	mov	r16,r4
 8002218:	80025b00 	call	80025b0 <__call_exitprocs>
 800221c:	00820034 	movhi	r2,2048
 8002220:	108f7b04 	addi	r2,r2,15852
 8002224:	11000017 	ldw	r4,0(r2)
 8002228:	20800f17 	ldw	r2,60(r4)
 800222c:	10000126 	beq	r2,zero,8002234 <exit+0x30>
 8002230:	103ee83a 	callr	r2
 8002234:	8009883a 	mov	r4,r16
 8002238:	80027300 	call	8002730 <_exit>

0800223c <memcmp>:
 800223c:	01c000c4 	movi	r7,3
 8002240:	3980192e 	bgeu	r7,r6,80022a8 <memcmp+0x6c>
 8002244:	2144b03a 	or	r2,r4,r5
 8002248:	11c4703a 	and	r2,r2,r7
 800224c:	10000f26 	beq	r2,zero,800228c <memcmp+0x50>
 8002250:	20800003 	ldbu	r2,0(r4)
 8002254:	28c00003 	ldbu	r3,0(r5)
 8002258:	10c0151e 	bne	r2,r3,80022b0 <memcmp+0x74>
 800225c:	31bfff84 	addi	r6,r6,-2
 8002260:	01ffffc4 	movi	r7,-1
 8002264:	00000406 	br	8002278 <memcmp+0x3c>
 8002268:	20800003 	ldbu	r2,0(r4)
 800226c:	28c00003 	ldbu	r3,0(r5)
 8002270:	31bfffc4 	addi	r6,r6,-1
 8002274:	10c00e1e 	bne	r2,r3,80022b0 <memcmp+0x74>
 8002278:	21000044 	addi	r4,r4,1
 800227c:	29400044 	addi	r5,r5,1
 8002280:	31fff91e 	bne	r6,r7,8002268 <__alt_data_end+0xfc002268>
 8002284:	0005883a 	mov	r2,zero
 8002288:	f800283a 	ret
 800228c:	20c00017 	ldw	r3,0(r4)
 8002290:	28800017 	ldw	r2,0(r5)
 8002294:	18bfee1e 	bne	r3,r2,8002250 <__alt_data_end+0xfc002250>
 8002298:	31bfff04 	addi	r6,r6,-4
 800229c:	21000104 	addi	r4,r4,4
 80022a0:	29400104 	addi	r5,r5,4
 80022a4:	39bff936 	bltu	r7,r6,800228c <__alt_data_end+0xfc00228c>
 80022a8:	303fe91e 	bne	r6,zero,8002250 <__alt_data_end+0xfc002250>
 80022ac:	003ff506 	br	8002284 <__alt_data_end+0xfc002284>
 80022b0:	10c5c83a 	sub	r2,r2,r3
 80022b4:	f800283a 	ret

080022b8 <memcpy>:
 80022b8:	defffd04 	addi	sp,sp,-12
 80022bc:	dfc00215 	stw	ra,8(sp)
 80022c0:	dc400115 	stw	r17,4(sp)
 80022c4:	dc000015 	stw	r16,0(sp)
 80022c8:	00c003c4 	movi	r3,15
 80022cc:	2005883a 	mov	r2,r4
 80022d0:	1980452e 	bgeu	r3,r6,80023e8 <memcpy+0x130>
 80022d4:	2906b03a 	or	r3,r5,r4
 80022d8:	18c000cc 	andi	r3,r3,3
 80022dc:	1800441e 	bne	r3,zero,80023f0 <memcpy+0x138>
 80022e0:	347ffc04 	addi	r17,r6,-16
 80022e4:	8822d13a 	srli	r17,r17,4
 80022e8:	28c00104 	addi	r3,r5,4
 80022ec:	23400104 	addi	r13,r4,4
 80022f0:	8820913a 	slli	r16,r17,4
 80022f4:	2b000204 	addi	r12,r5,8
 80022f8:	22c00204 	addi	r11,r4,8
 80022fc:	84000504 	addi	r16,r16,20
 8002300:	2a800304 	addi	r10,r5,12
 8002304:	22400304 	addi	r9,r4,12
 8002308:	2c21883a 	add	r16,r5,r16
 800230c:	2811883a 	mov	r8,r5
 8002310:	200f883a 	mov	r7,r4
 8002314:	41000017 	ldw	r4,0(r8)
 8002318:	1fc00017 	ldw	ra,0(r3)
 800231c:	63c00017 	ldw	r15,0(r12)
 8002320:	39000015 	stw	r4,0(r7)
 8002324:	53800017 	ldw	r14,0(r10)
 8002328:	6fc00015 	stw	ra,0(r13)
 800232c:	5bc00015 	stw	r15,0(r11)
 8002330:	4b800015 	stw	r14,0(r9)
 8002334:	18c00404 	addi	r3,r3,16
 8002338:	39c00404 	addi	r7,r7,16
 800233c:	42000404 	addi	r8,r8,16
 8002340:	6b400404 	addi	r13,r13,16
 8002344:	63000404 	addi	r12,r12,16
 8002348:	5ac00404 	addi	r11,r11,16
 800234c:	52800404 	addi	r10,r10,16
 8002350:	4a400404 	addi	r9,r9,16
 8002354:	1c3fef1e 	bne	r3,r16,8002314 <__alt_data_end+0xfc002314>
 8002358:	89c00044 	addi	r7,r17,1
 800235c:	380e913a 	slli	r7,r7,4
 8002360:	310003cc 	andi	r4,r6,15
 8002364:	02c000c4 	movi	r11,3
 8002368:	11c7883a 	add	r3,r2,r7
 800236c:	29cb883a 	add	r5,r5,r7
 8002370:	5900212e 	bgeu	r11,r4,80023f8 <memcpy+0x140>
 8002374:	1813883a 	mov	r9,r3
 8002378:	2811883a 	mov	r8,r5
 800237c:	200f883a 	mov	r7,r4
 8002380:	42800017 	ldw	r10,0(r8)
 8002384:	4a400104 	addi	r9,r9,4
 8002388:	39ffff04 	addi	r7,r7,-4
 800238c:	4abfff15 	stw	r10,-4(r9)
 8002390:	42000104 	addi	r8,r8,4
 8002394:	59fffa36 	bltu	r11,r7,8002380 <__alt_data_end+0xfc002380>
 8002398:	213fff04 	addi	r4,r4,-4
 800239c:	2008d0ba 	srli	r4,r4,2
 80023a0:	318000cc 	andi	r6,r6,3
 80023a4:	21000044 	addi	r4,r4,1
 80023a8:	2109883a 	add	r4,r4,r4
 80023ac:	2109883a 	add	r4,r4,r4
 80023b0:	1907883a 	add	r3,r3,r4
 80023b4:	290b883a 	add	r5,r5,r4
 80023b8:	30000626 	beq	r6,zero,80023d4 <memcpy+0x11c>
 80023bc:	198d883a 	add	r6,r3,r6
 80023c0:	29c00003 	ldbu	r7,0(r5)
 80023c4:	18c00044 	addi	r3,r3,1
 80023c8:	29400044 	addi	r5,r5,1
 80023cc:	19ffffc5 	stb	r7,-1(r3)
 80023d0:	19bffb1e 	bne	r3,r6,80023c0 <__alt_data_end+0xfc0023c0>
 80023d4:	dfc00217 	ldw	ra,8(sp)
 80023d8:	dc400117 	ldw	r17,4(sp)
 80023dc:	dc000017 	ldw	r16,0(sp)
 80023e0:	dec00304 	addi	sp,sp,12
 80023e4:	f800283a 	ret
 80023e8:	2007883a 	mov	r3,r4
 80023ec:	003ff206 	br	80023b8 <__alt_data_end+0xfc0023b8>
 80023f0:	2007883a 	mov	r3,r4
 80023f4:	003ff106 	br	80023bc <__alt_data_end+0xfc0023bc>
 80023f8:	200d883a 	mov	r6,r4
 80023fc:	003fee06 	br	80023b8 <__alt_data_end+0xfc0023b8>

08002400 <strlen>:
 8002400:	208000cc 	andi	r2,r4,3
 8002404:	10002026 	beq	r2,zero,8002488 <strlen+0x88>
 8002408:	20800007 	ldb	r2,0(r4)
 800240c:	10002026 	beq	r2,zero,8002490 <strlen+0x90>
 8002410:	2005883a 	mov	r2,r4
 8002414:	00000206 	br	8002420 <strlen+0x20>
 8002418:	10c00007 	ldb	r3,0(r2)
 800241c:	18001826 	beq	r3,zero,8002480 <strlen+0x80>
 8002420:	10800044 	addi	r2,r2,1
 8002424:	10c000cc 	andi	r3,r2,3
 8002428:	183ffb1e 	bne	r3,zero,8002418 <__alt_data_end+0xfc002418>
 800242c:	10c00017 	ldw	r3,0(r2)
 8002430:	01ffbff4 	movhi	r7,65279
 8002434:	39ffbfc4 	addi	r7,r7,-257
 8002438:	00ca303a 	nor	r5,zero,r3
 800243c:	01a02074 	movhi	r6,32897
 8002440:	19c7883a 	add	r3,r3,r7
 8002444:	31a02004 	addi	r6,r6,-32640
 8002448:	1946703a 	and	r3,r3,r5
 800244c:	1986703a 	and	r3,r3,r6
 8002450:	1800091e 	bne	r3,zero,8002478 <strlen+0x78>
 8002454:	10800104 	addi	r2,r2,4
 8002458:	10c00017 	ldw	r3,0(r2)
 800245c:	19cb883a 	add	r5,r3,r7
 8002460:	00c6303a 	nor	r3,zero,r3
 8002464:	28c6703a 	and	r3,r5,r3
 8002468:	1986703a 	and	r3,r3,r6
 800246c:	183ff926 	beq	r3,zero,8002454 <__alt_data_end+0xfc002454>
 8002470:	00000106 	br	8002478 <strlen+0x78>
 8002474:	10800044 	addi	r2,r2,1
 8002478:	10c00007 	ldb	r3,0(r2)
 800247c:	183ffd1e 	bne	r3,zero,8002474 <__alt_data_end+0xfc002474>
 8002480:	1105c83a 	sub	r2,r2,r4
 8002484:	f800283a 	ret
 8002488:	2005883a 	mov	r2,r4
 800248c:	003fe706 	br	800242c <__alt_data_end+0xfc00242c>
 8002490:	0005883a 	mov	r2,zero
 8002494:	f800283a 	ret

08002498 <__register_exitproc>:
 8002498:	defffa04 	addi	sp,sp,-24
 800249c:	dc000315 	stw	r16,12(sp)
 80024a0:	04020034 	movhi	r16,2048
 80024a4:	840f7b04 	addi	r16,r16,15852
 80024a8:	80c00017 	ldw	r3,0(r16)
 80024ac:	dc400415 	stw	r17,16(sp)
 80024b0:	dfc00515 	stw	ra,20(sp)
 80024b4:	18805217 	ldw	r2,328(r3)
 80024b8:	2023883a 	mov	r17,r4
 80024bc:	10003726 	beq	r2,zero,800259c <__register_exitproc+0x104>
 80024c0:	10c00117 	ldw	r3,4(r2)
 80024c4:	010007c4 	movi	r4,31
 80024c8:	20c00e16 	blt	r4,r3,8002504 <__register_exitproc+0x6c>
 80024cc:	1a000044 	addi	r8,r3,1
 80024d0:	8800221e 	bne	r17,zero,800255c <__register_exitproc+0xc4>
 80024d4:	18c00084 	addi	r3,r3,2
 80024d8:	18c7883a 	add	r3,r3,r3
 80024dc:	18c7883a 	add	r3,r3,r3
 80024e0:	12000115 	stw	r8,4(r2)
 80024e4:	10c7883a 	add	r3,r2,r3
 80024e8:	19400015 	stw	r5,0(r3)
 80024ec:	0005883a 	mov	r2,zero
 80024f0:	dfc00517 	ldw	ra,20(sp)
 80024f4:	dc400417 	ldw	r17,16(sp)
 80024f8:	dc000317 	ldw	r16,12(sp)
 80024fc:	dec00604 	addi	sp,sp,24
 8002500:	f800283a 	ret
 8002504:	00800034 	movhi	r2,0
 8002508:	10800004 	addi	r2,r2,0
 800250c:	10002626 	beq	r2,zero,80025a8 <__register_exitproc+0x110>
 8002510:	01006404 	movi	r4,400
 8002514:	d9400015 	stw	r5,0(sp)
 8002518:	d9800115 	stw	r6,4(sp)
 800251c:	d9c00215 	stw	r7,8(sp)
 8002520:	00000000 	call	0 <__reset-0x40000>
 8002524:	d9400017 	ldw	r5,0(sp)
 8002528:	d9800117 	ldw	r6,4(sp)
 800252c:	d9c00217 	ldw	r7,8(sp)
 8002530:	10001d26 	beq	r2,zero,80025a8 <__register_exitproc+0x110>
 8002534:	81000017 	ldw	r4,0(r16)
 8002538:	10000115 	stw	zero,4(r2)
 800253c:	02000044 	movi	r8,1
 8002540:	22405217 	ldw	r9,328(r4)
 8002544:	0007883a 	mov	r3,zero
 8002548:	12400015 	stw	r9,0(r2)
 800254c:	20805215 	stw	r2,328(r4)
 8002550:	10006215 	stw	zero,392(r2)
 8002554:	10006315 	stw	zero,396(r2)
 8002558:	883fde26 	beq	r17,zero,80024d4 <__alt_data_end+0xfc0024d4>
 800255c:	18c9883a 	add	r4,r3,r3
 8002560:	2109883a 	add	r4,r4,r4
 8002564:	1109883a 	add	r4,r2,r4
 8002568:	21802215 	stw	r6,136(r4)
 800256c:	01800044 	movi	r6,1
 8002570:	12406217 	ldw	r9,392(r2)
 8002574:	30cc983a 	sll	r6,r6,r3
 8002578:	4992b03a 	or	r9,r9,r6
 800257c:	12406215 	stw	r9,392(r2)
 8002580:	21c04215 	stw	r7,264(r4)
 8002584:	01000084 	movi	r4,2
 8002588:	893fd21e 	bne	r17,r4,80024d4 <__alt_data_end+0xfc0024d4>
 800258c:	11006317 	ldw	r4,396(r2)
 8002590:	218cb03a 	or	r6,r4,r6
 8002594:	11806315 	stw	r6,396(r2)
 8002598:	003fce06 	br	80024d4 <__alt_data_end+0xfc0024d4>
 800259c:	18805304 	addi	r2,r3,332
 80025a0:	18805215 	stw	r2,328(r3)
 80025a4:	003fc606 	br	80024c0 <__alt_data_end+0xfc0024c0>
 80025a8:	00bfffc4 	movi	r2,-1
 80025ac:	003fd006 	br	80024f0 <__alt_data_end+0xfc0024f0>

080025b0 <__call_exitprocs>:
 80025b0:	defff504 	addi	sp,sp,-44
 80025b4:	df000915 	stw	fp,36(sp)
 80025b8:	dd400615 	stw	r21,24(sp)
 80025bc:	dc800315 	stw	r18,12(sp)
 80025c0:	dfc00a15 	stw	ra,40(sp)
 80025c4:	ddc00815 	stw	r23,32(sp)
 80025c8:	dd800715 	stw	r22,28(sp)
 80025cc:	dd000515 	stw	r20,20(sp)
 80025d0:	dcc00415 	stw	r19,16(sp)
 80025d4:	dc400215 	stw	r17,8(sp)
 80025d8:	dc000115 	stw	r16,4(sp)
 80025dc:	d9000015 	stw	r4,0(sp)
 80025e0:	2839883a 	mov	fp,r5
 80025e4:	04800044 	movi	r18,1
 80025e8:	057fffc4 	movi	r21,-1
 80025ec:	00820034 	movhi	r2,2048
 80025f0:	108f7b04 	addi	r2,r2,15852
 80025f4:	12000017 	ldw	r8,0(r2)
 80025f8:	45005217 	ldw	r20,328(r8)
 80025fc:	44c05204 	addi	r19,r8,328
 8002600:	a0001c26 	beq	r20,zero,8002674 <__call_exitprocs+0xc4>
 8002604:	a0800117 	ldw	r2,4(r20)
 8002608:	15ffffc4 	addi	r23,r2,-1
 800260c:	b8000d16 	blt	r23,zero,8002644 <__call_exitprocs+0x94>
 8002610:	14000044 	addi	r16,r2,1
 8002614:	8421883a 	add	r16,r16,r16
 8002618:	8421883a 	add	r16,r16,r16
 800261c:	84402004 	addi	r17,r16,128
 8002620:	a463883a 	add	r17,r20,r17
 8002624:	a421883a 	add	r16,r20,r16
 8002628:	e0001e26 	beq	fp,zero,80026a4 <__call_exitprocs+0xf4>
 800262c:	80804017 	ldw	r2,256(r16)
 8002630:	e0801c26 	beq	fp,r2,80026a4 <__call_exitprocs+0xf4>
 8002634:	bdffffc4 	addi	r23,r23,-1
 8002638:	843fff04 	addi	r16,r16,-4
 800263c:	8c7fff04 	addi	r17,r17,-4
 8002640:	bd7ff91e 	bne	r23,r21,8002628 <__alt_data_end+0xfc002628>
 8002644:	00800034 	movhi	r2,0
 8002648:	10800004 	addi	r2,r2,0
 800264c:	10000926 	beq	r2,zero,8002674 <__call_exitprocs+0xc4>
 8002650:	a0800117 	ldw	r2,4(r20)
 8002654:	1000301e 	bne	r2,zero,8002718 <__call_exitprocs+0x168>
 8002658:	a0800017 	ldw	r2,0(r20)
 800265c:	10003226 	beq	r2,zero,8002728 <__call_exitprocs+0x178>
 8002660:	a009883a 	mov	r4,r20
 8002664:	98800015 	stw	r2,0(r19)
 8002668:	00000000 	call	0 <__reset-0x40000>
 800266c:	9d000017 	ldw	r20,0(r19)
 8002670:	a03fe41e 	bne	r20,zero,8002604 <__alt_data_end+0xfc002604>
 8002674:	dfc00a17 	ldw	ra,40(sp)
 8002678:	df000917 	ldw	fp,36(sp)
 800267c:	ddc00817 	ldw	r23,32(sp)
 8002680:	dd800717 	ldw	r22,28(sp)
 8002684:	dd400617 	ldw	r21,24(sp)
 8002688:	dd000517 	ldw	r20,20(sp)
 800268c:	dcc00417 	ldw	r19,16(sp)
 8002690:	dc800317 	ldw	r18,12(sp)
 8002694:	dc400217 	ldw	r17,8(sp)
 8002698:	dc000117 	ldw	r16,4(sp)
 800269c:	dec00b04 	addi	sp,sp,44
 80026a0:	f800283a 	ret
 80026a4:	a0800117 	ldw	r2,4(r20)
 80026a8:	80c00017 	ldw	r3,0(r16)
 80026ac:	10bfffc4 	addi	r2,r2,-1
 80026b0:	15c01426 	beq	r2,r23,8002704 <__call_exitprocs+0x154>
 80026b4:	80000015 	stw	zero,0(r16)
 80026b8:	183fde26 	beq	r3,zero,8002634 <__alt_data_end+0xfc002634>
 80026bc:	95c8983a 	sll	r4,r18,r23
 80026c0:	a0806217 	ldw	r2,392(r20)
 80026c4:	a5800117 	ldw	r22,4(r20)
 80026c8:	2084703a 	and	r2,r4,r2
 80026cc:	10000b26 	beq	r2,zero,80026fc <__call_exitprocs+0x14c>
 80026d0:	a0806317 	ldw	r2,396(r20)
 80026d4:	2088703a 	and	r4,r4,r2
 80026d8:	20000c1e 	bne	r4,zero,800270c <__call_exitprocs+0x15c>
 80026dc:	89400017 	ldw	r5,0(r17)
 80026e0:	d9000017 	ldw	r4,0(sp)
 80026e4:	183ee83a 	callr	r3
 80026e8:	a0800117 	ldw	r2,4(r20)
 80026ec:	15bfbf1e 	bne	r2,r22,80025ec <__alt_data_end+0xfc0025ec>
 80026f0:	98800017 	ldw	r2,0(r19)
 80026f4:	153fcf26 	beq	r2,r20,8002634 <__alt_data_end+0xfc002634>
 80026f8:	003fbc06 	br	80025ec <__alt_data_end+0xfc0025ec>
 80026fc:	183ee83a 	callr	r3
 8002700:	003ff906 	br	80026e8 <__alt_data_end+0xfc0026e8>
 8002704:	a5c00115 	stw	r23,4(r20)
 8002708:	003feb06 	br	80026b8 <__alt_data_end+0xfc0026b8>
 800270c:	89000017 	ldw	r4,0(r17)
 8002710:	183ee83a 	callr	r3
 8002714:	003ff406 	br	80026e8 <__alt_data_end+0xfc0026e8>
 8002718:	a0800017 	ldw	r2,0(r20)
 800271c:	a027883a 	mov	r19,r20
 8002720:	1029883a 	mov	r20,r2
 8002724:	003fb606 	br	8002600 <__alt_data_end+0xfc002600>
 8002728:	0005883a 	mov	r2,zero
 800272c:	003ffb06 	br	800271c <__alt_data_end+0xfc00271c>

08002730 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8002730:	defffd04 	addi	sp,sp,-12
 8002734:	df000215 	stw	fp,8(sp)
 8002738:	df000204 	addi	fp,sp,8
 800273c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8002740:	0001883a 	nop
 8002744:	e0bfff17 	ldw	r2,-4(fp)
 8002748:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800274c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8002750:	10000226 	beq	r2,zero,800275c <_exit+0x2c>
    ALT_SIM_FAIL();
 8002754:	002af070 	cmpltui	zero,zero,43969
 8002758:	00000106 	br	8002760 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800275c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8002760:	003fff06 	br	8002760 <__alt_data_end+0xfc002760>
