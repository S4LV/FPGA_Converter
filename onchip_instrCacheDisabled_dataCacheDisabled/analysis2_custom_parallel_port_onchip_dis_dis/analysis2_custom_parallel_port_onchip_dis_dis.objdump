
analysis2_custom_parallel_port_onchip_dis_dis.elf:     file format elf32-littlenios2
analysis2_custom_parallel_port_onchip_dis_dis.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040250

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000fdcc memsz 0x0000fdcc flags r-x
    LOAD off    0x00010dec vaddr 0x0004fdec paddr 0x000518d8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000133c4 vaddr 0x000533c4 paddr 0x000533c4 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f7f0  00040250  00040250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003ac  0004fa40  0004fa40  00010a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0004fdec  000518d8  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  000533c4  000533c4  000133c4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0005352c  0005352c  000128d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000128d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed8  00000000  00000000  00012900  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023ed9  00000000  00000000  000137d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009223  00000000  00000000  000376b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b558  00000000  00000000  000408d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002218  00000000  00000000  0004be2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000392c  00000000  00000000  0004e044  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017975  00000000  00000000  00051970  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000692e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  000692f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006de66  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006de69  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006de75  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006de76  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006de77  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006de82  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006de8d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006de98  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000050  00000000  00000000  0006dea2  2**0
                  CONTENTS, READONLY
 26 .jdi          00005b4d  00000000  00000000  0006def2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002961bb  00000000  00000000  00073a3f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040250 l    d  .text	00000000 .text
0004fa40 l    d  .rodata	00000000 .rodata
0004fdec l    d  .rwdata	00000000 .rwdata
000533c4 l    d  .bss	00000000 .bss
0005352c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/embeddedlabs/RTES_lab1/onchip_instrCacheDisabled_dataCacheDisabled/analysis2_custom_parallel_port_onchip_dis_dis_bsp//obj/HAL/src/crt0.o
00040288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00040484 l     F .text	00000048 my_isr_recovery_time
0004053c l     F .text	0000003c isr_parallel_port_responsive
000405dc l     F .text	0000003c isr_parallel_port_recovery
000406e0 l     F .text	00000030 isr_latency_parallel
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004fb32 l     O .rodata	00000010 zeroes.4404
000429bc l     F .text	000000bc __sbprintf
0004fb42 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042bcc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000446fc l     F .text	00000008 __fp_unlock
00044710 l     F .text	0000019c __sinit.part.1
000448ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004fdec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00050230 l     O .rwdata	00000020 lc_ctype_charset
00050210 l     O .rwdata	00000020 lc_message_charset
00050250 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004fb74 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000471c4 l     F .text	000000fc __sprint_r.part.0
0004fca8 l     O .rodata	00000010 blanks.4348
0004fc98 l     O .rodata	00000010 zeroes.4349
00048750 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004cf88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004d094 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004d0c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004d44c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004d52c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004d618 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0004da54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000518cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004dca0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004ddd4 l     F .text	00000034 alt_dev_reg
00050838 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004e0cc l     F .text	0000020c altera_avalon_jtag_uart_irq
0004e2d8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004e910 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004eb50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004edac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004eeec l     F .text	0000003c alt_get_errno
0004ef28 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000533f8 g     O .bss	00000004 alt_instruction_exception_handler
00046cd4 g     F .text	00000074 _mprec_log10
00046dc0 g     F .text	0000008c __any_on
000491a8 g     F .text	00000054 _isatty_r
0004fb80 g     O .rodata	00000028 __mprec_tinytens
0004d728 g     F .text	0000007c alt_main
0005342c g     O .bss	00000100 alt_irq
000533c4 g     O .bss	00000004 snap
000491fc g     F .text	00000060 _lseek_r
000518d8 g       *ABS*	00000000 __flash_rwdata_start
0004bab4 g     F .text	00000088 .hidden __eqdf2
000404cc g     F .text	00000070 responsive_parallel
0005352c g       *ABS*	00000000 __alt_heap_start
0004076c g     F .text	0000003c printf
00049ad4 g     F .text	0000009c _wcrtomb_r
00046fec g     F .text	0000005c __sseek
00044a4c g     F .text	00000010 __sinit
0004997c g     F .text	00000140 __swbuf_r
00045058 g     F .text	0000007c _setlocale_r
000448b4 g     F .text	00000068 __sfmoreglue
0004d7c8 g     F .text	00000024 __malloc_unlock
0004925c g     F .text	0000015c memmove
00044a34 g     F .text	00000018 _cleanup
00045e50 g     F .text	000000a8 _Balloc
0004bb3c g     F .text	000000dc .hidden __gtdf2
0004f2e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00048c90 g     F .text	0000005c _fstat_r
000533e4 g     O .bss	00000004 errno
00046f68 g     F .text	00000008 __seofread
000533f0 g     O .bss	00000004 alt_argv
00059898 g       *ABS*	00000000 _gp
000506b8 g     O .rwdata	00000180 alt_fd_list
0004f308 g     F .text	00000090 alt_find_dev
00045be0 g     F .text	00000148 memcpy
00044704 g     F .text	0000000c _cleanup_r
0004cda0 g     F .text	000000dc .hidden __floatsidf
0004ee70 g     F .text	0000007c alt_io_redirect
0004bc18 g     F .text	000000f4 .hidden __ltdf2
000403b0 g     F .text	000000d4 measurements_with_timers_recovery
0004fa40 g       *ABS*	00000000 __DTOR_END__
0004ed10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00046e4c g     F .text	00000074 __fpclassifyd
00046c30 g     F .text	000000a4 __ratio
00048734 g     F .text	0000001c __vfiprintf_internal
0004e4d0 g     F .text	0000021c altera_avalon_jtag_uart_read
0004073c g     F .text	00000030 _printf_r
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0004a864 g     F .text	00000064 .hidden __udivsi3
0004d488 g     F .text	000000a4 isatty
0004fbd0 g     O .rodata	000000c8 __mprec_tens
000450d4 g     F .text	0000000c __locale_charset
000533e0 g     O .bss	00000004 __malloc_top_pad
000533c8 g     O .bss	00000004 flag
000518a0 g     O .rwdata	00000004 __mb_cur_max
00045104 g     F .text	0000000c _localeconv_r
00048cec g     F .text	000004bc __sfvwrite_r
0004625c g     F .text	0000003c __i2b
00046ec0 g     F .text	00000054 _sbrk_r
000493b8 g     F .text	00000060 _read_r
000518c0 g     O .rwdata	00000004 alt_max_fd
00048984 g     F .text	000000f0 _fclose_r
000446cc g     F .text	00000030 fflush
000533dc g     O .bss	00000004 __malloc_max_sbrked_mem
0004a920 g     F .text	000008ac .hidden __adddf3
000469d8 g     F .text	0000010c __b2d
0004a234 g     F .text	00000538 .hidden __umoddi3
0004d654 g     F .text	000000d4 lseek
00051898 g     O .rwdata	00000004 _global_impure_ptr
00049418 g     F .text	00000564 _realloc_r
0005352c g       *ABS*	00000000 __bss_end
0004d35c g     F .text	000000f0 alt_iic_isr_register
0004f1dc g     F .text	00000108 alt_tick
00049cbc g     F .text	00000578 .hidden __udivdi3
00048bec g     F .text	00000024 _fputwc_r
0004fba8 g     O .rodata	00000028 __mprec_bigtens
00046040 g     F .text	00000104 __s2b
0004ce7c g     F .text	000000a8 .hidden __floatunsidf
00046718 g     F .text	00000060 __mcmp
00044a6c g     F .text	00000018 __fp_lock_all
0004d310 g     F .text	0000004c alt_ic_irq_enabled
0004f140 g     F .text	0000009c alt_alarm_stop
000533e8 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000e0 alt_irq_handler
00050690 g     O .rwdata	00000028 alt_dev_null
0004eb30 g     F .text	00000020 alt_dcache_flush_all
00046144 g     F .text	00000068 __hi0bits
0004cd20 g     F .text	00000080 .hidden __fixdfsi
000518d8 g       *ABS*	00000000 __ram_rwdata_end
000518b8 g     O .rwdata	00000008 alt_dev_list
0004dcdc g     F .text	000000f8 write
0004f60c g     F .text	000000a0 _putc_r
0004fdec g       *ABS*	00000000 __ram_rodata_end
0004d0fc g     F .text	000000b0 fstat
0004bc18 g     F .text	000000f4 .hidden __ledf2
00046490 g     F .text	00000140 __pow5mult
000472d8 g     F .text	0000145c ___vfiprintf_internal_r
000533d4 g     O .bss	00000004 __nlocale_changed
0004a8c8 g     F .text	00000058 .hidden __umodsi3
0005352c g       *ABS*	00000000 end
0004e00c g     F .text	000000c0 altera_avalon_jtag_uart_init
000401dc g     F .exceptions	00000074 alt_instruction_exception_entry
0004fa40 g       *ABS*	00000000 __CTOR_LIST__
00060000 g       *ABS*	00000000 __alt_stack_pointer
0004e988 g     F .text	0000007c alt_avalon_timer_sc_init
0004cf24 g     F .text	00000064 .hidden __clzsi2
0004e6ec g     F .text	00000224 altera_avalon_jtag_uart_write
00044a5c g     F .text	00000004 __sfp_lock_acquire
00045afc g     F .text	000000e4 memchr
000407a8 g     F .text	000021f8 ___vfprintf_internal_r
00044bc0 g     F .text	00000310 _free_r
0004d7ec g     F .text	0000022c alt_printf
000450e0 g     F .text	00000010 __locale_mb_cur_max
0004f88c g     F .text	00000180 __call_exitprocs
000533d0 g     O .bss	00000004 __mlocale_changed
000518a4 g     O .rwdata	00000004 __malloc_sbrk_base
00040250 g     F .text	0000003c _start
000533fc g     O .bss	00000004 _alt_tick_rate
000465d0 g     F .text	00000148 __lshift
00053400 g     O .bss	00000004 _alt_nticks
0004da90 g     F .text	000000fc read
0004de40 g     F .text	00000068 alt_sys_init
00040618 g     F .text	00000058 analysis_setting_parallel_port
0004f774 g     F .text	00000118 __register_exitproc
00046298 g     F .text	000001f8 __multiply
0004e378 g     F .text	00000068 altera_avalon_jtag_uart_close
0004fdec g       *ABS*	00000000 __ram_rwdata_start
0004fa40 g       *ABS*	00000000 __ram_rodata_start
00053404 g     O .bss	00000028 __malloc_current_mallinfo
00046ae4 g     F .text	0000014c __d2b
0004dea8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004f4a0 g     F .text	000000a4 alt_get_fd
0004886c g     F .text	00000054 _close_r
0004f590 g     F .text	0000007c memcmp
0004df68 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005352c g       *ABS*	00000000 __alt_stack_base
0004dfb8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042a78 g     F .text	00000154 __swsetup_r
0004b1cc g     F .text	000008e8 .hidden __divdf3
0004491c g     F .text	00000118 __sfp
00046d48 g     F .text	00000078 __copybits
00050288 g     O .rwdata	00000408 __malloc_av_
00044a68 g     F .text	00000004 __sinit_lock_release
0004bd0c g     F .text	00000718 .hidden __muldf3
00046f14 g     F .text	00000054 __sread
0004f398 g     F .text	00000108 alt_find_file
0004eb8c g     F .text	000000a4 alt_dev_llist_insert
0004d7a4 g     F .text	00000024 __malloc_lock
0004dbf0 g     F .text	000000b0 sbrk
00044670 g     F .text	0000005c _fflush_r
000488c0 g     F .text	000000c4 _calloc_r
000533c4 g       *ABS*	00000000 __bss_start
00045d28 g     F .text	00000128 memset
00040710 g     F .text	0000002c main
000533f4 g     O .bss	00000004 alt_envp
0004028c g     F .text	00000124 test_counter
000533d8 g     O .bss	00000004 __malloc_max_total_mem
0004df08 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00049abc g     F .text	00000018 __swbuf
00047048 g     F .text	00000008 __sclose
00060000 g       *ABS*	00000000 __alt_heap_limit
00048a74 g     F .text	00000014 fclose
00042dcc g     F .text	00001688 _dtoa_r
000452f0 g     F .text	0000080c _malloc_r
00049c30 g     F .text	00000030 __ascii_wctomb
000518c4 g     O .rwdata	00000004 alt_errno
00044ed0 g     F .text	000000c4 _fwalk
0004f6ac g     F .text	000000c8 putc
0004a76c g     F .text	00000084 .hidden __divsi3
00044a9c g     F .text	00000124 _malloc_trim_r
0004fa40 g       *ABS*	00000000 __CTOR_END__
00047050 g     F .text	000000dc strcmp
0004fa40 g       *ABS*	00000000 __flash_rodata_start
0004fa40 g       *ABS*	00000000 __DTOR_LIST__
0004bab4 g     F .text	00000088 .hidden __nedf2
0004de08 g     F .text	00000038 alt_irq_init
0004db8c g     F .text	00000064 alt_release_fd
0004fcb8 g     O .rodata	00000100 .hidden __clz_tab
000533cc g     O .bss	00000004 _PathLocale
0004f544 g     F .text	00000014 atexit
0004880c g     F .text	00000060 _write_r
00045110 g     F .text	00000018 setlocale
0005189c g     O .rwdata	00000004 _impure_ptr
000533ec g     O .bss	00000004 alt_argc
00044454 g     F .text	0000021c __sflush_r
0004ec90 g     F .text	00000060 _do_dtors
000450fc g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
00046974 g     F .text	00000064 __ulp
00044a84 g     F .text	00000018 __fp_unlock_all
00040670 g     F .text	00000070 measure_latency_parallel
000518b0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045128 g     F .text	0000000c localeconv
0004d1ac g     F .text	00000050 alt_ic_isr_register
000518d8 g       *ABS*	00000000 _edata
0005352c g       *ABS*	00000000 _end
00048a88 g     F .text	00000164 __fputwc
00040250 g       *ABS*	00000000 __ram_exceptions_end
0004e3e0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0004d284 g     F .text	0000008c alt_ic_irq_disable
00046f70 g     F .text	0000007c __swrite
000518a8 g     O .rwdata	00000004 __malloc_trim_threshold
000450f0 g     F .text	0000000c __locale_msgcharset
0004f558 g     F .text	00000038 exit
00044f94 g     F .text	000000c4 _fwalk_reent
00046778 g     F .text	000001fc __mdiff
0004a7f0 g     F .text	00000074 .hidden __modsi3
00060000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044a60 g     F .text	00000004 __sfp_lock_release
0004fa0c g     F .text	00000034 _exit
0004ea04 g     F .text	0000012c alt_alarm_start
00045134 g     F .text	000001bc __smakebuf_r
0004712c g     F .text	00000098 strlen
0004efec g     F .text	00000154 open
00040578 g     F .text	00000064 recovery_parallel
0004bb3c g     F .text	000000dc .hidden __gedf2
0004da18 g     F .text	0000003c alt_putchar
000518ac g     O .rwdata	00000004 __wctomb
000472c0 g     F .text	00000018 __sprint_r
0004ecf0 g     F .text	00000020 alt_icache_flush_all
000518c8 g     O .rwdata	00000004 alt_priority_mask
0004d1fc g     F .text	00000088 alt_ic_irq_enable
000429a0 g     F .text	0000001c __vfprintf_internal
00049c60 g     F .text	0000005c _wctomb_r
0004c424 g     F .text	000008fc .hidden __subdf3
000461ac g     F .text	000000b0 __lo0bits
000518d0 g     O .rwdata	00000008 alt_alarm_list
0004ec30 g     F .text	00000060 _do_ctors
00049b70 g     F .text	000000c0 wcrtomb
0004cfc4 g     F .text	000000d0 close
0004d594 g     F .text	00000084 alt_load
00048c10 g     F .text	00000080 fputwc
00044a64 g     F .text	00000004 __sinit_lock_acquire
00045f20 g     F .text	00000120 __multadd
00045ef8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08409414 	ori	at,at,592
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401dc0 	call	401dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
	IOWR_8DIRECT(0x0,OUTPUT_PORT_REG_ADDR,0x00);
   4010c:	0007883a 	mov	r3,zero
   40110:	00800084 	movi	r2,2
   40114:	10c00025 	stbio	r3,0(r2)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   40118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4011c:	0005313a 	rdctl	r2,ipending
   40120:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   4012c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40130:	00800044 	movi	r2,1
   40134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40138:	e0fffb17 	ldw	r3,-20(fp)
   4013c:	e0bffc17 	ldw	r2,-16(fp)
   40140:	1884703a 	and	r2,r3,r2
   40144:	10001426 	beq	r2,zero,40198 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   40148:	00800174 	movhi	r2,5
   4014c:	108d0b04 	addi	r2,r2,13356
   40150:	e0fffd17 	ldw	r3,-12(fp)
   40154:	180690fa 	slli	r3,r3,3
   40158:	10c5883a 	add	r2,r2,r3
   4015c:	10c00017 	ldw	r3,0(r2)
   40160:	00800174 	movhi	r2,5
   40164:	108d0b04 	addi	r2,r2,13356
   40168:	e13ffd17 	ldw	r4,-12(fp)
   4016c:	200890fa 	slli	r4,r4,3
   40170:	1105883a 	add	r2,r2,r4
   40174:	10800104 	addi	r2,r2,4
   40178:	10800017 	ldw	r2,0(r2)
   4017c:	1009883a 	mov	r4,r2
   40180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40188:	0005313a 	rdctl	r2,ipending
   4018c:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40190:	e0bfff17 	ldw	r2,-4(fp)
   40194:	00000706 	br	401b4 <alt_irq_handler+0xb8>
      }
      mask <<= 1;
   40198:	e0bffc17 	ldw	r2,-16(fp)
   4019c:	1085883a 	add	r2,r2,r2
   401a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
   401a4:	e0bffd17 	ldw	r2,-12(fp)
   401a8:	10800044 	addi	r2,r2,1
   401ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401b0:	003fe106 	br	40138 <__alt_data_end+0xfffe0138>

    active = alt_irq_pending ();
   401b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401b8:	e0bffb17 	ldw	r2,-20(fp)
   401bc:	103fdb1e 	bne	r2,zero,4012c <__alt_data_end+0xfffe012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401c0:	0001883a 	nop
}
   401c4:	0001883a 	nop
   401c8:	e037883a 	mov	sp,fp
   401cc:	dfc00117 	ldw	ra,4(sp)
   401d0:	df000017 	ldw	fp,0(sp)
   401d4:	dec00204 	addi	sp,sp,8
   401d8:	f800283a 	ret

000401dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401dc:	defffb04 	addi	sp,sp,-20
   401e0:	dfc00415 	stw	ra,16(sp)
   401e4:	df000315 	stw	fp,12(sp)
   401e8:	df000304 	addi	fp,sp,12
   401ec:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401f0:	000531fa 	rdctl	r2,exception
   401f4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401f8:	e0bffd17 	ldw	r2,-12(fp)
   401fc:	10801f0c 	andi	r2,r2,124
   40200:	1004d0ba 	srli	r2,r2,2
   40204:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   40208:	0005333a 	rdctl	r2,badaddr
   4020c:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40210:	d0a6d817 	ldw	r2,-25760(gp)
   40214:	10000726 	beq	r2,zero,40234 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40218:	d0a6d817 	ldw	r2,-25760(gp)
   4021c:	e0fffd17 	ldw	r3,-12(fp)
   40220:	e1bffe17 	ldw	r6,-8(fp)
   40224:	e17fff17 	ldw	r5,-4(fp)
   40228:	1809883a 	mov	r4,r3
   4022c:	103ee83a 	callr	r2
   40230:	00000206 	br	4023c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40234:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40238:	0005883a 	mov	r2,zero
}
   4023c:	e037883a 	mov	sp,fp
   40240:	dfc00117 	ldw	ra,4(sp)
   40244:	df000017 	ldw	fp,0(sp)
   40248:	dec00204 	addi	sp,sp,8
   4024c:	f800283a 	ret

Disassembly of section .text:

00040250 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40250:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40258:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4025c:	d6a62614 	ori	gp,gp,39064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40260:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40264:	108cf114 	ori	r2,r2,13252

    movhi r3, %hi(__bss_end)
   40268:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4026c:	18cd4b14 	ori	r3,r3,13612

    beq r2, r3, 1f
   40270:	10c00326 	beq	r2,r3,40280 <_start+0x30>

0:
    stw zero, (r2)
   40274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4027c:	10fffd36 	bltu	r2,r3,40274 <__alt_data_end+0xfffe0274>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40280:	004d5940 	call	4d594 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40284:	004d7280 	call	4d728 <alt_main>

00040288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40288:	003fff06 	br	40288 <__alt_data_end+0xfffe0288>

0004028c <test_counter>:
#define MODE_ALL_INPUT 0X00
#define ALL_IRQ_EN 0XFF
#define ALL_IRQ_CLR 0xFF

void test_counter()
{
   4028c:	defffd04 	addi	sp,sp,-12
   40290:	dfc00215 	stw	ra,8(sp)
   40294:	df000115 	stw	fp,4(sp)
   40298:	df000104 	addi	fp,sp,4
	int k;
 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, RESET_COMMAND);
   4029c:	0007883a 	mov	r3,zero
   402a0:	00802104 	movi	r2,132
   402a4:	10c00035 	stwio	r3,0(r2)
//Reset value is loaded
 printf("iCounter after reset= %x\n",IORD(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR));
   402a8:	00802004 	movi	r2,128
   402ac:	10800037 	ldwio	r2,0(r2)
   402b0:	100b883a 	mov	r5,r2
   402b4:	01000174 	movhi	r4,5
   402b8:	213e9004 	addi	r4,r4,-1472
   402bc:	004076c0 	call	4076c <printf>
//Check that counter is loaded with the reset value
 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, START_COMMAND);
   402c0:	00c00044 	movi	r3,1
   402c4:	00802104 	movi	r2,132
   402c8:	10c00035 	stwio	r3,0(r2)
//Start the counter
 alt_printf("iCounter after start= %x\n",IORD(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR));
   402cc:	00802004 	movi	r2,128
   402d0:	10800037 	ldwio	r2,0(r2)
   402d4:	100b883a 	mov	r5,r2
   402d8:	01000174 	movhi	r4,5
   402dc:	213e9704 	addi	r4,r4,-1444
   402e0:	004d7ec0 	call	4d7ec <alt_printf>
//Read a value from the running counter
 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, STOP_COMMAND);
   402e4:	00c00084 	movi	r3,2
   402e8:	00802104 	movi	r2,132
   402ec:	10c00035 	stwio	r3,0(r2)
 alt_printf("iCounter after stop1= %x\n",IORD(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR));
   402f0:	00802004 	movi	r2,128
   402f4:	10800037 	ldwio	r2,0(r2)
   402f8:	100b883a 	mov	r5,r2
   402fc:	01000174 	movhi	r4,5
   40300:	213e9e04 	addi	r4,r4,-1416
   40304:	004d7ec0 	call	4d7ec <alt_printf>
 alt_printf("iCounter after stop2= %x\n",IORD(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR));
   40308:	00802004 	movi	r2,128
   4030c:	10800037 	ldwio	r2,0(r2)
   40310:	100b883a 	mov	r5,r2
   40314:	01000174 	movhi	r4,5
   40318:	213ea504 	addi	r4,r4,-1388
   4031c:	004d7ec0 	call	4d7ec <alt_printf>
//Two consecutive reads to test that the counter is stopped. They should
//give the same result

 //RESET
 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, RESET_COMMAND);
   40320:	0007883a 	mov	r3,zero
   40324:	00802104 	movi	r2,132
   40328:	10c00035 	stwio	r3,0(r2)
 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, START_COMMAND);
   4032c:	00c00044 	movi	r3,1
   40330:	00802104 	movi	r2,132
   40334:	10c00035 	stwio	r3,0(r2)

 for(k=0;k<100000;k++); //software delay
   40338:	e03fff15 	stw	zero,-4(fp)
   4033c:	00000306 	br	4034c <test_counter+0xc0>
   40340:	e0bfff17 	ldw	r2,-4(fp)
   40344:	10800044 	addi	r2,r2,1
   40348:	e0bfff15 	stw	r2,-4(fp)
   4034c:	e0ffff17 	ldw	r3,-4(fp)
   40350:	008000b4 	movhi	r2,2
   40354:	10a1a7c4 	addi	r2,r2,-31073
   40358:	10fff90e 	bge	r2,r3,40340 <__alt_data_end+0xfffe0340>
 //Restart the counter
 alt_printf("iCounter after restart1=%x\n",IORD(CUSTOM_COUNTER_0_BASE,COUNTER_REG_ADDR));
   4035c:	00802004 	movi	r2,128
   40360:	10800037 	ldwio	r2,0(r2)
   40364:	100b883a 	mov	r5,r2
   40368:	01000174 	movhi	r4,5
   4036c:	213eac04 	addi	r4,r4,-1360
   40370:	004d7ec0 	call	4d7ec <alt_printf>
 alt_printf("iCounter after restart2=%x\n",IORD(CUSTOM_COUNTER_0_BASE,COUNTER_REG_ADDR));
   40374:	00802004 	movi	r2,128
   40378:	10800037 	ldwio	r2,0(r2)
   4037c:	100b883a 	mov	r5,r2
   40380:	01000174 	movhi	r4,5
   40384:	213eb304 	addi	r4,r4,-1332
   40388:	004d7ec0 	call	4d7ec <alt_printf>
//Two consecutive reads to test that the counter is stopped. They should
//give different results
 IOWR(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR, STOP_COMMAND);
   4038c:	00c00084 	movi	r3,2
   40390:	00802004 	movi	r2,128
   40394:	10c00035 	stwio	r3,0(r2)
}
   40398:	0001883a 	nop
   4039c:	e037883a 	mov	sp,fp
   403a0:	dfc00117 	ldw	ra,4(sp)
   403a4:	df000017 	ldw	fp,0(sp)
   403a8:	dec00204 	addi	sp,sp,8
   403ac:	f800283a 	ret

000403b0 <measurements_with_timers_recovery>:


//4.2 RECOVERY WITH TIMERS
static void my_isr_recovery_time(void* context);
void measurements_with_timers_recovery()
{
   403b0:	defffc04 	addi	sp,sp,-16
   403b4:	dfc00315 	stw	ra,12(sp)
   403b8:	df000215 	stw	fp,8(sp)
   403bc:	df000204 	addi	fp,sp,8
	void *POINT_NULL;
	 alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,my_isr_recovery_time,POINT_NULL,POINT_NULL);
   403c0:	e0bfff17 	ldw	r2,-4(fp)
   403c4:	d8800015 	stw	r2,0(sp)
   403c8:	e1ffff17 	ldw	r7,-4(fp)
   403cc:	01800134 	movhi	r6,4
   403d0:	31812104 	addi	r6,r6,1156
   403d4:	01400084 	movi	r5,2
   403d8:	0009883a 	mov	r4,zero
   403dc:	004d1ac0 	call	4d1ac <alt_ic_isr_register>

	 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,0); //Clear control register
   403e0:	0007883a 	mov	r3,zero
   403e4:	00800904 	movi	r2,36
   403e8:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,2); //Continuous mode ON
   403ec:	00c00084 	movi	r3,2
   403f0:	00800904 	movi	r2,36
   403f4:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xFFFF);
   403f8:	00ffffd4 	movui	r3,65535
   403fc:	00800a04 	movi	r2,40
   40400:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x00FF);
   40404:	00c03fc4 	movi	r3,255
   40408:	00800b04 	movi	r2,44
   4040c:	10c00035 	stwio	r3,0(r2)

	 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, RESET_COMMAND);// RESET COUNTER
   40410:	0007883a 	mov	r3,zero
   40414:	00802104 	movi	r2,132
   40418:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,3); //Enable timer interrupt
   4041c:	00c000c4 	movi	r3,3
   40420:	00800904 	movi	r2,36
   40424:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,7); //Start timer
   40428:	00c001c4 	movi	r3,7
   4042c:	00800904 	movi	r2,36
   40430:	10c00035 	stwio	r3,0(r2)
	while(1)
	{
	while(IORD(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR)==0);
   40434:	0001883a 	nop
   40438:	00802004 	movi	r2,128
   4043c:	10800037 	ldwio	r2,0(r2)
   40440:	103ffd26 	beq	r2,zero,40438 <__alt_data_end+0xfffe0438>
	 alt_printf("%x \n",IORD(CUSTOM_COUNTER_0_BASE, COUNTER_REG_ADDR));
   40444:	00802004 	movi	r2,128
   40448:	10800037 	ldwio	r2,0(r2)
   4044c:	100b883a 	mov	r5,r2
   40450:	01000174 	movhi	r4,5
   40454:	213eba04 	addi	r4,r4,-1304
   40458:	004d7ec0 	call	4d7ec <alt_printf>
	 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, STOP_COMMAND); //Stop the counter
   4045c:	00c00084 	movi	r3,2
   40460:	00802104 	movi	r2,132
   40464:	10c00035 	stwio	r3,0(r2)
	 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, RESET_COMMAND); //Reset the counter
   40468:	0007883a 	mov	r3,zero
   4046c:	00802104 	movi	r2,132
   40470:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,7); //Start timer
   40474:	00c001c4 	movi	r3,7
   40478:	00800904 	movi	r2,36
   4047c:	10c00035 	stwio	r3,0(r2)
	};
   40480:	003fec06 	br	40434 <__alt_data_end+0xfffe0434>

00040484 <my_isr_recovery_time>:
}


static void my_isr_recovery_time(void* context)
{
   40484:	defffe04 	addi	sp,sp,-8
   40488:	df000115 	stw	fp,4(sp)
   4048c:	df000104 	addi	fp,sp,4
   40490:	e13fff15 	stw	r4,-4(fp)
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,0); //Clear interrupt (ITO)
   40494:	0007883a 	mov	r3,zero
   40498:	00800904 	movi	r2,36
   4049c:	10c00035 	stwio	r3,0(r2)
 IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0); //CLEAR TO
   404a0:	0007883a 	mov	r3,zero
   404a4:	00800804 	movi	r2,32
   404a8:	10c00035 	stwio	r3,0(r2)

 //start counter
 IOWR(CUSTOM_COUNTER_0_BASE, COMMAND_REG_ADDR, START_COMMAND);
   404ac:	00c00044 	movi	r3,1
   404b0:	00802104 	movi	r2,132
   404b4:	10c00035 	stwio	r3,0(r2)

}
   404b8:	0001883a 	nop
   404bc:	e037883a 	mov	sp,fp
   404c0:	df000017 	ldw	fp,0(sp)
   404c4:	dec00104 	addi	sp,sp,4
   404c8:	f800283a 	ret

000404cc <responsive_parallel>:

//3.2 Logic Analyzer measurement


void responsive_parallel()
{
   404cc:	defffc04 	addi	sp,sp,-16
   404d0:	dfc00315 	stw	ra,12(sp)
   404d4:	df000215 	stw	fp,8(sp)
   404d8:	df000204 	addi	fp,sp,8
	void *POINT_NULL;
	int k;
	 alt_ic_isr_register(CUSTOM_PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,4,isr_parallel_port_responsive, POINT_NULL,POINT_NULL);
   404dc:	e0bfff17 	ldw	r2,-4(fp)
   404e0:	d8800015 	stw	r2,0(sp)
   404e4:	e1ffff17 	ldw	r7,-4(fp)
   404e8:	01800134 	movhi	r6,4
   404ec:	31814f04 	addi	r6,r6,1340
   404f0:	01400104 	movi	r5,4
   404f4:	013fffc4 	movi	r4,-1
   404f8:	004d1ac0 	call	4d1ac <alt_ic_isr_register>
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT);
   404fc:	00bfffc4 	movi	r2,-1
   40500:	0007883a 	mov	r3,zero
   40504:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT); //Selected as output
   40508:	00bfffc4 	movi	r2,-1
   4050c:	0007883a 	mov	r3,zero
   40510:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
   40514:	0007883a 	mov	r3,zero
   40518:	00800084 	movi	r2,2
   4051c:	10c00025 	stbio	r3,0(r2)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,IRQ_REG_ADDR,ALL_IRQ_EN);//Enable IRQ on each bit
   40520:	00ffffc4 	movi	r3,-1
   40524:	00800144 	movi	r2,5
   40528:	10c00025 	stbio	r3,0(r2)
	while(1)
	{
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01); //Bit1 is SET st IRQ
   4052c:	00c00044 	movi	r3,1
   40530:	00800084 	movi	r2,2
   40534:	10c00025 	stbio	r3,0(r2)
	}
   40538:	003ffc06 	br	4052c <__alt_data_end+0xfffe052c>

0004053c <isr_parallel_port_responsive>:
}

static void isr_parallel_port_responsive(void* context)
{
   4053c:	defffe04 	addi	sp,sp,-8
   40540:	df000115 	stw	fp,4(sp)
   40544:	df000104 	addi	fp,sp,4
   40548:	e13fff15 	stw	r4,-4(fp)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0);
   4054c:	0007883a 	mov	r3,zero
   40550:	00800084 	movi	r2,2
   40554:	10c00025 	stbio	r3,0(r2)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,CLR_END_CYCLE_ADDR,ALL_IRQ_CLR); //CLEAR IRQ
   40558:	00ffffc4 	movi	r3,-1
   4055c:	00800184 	movi	r2,6
   40560:	10c00025 	stbio	r3,0(r2)
}
   40564:	0001883a 	nop
   40568:	e037883a 	mov	sp,fp
   4056c:	df000017 	ldw	fp,0(sp)
   40570:	dec00104 	addi	sp,sp,4
   40574:	f800283a 	ret

00040578 <recovery_parallel>:

static void isr_parallel_port_recovery(void* context);
void recovery_parallel()
{
   40578:	defffc04 	addi	sp,sp,-16
   4057c:	dfc00315 	stw	ra,12(sp)
   40580:	df000215 	stw	fp,8(sp)
   40584:	df000204 	addi	fp,sp,8
	void *POINT_NULL;
	int k;
	 alt_ic_isr_register(CUSTOM_PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,4,isr_parallel_port_recovery, POINT_NULL,POINT_NULL);
   40588:	e0bfff17 	ldw	r2,-4(fp)
   4058c:	d8800015 	stw	r2,0(sp)
   40590:	e1ffff17 	ldw	r7,-4(fp)
   40594:	01800134 	movhi	r6,4
   40598:	31817704 	addi	r6,r6,1500
   4059c:	01400104 	movi	r5,4
   405a0:	013fffc4 	movi	r4,-1
   405a4:	004d1ac0 	call	4d1ac <alt_ic_isr_register>
//	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT);
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT); //Selected as output
   405a8:	00bfffc4 	movi	r2,-1
   405ac:	0007883a 	mov	r3,zero
   405b0:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
   405b4:	00c00044 	movi	r3,1
   405b8:	00800084 	movi	r2,2
   405bc:	10c00025 	stbio	r3,0(r2)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,IRQ_REG_ADDR,ALL_IRQ_EN);//Enable IRQ on each bit
   405c0:	00ffffc4 	movi	r3,-1
   405c4:	00800144 	movi	r2,5
   405c8:	10c00025 	stbio	r3,0(r2)
	while(1)
	{
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00); //Bit0 is SET st IRQ
   405cc:	0007883a 	mov	r3,zero
   405d0:	00800084 	movi	r2,2
   405d4:	10c00025 	stbio	r3,0(r2)
	}
   405d8:	003ffc06 	br	405cc <__alt_data_end+0xfffe05cc>

000405dc <isr_parallel_port_recovery>:
}

static void isr_parallel_port_recovery(void* context)
{
   405dc:	defffe04 	addi	sp,sp,-8
   405e0:	df000115 	stw	fp,4(sp)
   405e4:	df000104 	addi	fp,sp,4
   405e8:	e13fff15 	stw	r4,-4(fp)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
   405ec:	00c00044 	movi	r3,1
   405f0:	00800084 	movi	r2,2
   405f4:	10c00025 	stbio	r3,0(r2)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,CLR_END_CYCLE_ADDR,ALL_IRQ_CLR); //CLEAR IRQ
   405f8:	00ffffc4 	movi	r3,-1
   405fc:	00800184 	movi	r2,6
   40600:	10c00025 	stbio	r3,0(r2)
}
   40604:	0001883a 	nop
   40608:	e037883a 	mov	sp,fp
   4060c:	df000017 	ldw	fp,0(sp)
   40610:	dec00104 	addi	sp,sp,4
   40614:	f800283a 	ret

00040618 <analysis_setting_parallel_port>:


void analysis_setting_parallel_port()
{
   40618:	deffff04 	addi	sp,sp,-4
   4061c:	df000015 	stw	fp,0(sp)
   40620:	d839883a 	mov	fp,sp

	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,MODE_ALL_OUTPUT);
   40624:	00ffffc4 	movi	r3,-1
   40628:	00800084 	movi	r2,2
   4062c:	10c00025 	stbio	r3,0(r2)
	 //Select Parport as output
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
   40630:	0007883a 	mov	r3,zero
   40634:	00800084 	movi	r2,2
   40638:	10c00025 	stbio	r3,0(r2)
	 while(1)
	 {
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
   4063c:	00c00044 	movi	r3,1
   40640:	00800084 	movi	r2,2
   40644:	10c00025 	stbio	r3,0(r2)
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
   40648:	0007883a 	mov	r3,zero
   4064c:	00800084 	movi	r2,2
   40650:	10c00025 	stbio	r3,0(r2)
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01);
   40654:	00c00044 	movi	r3,1
   40658:	00800084 	movi	r2,2
   4065c:	10c00025 	stbio	r3,0(r2)
		 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
   40660:	0007883a 	mov	r3,zero
   40664:	00800084 	movi	r2,2
   40668:	10c00025 	stbio	r3,0(r2)
	 }
   4066c:	003ff306 	br	4063c <__alt_data_end+0xfffe063c>

00040670 <measure_latency_parallel>:

}
static void isr_latency_parallel(void* context);

void measure_latency_parallel()
{
   40670:	defffc04 	addi	sp,sp,-16
   40674:	dfc00315 	stw	ra,12(sp)
   40678:	df000215 	stw	fp,8(sp)
   4067c:	df000204 	addi	fp,sp,8


	void *POINT_NULL;
	int k;
	 alt_ic_isr_register(CUSTOM_PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,4,isr_latency_parallel, POINT_NULL,POINT_NULL);
   40680:	e0bfff17 	ldw	r2,-4(fp)
   40684:	d8800015 	stw	r2,0(sp)
   40688:	e1ffff17 	ldw	r7,-4(fp)
   4068c:	01800134 	movhi	r6,4
   40690:	3181b804 	addi	r6,r6,1760
   40694:	01400104 	movi	r5,4
   40698:	013fffc4 	movi	r4,-1
   4069c:	004d1ac0 	call	4d1ac <alt_ic_isr_register>
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT);
   406a0:	00bfffc4 	movi	r2,-1
   406a4:	0007883a 	mov	r3,zero
   406a8:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,DIRECTION_REG_ADDR,MODE_ALL_OUTPUT); //Selected as output
   406ac:	00bfffc4 	movi	r2,-1
   406b0:	0007883a 	mov	r3,zero
   406b4:	18800025 	stbio	r2,0(r3)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x00);
   406b8:	0007883a 	mov	r3,zero
   406bc:	00800084 	movi	r2,2
   406c0:	10c00025 	stbio	r3,0(r2)
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,IRQ_REG_ADDR,ALL_IRQ_EN);//Enable IRQ on each bit
   406c4:	00ffffc4 	movi	r3,-1
   406c8:	00800144 	movi	r2,5
   406cc:	10c00025 	stbio	r3,0(r2)
	while(1)
	{
	 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,OUTPUT_PORT_REG_ADDR,0x01); //Bit1 is SET st IRQ
   406d0:	00c00044 	movi	r3,1
   406d4:	00800084 	movi	r2,2
   406d8:	10c00025 	stbio	r3,0(r2)
	}
   406dc:	003ffc06 	br	406d0 <__alt_data_end+0xfffe06d0>

000406e0 <isr_latency_parallel>:

}


static void isr_latency_parallel(void* context)
{
   406e0:	defffe04 	addi	sp,sp,-8
   406e4:	df000115 	stw	fp,4(sp)
   406e8:	df000104 	addi	fp,sp,4
   406ec:	e13fff15 	stw	r4,-4(fp)
 IOWR_8DIRECT(CUSTOM_PIO_0_BASE,CLR_END_CYCLE_ADDR,ALL_IRQ_CLR); //CLEAR IRQ
   406f0:	00ffffc4 	movi	r3,-1
   406f4:	00800184 	movi	r2,6
   406f8:	10c00025 	stbio	r3,0(r2)
}
   406fc:	0001883a 	nop
   40700:	e037883a 	mov	sp,fp
   40704:	df000017 	ldw	fp,0(sp)
   40708:	dec00104 	addi	sp,sp,4
   4070c:	f800283a 	ret

00040710 <main>:
int main()
{
   40710:	defffe04 	addi	sp,sp,-8
   40714:	dfc00115 	stw	ra,4(sp)
   40718:	df000015 	stw	fp,0(sp)
   4071c:	d839883a 	mov	fp,sp

//	responsive_library_timer();
//	test_parallel_port();
//	responsive_parallel();
//	recovery_parallel();
	measure_latency_parallel();
   40720:	00406700 	call	40670 <measure_latency_parallel>

//  set_up_custom_timer();

//  set_up_library_timer();
  return 0;
   40724:	0005883a 	mov	r2,zero
}
   40728:	e037883a 	mov	sp,fp
   4072c:	dfc00117 	ldw	ra,4(sp)
   40730:	df000017 	ldw	fp,0(sp)
   40734:	dec00204 	addi	sp,sp,8
   40738:	f800283a 	ret

0004073c <_printf_r>:
   4073c:	defffd04 	addi	sp,sp,-12
   40740:	2805883a 	mov	r2,r5
   40744:	dfc00015 	stw	ra,0(sp)
   40748:	d9800115 	stw	r6,4(sp)
   4074c:	d9c00215 	stw	r7,8(sp)
   40750:	21400217 	ldw	r5,8(r4)
   40754:	d9c00104 	addi	r7,sp,4
   40758:	100d883a 	mov	r6,r2
   4075c:	00407a80 	call	407a8 <___vfprintf_internal_r>
   40760:	dfc00017 	ldw	ra,0(sp)
   40764:	dec00304 	addi	sp,sp,12
   40768:	f800283a 	ret

0004076c <printf>:
   4076c:	defffc04 	addi	sp,sp,-16
   40770:	dfc00015 	stw	ra,0(sp)
   40774:	d9400115 	stw	r5,4(sp)
   40778:	d9800215 	stw	r6,8(sp)
   4077c:	d9c00315 	stw	r7,12(sp)
   40780:	00800174 	movhi	r2,5
   40784:	10862704 	addi	r2,r2,6300
   40788:	10800017 	ldw	r2,0(r2)
   4078c:	200b883a 	mov	r5,r4
   40790:	d9800104 	addi	r6,sp,4
   40794:	11000217 	ldw	r4,8(r2)
   40798:	00429a00 	call	429a0 <__vfprintf_internal>
   4079c:	dfc00017 	ldw	ra,0(sp)
   407a0:	dec00404 	addi	sp,sp,16
   407a4:	f800283a 	ret

000407a8 <___vfprintf_internal_r>:
   407a8:	deffb804 	addi	sp,sp,-288
   407ac:	dfc04715 	stw	ra,284(sp)
   407b0:	ddc04515 	stw	r23,276(sp)
   407b4:	dd404315 	stw	r21,268(sp)
   407b8:	d9002c15 	stw	r4,176(sp)
   407bc:	282f883a 	mov	r23,r5
   407c0:	302b883a 	mov	r21,r6
   407c4:	d9c02d15 	stw	r7,180(sp)
   407c8:	df004615 	stw	fp,280(sp)
   407cc:	dd804415 	stw	r22,272(sp)
   407d0:	dd004215 	stw	r20,264(sp)
   407d4:	dcc04115 	stw	r19,260(sp)
   407d8:	dc804015 	stw	r18,256(sp)
   407dc:	dc403f15 	stw	r17,252(sp)
   407e0:	dc003e15 	stw	r16,248(sp)
   407e4:	00451040 	call	45104 <_localeconv_r>
   407e8:	10800017 	ldw	r2,0(r2)
   407ec:	1009883a 	mov	r4,r2
   407f0:	d8803415 	stw	r2,208(sp)
   407f4:	004712c0 	call	4712c <strlen>
   407f8:	d8803715 	stw	r2,220(sp)
   407fc:	d8802c17 	ldw	r2,176(sp)
   40800:	10000226 	beq	r2,zero,4080c <___vfprintf_internal_r+0x64>
   40804:	10800e17 	ldw	r2,56(r2)
   40808:	1000f926 	beq	r2,zero,40bf0 <___vfprintf_internal_r+0x448>
   4080c:	b880030b 	ldhu	r2,12(r23)
   40810:	10c8000c 	andi	r3,r2,8192
   40814:	1800061e 	bne	r3,zero,40830 <___vfprintf_internal_r+0x88>
   40818:	b9001917 	ldw	r4,100(r23)
   4081c:	00f7ffc4 	movi	r3,-8193
   40820:	10880014 	ori	r2,r2,8192
   40824:	20c6703a 	and	r3,r4,r3
   40828:	b880030d 	sth	r2,12(r23)
   4082c:	b8c01915 	stw	r3,100(r23)
   40830:	10c0020c 	andi	r3,r2,8
   40834:	1800c126 	beq	r3,zero,40b3c <___vfprintf_internal_r+0x394>
   40838:	b8c00417 	ldw	r3,16(r23)
   4083c:	1800bf26 	beq	r3,zero,40b3c <___vfprintf_internal_r+0x394>
   40840:	1080068c 	andi	r2,r2,26
   40844:	00c00284 	movi	r3,10
   40848:	10c0c426 	beq	r2,r3,40b5c <___vfprintf_internal_r+0x3b4>
   4084c:	d8c00404 	addi	r3,sp,16
   40850:	05000174 	movhi	r20,5
   40854:	d9001e04 	addi	r4,sp,120
   40858:	a53ecc84 	addi	r20,r20,-1230
   4085c:	d8c01e15 	stw	r3,120(sp)
   40860:	d8002015 	stw	zero,128(sp)
   40864:	d8001f15 	stw	zero,124(sp)
   40868:	d8003315 	stw	zero,204(sp)
   4086c:	d8003615 	stw	zero,216(sp)
   40870:	d8003815 	stw	zero,224(sp)
   40874:	1811883a 	mov	r8,r3
   40878:	d8003915 	stw	zero,228(sp)
   4087c:	d8003a15 	stw	zero,232(sp)
   40880:	d8002f15 	stw	zero,188(sp)
   40884:	d9002815 	stw	r4,160(sp)
   40888:	a8800007 	ldb	r2,0(r21)
   4088c:	10027b26 	beq	r2,zero,4127c <___vfprintf_internal_r+0xad4>
   40890:	00c00944 	movi	r3,37
   40894:	a821883a 	mov	r16,r21
   40898:	10c0021e 	bne	r2,r3,408a4 <___vfprintf_internal_r+0xfc>
   4089c:	00001406 	br	408f0 <___vfprintf_internal_r+0x148>
   408a0:	10c00326 	beq	r2,r3,408b0 <___vfprintf_internal_r+0x108>
   408a4:	84000044 	addi	r16,r16,1
   408a8:	80800007 	ldb	r2,0(r16)
   408ac:	103ffc1e 	bne	r2,zero,408a0 <__alt_data_end+0xfffe08a0>
   408b0:	8563c83a 	sub	r17,r16,r21
   408b4:	88000e26 	beq	r17,zero,408f0 <___vfprintf_internal_r+0x148>
   408b8:	d8c02017 	ldw	r3,128(sp)
   408bc:	d8801f17 	ldw	r2,124(sp)
   408c0:	45400015 	stw	r21,0(r8)
   408c4:	1c47883a 	add	r3,r3,r17
   408c8:	10800044 	addi	r2,r2,1
   408cc:	d8c02015 	stw	r3,128(sp)
   408d0:	44400115 	stw	r17,4(r8)
   408d4:	d8801f15 	stw	r2,124(sp)
   408d8:	00c001c4 	movi	r3,7
   408dc:	1880a716 	blt	r3,r2,40b7c <___vfprintf_internal_r+0x3d4>
   408e0:	42000204 	addi	r8,r8,8
   408e4:	d9402f17 	ldw	r5,188(sp)
   408e8:	2c4b883a 	add	r5,r5,r17
   408ec:	d9402f15 	stw	r5,188(sp)
   408f0:	80800007 	ldb	r2,0(r16)
   408f4:	1000a826 	beq	r2,zero,40b98 <___vfprintf_internal_r+0x3f0>
   408f8:	84400047 	ldb	r17,1(r16)
   408fc:	00bfffc4 	movi	r2,-1
   40900:	85400044 	addi	r21,r16,1
   40904:	d8002785 	stb	zero,158(sp)
   40908:	0007883a 	mov	r3,zero
   4090c:	000f883a 	mov	r7,zero
   40910:	d8802915 	stw	r2,164(sp)
   40914:	d8003115 	stw	zero,196(sp)
   40918:	0025883a 	mov	r18,zero
   4091c:	01401604 	movi	r5,88
   40920:	01800244 	movi	r6,9
   40924:	02800a84 	movi	r10,42
   40928:	02401b04 	movi	r9,108
   4092c:	ad400044 	addi	r21,r21,1
   40930:	88bff804 	addi	r2,r17,-32
   40934:	28830436 	bltu	r5,r2,41548 <___vfprintf_internal_r+0xda0>
   40938:	100490ba 	slli	r2,r2,2
   4093c:	01000134 	movhi	r4,4
   40940:	21025404 	addi	r4,r4,2384
   40944:	1105883a 	add	r2,r2,r4
   40948:	10800017 	ldw	r2,0(r2)
   4094c:	1000683a 	jmp	r2
   40950:	00041468 	cmpgeui	zero,zero,4177
   40954:	00041548 	cmpgei	zero,zero,4181
   40958:	00041548 	cmpgei	zero,zero,4181
   4095c:	00041488 	cmpgei	zero,zero,4178
   40960:	00041548 	cmpgei	zero,zero,4181
   40964:	00041548 	cmpgei	zero,zero,4181
   40968:	00041548 	cmpgei	zero,zero,4181
   4096c:	00041548 	cmpgei	zero,zero,4181
   40970:	00041548 	cmpgei	zero,zero,4181
   40974:	00041548 	cmpgei	zero,zero,4181
   40978:	00040bfc 	xorhi	zero,zero,4143
   4097c:	000413a4 	muli	zero,zero,4174
   40980:	00041548 	cmpgei	zero,zero,4181
   40984:	00040ac4 	movi	zero,4139
   40988:	00040c24 	muli	zero,zero,4144
   4098c:	00041548 	cmpgei	zero,zero,4181
   40990:	00040c64 	muli	zero,zero,4145
   40994:	00040c70 	cmpltui	zero,zero,4145
   40998:	00040c70 	cmpltui	zero,zero,4145
   4099c:	00040c70 	cmpltui	zero,zero,4145
   409a0:	00040c70 	cmpltui	zero,zero,4145
   409a4:	00040c70 	cmpltui	zero,zero,4145
   409a8:	00040c70 	cmpltui	zero,zero,4145
   409ac:	00040c70 	cmpltui	zero,zero,4145
   409b0:	00040c70 	cmpltui	zero,zero,4145
   409b4:	00040c70 	cmpltui	zero,zero,4145
   409b8:	00041548 	cmpgei	zero,zero,4181
   409bc:	00041548 	cmpgei	zero,zero,4181
   409c0:	00041548 	cmpgei	zero,zero,4181
   409c4:	00041548 	cmpgei	zero,zero,4181
   409c8:	00041548 	cmpgei	zero,zero,4181
   409cc:	00041548 	cmpgei	zero,zero,4181
   409d0:	00041548 	cmpgei	zero,zero,4181
   409d4:	00041548 	cmpgei	zero,zero,4181
   409d8:	00041548 	cmpgei	zero,zero,4181
   409dc:	00041548 	cmpgei	zero,zero,4181
   409e0:	00040ca4 	muli	zero,zero,4146
   409e4:	00040d60 	cmpeqi	zero,zero,4149
   409e8:	00041548 	cmpgei	zero,zero,4181
   409ec:	00040d60 	cmpeqi	zero,zero,4149
   409f0:	00041548 	cmpgei	zero,zero,4181
   409f4:	00041548 	cmpgei	zero,zero,4181
   409f8:	00041548 	cmpgei	zero,zero,4181
   409fc:	00041548 	cmpgei	zero,zero,4181
   40a00:	00040e00 	call	40e0 <__reset-0x3bf20>
   40a04:	00041548 	cmpgei	zero,zero,4181
   40a08:	00041548 	cmpgei	zero,zero,4181
   40a0c:	00040e0c 	andi	zero,zero,4152
   40a10:	00041548 	cmpgei	zero,zero,4181
   40a14:	00041548 	cmpgei	zero,zero,4181
   40a18:	00041548 	cmpgei	zero,zero,4181
   40a1c:	00041548 	cmpgei	zero,zero,4181
   40a20:	00041548 	cmpgei	zero,zero,4181
   40a24:	00041284 	movi	zero,4170
   40a28:	00041548 	cmpgei	zero,zero,4181
   40a2c:	00041548 	cmpgei	zero,zero,4181
   40a30:	000412e4 	muli	zero,zero,4171
   40a34:	00041548 	cmpgei	zero,zero,4181
   40a38:	00041548 	cmpgei	zero,zero,4181
   40a3c:	00041548 	cmpgei	zero,zero,4181
   40a40:	00041548 	cmpgei	zero,zero,4181
   40a44:	00041548 	cmpgei	zero,zero,4181
   40a48:	00041548 	cmpgei	zero,zero,4181
   40a4c:	00041548 	cmpgei	zero,zero,4181
   40a50:	00041548 	cmpgei	zero,zero,4181
   40a54:	00041548 	cmpgei	zero,zero,4181
   40a58:	00041548 	cmpgei	zero,zero,4181
   40a5c:	000414f4 	movhi	zero,4179
   40a60:	00041494 	movui	zero,4178
   40a64:	00040d60 	cmpeqi	zero,zero,4149
   40a68:	00040d60 	cmpeqi	zero,zero,4149
   40a6c:	00040d60 	cmpeqi	zero,zero,4149
   40a70:	000414a4 	muli	zero,zero,4178
   40a74:	00041494 	movui	zero,4178
   40a78:	00041548 	cmpgei	zero,zero,4181
   40a7c:	00041548 	cmpgei	zero,zero,4181
   40a80:	000414b0 	cmpltui	zero,zero,4178
   40a84:	00041548 	cmpgei	zero,zero,4181
   40a88:	000414c0 	call	414c <__reset-0x3beb4>
   40a8c:	00041394 	movui	zero,4174
   40a90:	00040ad0 	cmplti	zero,zero,4139
   40a94:	000413b4 	movhi	zero,4174
   40a98:	00041548 	cmpgei	zero,zero,4181
   40a9c:	000413c0 	call	413c <__reset-0x3bec4>
   40aa0:	00041548 	cmpgei	zero,zero,4181
   40aa4:	0004141c 	xori	zero,zero,4176
   40aa8:	00041548 	cmpgei	zero,zero,4181
   40aac:	00041548 	cmpgei	zero,zero,4181
   40ab0:	0004142c 	andhi	zero,zero,4176
   40ab4:	d9003117 	ldw	r4,196(sp)
   40ab8:	d8802d15 	stw	r2,180(sp)
   40abc:	0109c83a 	sub	r4,zero,r4
   40ac0:	d9003115 	stw	r4,196(sp)
   40ac4:	94800114 	ori	r18,r18,4
   40ac8:	ac400007 	ldb	r17,0(r21)
   40acc:	003f9706 	br	4092c <__alt_data_end+0xfffe092c>
   40ad0:	00800c04 	movi	r2,48
   40ad4:	d9002d17 	ldw	r4,180(sp)
   40ad8:	d9402917 	ldw	r5,164(sp)
   40adc:	d8802705 	stb	r2,156(sp)
   40ae0:	00801e04 	movi	r2,120
   40ae4:	d8802745 	stb	r2,157(sp)
   40ae8:	d8002785 	stb	zero,158(sp)
   40aec:	20c00104 	addi	r3,r4,4
   40af0:	24c00017 	ldw	r19,0(r4)
   40af4:	002d883a 	mov	r22,zero
   40af8:	90800094 	ori	r2,r18,2
   40afc:	28029a16 	blt	r5,zero,41568 <___vfprintf_internal_r+0xdc0>
   40b00:	00bfdfc4 	movi	r2,-129
   40b04:	90a4703a 	and	r18,r18,r2
   40b08:	d8c02d15 	stw	r3,180(sp)
   40b0c:	94800094 	ori	r18,r18,2
   40b10:	9802871e 	bne	r19,zero,41530 <___vfprintf_internal_r+0xd88>
   40b14:	00800174 	movhi	r2,5
   40b18:	10bec504 	addi	r2,r2,-1260
   40b1c:	d8803915 	stw	r2,228(sp)
   40b20:	04401e04 	movi	r17,120
   40b24:	d8802917 	ldw	r2,164(sp)
   40b28:	0039883a 	mov	fp,zero
   40b2c:	1001e926 	beq	r2,zero,412d4 <___vfprintf_internal_r+0xb2c>
   40b30:	0027883a 	mov	r19,zero
   40b34:	002d883a 	mov	r22,zero
   40b38:	00020506 	br	41350 <___vfprintf_internal_r+0xba8>
   40b3c:	d9002c17 	ldw	r4,176(sp)
   40b40:	b80b883a 	mov	r5,r23
   40b44:	0042a780 	call	42a78 <__swsetup_r>
   40b48:	1005ac1e 	bne	r2,zero,421fc <___vfprintf_internal_r+0x1a54>
   40b4c:	b880030b 	ldhu	r2,12(r23)
   40b50:	00c00284 	movi	r3,10
   40b54:	1080068c 	andi	r2,r2,26
   40b58:	10ff3c1e 	bne	r2,r3,4084c <__alt_data_end+0xfffe084c>
   40b5c:	b880038f 	ldh	r2,14(r23)
   40b60:	103f3a16 	blt	r2,zero,4084c <__alt_data_end+0xfffe084c>
   40b64:	d9c02d17 	ldw	r7,180(sp)
   40b68:	d9002c17 	ldw	r4,176(sp)
   40b6c:	a80d883a 	mov	r6,r21
   40b70:	b80b883a 	mov	r5,r23
   40b74:	00429bc0 	call	429bc <__sbprintf>
   40b78:	00001106 	br	40bc0 <___vfprintf_internal_r+0x418>
   40b7c:	d9002c17 	ldw	r4,176(sp)
   40b80:	d9801e04 	addi	r6,sp,120
   40b84:	b80b883a 	mov	r5,r23
   40b88:	00472c00 	call	472c0 <__sprint_r>
   40b8c:	1000081e 	bne	r2,zero,40bb0 <___vfprintf_internal_r+0x408>
   40b90:	da000404 	addi	r8,sp,16
   40b94:	003f5306 	br	408e4 <__alt_data_end+0xfffe08e4>
   40b98:	d8802017 	ldw	r2,128(sp)
   40b9c:	10000426 	beq	r2,zero,40bb0 <___vfprintf_internal_r+0x408>
   40ba0:	d9002c17 	ldw	r4,176(sp)
   40ba4:	d9801e04 	addi	r6,sp,120
   40ba8:	b80b883a 	mov	r5,r23
   40bac:	00472c00 	call	472c0 <__sprint_r>
   40bb0:	b880030b 	ldhu	r2,12(r23)
   40bb4:	1080100c 	andi	r2,r2,64
   40bb8:	1005901e 	bne	r2,zero,421fc <___vfprintf_internal_r+0x1a54>
   40bbc:	d8802f17 	ldw	r2,188(sp)
   40bc0:	dfc04717 	ldw	ra,284(sp)
   40bc4:	df004617 	ldw	fp,280(sp)
   40bc8:	ddc04517 	ldw	r23,276(sp)
   40bcc:	dd804417 	ldw	r22,272(sp)
   40bd0:	dd404317 	ldw	r21,268(sp)
   40bd4:	dd004217 	ldw	r20,264(sp)
   40bd8:	dcc04117 	ldw	r19,260(sp)
   40bdc:	dc804017 	ldw	r18,256(sp)
   40be0:	dc403f17 	ldw	r17,252(sp)
   40be4:	dc003e17 	ldw	r16,248(sp)
   40be8:	dec04804 	addi	sp,sp,288
   40bec:	f800283a 	ret
   40bf0:	d9002c17 	ldw	r4,176(sp)
   40bf4:	0044a4c0 	call	44a4c <__sinit>
   40bf8:	003f0406 	br	4080c <__alt_data_end+0xfffe080c>
   40bfc:	d8802d17 	ldw	r2,180(sp)
   40c00:	d9002d17 	ldw	r4,180(sp)
   40c04:	10800017 	ldw	r2,0(r2)
   40c08:	d8803115 	stw	r2,196(sp)
   40c0c:	20800104 	addi	r2,r4,4
   40c10:	d9003117 	ldw	r4,196(sp)
   40c14:	203fa716 	blt	r4,zero,40ab4 <__alt_data_end+0xfffe0ab4>
   40c18:	d8802d15 	stw	r2,180(sp)
   40c1c:	ac400007 	ldb	r17,0(r21)
   40c20:	003f4206 	br	4092c <__alt_data_end+0xfffe092c>
   40c24:	ac400007 	ldb	r17,0(r21)
   40c28:	aac00044 	addi	r11,r21,1
   40c2c:	8a872826 	beq	r17,r10,428d0 <___vfprintf_internal_r+0x2128>
   40c30:	88bff404 	addi	r2,r17,-48
   40c34:	0009883a 	mov	r4,zero
   40c38:	30867d36 	bltu	r6,r2,42630 <___vfprintf_internal_r+0x1e88>
   40c3c:	5c400007 	ldb	r17,0(r11)
   40c40:	210002a4 	muli	r4,r4,10
   40c44:	5d400044 	addi	r21,r11,1
   40c48:	a817883a 	mov	r11,r21
   40c4c:	2089883a 	add	r4,r4,r2
   40c50:	88bff404 	addi	r2,r17,-48
   40c54:	30bff92e 	bgeu	r6,r2,40c3c <__alt_data_end+0xfffe0c3c>
   40c58:	2005c916 	blt	r4,zero,42380 <___vfprintf_internal_r+0x1bd8>
   40c5c:	d9002915 	stw	r4,164(sp)
   40c60:	003f3306 	br	40930 <__alt_data_end+0xfffe0930>
   40c64:	94802014 	ori	r18,r18,128
   40c68:	ac400007 	ldb	r17,0(r21)
   40c6c:	003f2f06 	br	4092c <__alt_data_end+0xfffe092c>
   40c70:	a809883a 	mov	r4,r21
   40c74:	d8003115 	stw	zero,196(sp)
   40c78:	88bff404 	addi	r2,r17,-48
   40c7c:	0017883a 	mov	r11,zero
   40c80:	24400007 	ldb	r17,0(r4)
   40c84:	5ac002a4 	muli	r11,r11,10
   40c88:	ad400044 	addi	r21,r21,1
   40c8c:	a809883a 	mov	r4,r21
   40c90:	12d7883a 	add	r11,r2,r11
   40c94:	88bff404 	addi	r2,r17,-48
   40c98:	30bff92e 	bgeu	r6,r2,40c80 <__alt_data_end+0xfffe0c80>
   40c9c:	dac03115 	stw	r11,196(sp)
   40ca0:	003f2306 	br	40930 <__alt_data_end+0xfffe0930>
   40ca4:	18c03fcc 	andi	r3,r3,255
   40ca8:	18072b1e 	bne	r3,zero,42958 <___vfprintf_internal_r+0x21b0>
   40cac:	94800414 	ori	r18,r18,16
   40cb0:	9080080c 	andi	r2,r18,32
   40cb4:	10037b26 	beq	r2,zero,41aa4 <___vfprintf_internal_r+0x12fc>
   40cb8:	d9402d17 	ldw	r5,180(sp)
   40cbc:	28800117 	ldw	r2,4(r5)
   40cc0:	2cc00017 	ldw	r19,0(r5)
   40cc4:	29400204 	addi	r5,r5,8
   40cc8:	d9402d15 	stw	r5,180(sp)
   40ccc:	102d883a 	mov	r22,r2
   40cd0:	10044b16 	blt	r2,zero,41e00 <___vfprintf_internal_r+0x1658>
   40cd4:	d9402917 	ldw	r5,164(sp)
   40cd8:	df002783 	ldbu	fp,158(sp)
   40cdc:	2803bc16 	blt	r5,zero,41bd0 <___vfprintf_internal_r+0x1428>
   40ce0:	00ffdfc4 	movi	r3,-129
   40ce4:	9d84b03a 	or	r2,r19,r22
   40ce8:	90e4703a 	and	r18,r18,r3
   40cec:	10017726 	beq	r2,zero,412cc <___vfprintf_internal_r+0xb24>
   40cf0:	b0038326 	beq	r22,zero,41b00 <___vfprintf_internal_r+0x1358>
   40cf4:	dc402a15 	stw	r17,168(sp)
   40cf8:	dc001e04 	addi	r16,sp,120
   40cfc:	b023883a 	mov	r17,r22
   40d00:	402d883a 	mov	r22,r8
   40d04:	9809883a 	mov	r4,r19
   40d08:	880b883a 	mov	r5,r17
   40d0c:	01800284 	movi	r6,10
   40d10:	000f883a 	mov	r7,zero
   40d14:	004a2340 	call	4a234 <__umoddi3>
   40d18:	10800c04 	addi	r2,r2,48
   40d1c:	843fffc4 	addi	r16,r16,-1
   40d20:	9809883a 	mov	r4,r19
   40d24:	880b883a 	mov	r5,r17
   40d28:	80800005 	stb	r2,0(r16)
   40d2c:	01800284 	movi	r6,10
   40d30:	000f883a 	mov	r7,zero
   40d34:	0049cbc0 	call	49cbc <__udivdi3>
   40d38:	1027883a 	mov	r19,r2
   40d3c:	10c4b03a 	or	r2,r2,r3
   40d40:	1823883a 	mov	r17,r3
   40d44:	103fef1e 	bne	r2,zero,40d04 <__alt_data_end+0xfffe0d04>
   40d48:	d8c02817 	ldw	r3,160(sp)
   40d4c:	dc402a17 	ldw	r17,168(sp)
   40d50:	b011883a 	mov	r8,r22
   40d54:	1c07c83a 	sub	r3,r3,r16
   40d58:	d8c02e15 	stw	r3,184(sp)
   40d5c:	00005906 	br	40ec4 <___vfprintf_internal_r+0x71c>
   40d60:	18c03fcc 	andi	r3,r3,255
   40d64:	1806fa1e 	bne	r3,zero,42950 <___vfprintf_internal_r+0x21a8>
   40d68:	9080020c 	andi	r2,r18,8
   40d6c:	10048a26 	beq	r2,zero,41f98 <___vfprintf_internal_r+0x17f0>
   40d70:	d8c02d17 	ldw	r3,180(sp)
   40d74:	d9002d17 	ldw	r4,180(sp)
   40d78:	d9402d17 	ldw	r5,180(sp)
   40d7c:	18c00017 	ldw	r3,0(r3)
   40d80:	21000117 	ldw	r4,4(r4)
   40d84:	29400204 	addi	r5,r5,8
   40d88:	d8c03615 	stw	r3,216(sp)
   40d8c:	d9003815 	stw	r4,224(sp)
   40d90:	d9402d15 	stw	r5,180(sp)
   40d94:	d9003617 	ldw	r4,216(sp)
   40d98:	d9403817 	ldw	r5,224(sp)
   40d9c:	da003d15 	stw	r8,244(sp)
   40da0:	04000044 	movi	r16,1
   40da4:	0046e4c0 	call	46e4c <__fpclassifyd>
   40da8:	da003d17 	ldw	r8,244(sp)
   40dac:	14041f1e 	bne	r2,r16,41e2c <___vfprintf_internal_r+0x1684>
   40db0:	d9003617 	ldw	r4,216(sp)
   40db4:	d9403817 	ldw	r5,224(sp)
   40db8:	000d883a 	mov	r6,zero
   40dbc:	000f883a 	mov	r7,zero
   40dc0:	004bc180 	call	4bc18 <__ledf2>
   40dc4:	da003d17 	ldw	r8,244(sp)
   40dc8:	1005be16 	blt	r2,zero,424c4 <___vfprintf_internal_r+0x1d1c>
   40dcc:	df002783 	ldbu	fp,158(sp)
   40dd0:	008011c4 	movi	r2,71
   40dd4:	1445330e 	bge	r2,r17,422a4 <___vfprintf_internal_r+0x1afc>
   40dd8:	04000174 	movhi	r16,5
   40ddc:	843ebd04 	addi	r16,r16,-1292
   40de0:	00c000c4 	movi	r3,3
   40de4:	00bfdfc4 	movi	r2,-129
   40de8:	d8c02a15 	stw	r3,168(sp)
   40dec:	90a4703a 	and	r18,r18,r2
   40df0:	d8c02e15 	stw	r3,184(sp)
   40df4:	d8002915 	stw	zero,164(sp)
   40df8:	d8003215 	stw	zero,200(sp)
   40dfc:	00003706 	br	40edc <___vfprintf_internal_r+0x734>
   40e00:	94800214 	ori	r18,r18,8
   40e04:	ac400007 	ldb	r17,0(r21)
   40e08:	003ec806 	br	4092c <__alt_data_end+0xfffe092c>
   40e0c:	18c03fcc 	andi	r3,r3,255
   40e10:	1806db1e 	bne	r3,zero,42980 <___vfprintf_internal_r+0x21d8>
   40e14:	94800414 	ori	r18,r18,16
   40e18:	9080080c 	andi	r2,r18,32
   40e1c:	1002d826 	beq	r2,zero,41980 <___vfprintf_internal_r+0x11d8>
   40e20:	d9402d17 	ldw	r5,180(sp)
   40e24:	d8c02917 	ldw	r3,164(sp)
   40e28:	d8002785 	stb	zero,158(sp)
   40e2c:	28800204 	addi	r2,r5,8
   40e30:	2cc00017 	ldw	r19,0(r5)
   40e34:	2d800117 	ldw	r22,4(r5)
   40e38:	18048f16 	blt	r3,zero,42078 <___vfprintf_internal_r+0x18d0>
   40e3c:	013fdfc4 	movi	r4,-129
   40e40:	9d86b03a 	or	r3,r19,r22
   40e44:	d8802d15 	stw	r2,180(sp)
   40e48:	9124703a 	and	r18,r18,r4
   40e4c:	1802d91e 	bne	r3,zero,419b4 <___vfprintf_internal_r+0x120c>
   40e50:	d8c02917 	ldw	r3,164(sp)
   40e54:	0039883a 	mov	fp,zero
   40e58:	1805c326 	beq	r3,zero,42568 <___vfprintf_internal_r+0x1dc0>
   40e5c:	0027883a 	mov	r19,zero
   40e60:	002d883a 	mov	r22,zero
   40e64:	dc001e04 	addi	r16,sp,120
   40e68:	9806d0fa 	srli	r3,r19,3
   40e6c:	b008977a 	slli	r4,r22,29
   40e70:	b02cd0fa 	srli	r22,r22,3
   40e74:	9cc001cc 	andi	r19,r19,7
   40e78:	98800c04 	addi	r2,r19,48
   40e7c:	843fffc4 	addi	r16,r16,-1
   40e80:	20e6b03a 	or	r19,r4,r3
   40e84:	80800005 	stb	r2,0(r16)
   40e88:	9d86b03a 	or	r3,r19,r22
   40e8c:	183ff61e 	bne	r3,zero,40e68 <__alt_data_end+0xfffe0e68>
   40e90:	90c0004c 	andi	r3,r18,1
   40e94:	18013b26 	beq	r3,zero,41384 <___vfprintf_internal_r+0xbdc>
   40e98:	10803fcc 	andi	r2,r2,255
   40e9c:	1080201c 	xori	r2,r2,128
   40ea0:	10bfe004 	addi	r2,r2,-128
   40ea4:	00c00c04 	movi	r3,48
   40ea8:	10c13626 	beq	r2,r3,41384 <___vfprintf_internal_r+0xbdc>
   40eac:	80ffffc5 	stb	r3,-1(r16)
   40eb0:	d8c02817 	ldw	r3,160(sp)
   40eb4:	80bfffc4 	addi	r2,r16,-1
   40eb8:	1021883a 	mov	r16,r2
   40ebc:	1887c83a 	sub	r3,r3,r2
   40ec0:	d8c02e15 	stw	r3,184(sp)
   40ec4:	d8802e17 	ldw	r2,184(sp)
   40ec8:	d9002917 	ldw	r4,164(sp)
   40ecc:	1100010e 	bge	r2,r4,40ed4 <___vfprintf_internal_r+0x72c>
   40ed0:	2005883a 	mov	r2,r4
   40ed4:	d8802a15 	stw	r2,168(sp)
   40ed8:	d8003215 	stw	zero,200(sp)
   40edc:	e7003fcc 	andi	fp,fp,255
   40ee0:	e700201c 	xori	fp,fp,128
   40ee4:	e73fe004 	addi	fp,fp,-128
   40ee8:	e0000326 	beq	fp,zero,40ef8 <___vfprintf_internal_r+0x750>
   40eec:	d8c02a17 	ldw	r3,168(sp)
   40ef0:	18c00044 	addi	r3,r3,1
   40ef4:	d8c02a15 	stw	r3,168(sp)
   40ef8:	90c0008c 	andi	r3,r18,2
   40efc:	d8c02b15 	stw	r3,172(sp)
   40f00:	18000326 	beq	r3,zero,40f10 <___vfprintf_internal_r+0x768>
   40f04:	d8c02a17 	ldw	r3,168(sp)
   40f08:	18c00084 	addi	r3,r3,2
   40f0c:	d8c02a15 	stw	r3,168(sp)
   40f10:	90c0210c 	andi	r3,r18,132
   40f14:	d8c03015 	stw	r3,192(sp)
   40f18:	1801a31e 	bne	r3,zero,415a8 <___vfprintf_internal_r+0xe00>
   40f1c:	d9003117 	ldw	r4,196(sp)
   40f20:	d8c02a17 	ldw	r3,168(sp)
   40f24:	20e7c83a 	sub	r19,r4,r3
   40f28:	04c19f0e 	bge	zero,r19,415a8 <___vfprintf_internal_r+0xe00>
   40f2c:	02400404 	movi	r9,16
   40f30:	d8c02017 	ldw	r3,128(sp)
   40f34:	d8801f17 	ldw	r2,124(sp)
   40f38:	4cc50d0e 	bge	r9,r19,42370 <___vfprintf_internal_r+0x1bc8>
   40f3c:	01400174 	movhi	r5,5
   40f40:	297ed084 	addi	r5,r5,-1214
   40f44:	dc403b15 	stw	r17,236(sp)
   40f48:	d9403515 	stw	r5,212(sp)
   40f4c:	9823883a 	mov	r17,r19
   40f50:	482d883a 	mov	r22,r9
   40f54:	9027883a 	mov	r19,r18
   40f58:	070001c4 	movi	fp,7
   40f5c:	8025883a 	mov	r18,r16
   40f60:	dc002c17 	ldw	r16,176(sp)
   40f64:	00000306 	br	40f74 <___vfprintf_internal_r+0x7cc>
   40f68:	8c7ffc04 	addi	r17,r17,-16
   40f6c:	42000204 	addi	r8,r8,8
   40f70:	b440130e 	bge	r22,r17,40fc0 <___vfprintf_internal_r+0x818>
   40f74:	01000174 	movhi	r4,5
   40f78:	18c00404 	addi	r3,r3,16
   40f7c:	10800044 	addi	r2,r2,1
   40f80:	213ed084 	addi	r4,r4,-1214
   40f84:	41000015 	stw	r4,0(r8)
   40f88:	45800115 	stw	r22,4(r8)
   40f8c:	d8c02015 	stw	r3,128(sp)
   40f90:	d8801f15 	stw	r2,124(sp)
   40f94:	e0bff40e 	bge	fp,r2,40f68 <__alt_data_end+0xfffe0f68>
   40f98:	d9801e04 	addi	r6,sp,120
   40f9c:	b80b883a 	mov	r5,r23
   40fa0:	8009883a 	mov	r4,r16
   40fa4:	00472c00 	call	472c0 <__sprint_r>
   40fa8:	103f011e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   40fac:	8c7ffc04 	addi	r17,r17,-16
   40fb0:	d8c02017 	ldw	r3,128(sp)
   40fb4:	d8801f17 	ldw	r2,124(sp)
   40fb8:	da000404 	addi	r8,sp,16
   40fbc:	b47fed16 	blt	r22,r17,40f74 <__alt_data_end+0xfffe0f74>
   40fc0:	9021883a 	mov	r16,r18
   40fc4:	9825883a 	mov	r18,r19
   40fc8:	8827883a 	mov	r19,r17
   40fcc:	dc403b17 	ldw	r17,236(sp)
   40fd0:	d9403517 	ldw	r5,212(sp)
   40fd4:	98c7883a 	add	r3,r19,r3
   40fd8:	10800044 	addi	r2,r2,1
   40fdc:	41400015 	stw	r5,0(r8)
   40fe0:	44c00115 	stw	r19,4(r8)
   40fe4:	d8c02015 	stw	r3,128(sp)
   40fe8:	d8801f15 	stw	r2,124(sp)
   40fec:	010001c4 	movi	r4,7
   40ff0:	2082a316 	blt	r4,r2,41a80 <___vfprintf_internal_r+0x12d8>
   40ff4:	df002787 	ldb	fp,158(sp)
   40ff8:	42000204 	addi	r8,r8,8
   40ffc:	e0000c26 	beq	fp,zero,41030 <___vfprintf_internal_r+0x888>
   41000:	d8801f17 	ldw	r2,124(sp)
   41004:	d9002784 	addi	r4,sp,158
   41008:	18c00044 	addi	r3,r3,1
   4100c:	10800044 	addi	r2,r2,1
   41010:	41000015 	stw	r4,0(r8)
   41014:	01000044 	movi	r4,1
   41018:	41000115 	stw	r4,4(r8)
   4101c:	d8c02015 	stw	r3,128(sp)
   41020:	d8801f15 	stw	r2,124(sp)
   41024:	010001c4 	movi	r4,7
   41028:	20823c16 	blt	r4,r2,4191c <___vfprintf_internal_r+0x1174>
   4102c:	42000204 	addi	r8,r8,8
   41030:	d8802b17 	ldw	r2,172(sp)
   41034:	10000c26 	beq	r2,zero,41068 <___vfprintf_internal_r+0x8c0>
   41038:	d8801f17 	ldw	r2,124(sp)
   4103c:	d9002704 	addi	r4,sp,156
   41040:	18c00084 	addi	r3,r3,2
   41044:	10800044 	addi	r2,r2,1
   41048:	41000015 	stw	r4,0(r8)
   4104c:	01000084 	movi	r4,2
   41050:	41000115 	stw	r4,4(r8)
   41054:	d8c02015 	stw	r3,128(sp)
   41058:	d8801f15 	stw	r2,124(sp)
   4105c:	010001c4 	movi	r4,7
   41060:	20823616 	blt	r4,r2,4193c <___vfprintf_internal_r+0x1194>
   41064:	42000204 	addi	r8,r8,8
   41068:	d9003017 	ldw	r4,192(sp)
   4106c:	00802004 	movi	r2,128
   41070:	20819926 	beq	r4,r2,416d8 <___vfprintf_internal_r+0xf30>
   41074:	d9402917 	ldw	r5,164(sp)
   41078:	d8802e17 	ldw	r2,184(sp)
   4107c:	28adc83a 	sub	r22,r5,r2
   41080:	0580310e 	bge	zero,r22,41148 <___vfprintf_internal_r+0x9a0>
   41084:	07000404 	movi	fp,16
   41088:	d8801f17 	ldw	r2,124(sp)
   4108c:	e584140e 	bge	fp,r22,420e0 <___vfprintf_internal_r+0x1938>
   41090:	01400174 	movhi	r5,5
   41094:	297ecc84 	addi	r5,r5,-1230
   41098:	dc402915 	stw	r17,164(sp)
   4109c:	d9402b15 	stw	r5,172(sp)
   410a0:	b023883a 	mov	r17,r22
   410a4:	04c001c4 	movi	r19,7
   410a8:	a82d883a 	mov	r22,r21
   410ac:	902b883a 	mov	r21,r18
   410b0:	8025883a 	mov	r18,r16
   410b4:	dc002c17 	ldw	r16,176(sp)
   410b8:	00000306 	br	410c8 <___vfprintf_internal_r+0x920>
   410bc:	8c7ffc04 	addi	r17,r17,-16
   410c0:	42000204 	addi	r8,r8,8
   410c4:	e440110e 	bge	fp,r17,4110c <___vfprintf_internal_r+0x964>
   410c8:	18c00404 	addi	r3,r3,16
   410cc:	10800044 	addi	r2,r2,1
   410d0:	45000015 	stw	r20,0(r8)
   410d4:	47000115 	stw	fp,4(r8)
   410d8:	d8c02015 	stw	r3,128(sp)
   410dc:	d8801f15 	stw	r2,124(sp)
   410e0:	98bff60e 	bge	r19,r2,410bc <__alt_data_end+0xfffe10bc>
   410e4:	d9801e04 	addi	r6,sp,120
   410e8:	b80b883a 	mov	r5,r23
   410ec:	8009883a 	mov	r4,r16
   410f0:	00472c00 	call	472c0 <__sprint_r>
   410f4:	103eae1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   410f8:	8c7ffc04 	addi	r17,r17,-16
   410fc:	d8c02017 	ldw	r3,128(sp)
   41100:	d8801f17 	ldw	r2,124(sp)
   41104:	da000404 	addi	r8,sp,16
   41108:	e47fef16 	blt	fp,r17,410c8 <__alt_data_end+0xfffe10c8>
   4110c:	9021883a 	mov	r16,r18
   41110:	a825883a 	mov	r18,r21
   41114:	b02b883a 	mov	r21,r22
   41118:	882d883a 	mov	r22,r17
   4111c:	dc402917 	ldw	r17,164(sp)
   41120:	d9002b17 	ldw	r4,172(sp)
   41124:	1d87883a 	add	r3,r3,r22
   41128:	10800044 	addi	r2,r2,1
   4112c:	41000015 	stw	r4,0(r8)
   41130:	45800115 	stw	r22,4(r8)
   41134:	d8c02015 	stw	r3,128(sp)
   41138:	d8801f15 	stw	r2,124(sp)
   4113c:	010001c4 	movi	r4,7
   41140:	2081ee16 	blt	r4,r2,418fc <___vfprintf_internal_r+0x1154>
   41144:	42000204 	addi	r8,r8,8
   41148:	9080400c 	andi	r2,r18,256
   4114c:	1001181e 	bne	r2,zero,415b0 <___vfprintf_internal_r+0xe08>
   41150:	d9402e17 	ldw	r5,184(sp)
   41154:	d8801f17 	ldw	r2,124(sp)
   41158:	44000015 	stw	r16,0(r8)
   4115c:	1947883a 	add	r3,r3,r5
   41160:	10800044 	addi	r2,r2,1
   41164:	41400115 	stw	r5,4(r8)
   41168:	d8c02015 	stw	r3,128(sp)
   4116c:	d8801f15 	stw	r2,124(sp)
   41170:	010001c4 	movi	r4,7
   41174:	2081d316 	blt	r4,r2,418c4 <___vfprintf_internal_r+0x111c>
   41178:	42000204 	addi	r8,r8,8
   4117c:	9480010c 	andi	r18,r18,4
   41180:	90003226 	beq	r18,zero,4124c <___vfprintf_internal_r+0xaa4>
   41184:	d9403117 	ldw	r5,196(sp)
   41188:	d8802a17 	ldw	r2,168(sp)
   4118c:	28a1c83a 	sub	r16,r5,r2
   41190:	04002e0e 	bge	zero,r16,4124c <___vfprintf_internal_r+0xaa4>
   41194:	04400404 	movi	r17,16
   41198:	d8801f17 	ldw	r2,124(sp)
   4119c:	8c04a20e 	bge	r17,r16,42428 <___vfprintf_internal_r+0x1c80>
   411a0:	01400174 	movhi	r5,5
   411a4:	297ed084 	addi	r5,r5,-1214
   411a8:	d9403515 	stw	r5,212(sp)
   411ac:	048001c4 	movi	r18,7
   411b0:	dcc02c17 	ldw	r19,176(sp)
   411b4:	00000306 	br	411c4 <___vfprintf_internal_r+0xa1c>
   411b8:	843ffc04 	addi	r16,r16,-16
   411bc:	42000204 	addi	r8,r8,8
   411c0:	8c00130e 	bge	r17,r16,41210 <___vfprintf_internal_r+0xa68>
   411c4:	01000174 	movhi	r4,5
   411c8:	18c00404 	addi	r3,r3,16
   411cc:	10800044 	addi	r2,r2,1
   411d0:	213ed084 	addi	r4,r4,-1214
   411d4:	41000015 	stw	r4,0(r8)
   411d8:	44400115 	stw	r17,4(r8)
   411dc:	d8c02015 	stw	r3,128(sp)
   411e0:	d8801f15 	stw	r2,124(sp)
   411e4:	90bff40e 	bge	r18,r2,411b8 <__alt_data_end+0xfffe11b8>
   411e8:	d9801e04 	addi	r6,sp,120
   411ec:	b80b883a 	mov	r5,r23
   411f0:	9809883a 	mov	r4,r19
   411f4:	00472c00 	call	472c0 <__sprint_r>
   411f8:	103e6d1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   411fc:	843ffc04 	addi	r16,r16,-16
   41200:	d8c02017 	ldw	r3,128(sp)
   41204:	d8801f17 	ldw	r2,124(sp)
   41208:	da000404 	addi	r8,sp,16
   4120c:	8c3fed16 	blt	r17,r16,411c4 <__alt_data_end+0xfffe11c4>
   41210:	d9403517 	ldw	r5,212(sp)
   41214:	1c07883a 	add	r3,r3,r16
   41218:	10800044 	addi	r2,r2,1
   4121c:	41400015 	stw	r5,0(r8)
   41220:	44000115 	stw	r16,4(r8)
   41224:	d8c02015 	stw	r3,128(sp)
   41228:	d8801f15 	stw	r2,124(sp)
   4122c:	010001c4 	movi	r4,7
   41230:	2080060e 	bge	r4,r2,4124c <___vfprintf_internal_r+0xaa4>
   41234:	d9002c17 	ldw	r4,176(sp)
   41238:	d9801e04 	addi	r6,sp,120
   4123c:	b80b883a 	mov	r5,r23
   41240:	00472c00 	call	472c0 <__sprint_r>
   41244:	103e5a1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41248:	d8c02017 	ldw	r3,128(sp)
   4124c:	d8803117 	ldw	r2,196(sp)
   41250:	d9002a17 	ldw	r4,168(sp)
   41254:	1100010e 	bge	r2,r4,4125c <___vfprintf_internal_r+0xab4>
   41258:	2005883a 	mov	r2,r4
   4125c:	d9402f17 	ldw	r5,188(sp)
   41260:	288b883a 	add	r5,r5,r2
   41264:	d9402f15 	stw	r5,188(sp)
   41268:	18019e1e 	bne	r3,zero,418e4 <___vfprintf_internal_r+0x113c>
   4126c:	a8800007 	ldb	r2,0(r21)
   41270:	d8001f15 	stw	zero,124(sp)
   41274:	da000404 	addi	r8,sp,16
   41278:	103d851e 	bne	r2,zero,40890 <__alt_data_end+0xfffe0890>
   4127c:	a821883a 	mov	r16,r21
   41280:	003d9b06 	br	408f0 <__alt_data_end+0xfffe08f0>
   41284:	18c03fcc 	andi	r3,r3,255
   41288:	1805c11e 	bne	r3,zero,42990 <___vfprintf_internal_r+0x21e8>
   4128c:	94800414 	ori	r18,r18,16
   41290:	9080080c 	andi	r2,r18,32
   41294:	10020c26 	beq	r2,zero,41ac8 <___vfprintf_internal_r+0x1320>
   41298:	d8802d17 	ldw	r2,180(sp)
   4129c:	d9002917 	ldw	r4,164(sp)
   412a0:	d8002785 	stb	zero,158(sp)
   412a4:	10c00204 	addi	r3,r2,8
   412a8:	14c00017 	ldw	r19,0(r2)
   412ac:	15800117 	ldw	r22,4(r2)
   412b0:	20040f16 	blt	r4,zero,422f0 <___vfprintf_internal_r+0x1b48>
   412b4:	013fdfc4 	movi	r4,-129
   412b8:	9d84b03a 	or	r2,r19,r22
   412bc:	d8c02d15 	stw	r3,180(sp)
   412c0:	9124703a 	and	r18,r18,r4
   412c4:	0039883a 	mov	fp,zero
   412c8:	103e891e 	bne	r2,zero,40cf0 <__alt_data_end+0xfffe0cf0>
   412cc:	d9002917 	ldw	r4,164(sp)
   412d0:	2002c11e 	bne	r4,zero,41dd8 <___vfprintf_internal_r+0x1630>
   412d4:	d8002915 	stw	zero,164(sp)
   412d8:	d8002e15 	stw	zero,184(sp)
   412dc:	dc001e04 	addi	r16,sp,120
   412e0:	003ef806 	br	40ec4 <__alt_data_end+0xfffe0ec4>
   412e4:	18c03fcc 	andi	r3,r3,255
   412e8:	18059d1e 	bne	r3,zero,42960 <___vfprintf_internal_r+0x21b8>
   412ec:	01400174 	movhi	r5,5
   412f0:	297ec004 	addi	r5,r5,-1280
   412f4:	d9403915 	stw	r5,228(sp)
   412f8:	9080080c 	andi	r2,r18,32
   412fc:	10005226 	beq	r2,zero,41448 <___vfprintf_internal_r+0xca0>
   41300:	d8802d17 	ldw	r2,180(sp)
   41304:	14c00017 	ldw	r19,0(r2)
   41308:	15800117 	ldw	r22,4(r2)
   4130c:	10800204 	addi	r2,r2,8
   41310:	d8802d15 	stw	r2,180(sp)
   41314:	9080004c 	andi	r2,r18,1
   41318:	10019026 	beq	r2,zero,4195c <___vfprintf_internal_r+0x11b4>
   4131c:	9d84b03a 	or	r2,r19,r22
   41320:	10036926 	beq	r2,zero,420c8 <___vfprintf_internal_r+0x1920>
   41324:	d8c02917 	ldw	r3,164(sp)
   41328:	00800c04 	movi	r2,48
   4132c:	d8802705 	stb	r2,156(sp)
   41330:	dc402745 	stb	r17,157(sp)
   41334:	d8002785 	stb	zero,158(sp)
   41338:	90800094 	ori	r2,r18,2
   4133c:	18045d16 	blt	r3,zero,424b4 <___vfprintf_internal_r+0x1d0c>
   41340:	00bfdfc4 	movi	r2,-129
   41344:	90a4703a 	and	r18,r18,r2
   41348:	94800094 	ori	r18,r18,2
   4134c:	0039883a 	mov	fp,zero
   41350:	d9003917 	ldw	r4,228(sp)
   41354:	dc001e04 	addi	r16,sp,120
   41358:	988003cc 	andi	r2,r19,15
   4135c:	b006973a 	slli	r3,r22,28
   41360:	2085883a 	add	r2,r4,r2
   41364:	9826d13a 	srli	r19,r19,4
   41368:	10800003 	ldbu	r2,0(r2)
   4136c:	b02cd13a 	srli	r22,r22,4
   41370:	843fffc4 	addi	r16,r16,-1
   41374:	1ce6b03a 	or	r19,r3,r19
   41378:	80800005 	stb	r2,0(r16)
   4137c:	9d84b03a 	or	r2,r19,r22
   41380:	103ff51e 	bne	r2,zero,41358 <__alt_data_end+0xfffe1358>
   41384:	d8c02817 	ldw	r3,160(sp)
   41388:	1c07c83a 	sub	r3,r3,r16
   4138c:	d8c02e15 	stw	r3,184(sp)
   41390:	003ecc06 	br	40ec4 <__alt_data_end+0xfffe0ec4>
   41394:	18c03fcc 	andi	r3,r3,255
   41398:	183e9f26 	beq	r3,zero,40e18 <__alt_data_end+0xfffe0e18>
   4139c:	d9c02785 	stb	r7,158(sp)
   413a0:	003e9d06 	br	40e18 <__alt_data_end+0xfffe0e18>
   413a4:	00c00044 	movi	r3,1
   413a8:	01c00ac4 	movi	r7,43
   413ac:	ac400007 	ldb	r17,0(r21)
   413b0:	003d5e06 	br	4092c <__alt_data_end+0xfffe092c>
   413b4:	94800814 	ori	r18,r18,32
   413b8:	ac400007 	ldb	r17,0(r21)
   413bc:	003d5b06 	br	4092c <__alt_data_end+0xfffe092c>
   413c0:	d8c02d17 	ldw	r3,180(sp)
   413c4:	d8002785 	stb	zero,158(sp)
   413c8:	1c000017 	ldw	r16,0(r3)
   413cc:	1cc00104 	addi	r19,r3,4
   413d0:	80041926 	beq	r16,zero,42438 <___vfprintf_internal_r+0x1c90>
   413d4:	d9002917 	ldw	r4,164(sp)
   413d8:	2003d016 	blt	r4,zero,4231c <___vfprintf_internal_r+0x1b74>
   413dc:	200d883a 	mov	r6,r4
   413e0:	000b883a 	mov	r5,zero
   413e4:	8009883a 	mov	r4,r16
   413e8:	da003d15 	stw	r8,244(sp)
   413ec:	0045afc0 	call	45afc <memchr>
   413f0:	da003d17 	ldw	r8,244(sp)
   413f4:	10045426 	beq	r2,zero,42548 <___vfprintf_internal_r+0x1da0>
   413f8:	1405c83a 	sub	r2,r2,r16
   413fc:	d8802e15 	stw	r2,184(sp)
   41400:	1003cc16 	blt	r2,zero,42334 <___vfprintf_internal_r+0x1b8c>
   41404:	df002783 	ldbu	fp,158(sp)
   41408:	d8802a15 	stw	r2,168(sp)
   4140c:	dcc02d15 	stw	r19,180(sp)
   41410:	d8002915 	stw	zero,164(sp)
   41414:	d8003215 	stw	zero,200(sp)
   41418:	003eb006 	br	40edc <__alt_data_end+0xfffe0edc>
   4141c:	18c03fcc 	andi	r3,r3,255
   41420:	183f9b26 	beq	r3,zero,41290 <__alt_data_end+0xfffe1290>
   41424:	d9c02785 	stb	r7,158(sp)
   41428:	003f9906 	br	41290 <__alt_data_end+0xfffe1290>
   4142c:	18c03fcc 	andi	r3,r3,255
   41430:	1805551e 	bne	r3,zero,42988 <___vfprintf_internal_r+0x21e0>
   41434:	01400174 	movhi	r5,5
   41438:	297ec504 	addi	r5,r5,-1260
   4143c:	d9403915 	stw	r5,228(sp)
   41440:	9080080c 	andi	r2,r18,32
   41444:	103fae1e 	bne	r2,zero,41300 <__alt_data_end+0xfffe1300>
   41448:	9080040c 	andi	r2,r18,16
   4144c:	1002de26 	beq	r2,zero,41fc8 <___vfprintf_internal_r+0x1820>
   41450:	d8c02d17 	ldw	r3,180(sp)
   41454:	002d883a 	mov	r22,zero
   41458:	1cc00017 	ldw	r19,0(r3)
   4145c:	18c00104 	addi	r3,r3,4
   41460:	d8c02d15 	stw	r3,180(sp)
   41464:	003fab06 	br	41314 <__alt_data_end+0xfffe1314>
   41468:	38803fcc 	andi	r2,r7,255
   4146c:	1080201c 	xori	r2,r2,128
   41470:	10bfe004 	addi	r2,r2,-128
   41474:	1002d21e 	bne	r2,zero,41fc0 <___vfprintf_internal_r+0x1818>
   41478:	00c00044 	movi	r3,1
   4147c:	01c00804 	movi	r7,32
   41480:	ac400007 	ldb	r17,0(r21)
   41484:	003d2906 	br	4092c <__alt_data_end+0xfffe092c>
   41488:	94800054 	ori	r18,r18,1
   4148c:	ac400007 	ldb	r17,0(r21)
   41490:	003d2606 	br	4092c <__alt_data_end+0xfffe092c>
   41494:	18c03fcc 	andi	r3,r3,255
   41498:	183e0526 	beq	r3,zero,40cb0 <__alt_data_end+0xfffe0cb0>
   4149c:	d9c02785 	stb	r7,158(sp)
   414a0:	003e0306 	br	40cb0 <__alt_data_end+0xfffe0cb0>
   414a4:	94801014 	ori	r18,r18,64
   414a8:	ac400007 	ldb	r17,0(r21)
   414ac:	003d1f06 	br	4092c <__alt_data_end+0xfffe092c>
   414b0:	ac400007 	ldb	r17,0(r21)
   414b4:	8a438726 	beq	r17,r9,422d4 <___vfprintf_internal_r+0x1b2c>
   414b8:	94800414 	ori	r18,r18,16
   414bc:	003d1b06 	br	4092c <__alt_data_end+0xfffe092c>
   414c0:	18c03fcc 	andi	r3,r3,255
   414c4:	1805341e 	bne	r3,zero,42998 <___vfprintf_internal_r+0x21f0>
   414c8:	9080080c 	andi	r2,r18,32
   414cc:	1002cd26 	beq	r2,zero,42004 <___vfprintf_internal_r+0x185c>
   414d0:	d9402d17 	ldw	r5,180(sp)
   414d4:	d9002f17 	ldw	r4,188(sp)
   414d8:	28800017 	ldw	r2,0(r5)
   414dc:	2007d7fa 	srai	r3,r4,31
   414e0:	29400104 	addi	r5,r5,4
   414e4:	d9402d15 	stw	r5,180(sp)
   414e8:	11000015 	stw	r4,0(r2)
   414ec:	10c00115 	stw	r3,4(r2)
   414f0:	003ce506 	br	40888 <__alt_data_end+0xfffe0888>
   414f4:	d8c02d17 	ldw	r3,180(sp)
   414f8:	d9002d17 	ldw	r4,180(sp)
   414fc:	d8002785 	stb	zero,158(sp)
   41500:	18800017 	ldw	r2,0(r3)
   41504:	21000104 	addi	r4,r4,4
   41508:	00c00044 	movi	r3,1
   4150c:	d8c02a15 	stw	r3,168(sp)
   41510:	d8801405 	stb	r2,80(sp)
   41514:	d9002d15 	stw	r4,180(sp)
   41518:	d8c02e15 	stw	r3,184(sp)
   4151c:	d8002915 	stw	zero,164(sp)
   41520:	d8003215 	stw	zero,200(sp)
   41524:	dc001404 	addi	r16,sp,80
   41528:	0039883a 	mov	fp,zero
   4152c:	003e7206 	br	40ef8 <__alt_data_end+0xfffe0ef8>
   41530:	01000174 	movhi	r4,5
   41534:	213ec504 	addi	r4,r4,-1260
   41538:	0039883a 	mov	fp,zero
   4153c:	d9003915 	stw	r4,228(sp)
   41540:	04401e04 	movi	r17,120
   41544:	003f8206 	br	41350 <__alt_data_end+0xfffe1350>
   41548:	18c03fcc 	andi	r3,r3,255
   4154c:	1805061e 	bne	r3,zero,42968 <___vfprintf_internal_r+0x21c0>
   41550:	883d9126 	beq	r17,zero,40b98 <__alt_data_end+0xfffe0b98>
   41554:	00c00044 	movi	r3,1
   41558:	d8c02a15 	stw	r3,168(sp)
   4155c:	dc401405 	stb	r17,80(sp)
   41560:	d8002785 	stb	zero,158(sp)
   41564:	003fec06 	br	41518 <__alt_data_end+0xfffe1518>
   41568:	01400174 	movhi	r5,5
   4156c:	297ec504 	addi	r5,r5,-1260
   41570:	d9403915 	stw	r5,228(sp)
   41574:	d8c02d15 	stw	r3,180(sp)
   41578:	1025883a 	mov	r18,r2
   4157c:	04401e04 	movi	r17,120
   41580:	9d84b03a 	or	r2,r19,r22
   41584:	1000fc1e 	bne	r2,zero,41978 <___vfprintf_internal_r+0x11d0>
   41588:	0039883a 	mov	fp,zero
   4158c:	00800084 	movi	r2,2
   41590:	10803fcc 	andi	r2,r2,255
   41594:	00c00044 	movi	r3,1
   41598:	10c20f26 	beq	r2,r3,41dd8 <___vfprintf_internal_r+0x1630>
   4159c:	00c00084 	movi	r3,2
   415a0:	10fd6326 	beq	r2,r3,40b30 <__alt_data_end+0xfffe0b30>
   415a4:	003e2d06 	br	40e5c <__alt_data_end+0xfffe0e5c>
   415a8:	d8c02017 	ldw	r3,128(sp)
   415ac:	003e9306 	br	40ffc <__alt_data_end+0xfffe0ffc>
   415b0:	00801944 	movi	r2,101
   415b4:	14407e0e 	bge	r2,r17,417b0 <___vfprintf_internal_r+0x1008>
   415b8:	d9003617 	ldw	r4,216(sp)
   415bc:	d9403817 	ldw	r5,224(sp)
   415c0:	000d883a 	mov	r6,zero
   415c4:	000f883a 	mov	r7,zero
   415c8:	d8c03c15 	stw	r3,240(sp)
   415cc:	da003d15 	stw	r8,244(sp)
   415d0:	004bab40 	call	4bab4 <__eqdf2>
   415d4:	d8c03c17 	ldw	r3,240(sp)
   415d8:	da003d17 	ldw	r8,244(sp)
   415dc:	1000f71e 	bne	r2,zero,419bc <___vfprintf_internal_r+0x1214>
   415e0:	d8801f17 	ldw	r2,124(sp)
   415e4:	01000174 	movhi	r4,5
   415e8:	213ecc04 	addi	r4,r4,-1232
   415ec:	18c00044 	addi	r3,r3,1
   415f0:	10800044 	addi	r2,r2,1
   415f4:	41000015 	stw	r4,0(r8)
   415f8:	01000044 	movi	r4,1
   415fc:	41000115 	stw	r4,4(r8)
   41600:	d8c02015 	stw	r3,128(sp)
   41604:	d8801f15 	stw	r2,124(sp)
   41608:	010001c4 	movi	r4,7
   4160c:	2082b816 	blt	r4,r2,420f0 <___vfprintf_internal_r+0x1948>
   41610:	42000204 	addi	r8,r8,8
   41614:	d8802617 	ldw	r2,152(sp)
   41618:	d9403317 	ldw	r5,204(sp)
   4161c:	11400216 	blt	r2,r5,41628 <___vfprintf_internal_r+0xe80>
   41620:	9080004c 	andi	r2,r18,1
   41624:	103ed526 	beq	r2,zero,4117c <__alt_data_end+0xfffe117c>
   41628:	d8803717 	ldw	r2,220(sp)
   4162c:	d9003417 	ldw	r4,208(sp)
   41630:	d9403717 	ldw	r5,220(sp)
   41634:	1887883a 	add	r3,r3,r2
   41638:	d8801f17 	ldw	r2,124(sp)
   4163c:	41000015 	stw	r4,0(r8)
   41640:	41400115 	stw	r5,4(r8)
   41644:	10800044 	addi	r2,r2,1
   41648:	d8c02015 	stw	r3,128(sp)
   4164c:	d8801f15 	stw	r2,124(sp)
   41650:	010001c4 	movi	r4,7
   41654:	20832916 	blt	r4,r2,422fc <___vfprintf_internal_r+0x1b54>
   41658:	42000204 	addi	r8,r8,8
   4165c:	d8803317 	ldw	r2,204(sp)
   41660:	143fffc4 	addi	r16,r2,-1
   41664:	043ec50e 	bge	zero,r16,4117c <__alt_data_end+0xfffe117c>
   41668:	04400404 	movi	r17,16
   4166c:	d8801f17 	ldw	r2,124(sp)
   41670:	8c00880e 	bge	r17,r16,41894 <___vfprintf_internal_r+0x10ec>
   41674:	01400174 	movhi	r5,5
   41678:	297ecc84 	addi	r5,r5,-1230
   4167c:	d9402b15 	stw	r5,172(sp)
   41680:	058001c4 	movi	r22,7
   41684:	dcc02c17 	ldw	r19,176(sp)
   41688:	00000306 	br	41698 <___vfprintf_internal_r+0xef0>
   4168c:	42000204 	addi	r8,r8,8
   41690:	843ffc04 	addi	r16,r16,-16
   41694:	8c00820e 	bge	r17,r16,418a0 <___vfprintf_internal_r+0x10f8>
   41698:	18c00404 	addi	r3,r3,16
   4169c:	10800044 	addi	r2,r2,1
   416a0:	45000015 	stw	r20,0(r8)
   416a4:	44400115 	stw	r17,4(r8)
   416a8:	d8c02015 	stw	r3,128(sp)
   416ac:	d8801f15 	stw	r2,124(sp)
   416b0:	b0bff60e 	bge	r22,r2,4168c <__alt_data_end+0xfffe168c>
   416b4:	d9801e04 	addi	r6,sp,120
   416b8:	b80b883a 	mov	r5,r23
   416bc:	9809883a 	mov	r4,r19
   416c0:	00472c00 	call	472c0 <__sprint_r>
   416c4:	103d3a1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   416c8:	d8c02017 	ldw	r3,128(sp)
   416cc:	d8801f17 	ldw	r2,124(sp)
   416d0:	da000404 	addi	r8,sp,16
   416d4:	003fee06 	br	41690 <__alt_data_end+0xfffe1690>
   416d8:	d9403117 	ldw	r5,196(sp)
   416dc:	d8802a17 	ldw	r2,168(sp)
   416e0:	28adc83a 	sub	r22,r5,r2
   416e4:	05be630e 	bge	zero,r22,41074 <__alt_data_end+0xfffe1074>
   416e8:	07000404 	movi	fp,16
   416ec:	d8801f17 	ldw	r2,124(sp)
   416f0:	e5838f0e 	bge	fp,r22,42530 <___vfprintf_internal_r+0x1d88>
   416f4:	01400174 	movhi	r5,5
   416f8:	297ecc84 	addi	r5,r5,-1230
   416fc:	dc403015 	stw	r17,192(sp)
   41700:	d9402b15 	stw	r5,172(sp)
   41704:	b023883a 	mov	r17,r22
   41708:	04c001c4 	movi	r19,7
   4170c:	a82d883a 	mov	r22,r21
   41710:	902b883a 	mov	r21,r18
   41714:	8025883a 	mov	r18,r16
   41718:	dc002c17 	ldw	r16,176(sp)
   4171c:	00000306 	br	4172c <___vfprintf_internal_r+0xf84>
   41720:	8c7ffc04 	addi	r17,r17,-16
   41724:	42000204 	addi	r8,r8,8
   41728:	e440110e 	bge	fp,r17,41770 <___vfprintf_internal_r+0xfc8>
   4172c:	18c00404 	addi	r3,r3,16
   41730:	10800044 	addi	r2,r2,1
   41734:	45000015 	stw	r20,0(r8)
   41738:	47000115 	stw	fp,4(r8)
   4173c:	d8c02015 	stw	r3,128(sp)
   41740:	d8801f15 	stw	r2,124(sp)
   41744:	98bff60e 	bge	r19,r2,41720 <__alt_data_end+0xfffe1720>
   41748:	d9801e04 	addi	r6,sp,120
   4174c:	b80b883a 	mov	r5,r23
   41750:	8009883a 	mov	r4,r16
   41754:	00472c00 	call	472c0 <__sprint_r>
   41758:	103d151e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   4175c:	8c7ffc04 	addi	r17,r17,-16
   41760:	d8c02017 	ldw	r3,128(sp)
   41764:	d8801f17 	ldw	r2,124(sp)
   41768:	da000404 	addi	r8,sp,16
   4176c:	e47fef16 	blt	fp,r17,4172c <__alt_data_end+0xfffe172c>
   41770:	9021883a 	mov	r16,r18
   41774:	a825883a 	mov	r18,r21
   41778:	b02b883a 	mov	r21,r22
   4177c:	882d883a 	mov	r22,r17
   41780:	dc403017 	ldw	r17,192(sp)
   41784:	d9002b17 	ldw	r4,172(sp)
   41788:	1d87883a 	add	r3,r3,r22
   4178c:	10800044 	addi	r2,r2,1
   41790:	41000015 	stw	r4,0(r8)
   41794:	45800115 	stw	r22,4(r8)
   41798:	d8c02015 	stw	r3,128(sp)
   4179c:	d8801f15 	stw	r2,124(sp)
   417a0:	010001c4 	movi	r4,7
   417a4:	20818e16 	blt	r4,r2,41de0 <___vfprintf_internal_r+0x1638>
   417a8:	42000204 	addi	r8,r8,8
   417ac:	003e3106 	br	41074 <__alt_data_end+0xfffe1074>
   417b0:	d9403317 	ldw	r5,204(sp)
   417b4:	00800044 	movi	r2,1
   417b8:	18c00044 	addi	r3,r3,1
   417bc:	1141530e 	bge	r2,r5,41d0c <___vfprintf_internal_r+0x1564>
   417c0:	dc401f17 	ldw	r17,124(sp)
   417c4:	00800044 	movi	r2,1
   417c8:	40800115 	stw	r2,4(r8)
   417cc:	8c400044 	addi	r17,r17,1
   417d0:	44000015 	stw	r16,0(r8)
   417d4:	d8c02015 	stw	r3,128(sp)
   417d8:	dc401f15 	stw	r17,124(sp)
   417dc:	008001c4 	movi	r2,7
   417e0:	14416b16 	blt	r2,r17,41d90 <___vfprintf_internal_r+0x15e8>
   417e4:	42000204 	addi	r8,r8,8
   417e8:	d8803717 	ldw	r2,220(sp)
   417ec:	d9003417 	ldw	r4,208(sp)
   417f0:	8c400044 	addi	r17,r17,1
   417f4:	10c7883a 	add	r3,r2,r3
   417f8:	40800115 	stw	r2,4(r8)
   417fc:	41000015 	stw	r4,0(r8)
   41800:	d8c02015 	stw	r3,128(sp)
   41804:	dc401f15 	stw	r17,124(sp)
   41808:	008001c4 	movi	r2,7
   4180c:	14416916 	blt	r2,r17,41db4 <___vfprintf_internal_r+0x160c>
   41810:	45800204 	addi	r22,r8,8
   41814:	d9003617 	ldw	r4,216(sp)
   41818:	d9403817 	ldw	r5,224(sp)
   4181c:	000d883a 	mov	r6,zero
   41820:	000f883a 	mov	r7,zero
   41824:	d8c03c15 	stw	r3,240(sp)
   41828:	004bab40 	call	4bab4 <__eqdf2>
   4182c:	d8c03c17 	ldw	r3,240(sp)
   41830:	1000bc26 	beq	r2,zero,41b24 <___vfprintf_internal_r+0x137c>
   41834:	d9403317 	ldw	r5,204(sp)
   41838:	84000044 	addi	r16,r16,1
   4183c:	8c400044 	addi	r17,r17,1
   41840:	28bfffc4 	addi	r2,r5,-1
   41844:	1887883a 	add	r3,r3,r2
   41848:	b0800115 	stw	r2,4(r22)
   4184c:	b4000015 	stw	r16,0(r22)
   41850:	d8c02015 	stw	r3,128(sp)
   41854:	dc401f15 	stw	r17,124(sp)
   41858:	008001c4 	movi	r2,7
   4185c:	14414316 	blt	r2,r17,41d6c <___vfprintf_internal_r+0x15c4>
   41860:	b5800204 	addi	r22,r22,8
   41864:	d9003a17 	ldw	r4,232(sp)
   41868:	df0022c4 	addi	fp,sp,139
   4186c:	8c400044 	addi	r17,r17,1
   41870:	20c7883a 	add	r3,r4,r3
   41874:	b7000015 	stw	fp,0(r22)
   41878:	b1000115 	stw	r4,4(r22)
   4187c:	d8c02015 	stw	r3,128(sp)
   41880:	dc401f15 	stw	r17,124(sp)
   41884:	008001c4 	movi	r2,7
   41888:	14400e16 	blt	r2,r17,418c4 <___vfprintf_internal_r+0x111c>
   4188c:	b2000204 	addi	r8,r22,8
   41890:	003e3a06 	br	4117c <__alt_data_end+0xfffe117c>
   41894:	01000174 	movhi	r4,5
   41898:	213ecc84 	addi	r4,r4,-1230
   4189c:	d9002b15 	stw	r4,172(sp)
   418a0:	d9002b17 	ldw	r4,172(sp)
   418a4:	1c07883a 	add	r3,r3,r16
   418a8:	44000115 	stw	r16,4(r8)
   418ac:	41000015 	stw	r4,0(r8)
   418b0:	10800044 	addi	r2,r2,1
   418b4:	d8c02015 	stw	r3,128(sp)
   418b8:	d8801f15 	stw	r2,124(sp)
   418bc:	010001c4 	movi	r4,7
   418c0:	20be2d0e 	bge	r4,r2,41178 <__alt_data_end+0xfffe1178>
   418c4:	d9002c17 	ldw	r4,176(sp)
   418c8:	d9801e04 	addi	r6,sp,120
   418cc:	b80b883a 	mov	r5,r23
   418d0:	00472c00 	call	472c0 <__sprint_r>
   418d4:	103cb61e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   418d8:	d8c02017 	ldw	r3,128(sp)
   418dc:	da000404 	addi	r8,sp,16
   418e0:	003e2606 	br	4117c <__alt_data_end+0xfffe117c>
   418e4:	d9002c17 	ldw	r4,176(sp)
   418e8:	d9801e04 	addi	r6,sp,120
   418ec:	b80b883a 	mov	r5,r23
   418f0:	00472c00 	call	472c0 <__sprint_r>
   418f4:	103e5d26 	beq	r2,zero,4126c <__alt_data_end+0xfffe126c>
   418f8:	003cad06 	br	40bb0 <__alt_data_end+0xfffe0bb0>
   418fc:	d9002c17 	ldw	r4,176(sp)
   41900:	d9801e04 	addi	r6,sp,120
   41904:	b80b883a 	mov	r5,r23
   41908:	00472c00 	call	472c0 <__sprint_r>
   4190c:	103ca81e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41910:	d8c02017 	ldw	r3,128(sp)
   41914:	da000404 	addi	r8,sp,16
   41918:	003e0b06 	br	41148 <__alt_data_end+0xfffe1148>
   4191c:	d9002c17 	ldw	r4,176(sp)
   41920:	d9801e04 	addi	r6,sp,120
   41924:	b80b883a 	mov	r5,r23
   41928:	00472c00 	call	472c0 <__sprint_r>
   4192c:	103ca01e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41930:	d8c02017 	ldw	r3,128(sp)
   41934:	da000404 	addi	r8,sp,16
   41938:	003dbd06 	br	41030 <__alt_data_end+0xfffe1030>
   4193c:	d9002c17 	ldw	r4,176(sp)
   41940:	d9801e04 	addi	r6,sp,120
   41944:	b80b883a 	mov	r5,r23
   41948:	00472c00 	call	472c0 <__sprint_r>
   4194c:	103c981e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41950:	d8c02017 	ldw	r3,128(sp)
   41954:	da000404 	addi	r8,sp,16
   41958:	003dc306 	br	41068 <__alt_data_end+0xfffe1068>
   4195c:	d8802917 	ldw	r2,164(sp)
   41960:	d8002785 	stb	zero,158(sp)
   41964:	103f0616 	blt	r2,zero,41580 <__alt_data_end+0xfffe1580>
   41968:	00ffdfc4 	movi	r3,-129
   4196c:	9d84b03a 	or	r2,r19,r22
   41970:	90e4703a 	and	r18,r18,r3
   41974:	103c6b26 	beq	r2,zero,40b24 <__alt_data_end+0xfffe0b24>
   41978:	0039883a 	mov	fp,zero
   4197c:	003e7406 	br	41350 <__alt_data_end+0xfffe1350>
   41980:	9080040c 	andi	r2,r18,16
   41984:	1001b326 	beq	r2,zero,42054 <___vfprintf_internal_r+0x18ac>
   41988:	d9002d17 	ldw	r4,180(sp)
   4198c:	d9402917 	ldw	r5,164(sp)
   41990:	d8002785 	stb	zero,158(sp)
   41994:	20800104 	addi	r2,r4,4
   41998:	24c00017 	ldw	r19,0(r4)
   4199c:	002d883a 	mov	r22,zero
   419a0:	2801b516 	blt	r5,zero,42078 <___vfprintf_internal_r+0x18d0>
   419a4:	00ffdfc4 	movi	r3,-129
   419a8:	d8802d15 	stw	r2,180(sp)
   419ac:	90e4703a 	and	r18,r18,r3
   419b0:	983d2726 	beq	r19,zero,40e50 <__alt_data_end+0xfffe0e50>
   419b4:	0039883a 	mov	fp,zero
   419b8:	003d2a06 	br	40e64 <__alt_data_end+0xfffe0e64>
   419bc:	dc402617 	ldw	r17,152(sp)
   419c0:	0441d30e 	bge	zero,r17,42110 <___vfprintf_internal_r+0x1968>
   419c4:	dc403217 	ldw	r17,200(sp)
   419c8:	d8803317 	ldw	r2,204(sp)
   419cc:	1440010e 	bge	r2,r17,419d4 <___vfprintf_internal_r+0x122c>
   419d0:	1023883a 	mov	r17,r2
   419d4:	04400a0e 	bge	zero,r17,41a00 <___vfprintf_internal_r+0x1258>
   419d8:	d8801f17 	ldw	r2,124(sp)
   419dc:	1c47883a 	add	r3,r3,r17
   419e0:	44000015 	stw	r16,0(r8)
   419e4:	10800044 	addi	r2,r2,1
   419e8:	44400115 	stw	r17,4(r8)
   419ec:	d8c02015 	stw	r3,128(sp)
   419f0:	d8801f15 	stw	r2,124(sp)
   419f4:	010001c4 	movi	r4,7
   419f8:	20826516 	blt	r4,r2,42390 <___vfprintf_internal_r+0x1be8>
   419fc:	42000204 	addi	r8,r8,8
   41a00:	88026116 	blt	r17,zero,42388 <___vfprintf_internal_r+0x1be0>
   41a04:	d9003217 	ldw	r4,200(sp)
   41a08:	2463c83a 	sub	r17,r4,r17
   41a0c:	04407b0e 	bge	zero,r17,41bfc <___vfprintf_internal_r+0x1454>
   41a10:	05800404 	movi	r22,16
   41a14:	d8801f17 	ldw	r2,124(sp)
   41a18:	b4419d0e 	bge	r22,r17,42090 <___vfprintf_internal_r+0x18e8>
   41a1c:	01000174 	movhi	r4,5
   41a20:	213ecc84 	addi	r4,r4,-1230
   41a24:	d9002b15 	stw	r4,172(sp)
   41a28:	070001c4 	movi	fp,7
   41a2c:	dcc02c17 	ldw	r19,176(sp)
   41a30:	00000306 	br	41a40 <___vfprintf_internal_r+0x1298>
   41a34:	42000204 	addi	r8,r8,8
   41a38:	8c7ffc04 	addi	r17,r17,-16
   41a3c:	b441970e 	bge	r22,r17,4209c <___vfprintf_internal_r+0x18f4>
   41a40:	18c00404 	addi	r3,r3,16
   41a44:	10800044 	addi	r2,r2,1
   41a48:	45000015 	stw	r20,0(r8)
   41a4c:	45800115 	stw	r22,4(r8)
   41a50:	d8c02015 	stw	r3,128(sp)
   41a54:	d8801f15 	stw	r2,124(sp)
   41a58:	e0bff60e 	bge	fp,r2,41a34 <__alt_data_end+0xfffe1a34>
   41a5c:	d9801e04 	addi	r6,sp,120
   41a60:	b80b883a 	mov	r5,r23
   41a64:	9809883a 	mov	r4,r19
   41a68:	00472c00 	call	472c0 <__sprint_r>
   41a6c:	103c501e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41a70:	d8c02017 	ldw	r3,128(sp)
   41a74:	d8801f17 	ldw	r2,124(sp)
   41a78:	da000404 	addi	r8,sp,16
   41a7c:	003fee06 	br	41a38 <__alt_data_end+0xfffe1a38>
   41a80:	d9002c17 	ldw	r4,176(sp)
   41a84:	d9801e04 	addi	r6,sp,120
   41a88:	b80b883a 	mov	r5,r23
   41a8c:	00472c00 	call	472c0 <__sprint_r>
   41a90:	103c471e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41a94:	d8c02017 	ldw	r3,128(sp)
   41a98:	df002787 	ldb	fp,158(sp)
   41a9c:	da000404 	addi	r8,sp,16
   41aa0:	003d5606 	br	40ffc <__alt_data_end+0xfffe0ffc>
   41aa4:	9080040c 	andi	r2,r18,16
   41aa8:	10016126 	beq	r2,zero,42030 <___vfprintf_internal_r+0x1888>
   41aac:	d8802d17 	ldw	r2,180(sp)
   41ab0:	14c00017 	ldw	r19,0(r2)
   41ab4:	10800104 	addi	r2,r2,4
   41ab8:	d8802d15 	stw	r2,180(sp)
   41abc:	982dd7fa 	srai	r22,r19,31
   41ac0:	b005883a 	mov	r2,r22
   41ac4:	003c8206 	br	40cd0 <__alt_data_end+0xfffe0cd0>
   41ac8:	9080040c 	andi	r2,r18,16
   41acc:	10003526 	beq	r2,zero,41ba4 <___vfprintf_internal_r+0x13fc>
   41ad0:	d9402d17 	ldw	r5,180(sp)
   41ad4:	d8c02917 	ldw	r3,164(sp)
   41ad8:	d8002785 	stb	zero,158(sp)
   41adc:	28800104 	addi	r2,r5,4
   41ae0:	2cc00017 	ldw	r19,0(r5)
   41ae4:	002d883a 	mov	r22,zero
   41ae8:	18003716 	blt	r3,zero,41bc8 <___vfprintf_internal_r+0x1420>
   41aec:	00ffdfc4 	movi	r3,-129
   41af0:	d8802d15 	stw	r2,180(sp)
   41af4:	90e4703a 	and	r18,r18,r3
   41af8:	0039883a 	mov	fp,zero
   41afc:	983df326 	beq	r19,zero,412cc <__alt_data_end+0xfffe12cc>
   41b00:	00800244 	movi	r2,9
   41b04:	14fc7b36 	bltu	r2,r19,40cf4 <__alt_data_end+0xfffe0cf4>
   41b08:	d8c02817 	ldw	r3,160(sp)
   41b0c:	dc001dc4 	addi	r16,sp,119
   41b10:	9cc00c04 	addi	r19,r19,48
   41b14:	1c07c83a 	sub	r3,r3,r16
   41b18:	dcc01dc5 	stb	r19,119(sp)
   41b1c:	d8c02e15 	stw	r3,184(sp)
   41b20:	003ce806 	br	40ec4 <__alt_data_end+0xfffe0ec4>
   41b24:	d8803317 	ldw	r2,204(sp)
   41b28:	143fffc4 	addi	r16,r2,-1
   41b2c:	043f4d0e 	bge	zero,r16,41864 <__alt_data_end+0xfffe1864>
   41b30:	07000404 	movi	fp,16
   41b34:	e400810e 	bge	fp,r16,41d3c <___vfprintf_internal_r+0x1594>
   41b38:	01400174 	movhi	r5,5
   41b3c:	297ecc84 	addi	r5,r5,-1230
   41b40:	d9402b15 	stw	r5,172(sp)
   41b44:	01c001c4 	movi	r7,7
   41b48:	dcc02c17 	ldw	r19,176(sp)
   41b4c:	00000306 	br	41b5c <___vfprintf_internal_r+0x13b4>
   41b50:	b5800204 	addi	r22,r22,8
   41b54:	843ffc04 	addi	r16,r16,-16
   41b58:	e4007b0e 	bge	fp,r16,41d48 <___vfprintf_internal_r+0x15a0>
   41b5c:	18c00404 	addi	r3,r3,16
   41b60:	8c400044 	addi	r17,r17,1
   41b64:	b5000015 	stw	r20,0(r22)
   41b68:	b7000115 	stw	fp,4(r22)
   41b6c:	d8c02015 	stw	r3,128(sp)
   41b70:	dc401f15 	stw	r17,124(sp)
   41b74:	3c7ff60e 	bge	r7,r17,41b50 <__alt_data_end+0xfffe1b50>
   41b78:	d9801e04 	addi	r6,sp,120
   41b7c:	b80b883a 	mov	r5,r23
   41b80:	9809883a 	mov	r4,r19
   41b84:	d9c03c15 	stw	r7,240(sp)
   41b88:	00472c00 	call	472c0 <__sprint_r>
   41b8c:	d9c03c17 	ldw	r7,240(sp)
   41b90:	103c071e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41b94:	d8c02017 	ldw	r3,128(sp)
   41b98:	dc401f17 	ldw	r17,124(sp)
   41b9c:	dd800404 	addi	r22,sp,16
   41ba0:	003fec06 	br	41b54 <__alt_data_end+0xfffe1b54>
   41ba4:	9080100c 	andi	r2,r18,64
   41ba8:	d8002785 	stb	zero,158(sp)
   41bac:	10010e26 	beq	r2,zero,41fe8 <___vfprintf_internal_r+0x1840>
   41bb0:	d9002d17 	ldw	r4,180(sp)
   41bb4:	d9402917 	ldw	r5,164(sp)
   41bb8:	002d883a 	mov	r22,zero
   41bbc:	20800104 	addi	r2,r4,4
   41bc0:	24c0000b 	ldhu	r19,0(r4)
   41bc4:	283fc90e 	bge	r5,zero,41aec <__alt_data_end+0xfffe1aec>
   41bc8:	d8802d15 	stw	r2,180(sp)
   41bcc:	0039883a 	mov	fp,zero
   41bd0:	9d84b03a 	or	r2,r19,r22
   41bd4:	103c461e 	bne	r2,zero,40cf0 <__alt_data_end+0xfffe0cf0>
   41bd8:	00800044 	movi	r2,1
   41bdc:	003e6c06 	br	41590 <__alt_data_end+0xfffe1590>
   41be0:	d9002c17 	ldw	r4,176(sp)
   41be4:	d9801e04 	addi	r6,sp,120
   41be8:	b80b883a 	mov	r5,r23
   41bec:	00472c00 	call	472c0 <__sprint_r>
   41bf0:	103bef1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41bf4:	d8c02017 	ldw	r3,128(sp)
   41bf8:	da000404 	addi	r8,sp,16
   41bfc:	d9003217 	ldw	r4,200(sp)
   41c00:	d8802617 	ldw	r2,152(sp)
   41c04:	d9403317 	ldw	r5,204(sp)
   41c08:	8123883a 	add	r17,r16,r4
   41c0c:	11400216 	blt	r2,r5,41c18 <___vfprintf_internal_r+0x1470>
   41c10:	9100004c 	andi	r4,r18,1
   41c14:	20000d26 	beq	r4,zero,41c4c <___vfprintf_internal_r+0x14a4>
   41c18:	d9003717 	ldw	r4,220(sp)
   41c1c:	d9403417 	ldw	r5,208(sp)
   41c20:	1907883a 	add	r3,r3,r4
   41c24:	d9001f17 	ldw	r4,124(sp)
   41c28:	41400015 	stw	r5,0(r8)
   41c2c:	d9403717 	ldw	r5,220(sp)
   41c30:	21000044 	addi	r4,r4,1
   41c34:	d8c02015 	stw	r3,128(sp)
   41c38:	41400115 	stw	r5,4(r8)
   41c3c:	d9001f15 	stw	r4,124(sp)
   41c40:	014001c4 	movi	r5,7
   41c44:	2901e816 	blt	r5,r4,423e8 <___vfprintf_internal_r+0x1c40>
   41c48:	42000204 	addi	r8,r8,8
   41c4c:	d9003317 	ldw	r4,204(sp)
   41c50:	8121883a 	add	r16,r16,r4
   41c54:	2085c83a 	sub	r2,r4,r2
   41c58:	8461c83a 	sub	r16,r16,r17
   41c5c:	1400010e 	bge	r2,r16,41c64 <___vfprintf_internal_r+0x14bc>
   41c60:	1021883a 	mov	r16,r2
   41c64:	04000a0e 	bge	zero,r16,41c90 <___vfprintf_internal_r+0x14e8>
   41c68:	d9001f17 	ldw	r4,124(sp)
   41c6c:	1c07883a 	add	r3,r3,r16
   41c70:	44400015 	stw	r17,0(r8)
   41c74:	21000044 	addi	r4,r4,1
   41c78:	44000115 	stw	r16,4(r8)
   41c7c:	d8c02015 	stw	r3,128(sp)
   41c80:	d9001f15 	stw	r4,124(sp)
   41c84:	014001c4 	movi	r5,7
   41c88:	2901fb16 	blt	r5,r4,42478 <___vfprintf_internal_r+0x1cd0>
   41c8c:	42000204 	addi	r8,r8,8
   41c90:	8001f716 	blt	r16,zero,42470 <___vfprintf_internal_r+0x1cc8>
   41c94:	1421c83a 	sub	r16,r2,r16
   41c98:	043d380e 	bge	zero,r16,4117c <__alt_data_end+0xfffe117c>
   41c9c:	04400404 	movi	r17,16
   41ca0:	d8801f17 	ldw	r2,124(sp)
   41ca4:	8c3efb0e 	bge	r17,r16,41894 <__alt_data_end+0xfffe1894>
   41ca8:	01400174 	movhi	r5,5
   41cac:	297ecc84 	addi	r5,r5,-1230
   41cb0:	d9402b15 	stw	r5,172(sp)
   41cb4:	058001c4 	movi	r22,7
   41cb8:	dcc02c17 	ldw	r19,176(sp)
   41cbc:	00000306 	br	41ccc <___vfprintf_internal_r+0x1524>
   41cc0:	42000204 	addi	r8,r8,8
   41cc4:	843ffc04 	addi	r16,r16,-16
   41cc8:	8c3ef50e 	bge	r17,r16,418a0 <__alt_data_end+0xfffe18a0>
   41ccc:	18c00404 	addi	r3,r3,16
   41cd0:	10800044 	addi	r2,r2,1
   41cd4:	45000015 	stw	r20,0(r8)
   41cd8:	44400115 	stw	r17,4(r8)
   41cdc:	d8c02015 	stw	r3,128(sp)
   41ce0:	d8801f15 	stw	r2,124(sp)
   41ce4:	b0bff60e 	bge	r22,r2,41cc0 <__alt_data_end+0xfffe1cc0>
   41ce8:	d9801e04 	addi	r6,sp,120
   41cec:	b80b883a 	mov	r5,r23
   41cf0:	9809883a 	mov	r4,r19
   41cf4:	00472c00 	call	472c0 <__sprint_r>
   41cf8:	103bad1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41cfc:	d8c02017 	ldw	r3,128(sp)
   41d00:	d8801f17 	ldw	r2,124(sp)
   41d04:	da000404 	addi	r8,sp,16
   41d08:	003fee06 	br	41cc4 <__alt_data_end+0xfffe1cc4>
   41d0c:	9088703a 	and	r4,r18,r2
   41d10:	203eab1e 	bne	r4,zero,417c0 <__alt_data_end+0xfffe17c0>
   41d14:	dc401f17 	ldw	r17,124(sp)
   41d18:	40800115 	stw	r2,4(r8)
   41d1c:	44000015 	stw	r16,0(r8)
   41d20:	8c400044 	addi	r17,r17,1
   41d24:	d8c02015 	stw	r3,128(sp)
   41d28:	dc401f15 	stw	r17,124(sp)
   41d2c:	008001c4 	movi	r2,7
   41d30:	14400e16 	blt	r2,r17,41d6c <___vfprintf_internal_r+0x15c4>
   41d34:	45800204 	addi	r22,r8,8
   41d38:	003eca06 	br	41864 <__alt_data_end+0xfffe1864>
   41d3c:	01000174 	movhi	r4,5
   41d40:	213ecc84 	addi	r4,r4,-1230
   41d44:	d9002b15 	stw	r4,172(sp)
   41d48:	d8802b17 	ldw	r2,172(sp)
   41d4c:	1c07883a 	add	r3,r3,r16
   41d50:	8c400044 	addi	r17,r17,1
   41d54:	b0800015 	stw	r2,0(r22)
   41d58:	b4000115 	stw	r16,4(r22)
   41d5c:	d8c02015 	stw	r3,128(sp)
   41d60:	dc401f15 	stw	r17,124(sp)
   41d64:	008001c4 	movi	r2,7
   41d68:	147ebd0e 	bge	r2,r17,41860 <__alt_data_end+0xfffe1860>
   41d6c:	d9002c17 	ldw	r4,176(sp)
   41d70:	d9801e04 	addi	r6,sp,120
   41d74:	b80b883a 	mov	r5,r23
   41d78:	00472c00 	call	472c0 <__sprint_r>
   41d7c:	103b8c1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41d80:	d8c02017 	ldw	r3,128(sp)
   41d84:	dc401f17 	ldw	r17,124(sp)
   41d88:	dd800404 	addi	r22,sp,16
   41d8c:	003eb506 	br	41864 <__alt_data_end+0xfffe1864>
   41d90:	d9002c17 	ldw	r4,176(sp)
   41d94:	d9801e04 	addi	r6,sp,120
   41d98:	b80b883a 	mov	r5,r23
   41d9c:	00472c00 	call	472c0 <__sprint_r>
   41da0:	103b831e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41da4:	d8c02017 	ldw	r3,128(sp)
   41da8:	dc401f17 	ldw	r17,124(sp)
   41dac:	da000404 	addi	r8,sp,16
   41db0:	003e8d06 	br	417e8 <__alt_data_end+0xfffe17e8>
   41db4:	d9002c17 	ldw	r4,176(sp)
   41db8:	d9801e04 	addi	r6,sp,120
   41dbc:	b80b883a 	mov	r5,r23
   41dc0:	00472c00 	call	472c0 <__sprint_r>
   41dc4:	103b7a1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41dc8:	d8c02017 	ldw	r3,128(sp)
   41dcc:	dc401f17 	ldw	r17,124(sp)
   41dd0:	dd800404 	addi	r22,sp,16
   41dd4:	003e8f06 	br	41814 <__alt_data_end+0xfffe1814>
   41dd8:	0027883a 	mov	r19,zero
   41ddc:	003f4a06 	br	41b08 <__alt_data_end+0xfffe1b08>
   41de0:	d9002c17 	ldw	r4,176(sp)
   41de4:	d9801e04 	addi	r6,sp,120
   41de8:	b80b883a 	mov	r5,r23
   41dec:	00472c00 	call	472c0 <__sprint_r>
   41df0:	103b6f1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   41df4:	d8c02017 	ldw	r3,128(sp)
   41df8:	da000404 	addi	r8,sp,16
   41dfc:	003c9d06 	br	41074 <__alt_data_end+0xfffe1074>
   41e00:	04e7c83a 	sub	r19,zero,r19
   41e04:	9804c03a 	cmpne	r2,r19,zero
   41e08:	05adc83a 	sub	r22,zero,r22
   41e0c:	b0adc83a 	sub	r22,r22,r2
   41e10:	d8802917 	ldw	r2,164(sp)
   41e14:	07000b44 	movi	fp,45
   41e18:	df002785 	stb	fp,158(sp)
   41e1c:	10017b16 	blt	r2,zero,4240c <___vfprintf_internal_r+0x1c64>
   41e20:	00bfdfc4 	movi	r2,-129
   41e24:	90a4703a 	and	r18,r18,r2
   41e28:	003bb106 	br	40cf0 <__alt_data_end+0xfffe0cf0>
   41e2c:	d9003617 	ldw	r4,216(sp)
   41e30:	d9403817 	ldw	r5,224(sp)
   41e34:	da003d15 	stw	r8,244(sp)
   41e38:	0046e4c0 	call	46e4c <__fpclassifyd>
   41e3c:	da003d17 	ldw	r8,244(sp)
   41e40:	1000f026 	beq	r2,zero,42204 <___vfprintf_internal_r+0x1a5c>
   41e44:	d9002917 	ldw	r4,164(sp)
   41e48:	05bff7c4 	movi	r22,-33
   41e4c:	00bfffc4 	movi	r2,-1
   41e50:	8dac703a 	and	r22,r17,r22
   41e54:	20820026 	beq	r4,r2,42658 <___vfprintf_internal_r+0x1eb0>
   41e58:	008011c4 	movi	r2,71
   41e5c:	b081f726 	beq	r22,r2,4263c <___vfprintf_internal_r+0x1e94>
   41e60:	d9003817 	ldw	r4,224(sp)
   41e64:	90c04014 	ori	r3,r18,256
   41e68:	d8c02b15 	stw	r3,172(sp)
   41e6c:	20021516 	blt	r4,zero,426c4 <___vfprintf_internal_r+0x1f1c>
   41e70:	dcc03817 	ldw	r19,224(sp)
   41e74:	d8002a05 	stb	zero,168(sp)
   41e78:	00801984 	movi	r2,102
   41e7c:	8881f926 	beq	r17,r2,42664 <___vfprintf_internal_r+0x1ebc>
   41e80:	00801184 	movi	r2,70
   41e84:	88821c26 	beq	r17,r2,426f8 <___vfprintf_internal_r+0x1f50>
   41e88:	00801144 	movi	r2,69
   41e8c:	b081ef26 	beq	r22,r2,4264c <___vfprintf_internal_r+0x1ea4>
   41e90:	d8c02917 	ldw	r3,164(sp)
   41e94:	d8802104 	addi	r2,sp,132
   41e98:	d8800315 	stw	r2,12(sp)
   41e9c:	d9403617 	ldw	r5,216(sp)
   41ea0:	d8802504 	addi	r2,sp,148
   41ea4:	d9002c17 	ldw	r4,176(sp)
   41ea8:	d8800215 	stw	r2,8(sp)
   41eac:	d8802604 	addi	r2,sp,152
   41eb0:	d8c00015 	stw	r3,0(sp)
   41eb4:	d8800115 	stw	r2,4(sp)
   41eb8:	01c00084 	movi	r7,2
   41ebc:	980d883a 	mov	r6,r19
   41ec0:	d8c03c15 	stw	r3,240(sp)
   41ec4:	da003d15 	stw	r8,244(sp)
   41ec8:	0042dcc0 	call	42dcc <_dtoa_r>
   41ecc:	1021883a 	mov	r16,r2
   41ed0:	008019c4 	movi	r2,103
   41ed4:	d8c03c17 	ldw	r3,240(sp)
   41ed8:	da003d17 	ldw	r8,244(sp)
   41edc:	88817126 	beq	r17,r2,424a4 <___vfprintf_internal_r+0x1cfc>
   41ee0:	008011c4 	movi	r2,71
   41ee4:	88829226 	beq	r17,r2,42930 <___vfprintf_internal_r+0x2188>
   41ee8:	80f9883a 	add	fp,r16,r3
   41eec:	d9003617 	ldw	r4,216(sp)
   41ef0:	000d883a 	mov	r6,zero
   41ef4:	000f883a 	mov	r7,zero
   41ef8:	980b883a 	mov	r5,r19
   41efc:	da003d15 	stw	r8,244(sp)
   41f00:	004bab40 	call	4bab4 <__eqdf2>
   41f04:	da003d17 	ldw	r8,244(sp)
   41f08:	10018d26 	beq	r2,zero,42540 <___vfprintf_internal_r+0x1d98>
   41f0c:	d8802117 	ldw	r2,132(sp)
   41f10:	1700062e 	bgeu	r2,fp,41f2c <___vfprintf_internal_r+0x1784>
   41f14:	01000c04 	movi	r4,48
   41f18:	10c00044 	addi	r3,r2,1
   41f1c:	d8c02115 	stw	r3,132(sp)
   41f20:	11000005 	stb	r4,0(r2)
   41f24:	d8802117 	ldw	r2,132(sp)
   41f28:	173ffb36 	bltu	r2,fp,41f18 <__alt_data_end+0xfffe1f18>
   41f2c:	1405c83a 	sub	r2,r2,r16
   41f30:	d8803315 	stw	r2,204(sp)
   41f34:	008011c4 	movi	r2,71
   41f38:	b0817626 	beq	r22,r2,42514 <___vfprintf_internal_r+0x1d6c>
   41f3c:	00801944 	movi	r2,101
   41f40:	1442810e 	bge	r2,r17,42948 <___vfprintf_internal_r+0x21a0>
   41f44:	d8c02617 	ldw	r3,152(sp)
   41f48:	00801984 	movi	r2,102
   41f4c:	d8c03215 	stw	r3,200(sp)
   41f50:	8881fe26 	beq	r17,r2,4274c <___vfprintf_internal_r+0x1fa4>
   41f54:	d8c03217 	ldw	r3,200(sp)
   41f58:	d9003317 	ldw	r4,204(sp)
   41f5c:	1901dd16 	blt	r3,r4,426d4 <___vfprintf_internal_r+0x1f2c>
   41f60:	9480004c 	andi	r18,r18,1
   41f64:	90022b1e 	bne	r18,zero,42814 <___vfprintf_internal_r+0x206c>
   41f68:	1805883a 	mov	r2,r3
   41f6c:	18028016 	blt	r3,zero,42970 <___vfprintf_internal_r+0x21c8>
   41f70:	d8c03217 	ldw	r3,200(sp)
   41f74:	044019c4 	movi	r17,103
   41f78:	d8c02e15 	stw	r3,184(sp)
   41f7c:	df002a07 	ldb	fp,168(sp)
   41f80:	e001531e 	bne	fp,zero,424d0 <___vfprintf_internal_r+0x1d28>
   41f84:	df002783 	ldbu	fp,158(sp)
   41f88:	d8802a15 	stw	r2,168(sp)
   41f8c:	dc802b17 	ldw	r18,172(sp)
   41f90:	d8002915 	stw	zero,164(sp)
   41f94:	003bd106 	br	40edc <__alt_data_end+0xfffe0edc>
   41f98:	d8802d17 	ldw	r2,180(sp)
   41f9c:	d8c02d17 	ldw	r3,180(sp)
   41fa0:	d9002d17 	ldw	r4,180(sp)
   41fa4:	10800017 	ldw	r2,0(r2)
   41fa8:	18c00117 	ldw	r3,4(r3)
   41fac:	21000204 	addi	r4,r4,8
   41fb0:	d8803615 	stw	r2,216(sp)
   41fb4:	d8c03815 	stw	r3,224(sp)
   41fb8:	d9002d15 	stw	r4,180(sp)
   41fbc:	003b7506 	br	40d94 <__alt_data_end+0xfffe0d94>
   41fc0:	ac400007 	ldb	r17,0(r21)
   41fc4:	003a5906 	br	4092c <__alt_data_end+0xfffe092c>
   41fc8:	9080100c 	andi	r2,r18,64
   41fcc:	1000a826 	beq	r2,zero,42270 <___vfprintf_internal_r+0x1ac8>
   41fd0:	d9002d17 	ldw	r4,180(sp)
   41fd4:	002d883a 	mov	r22,zero
   41fd8:	24c0000b 	ldhu	r19,0(r4)
   41fdc:	21000104 	addi	r4,r4,4
   41fe0:	d9002d15 	stw	r4,180(sp)
   41fe4:	003ccb06 	br	41314 <__alt_data_end+0xfffe1314>
   41fe8:	d8c02d17 	ldw	r3,180(sp)
   41fec:	d9002917 	ldw	r4,164(sp)
   41ff0:	002d883a 	mov	r22,zero
   41ff4:	18800104 	addi	r2,r3,4
   41ff8:	1cc00017 	ldw	r19,0(r3)
   41ffc:	203ebb0e 	bge	r4,zero,41aec <__alt_data_end+0xfffe1aec>
   42000:	003ef106 	br	41bc8 <__alt_data_end+0xfffe1bc8>
   42004:	9080040c 	andi	r2,r18,16
   42008:	1000921e 	bne	r2,zero,42254 <___vfprintf_internal_r+0x1aac>
   4200c:	9480100c 	andi	r18,r18,64
   42010:	90013926 	beq	r18,zero,424f8 <___vfprintf_internal_r+0x1d50>
   42014:	d9002d17 	ldw	r4,180(sp)
   42018:	d9402f17 	ldw	r5,188(sp)
   4201c:	20800017 	ldw	r2,0(r4)
   42020:	21000104 	addi	r4,r4,4
   42024:	d9002d15 	stw	r4,180(sp)
   42028:	1140000d 	sth	r5,0(r2)
   4202c:	003a1606 	br	40888 <__alt_data_end+0xfffe0888>
   42030:	9080100c 	andi	r2,r18,64
   42034:	10008026 	beq	r2,zero,42238 <___vfprintf_internal_r+0x1a90>
   42038:	d8c02d17 	ldw	r3,180(sp)
   4203c:	1cc0000f 	ldh	r19,0(r3)
   42040:	18c00104 	addi	r3,r3,4
   42044:	d8c02d15 	stw	r3,180(sp)
   42048:	982dd7fa 	srai	r22,r19,31
   4204c:	b005883a 	mov	r2,r22
   42050:	003b1f06 	br	40cd0 <__alt_data_end+0xfffe0cd0>
   42054:	9080100c 	andi	r2,r18,64
   42058:	d8002785 	stb	zero,158(sp)
   4205c:	10008a1e 	bne	r2,zero,42288 <___vfprintf_internal_r+0x1ae0>
   42060:	d9402d17 	ldw	r5,180(sp)
   42064:	d8c02917 	ldw	r3,164(sp)
   42068:	002d883a 	mov	r22,zero
   4206c:	28800104 	addi	r2,r5,4
   42070:	2cc00017 	ldw	r19,0(r5)
   42074:	183e4b0e 	bge	r3,zero,419a4 <__alt_data_end+0xfffe19a4>
   42078:	9d86b03a 	or	r3,r19,r22
   4207c:	d8802d15 	stw	r2,180(sp)
   42080:	183e4c1e 	bne	r3,zero,419b4 <__alt_data_end+0xfffe19b4>
   42084:	0039883a 	mov	fp,zero
   42088:	0005883a 	mov	r2,zero
   4208c:	003d4006 	br	41590 <__alt_data_end+0xfffe1590>
   42090:	01400174 	movhi	r5,5
   42094:	297ecc84 	addi	r5,r5,-1230
   42098:	d9402b15 	stw	r5,172(sp)
   4209c:	d9402b17 	ldw	r5,172(sp)
   420a0:	1c47883a 	add	r3,r3,r17
   420a4:	10800044 	addi	r2,r2,1
   420a8:	41400015 	stw	r5,0(r8)
   420ac:	44400115 	stw	r17,4(r8)
   420b0:	d8c02015 	stw	r3,128(sp)
   420b4:	d8801f15 	stw	r2,124(sp)
   420b8:	010001c4 	movi	r4,7
   420bc:	20bec816 	blt	r4,r2,41be0 <__alt_data_end+0xfffe1be0>
   420c0:	42000204 	addi	r8,r8,8
   420c4:	003ecd06 	br	41bfc <__alt_data_end+0xfffe1bfc>
   420c8:	d9002917 	ldw	r4,164(sp)
   420cc:	d8002785 	stb	zero,158(sp)
   420d0:	203d2d16 	blt	r4,zero,41588 <__alt_data_end+0xfffe1588>
   420d4:	00bfdfc4 	movi	r2,-129
   420d8:	90a4703a 	and	r18,r18,r2
   420dc:	003a9106 	br	40b24 <__alt_data_end+0xfffe0b24>
   420e0:	01000174 	movhi	r4,5
   420e4:	213ecc84 	addi	r4,r4,-1230
   420e8:	d9002b15 	stw	r4,172(sp)
   420ec:	003c0c06 	br	41120 <__alt_data_end+0xfffe1120>
   420f0:	d9002c17 	ldw	r4,176(sp)
   420f4:	d9801e04 	addi	r6,sp,120
   420f8:	b80b883a 	mov	r5,r23
   420fc:	00472c00 	call	472c0 <__sprint_r>
   42100:	103aab1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   42104:	d8c02017 	ldw	r3,128(sp)
   42108:	da000404 	addi	r8,sp,16
   4210c:	003d4106 	br	41614 <__alt_data_end+0xfffe1614>
   42110:	d8801f17 	ldw	r2,124(sp)
   42114:	01400174 	movhi	r5,5
   42118:	01000044 	movi	r4,1
   4211c:	18c00044 	addi	r3,r3,1
   42120:	10800044 	addi	r2,r2,1
   42124:	297ecc04 	addi	r5,r5,-1232
   42128:	41000115 	stw	r4,4(r8)
   4212c:	41400015 	stw	r5,0(r8)
   42130:	d8c02015 	stw	r3,128(sp)
   42134:	d8801f15 	stw	r2,124(sp)
   42138:	010001c4 	movi	r4,7
   4213c:	20805c16 	blt	r4,r2,422b0 <___vfprintf_internal_r+0x1b08>
   42140:	42000204 	addi	r8,r8,8
   42144:	8800041e 	bne	r17,zero,42158 <___vfprintf_internal_r+0x19b0>
   42148:	d8803317 	ldw	r2,204(sp)
   4214c:	1000021e 	bne	r2,zero,42158 <___vfprintf_internal_r+0x19b0>
   42150:	9080004c 	andi	r2,r18,1
   42154:	103c0926 	beq	r2,zero,4117c <__alt_data_end+0xfffe117c>
   42158:	d9003717 	ldw	r4,220(sp)
   4215c:	d8801f17 	ldw	r2,124(sp)
   42160:	d9403417 	ldw	r5,208(sp)
   42164:	20c7883a 	add	r3,r4,r3
   42168:	10800044 	addi	r2,r2,1
   4216c:	41000115 	stw	r4,4(r8)
   42170:	41400015 	stw	r5,0(r8)
   42174:	d8c02015 	stw	r3,128(sp)
   42178:	d8801f15 	stw	r2,124(sp)
   4217c:	010001c4 	movi	r4,7
   42180:	20812116 	blt	r4,r2,42608 <___vfprintf_internal_r+0x1e60>
   42184:	42000204 	addi	r8,r8,8
   42188:	0463c83a 	sub	r17,zero,r17
   4218c:	0440730e 	bge	zero,r17,4235c <___vfprintf_internal_r+0x1bb4>
   42190:	05800404 	movi	r22,16
   42194:	b440860e 	bge	r22,r17,423b0 <___vfprintf_internal_r+0x1c08>
   42198:	01400174 	movhi	r5,5
   4219c:	297ecc84 	addi	r5,r5,-1230
   421a0:	d9402b15 	stw	r5,172(sp)
   421a4:	070001c4 	movi	fp,7
   421a8:	dcc02c17 	ldw	r19,176(sp)
   421ac:	00000306 	br	421bc <___vfprintf_internal_r+0x1a14>
   421b0:	42000204 	addi	r8,r8,8
   421b4:	8c7ffc04 	addi	r17,r17,-16
   421b8:	b440800e 	bge	r22,r17,423bc <___vfprintf_internal_r+0x1c14>
   421bc:	18c00404 	addi	r3,r3,16
   421c0:	10800044 	addi	r2,r2,1
   421c4:	45000015 	stw	r20,0(r8)
   421c8:	45800115 	stw	r22,4(r8)
   421cc:	d8c02015 	stw	r3,128(sp)
   421d0:	d8801f15 	stw	r2,124(sp)
   421d4:	e0bff60e 	bge	fp,r2,421b0 <__alt_data_end+0xfffe21b0>
   421d8:	d9801e04 	addi	r6,sp,120
   421dc:	b80b883a 	mov	r5,r23
   421e0:	9809883a 	mov	r4,r19
   421e4:	00472c00 	call	472c0 <__sprint_r>
   421e8:	103a711e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   421ec:	d8c02017 	ldw	r3,128(sp)
   421f0:	d8801f17 	ldw	r2,124(sp)
   421f4:	da000404 	addi	r8,sp,16
   421f8:	003fee06 	br	421b4 <__alt_data_end+0xfffe21b4>
   421fc:	00bfffc4 	movi	r2,-1
   42200:	003a6f06 	br	40bc0 <__alt_data_end+0xfffe0bc0>
   42204:	008011c4 	movi	r2,71
   42208:	1440b816 	blt	r2,r17,424ec <___vfprintf_internal_r+0x1d44>
   4220c:	04000174 	movhi	r16,5
   42210:	843ebe04 	addi	r16,r16,-1288
   42214:	00c000c4 	movi	r3,3
   42218:	00bfdfc4 	movi	r2,-129
   4221c:	d8c02a15 	stw	r3,168(sp)
   42220:	90a4703a 	and	r18,r18,r2
   42224:	df002783 	ldbu	fp,158(sp)
   42228:	d8c02e15 	stw	r3,184(sp)
   4222c:	d8002915 	stw	zero,164(sp)
   42230:	d8003215 	stw	zero,200(sp)
   42234:	003b2906 	br	40edc <__alt_data_end+0xfffe0edc>
   42238:	d9002d17 	ldw	r4,180(sp)
   4223c:	24c00017 	ldw	r19,0(r4)
   42240:	21000104 	addi	r4,r4,4
   42244:	d9002d15 	stw	r4,180(sp)
   42248:	982dd7fa 	srai	r22,r19,31
   4224c:	b005883a 	mov	r2,r22
   42250:	003a9f06 	br	40cd0 <__alt_data_end+0xfffe0cd0>
   42254:	d9402d17 	ldw	r5,180(sp)
   42258:	d8c02f17 	ldw	r3,188(sp)
   4225c:	28800017 	ldw	r2,0(r5)
   42260:	29400104 	addi	r5,r5,4
   42264:	d9402d15 	stw	r5,180(sp)
   42268:	10c00015 	stw	r3,0(r2)
   4226c:	00398606 	br	40888 <__alt_data_end+0xfffe0888>
   42270:	d9402d17 	ldw	r5,180(sp)
   42274:	002d883a 	mov	r22,zero
   42278:	2cc00017 	ldw	r19,0(r5)
   4227c:	29400104 	addi	r5,r5,4
   42280:	d9402d15 	stw	r5,180(sp)
   42284:	003c2306 	br	41314 <__alt_data_end+0xfffe1314>
   42288:	d8c02d17 	ldw	r3,180(sp)
   4228c:	d9002917 	ldw	r4,164(sp)
   42290:	002d883a 	mov	r22,zero
   42294:	18800104 	addi	r2,r3,4
   42298:	1cc0000b 	ldhu	r19,0(r3)
   4229c:	203dc10e 	bge	r4,zero,419a4 <__alt_data_end+0xfffe19a4>
   422a0:	003f7506 	br	42078 <__alt_data_end+0xfffe2078>
   422a4:	04000174 	movhi	r16,5
   422a8:	843ebc04 	addi	r16,r16,-1296
   422ac:	003acc06 	br	40de0 <__alt_data_end+0xfffe0de0>
   422b0:	d9002c17 	ldw	r4,176(sp)
   422b4:	d9801e04 	addi	r6,sp,120
   422b8:	b80b883a 	mov	r5,r23
   422bc:	00472c00 	call	472c0 <__sprint_r>
   422c0:	103a3b1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   422c4:	dc402617 	ldw	r17,152(sp)
   422c8:	d8c02017 	ldw	r3,128(sp)
   422cc:	da000404 	addi	r8,sp,16
   422d0:	003f9c06 	br	42144 <__alt_data_end+0xfffe2144>
   422d4:	ac400043 	ldbu	r17,1(r21)
   422d8:	94800814 	ori	r18,r18,32
   422dc:	ad400044 	addi	r21,r21,1
   422e0:	8c403fcc 	andi	r17,r17,255
   422e4:	8c40201c 	xori	r17,r17,128
   422e8:	8c7fe004 	addi	r17,r17,-128
   422ec:	00398f06 	br	4092c <__alt_data_end+0xfffe092c>
   422f0:	d8c02d15 	stw	r3,180(sp)
   422f4:	0039883a 	mov	fp,zero
   422f8:	003e3506 	br	41bd0 <__alt_data_end+0xfffe1bd0>
   422fc:	d9002c17 	ldw	r4,176(sp)
   42300:	d9801e04 	addi	r6,sp,120
   42304:	b80b883a 	mov	r5,r23
   42308:	00472c00 	call	472c0 <__sprint_r>
   4230c:	103a281e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   42310:	d8c02017 	ldw	r3,128(sp)
   42314:	da000404 	addi	r8,sp,16
   42318:	003cd006 	br	4165c <__alt_data_end+0xfffe165c>
   4231c:	8009883a 	mov	r4,r16
   42320:	da003d15 	stw	r8,244(sp)
   42324:	004712c0 	call	4712c <strlen>
   42328:	d8802e15 	stw	r2,184(sp)
   4232c:	da003d17 	ldw	r8,244(sp)
   42330:	103c340e 	bge	r2,zero,41404 <__alt_data_end+0xfffe1404>
   42334:	0005883a 	mov	r2,zero
   42338:	003c3206 	br	41404 <__alt_data_end+0xfffe1404>
   4233c:	d9002c17 	ldw	r4,176(sp)
   42340:	d9801e04 	addi	r6,sp,120
   42344:	b80b883a 	mov	r5,r23
   42348:	00472c00 	call	472c0 <__sprint_r>
   4234c:	103a181e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   42350:	d8c02017 	ldw	r3,128(sp)
   42354:	d8801f17 	ldw	r2,124(sp)
   42358:	da000404 	addi	r8,sp,16
   4235c:	d9403317 	ldw	r5,204(sp)
   42360:	10800044 	addi	r2,r2,1
   42364:	44000015 	stw	r16,0(r8)
   42368:	28c7883a 	add	r3,r5,r3
   4236c:	003b7d06 	br	41164 <__alt_data_end+0xfffe1164>
   42370:	01000174 	movhi	r4,5
   42374:	213ed084 	addi	r4,r4,-1214
   42378:	d9003515 	stw	r4,212(sp)
   4237c:	003b1406 	br	40fd0 <__alt_data_end+0xfffe0fd0>
   42380:	013fffc4 	movi	r4,-1
   42384:	003a3506 	br	40c5c <__alt_data_end+0xfffe0c5c>
   42388:	0023883a 	mov	r17,zero
   4238c:	003d9d06 	br	41a04 <__alt_data_end+0xfffe1a04>
   42390:	d9002c17 	ldw	r4,176(sp)
   42394:	d9801e04 	addi	r6,sp,120
   42398:	b80b883a 	mov	r5,r23
   4239c:	00472c00 	call	472c0 <__sprint_r>
   423a0:	103a031e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   423a4:	d8c02017 	ldw	r3,128(sp)
   423a8:	da000404 	addi	r8,sp,16
   423ac:	003d9406 	br	41a00 <__alt_data_end+0xfffe1a00>
   423b0:	01000174 	movhi	r4,5
   423b4:	213ecc84 	addi	r4,r4,-1230
   423b8:	d9002b15 	stw	r4,172(sp)
   423bc:	d9002b17 	ldw	r4,172(sp)
   423c0:	1c47883a 	add	r3,r3,r17
   423c4:	10800044 	addi	r2,r2,1
   423c8:	41000015 	stw	r4,0(r8)
   423cc:	44400115 	stw	r17,4(r8)
   423d0:	d8c02015 	stw	r3,128(sp)
   423d4:	d8801f15 	stw	r2,124(sp)
   423d8:	010001c4 	movi	r4,7
   423dc:	20bfd716 	blt	r4,r2,4233c <__alt_data_end+0xfffe233c>
   423e0:	42000204 	addi	r8,r8,8
   423e4:	003fdd06 	br	4235c <__alt_data_end+0xfffe235c>
   423e8:	d9002c17 	ldw	r4,176(sp)
   423ec:	d9801e04 	addi	r6,sp,120
   423f0:	b80b883a 	mov	r5,r23
   423f4:	00472c00 	call	472c0 <__sprint_r>
   423f8:	1039ed1e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   423fc:	d8802617 	ldw	r2,152(sp)
   42400:	d8c02017 	ldw	r3,128(sp)
   42404:	da000404 	addi	r8,sp,16
   42408:	003e1006 	br	41c4c <__alt_data_end+0xfffe1c4c>
   4240c:	00800044 	movi	r2,1
   42410:	10803fcc 	andi	r2,r2,255
   42414:	00c00044 	movi	r3,1
   42418:	10fa3526 	beq	r2,r3,40cf0 <__alt_data_end+0xfffe0cf0>
   4241c:	00c00084 	movi	r3,2
   42420:	10fbcb26 	beq	r2,r3,41350 <__alt_data_end+0xfffe1350>
   42424:	003a8f06 	br	40e64 <__alt_data_end+0xfffe0e64>
   42428:	01000174 	movhi	r4,5
   4242c:	213ed084 	addi	r4,r4,-1214
   42430:	d9003515 	stw	r4,212(sp)
   42434:	003b7606 	br	41210 <__alt_data_end+0xfffe1210>
   42438:	d8802917 	ldw	r2,164(sp)
   4243c:	00c00184 	movi	r3,6
   42440:	1880012e 	bgeu	r3,r2,42448 <___vfprintf_internal_r+0x1ca0>
   42444:	1805883a 	mov	r2,r3
   42448:	d8802e15 	stw	r2,184(sp)
   4244c:	1000ef16 	blt	r2,zero,4280c <___vfprintf_internal_r+0x2064>
   42450:	04000174 	movhi	r16,5
   42454:	d8802a15 	stw	r2,168(sp)
   42458:	dcc02d15 	stw	r19,180(sp)
   4245c:	d8002915 	stw	zero,164(sp)
   42460:	d8003215 	stw	zero,200(sp)
   42464:	843eca04 	addi	r16,r16,-1240
   42468:	0039883a 	mov	fp,zero
   4246c:	003aa206 	br	40ef8 <__alt_data_end+0xfffe0ef8>
   42470:	0021883a 	mov	r16,zero
   42474:	003e0706 	br	41c94 <__alt_data_end+0xfffe1c94>
   42478:	d9002c17 	ldw	r4,176(sp)
   4247c:	d9801e04 	addi	r6,sp,120
   42480:	b80b883a 	mov	r5,r23
   42484:	00472c00 	call	472c0 <__sprint_r>
   42488:	1039c91e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   4248c:	d8802617 	ldw	r2,152(sp)
   42490:	d9403317 	ldw	r5,204(sp)
   42494:	d8c02017 	ldw	r3,128(sp)
   42498:	da000404 	addi	r8,sp,16
   4249c:	2885c83a 	sub	r2,r5,r2
   424a0:	003dfb06 	br	41c90 <__alt_data_end+0xfffe1c90>
   424a4:	9080004c 	andi	r2,r18,1
   424a8:	103e8f1e 	bne	r2,zero,41ee8 <__alt_data_end+0xfffe1ee8>
   424ac:	d8802117 	ldw	r2,132(sp)
   424b0:	003e9e06 	br	41f2c <__alt_data_end+0xfffe1f2c>
   424b4:	1025883a 	mov	r18,r2
   424b8:	0039883a 	mov	fp,zero
   424bc:	00800084 	movi	r2,2
   424c0:	003fd306 	br	42410 <__alt_data_end+0xfffe2410>
   424c4:	07000b44 	movi	fp,45
   424c8:	df002785 	stb	fp,158(sp)
   424cc:	003a4006 	br	40dd0 <__alt_data_end+0xfffe0dd0>
   424d0:	00c00b44 	movi	r3,45
   424d4:	d8c02785 	stb	r3,158(sp)
   424d8:	d8802a15 	stw	r2,168(sp)
   424dc:	dc802b17 	ldw	r18,172(sp)
   424e0:	d8002915 	stw	zero,164(sp)
   424e4:	07000b44 	movi	fp,45
   424e8:	003a8006 	br	40eec <__alt_data_end+0xfffe0eec>
   424ec:	04000174 	movhi	r16,5
   424f0:	843ebf04 	addi	r16,r16,-1284
   424f4:	003f4706 	br	42214 <__alt_data_end+0xfffe2214>
   424f8:	d8c02d17 	ldw	r3,180(sp)
   424fc:	d9002f17 	ldw	r4,188(sp)
   42500:	18800017 	ldw	r2,0(r3)
   42504:	18c00104 	addi	r3,r3,4
   42508:	d8c02d15 	stw	r3,180(sp)
   4250c:	11000015 	stw	r4,0(r2)
   42510:	0038dd06 	br	40888 <__alt_data_end+0xfffe0888>
   42514:	dd802617 	ldw	r22,152(sp)
   42518:	00bfff44 	movi	r2,-3
   4251c:	b0801c16 	blt	r22,r2,42590 <___vfprintf_internal_r+0x1de8>
   42520:	d9402917 	ldw	r5,164(sp)
   42524:	2d801a16 	blt	r5,r22,42590 <___vfprintf_internal_r+0x1de8>
   42528:	dd803215 	stw	r22,200(sp)
   4252c:	003e8906 	br	41f54 <__alt_data_end+0xfffe1f54>
   42530:	01000174 	movhi	r4,5
   42534:	213ecc84 	addi	r4,r4,-1230
   42538:	d9002b15 	stw	r4,172(sp)
   4253c:	003c9106 	br	41784 <__alt_data_end+0xfffe1784>
   42540:	e005883a 	mov	r2,fp
   42544:	003e7906 	br	41f2c <__alt_data_end+0xfffe1f2c>
   42548:	d9402917 	ldw	r5,164(sp)
   4254c:	df002783 	ldbu	fp,158(sp)
   42550:	dcc02d15 	stw	r19,180(sp)
   42554:	d9402a15 	stw	r5,168(sp)
   42558:	d9402e15 	stw	r5,184(sp)
   4255c:	d8002915 	stw	zero,164(sp)
   42560:	d8003215 	stw	zero,200(sp)
   42564:	003a5d06 	br	40edc <__alt_data_end+0xfffe0edc>
   42568:	9080004c 	andi	r2,r18,1
   4256c:	0039883a 	mov	fp,zero
   42570:	10000426 	beq	r2,zero,42584 <___vfprintf_internal_r+0x1ddc>
   42574:	00800c04 	movi	r2,48
   42578:	dc001dc4 	addi	r16,sp,119
   4257c:	d8801dc5 	stb	r2,119(sp)
   42580:	003b8006 	br	41384 <__alt_data_end+0xfffe1384>
   42584:	d8002e15 	stw	zero,184(sp)
   42588:	dc001e04 	addi	r16,sp,120
   4258c:	003a4d06 	br	40ec4 <__alt_data_end+0xfffe0ec4>
   42590:	8c7fff84 	addi	r17,r17,-2
   42594:	b5bfffc4 	addi	r22,r22,-1
   42598:	dd802615 	stw	r22,152(sp)
   4259c:	dc4022c5 	stb	r17,139(sp)
   425a0:	b000bf16 	blt	r22,zero,428a0 <___vfprintf_internal_r+0x20f8>
   425a4:	00800ac4 	movi	r2,43
   425a8:	d8802305 	stb	r2,140(sp)
   425ac:	00800244 	movi	r2,9
   425b0:	15807016 	blt	r2,r22,42774 <___vfprintf_internal_r+0x1fcc>
   425b4:	00800c04 	movi	r2,48
   425b8:	b5800c04 	addi	r22,r22,48
   425bc:	d8802345 	stb	r2,141(sp)
   425c0:	dd802385 	stb	r22,142(sp)
   425c4:	d88023c4 	addi	r2,sp,143
   425c8:	df0022c4 	addi	fp,sp,139
   425cc:	d8c03317 	ldw	r3,204(sp)
   425d0:	1739c83a 	sub	fp,r2,fp
   425d4:	d9003317 	ldw	r4,204(sp)
   425d8:	e0c7883a 	add	r3,fp,r3
   425dc:	df003a15 	stw	fp,232(sp)
   425e0:	d8c02e15 	stw	r3,184(sp)
   425e4:	00800044 	movi	r2,1
   425e8:	1100b30e 	bge	r2,r4,428b8 <___vfprintf_internal_r+0x2110>
   425ec:	d8c02e17 	ldw	r3,184(sp)
   425f0:	18c00044 	addi	r3,r3,1
   425f4:	d8c02e15 	stw	r3,184(sp)
   425f8:	1805883a 	mov	r2,r3
   425fc:	1800ac16 	blt	r3,zero,428b0 <___vfprintf_internal_r+0x2108>
   42600:	d8003215 	stw	zero,200(sp)
   42604:	003e5d06 	br	41f7c <__alt_data_end+0xfffe1f7c>
   42608:	d9002c17 	ldw	r4,176(sp)
   4260c:	d9801e04 	addi	r6,sp,120
   42610:	b80b883a 	mov	r5,r23
   42614:	00472c00 	call	472c0 <__sprint_r>
   42618:	1039651e 	bne	r2,zero,40bb0 <__alt_data_end+0xfffe0bb0>
   4261c:	dc402617 	ldw	r17,152(sp)
   42620:	d8c02017 	ldw	r3,128(sp)
   42624:	d8801f17 	ldw	r2,124(sp)
   42628:	da000404 	addi	r8,sp,16
   4262c:	003ed606 	br	42188 <__alt_data_end+0xfffe2188>
   42630:	582b883a 	mov	r21,r11
   42634:	d8002915 	stw	zero,164(sp)
   42638:	0038bd06 	br	40930 <__alt_data_end+0xfffe0930>
   4263c:	d8802917 	ldw	r2,164(sp)
   42640:	103e071e 	bne	r2,zero,41e60 <__alt_data_end+0xfffe1e60>
   42644:	dc002915 	stw	r16,164(sp)
   42648:	003e0506 	br	41e60 <__alt_data_end+0xfffe1e60>
   4264c:	d9002917 	ldw	r4,164(sp)
   42650:	20c00044 	addi	r3,r4,1
   42654:	003e0f06 	br	41e94 <__alt_data_end+0xfffe1e94>
   42658:	01400184 	movi	r5,6
   4265c:	d9402915 	stw	r5,164(sp)
   42660:	003dff06 	br	41e60 <__alt_data_end+0xfffe1e60>
   42664:	d8802104 	addi	r2,sp,132
   42668:	d8800315 	stw	r2,12(sp)
   4266c:	d8802504 	addi	r2,sp,148
   42670:	d8800215 	stw	r2,8(sp)
   42674:	d8802604 	addi	r2,sp,152
   42678:	d8800115 	stw	r2,4(sp)
   4267c:	d8802917 	ldw	r2,164(sp)
   42680:	d9403617 	ldw	r5,216(sp)
   42684:	d9002c17 	ldw	r4,176(sp)
   42688:	d8800015 	stw	r2,0(sp)
   4268c:	01c000c4 	movi	r7,3
   42690:	980d883a 	mov	r6,r19
   42694:	da003d15 	stw	r8,244(sp)
   42698:	0042dcc0 	call	42dcc <_dtoa_r>
   4269c:	d8c02917 	ldw	r3,164(sp)
   426a0:	da003d17 	ldw	r8,244(sp)
   426a4:	1021883a 	mov	r16,r2
   426a8:	10f9883a 	add	fp,r2,r3
   426ac:	81000007 	ldb	r4,0(r16)
   426b0:	00800c04 	movi	r2,48
   426b4:	20805e26 	beq	r4,r2,42830 <___vfprintf_internal_r+0x2088>
   426b8:	d8c02617 	ldw	r3,152(sp)
   426bc:	e0f9883a 	add	fp,fp,r3
   426c0:	003e0a06 	br	41eec <__alt_data_end+0xfffe1eec>
   426c4:	00c00b44 	movi	r3,45
   426c8:	24e0003c 	xorhi	r19,r4,32768
   426cc:	d8c02a05 	stb	r3,168(sp)
   426d0:	003de906 	br	41e78 <__alt_data_end+0xfffe1e78>
   426d4:	d8c03217 	ldw	r3,200(sp)
   426d8:	00c07a0e 	bge	zero,r3,428c4 <___vfprintf_internal_r+0x211c>
   426dc:	00800044 	movi	r2,1
   426e0:	d9003317 	ldw	r4,204(sp)
   426e4:	1105883a 	add	r2,r2,r4
   426e8:	d8802e15 	stw	r2,184(sp)
   426ec:	10004e16 	blt	r2,zero,42828 <___vfprintf_internal_r+0x2080>
   426f0:	044019c4 	movi	r17,103
   426f4:	003e2106 	br	41f7c <__alt_data_end+0xfffe1f7c>
   426f8:	d9002917 	ldw	r4,164(sp)
   426fc:	d8802104 	addi	r2,sp,132
   42700:	d8800315 	stw	r2,12(sp)
   42704:	d9000015 	stw	r4,0(sp)
   42708:	d8802504 	addi	r2,sp,148
   4270c:	d9403617 	ldw	r5,216(sp)
   42710:	d9002c17 	ldw	r4,176(sp)
   42714:	d8800215 	stw	r2,8(sp)
   42718:	d8802604 	addi	r2,sp,152
   4271c:	d8800115 	stw	r2,4(sp)
   42720:	01c000c4 	movi	r7,3
   42724:	980d883a 	mov	r6,r19
   42728:	da003d15 	stw	r8,244(sp)
   4272c:	0042dcc0 	call	42dcc <_dtoa_r>
   42730:	d8c02917 	ldw	r3,164(sp)
   42734:	da003d17 	ldw	r8,244(sp)
   42738:	1021883a 	mov	r16,r2
   4273c:	00801184 	movi	r2,70
   42740:	80f9883a 	add	fp,r16,r3
   42744:	88bfd926 	beq	r17,r2,426ac <__alt_data_end+0xfffe26ac>
   42748:	003de806 	br	41eec <__alt_data_end+0xfffe1eec>
   4274c:	d9002917 	ldw	r4,164(sp)
   42750:	00c04d0e 	bge	zero,r3,42888 <___vfprintf_internal_r+0x20e0>
   42754:	2000441e 	bne	r4,zero,42868 <___vfprintf_internal_r+0x20c0>
   42758:	9480004c 	andi	r18,r18,1
   4275c:	9000421e 	bne	r18,zero,42868 <___vfprintf_internal_r+0x20c0>
   42760:	1805883a 	mov	r2,r3
   42764:	18007016 	blt	r3,zero,42928 <___vfprintf_internal_r+0x2180>
   42768:	d8c03217 	ldw	r3,200(sp)
   4276c:	d8c02e15 	stw	r3,184(sp)
   42770:	003e0206 	br	41f7c <__alt_data_end+0xfffe1f7c>
   42774:	df0022c4 	addi	fp,sp,139
   42778:	dc002915 	stw	r16,164(sp)
   4277c:	4027883a 	mov	r19,r8
   42780:	e021883a 	mov	r16,fp
   42784:	b009883a 	mov	r4,r22
   42788:	01400284 	movi	r5,10
   4278c:	004a7f00 	call	4a7f0 <__modsi3>
   42790:	10800c04 	addi	r2,r2,48
   42794:	843fffc4 	addi	r16,r16,-1
   42798:	b009883a 	mov	r4,r22
   4279c:	01400284 	movi	r5,10
   427a0:	80800005 	stb	r2,0(r16)
   427a4:	004a76c0 	call	4a76c <__divsi3>
   427a8:	102d883a 	mov	r22,r2
   427ac:	00800244 	movi	r2,9
   427b0:	15bff416 	blt	r2,r22,42784 <__alt_data_end+0xfffe2784>
   427b4:	9811883a 	mov	r8,r19
   427b8:	b0800c04 	addi	r2,r22,48
   427bc:	8027883a 	mov	r19,r16
   427c0:	997fffc4 	addi	r5,r19,-1
   427c4:	98bfffc5 	stb	r2,-1(r19)
   427c8:	dc002917 	ldw	r16,164(sp)
   427cc:	2f006a2e 	bgeu	r5,fp,42978 <___vfprintf_internal_r+0x21d0>
   427d0:	d9c02384 	addi	r7,sp,142
   427d4:	3ccfc83a 	sub	r7,r7,r19
   427d8:	d9002344 	addi	r4,sp,141
   427dc:	e1cf883a 	add	r7,fp,r7
   427e0:	00000106 	br	427e8 <___vfprintf_internal_r+0x2040>
   427e4:	28800003 	ldbu	r2,0(r5)
   427e8:	20800005 	stb	r2,0(r4)
   427ec:	21000044 	addi	r4,r4,1
   427f0:	29400044 	addi	r5,r5,1
   427f4:	393ffb1e 	bne	r7,r4,427e4 <__alt_data_end+0xfffe27e4>
   427f8:	d8802304 	addi	r2,sp,140
   427fc:	14c5c83a 	sub	r2,r2,r19
   42800:	d8c02344 	addi	r3,sp,141
   42804:	1885883a 	add	r2,r3,r2
   42808:	003f7006 	br	425cc <__alt_data_end+0xfffe25cc>
   4280c:	0005883a 	mov	r2,zero
   42810:	003f0f06 	br	42450 <__alt_data_end+0xfffe2450>
   42814:	d8c03217 	ldw	r3,200(sp)
   42818:	18c00044 	addi	r3,r3,1
   4281c:	d8c02e15 	stw	r3,184(sp)
   42820:	1805883a 	mov	r2,r3
   42824:	183fb20e 	bge	r3,zero,426f0 <__alt_data_end+0xfffe26f0>
   42828:	0005883a 	mov	r2,zero
   4282c:	003fb006 	br	426f0 <__alt_data_end+0xfffe26f0>
   42830:	d9003617 	ldw	r4,216(sp)
   42834:	000d883a 	mov	r6,zero
   42838:	000f883a 	mov	r7,zero
   4283c:	980b883a 	mov	r5,r19
   42840:	d8c03c15 	stw	r3,240(sp)
   42844:	da003d15 	stw	r8,244(sp)
   42848:	004bab40 	call	4bab4 <__eqdf2>
   4284c:	d8c03c17 	ldw	r3,240(sp)
   42850:	da003d17 	ldw	r8,244(sp)
   42854:	103f9826 	beq	r2,zero,426b8 <__alt_data_end+0xfffe26b8>
   42858:	00800044 	movi	r2,1
   4285c:	10c7c83a 	sub	r3,r2,r3
   42860:	d8c02615 	stw	r3,152(sp)
   42864:	003f9506 	br	426bc <__alt_data_end+0xfffe26bc>
   42868:	d9002917 	ldw	r4,164(sp)
   4286c:	d8c03217 	ldw	r3,200(sp)
   42870:	20800044 	addi	r2,r4,1
   42874:	1885883a 	add	r2,r3,r2
   42878:	d8802e15 	stw	r2,184(sp)
   4287c:	103dbf0e 	bge	r2,zero,41f7c <__alt_data_end+0xfffe1f7c>
   42880:	0005883a 	mov	r2,zero
   42884:	003dbd06 	br	41f7c <__alt_data_end+0xfffe1f7c>
   42888:	2000211e 	bne	r4,zero,42910 <___vfprintf_internal_r+0x2168>
   4288c:	9480004c 	andi	r18,r18,1
   42890:	90001f1e 	bne	r18,zero,42910 <___vfprintf_internal_r+0x2168>
   42894:	00800044 	movi	r2,1
   42898:	d8802e15 	stw	r2,184(sp)
   4289c:	003db706 	br	41f7c <__alt_data_end+0xfffe1f7c>
   428a0:	00800b44 	movi	r2,45
   428a4:	05adc83a 	sub	r22,zero,r22
   428a8:	d8802305 	stb	r2,140(sp)
   428ac:	003f3f06 	br	425ac <__alt_data_end+0xfffe25ac>
   428b0:	0005883a 	mov	r2,zero
   428b4:	003f5206 	br	42600 <__alt_data_end+0xfffe2600>
   428b8:	90a4703a 	and	r18,r18,r2
   428bc:	903f4e26 	beq	r18,zero,425f8 <__alt_data_end+0xfffe25f8>
   428c0:	003f4a06 	br	425ec <__alt_data_end+0xfffe25ec>
   428c4:	00800084 	movi	r2,2
   428c8:	10c5c83a 	sub	r2,r2,r3
   428cc:	003f8406 	br	426e0 <__alt_data_end+0xfffe26e0>
   428d0:	d8802d17 	ldw	r2,180(sp)
   428d4:	d9002d17 	ldw	r4,180(sp)
   428d8:	ac400043 	ldbu	r17,1(r21)
   428dc:	10800017 	ldw	r2,0(r2)
   428e0:	582b883a 	mov	r21,r11
   428e4:	d8802915 	stw	r2,164(sp)
   428e8:	20800104 	addi	r2,r4,4
   428ec:	d9002917 	ldw	r4,164(sp)
   428f0:	d8802d15 	stw	r2,180(sp)
   428f4:	203e7a0e 	bge	r4,zero,422e0 <__alt_data_end+0xfffe22e0>
   428f8:	8c403fcc 	andi	r17,r17,255
   428fc:	00bfffc4 	movi	r2,-1
   42900:	8c40201c 	xori	r17,r17,128
   42904:	d8802915 	stw	r2,164(sp)
   42908:	8c7fe004 	addi	r17,r17,-128
   4290c:	00380706 	br	4092c <__alt_data_end+0xfffe092c>
   42910:	d8c02917 	ldw	r3,164(sp)
   42914:	18c00084 	addi	r3,r3,2
   42918:	d8c02e15 	stw	r3,184(sp)
   4291c:	1805883a 	mov	r2,r3
   42920:	183d960e 	bge	r3,zero,41f7c <__alt_data_end+0xfffe1f7c>
   42924:	003fd606 	br	42880 <__alt_data_end+0xfffe2880>
   42928:	0005883a 	mov	r2,zero
   4292c:	003f8e06 	br	42768 <__alt_data_end+0xfffe2768>
   42930:	9080004c 	andi	r2,r18,1
   42934:	103f811e 	bne	r2,zero,4273c <__alt_data_end+0xfffe273c>
   42938:	d8802117 	ldw	r2,132(sp)
   4293c:	1405c83a 	sub	r2,r2,r16
   42940:	d8803315 	stw	r2,204(sp)
   42944:	b47ef326 	beq	r22,r17,42514 <__alt_data_end+0xfffe2514>
   42948:	dd802617 	ldw	r22,152(sp)
   4294c:	003f1106 	br	42594 <__alt_data_end+0xfffe2594>
   42950:	d9c02785 	stb	r7,158(sp)
   42954:	00390406 	br	40d68 <__alt_data_end+0xfffe0d68>
   42958:	d9c02785 	stb	r7,158(sp)
   4295c:	0038d306 	br	40cac <__alt_data_end+0xfffe0cac>
   42960:	d9c02785 	stb	r7,158(sp)
   42964:	003a6106 	br	412ec <__alt_data_end+0xfffe12ec>
   42968:	d9c02785 	stb	r7,158(sp)
   4296c:	003af806 	br	41550 <__alt_data_end+0xfffe1550>
   42970:	0005883a 	mov	r2,zero
   42974:	003d7e06 	br	41f70 <__alt_data_end+0xfffe1f70>
   42978:	d8802344 	addi	r2,sp,141
   4297c:	003f1306 	br	425cc <__alt_data_end+0xfffe25cc>
   42980:	d9c02785 	stb	r7,158(sp)
   42984:	00392306 	br	40e14 <__alt_data_end+0xfffe0e14>
   42988:	d9c02785 	stb	r7,158(sp)
   4298c:	003aa906 	br	41434 <__alt_data_end+0xfffe1434>
   42990:	d9c02785 	stb	r7,158(sp)
   42994:	003a3d06 	br	4128c <__alt_data_end+0xfffe128c>
   42998:	d9c02785 	stb	r7,158(sp)
   4299c:	003aca06 	br	414c8 <__alt_data_end+0xfffe14c8>

000429a0 <__vfprintf_internal>:
   429a0:	00800174 	movhi	r2,5
   429a4:	10862704 	addi	r2,r2,6300
   429a8:	300f883a 	mov	r7,r6
   429ac:	280d883a 	mov	r6,r5
   429b0:	200b883a 	mov	r5,r4
   429b4:	11000017 	ldw	r4,0(r2)
   429b8:	00407a81 	jmpi	407a8 <___vfprintf_internal_r>

000429bc <__sbprintf>:
   429bc:	2880030b 	ldhu	r2,12(r5)
   429c0:	2ac01917 	ldw	r11,100(r5)
   429c4:	2a80038b 	ldhu	r10,14(r5)
   429c8:	2a400717 	ldw	r9,28(r5)
   429cc:	2a000917 	ldw	r8,36(r5)
   429d0:	defee204 	addi	sp,sp,-1144
   429d4:	00c10004 	movi	r3,1024
   429d8:	dc011a15 	stw	r16,1128(sp)
   429dc:	10bfff4c 	andi	r2,r2,65533
   429e0:	2821883a 	mov	r16,r5
   429e4:	d8cb883a 	add	r5,sp,r3
   429e8:	dc811c15 	stw	r18,1136(sp)
   429ec:	dc411b15 	stw	r17,1132(sp)
   429f0:	dfc11d15 	stw	ra,1140(sp)
   429f4:	2025883a 	mov	r18,r4
   429f8:	d881030d 	sth	r2,1036(sp)
   429fc:	dac11915 	stw	r11,1124(sp)
   42a00:	da81038d 	sth	r10,1038(sp)
   42a04:	da410715 	stw	r9,1052(sp)
   42a08:	da010915 	stw	r8,1060(sp)
   42a0c:	dec10015 	stw	sp,1024(sp)
   42a10:	dec10415 	stw	sp,1040(sp)
   42a14:	d8c10215 	stw	r3,1032(sp)
   42a18:	d8c10515 	stw	r3,1044(sp)
   42a1c:	d8010615 	stw	zero,1048(sp)
   42a20:	00407a80 	call	407a8 <___vfprintf_internal_r>
   42a24:	1023883a 	mov	r17,r2
   42a28:	10000416 	blt	r2,zero,42a3c <__sbprintf+0x80>
   42a2c:	d9410004 	addi	r5,sp,1024
   42a30:	9009883a 	mov	r4,r18
   42a34:	00446700 	call	44670 <_fflush_r>
   42a38:	10000d1e 	bne	r2,zero,42a70 <__sbprintf+0xb4>
   42a3c:	d881030b 	ldhu	r2,1036(sp)
   42a40:	1080100c 	andi	r2,r2,64
   42a44:	10000326 	beq	r2,zero,42a54 <__sbprintf+0x98>
   42a48:	8080030b 	ldhu	r2,12(r16)
   42a4c:	10801014 	ori	r2,r2,64
   42a50:	8080030d 	sth	r2,12(r16)
   42a54:	8805883a 	mov	r2,r17
   42a58:	dfc11d17 	ldw	ra,1140(sp)
   42a5c:	dc811c17 	ldw	r18,1136(sp)
   42a60:	dc411b17 	ldw	r17,1132(sp)
   42a64:	dc011a17 	ldw	r16,1128(sp)
   42a68:	dec11e04 	addi	sp,sp,1144
   42a6c:	f800283a 	ret
   42a70:	047fffc4 	movi	r17,-1
   42a74:	003ff106 	br	42a3c <__alt_data_end+0xfffe2a3c>

00042a78 <__swsetup_r>:
   42a78:	00800174 	movhi	r2,5
   42a7c:	defffd04 	addi	sp,sp,-12
   42a80:	10862704 	addi	r2,r2,6300
   42a84:	dc400115 	stw	r17,4(sp)
   42a88:	2023883a 	mov	r17,r4
   42a8c:	11000017 	ldw	r4,0(r2)
   42a90:	dc000015 	stw	r16,0(sp)
   42a94:	dfc00215 	stw	ra,8(sp)
   42a98:	2821883a 	mov	r16,r5
   42a9c:	20000226 	beq	r4,zero,42aa8 <__swsetup_r+0x30>
   42aa0:	20800e17 	ldw	r2,56(r4)
   42aa4:	10003126 	beq	r2,zero,42b6c <__swsetup_r+0xf4>
   42aa8:	8080030b 	ldhu	r2,12(r16)
   42aac:	10c0020c 	andi	r3,r2,8
   42ab0:	1009883a 	mov	r4,r2
   42ab4:	18000f26 	beq	r3,zero,42af4 <__swsetup_r+0x7c>
   42ab8:	80c00417 	ldw	r3,16(r16)
   42abc:	18001526 	beq	r3,zero,42b14 <__swsetup_r+0x9c>
   42ac0:	1100004c 	andi	r4,r2,1
   42ac4:	20001c1e 	bne	r4,zero,42b38 <__swsetup_r+0xc0>
   42ac8:	1080008c 	andi	r2,r2,2
   42acc:	1000291e 	bne	r2,zero,42b74 <__swsetup_r+0xfc>
   42ad0:	80800517 	ldw	r2,20(r16)
   42ad4:	80800215 	stw	r2,8(r16)
   42ad8:	18001c26 	beq	r3,zero,42b4c <__swsetup_r+0xd4>
   42adc:	0005883a 	mov	r2,zero
   42ae0:	dfc00217 	ldw	ra,8(sp)
   42ae4:	dc400117 	ldw	r17,4(sp)
   42ae8:	dc000017 	ldw	r16,0(sp)
   42aec:	dec00304 	addi	sp,sp,12
   42af0:	f800283a 	ret
   42af4:	2080040c 	andi	r2,r4,16
   42af8:	10002e26 	beq	r2,zero,42bb4 <__swsetup_r+0x13c>
   42afc:	2080010c 	andi	r2,r4,4
   42b00:	10001e1e 	bne	r2,zero,42b7c <__swsetup_r+0x104>
   42b04:	80c00417 	ldw	r3,16(r16)
   42b08:	20800214 	ori	r2,r4,8
   42b0c:	8080030d 	sth	r2,12(r16)
   42b10:	183feb1e 	bne	r3,zero,42ac0 <__alt_data_end+0xfffe2ac0>
   42b14:	1100a00c 	andi	r4,r2,640
   42b18:	01408004 	movi	r5,512
   42b1c:	217fe826 	beq	r4,r5,42ac0 <__alt_data_end+0xfffe2ac0>
   42b20:	800b883a 	mov	r5,r16
   42b24:	8809883a 	mov	r4,r17
   42b28:	00451340 	call	45134 <__smakebuf_r>
   42b2c:	8080030b 	ldhu	r2,12(r16)
   42b30:	80c00417 	ldw	r3,16(r16)
   42b34:	003fe206 	br	42ac0 <__alt_data_end+0xfffe2ac0>
   42b38:	80800517 	ldw	r2,20(r16)
   42b3c:	80000215 	stw	zero,8(r16)
   42b40:	0085c83a 	sub	r2,zero,r2
   42b44:	80800615 	stw	r2,24(r16)
   42b48:	183fe41e 	bne	r3,zero,42adc <__alt_data_end+0xfffe2adc>
   42b4c:	80c0030b 	ldhu	r3,12(r16)
   42b50:	0005883a 	mov	r2,zero
   42b54:	1900200c 	andi	r4,r3,128
   42b58:	203fe126 	beq	r4,zero,42ae0 <__alt_data_end+0xfffe2ae0>
   42b5c:	18c01014 	ori	r3,r3,64
   42b60:	80c0030d 	sth	r3,12(r16)
   42b64:	00bfffc4 	movi	r2,-1
   42b68:	003fdd06 	br	42ae0 <__alt_data_end+0xfffe2ae0>
   42b6c:	0044a4c0 	call	44a4c <__sinit>
   42b70:	003fcd06 	br	42aa8 <__alt_data_end+0xfffe2aa8>
   42b74:	0005883a 	mov	r2,zero
   42b78:	003fd606 	br	42ad4 <__alt_data_end+0xfffe2ad4>
   42b7c:	81400c17 	ldw	r5,48(r16)
   42b80:	28000626 	beq	r5,zero,42b9c <__swsetup_r+0x124>
   42b84:	80801004 	addi	r2,r16,64
   42b88:	28800326 	beq	r5,r2,42b98 <__swsetup_r+0x120>
   42b8c:	8809883a 	mov	r4,r17
   42b90:	0044bc00 	call	44bc0 <_free_r>
   42b94:	8100030b 	ldhu	r4,12(r16)
   42b98:	80000c15 	stw	zero,48(r16)
   42b9c:	80c00417 	ldw	r3,16(r16)
   42ba0:	00bff6c4 	movi	r2,-37
   42ba4:	1108703a 	and	r4,r2,r4
   42ba8:	80000115 	stw	zero,4(r16)
   42bac:	80c00015 	stw	r3,0(r16)
   42bb0:	003fd506 	br	42b08 <__alt_data_end+0xfffe2b08>
   42bb4:	00800244 	movi	r2,9
   42bb8:	88800015 	stw	r2,0(r17)
   42bbc:	20801014 	ori	r2,r4,64
   42bc0:	8080030d 	sth	r2,12(r16)
   42bc4:	00bfffc4 	movi	r2,-1
   42bc8:	003fc506 	br	42ae0 <__alt_data_end+0xfffe2ae0>

00042bcc <quorem>:
   42bcc:	defff704 	addi	sp,sp,-36
   42bd0:	dc800215 	stw	r18,8(sp)
   42bd4:	20800417 	ldw	r2,16(r4)
   42bd8:	2c800417 	ldw	r18,16(r5)
   42bdc:	dfc00815 	stw	ra,32(sp)
   42be0:	ddc00715 	stw	r23,28(sp)
   42be4:	dd800615 	stw	r22,24(sp)
   42be8:	dd400515 	stw	r21,20(sp)
   42bec:	dd000415 	stw	r20,16(sp)
   42bf0:	dcc00315 	stw	r19,12(sp)
   42bf4:	dc400115 	stw	r17,4(sp)
   42bf8:	dc000015 	stw	r16,0(sp)
   42bfc:	14807116 	blt	r2,r18,42dc4 <quorem+0x1f8>
   42c00:	94bfffc4 	addi	r18,r18,-1
   42c04:	94ad883a 	add	r22,r18,r18
   42c08:	b5ad883a 	add	r22,r22,r22
   42c0c:	2c400504 	addi	r17,r5,20
   42c10:	8da9883a 	add	r20,r17,r22
   42c14:	25400504 	addi	r21,r4,20
   42c18:	282f883a 	mov	r23,r5
   42c1c:	adad883a 	add	r22,r21,r22
   42c20:	a1400017 	ldw	r5,0(r20)
   42c24:	2021883a 	mov	r16,r4
   42c28:	b1000017 	ldw	r4,0(r22)
   42c2c:	29400044 	addi	r5,r5,1
   42c30:	004a8640 	call	4a864 <__udivsi3>
   42c34:	1027883a 	mov	r19,r2
   42c38:	10002c26 	beq	r2,zero,42cec <quorem+0x120>
   42c3c:	a813883a 	mov	r9,r21
   42c40:	880b883a 	mov	r5,r17
   42c44:	0009883a 	mov	r4,zero
   42c48:	000d883a 	mov	r6,zero
   42c4c:	2a000017 	ldw	r8,0(r5)
   42c50:	49c00017 	ldw	r7,0(r9)
   42c54:	29400104 	addi	r5,r5,4
   42c58:	40bfffcc 	andi	r2,r8,65535
   42c5c:	14c5383a 	mul	r2,r2,r19
   42c60:	4010d43a 	srli	r8,r8,16
   42c64:	38ffffcc 	andi	r3,r7,65535
   42c68:	1105883a 	add	r2,r2,r4
   42c6c:	1008d43a 	srli	r4,r2,16
   42c70:	44d1383a 	mul	r8,r8,r19
   42c74:	198d883a 	add	r6,r3,r6
   42c78:	10ffffcc 	andi	r3,r2,65535
   42c7c:	30c7c83a 	sub	r3,r6,r3
   42c80:	380ed43a 	srli	r7,r7,16
   42c84:	4105883a 	add	r2,r8,r4
   42c88:	180dd43a 	srai	r6,r3,16
   42c8c:	113fffcc 	andi	r4,r2,65535
   42c90:	390fc83a 	sub	r7,r7,r4
   42c94:	398d883a 	add	r6,r7,r6
   42c98:	300e943a 	slli	r7,r6,16
   42c9c:	18ffffcc 	andi	r3,r3,65535
   42ca0:	1008d43a 	srli	r4,r2,16
   42ca4:	38ceb03a 	or	r7,r7,r3
   42ca8:	49c00015 	stw	r7,0(r9)
   42cac:	300dd43a 	srai	r6,r6,16
   42cb0:	4a400104 	addi	r9,r9,4
   42cb4:	a17fe52e 	bgeu	r20,r5,42c4c <__alt_data_end+0xfffe2c4c>
   42cb8:	b0800017 	ldw	r2,0(r22)
   42cbc:	10000b1e 	bne	r2,zero,42cec <quorem+0x120>
   42cc0:	b0bfff04 	addi	r2,r22,-4
   42cc4:	a880082e 	bgeu	r21,r2,42ce8 <quorem+0x11c>
   42cc8:	b0ffff17 	ldw	r3,-4(r22)
   42ccc:	18000326 	beq	r3,zero,42cdc <quorem+0x110>
   42cd0:	00000506 	br	42ce8 <quorem+0x11c>
   42cd4:	10c00017 	ldw	r3,0(r2)
   42cd8:	1800031e 	bne	r3,zero,42ce8 <quorem+0x11c>
   42cdc:	10bfff04 	addi	r2,r2,-4
   42ce0:	94bfffc4 	addi	r18,r18,-1
   42ce4:	a8bffb36 	bltu	r21,r2,42cd4 <__alt_data_end+0xfffe2cd4>
   42ce8:	84800415 	stw	r18,16(r16)
   42cec:	b80b883a 	mov	r5,r23
   42cf0:	8009883a 	mov	r4,r16
   42cf4:	00467180 	call	46718 <__mcmp>
   42cf8:	10002616 	blt	r2,zero,42d94 <quorem+0x1c8>
   42cfc:	9cc00044 	addi	r19,r19,1
   42d00:	a805883a 	mov	r2,r21
   42d04:	000b883a 	mov	r5,zero
   42d08:	11000017 	ldw	r4,0(r2)
   42d0c:	89800017 	ldw	r6,0(r17)
   42d10:	10800104 	addi	r2,r2,4
   42d14:	20ffffcc 	andi	r3,r4,65535
   42d18:	194b883a 	add	r5,r3,r5
   42d1c:	30ffffcc 	andi	r3,r6,65535
   42d20:	28c7c83a 	sub	r3,r5,r3
   42d24:	300cd43a 	srli	r6,r6,16
   42d28:	2008d43a 	srli	r4,r4,16
   42d2c:	180bd43a 	srai	r5,r3,16
   42d30:	18ffffcc 	andi	r3,r3,65535
   42d34:	2189c83a 	sub	r4,r4,r6
   42d38:	2149883a 	add	r4,r4,r5
   42d3c:	200c943a 	slli	r6,r4,16
   42d40:	8c400104 	addi	r17,r17,4
   42d44:	200bd43a 	srai	r5,r4,16
   42d48:	30c6b03a 	or	r3,r6,r3
   42d4c:	10ffff15 	stw	r3,-4(r2)
   42d50:	a47fed2e 	bgeu	r20,r17,42d08 <__alt_data_end+0xfffe2d08>
   42d54:	9485883a 	add	r2,r18,r18
   42d58:	1085883a 	add	r2,r2,r2
   42d5c:	a887883a 	add	r3,r21,r2
   42d60:	18800017 	ldw	r2,0(r3)
   42d64:	10000b1e 	bne	r2,zero,42d94 <quorem+0x1c8>
   42d68:	18bfff04 	addi	r2,r3,-4
   42d6c:	a880082e 	bgeu	r21,r2,42d90 <quorem+0x1c4>
   42d70:	18ffff17 	ldw	r3,-4(r3)
   42d74:	18000326 	beq	r3,zero,42d84 <quorem+0x1b8>
   42d78:	00000506 	br	42d90 <quorem+0x1c4>
   42d7c:	10c00017 	ldw	r3,0(r2)
   42d80:	1800031e 	bne	r3,zero,42d90 <quorem+0x1c4>
   42d84:	10bfff04 	addi	r2,r2,-4
   42d88:	94bfffc4 	addi	r18,r18,-1
   42d8c:	a8bffb36 	bltu	r21,r2,42d7c <__alt_data_end+0xfffe2d7c>
   42d90:	84800415 	stw	r18,16(r16)
   42d94:	9805883a 	mov	r2,r19
   42d98:	dfc00817 	ldw	ra,32(sp)
   42d9c:	ddc00717 	ldw	r23,28(sp)
   42da0:	dd800617 	ldw	r22,24(sp)
   42da4:	dd400517 	ldw	r21,20(sp)
   42da8:	dd000417 	ldw	r20,16(sp)
   42dac:	dcc00317 	ldw	r19,12(sp)
   42db0:	dc800217 	ldw	r18,8(sp)
   42db4:	dc400117 	ldw	r17,4(sp)
   42db8:	dc000017 	ldw	r16,0(sp)
   42dbc:	dec00904 	addi	sp,sp,36
   42dc0:	f800283a 	ret
   42dc4:	0005883a 	mov	r2,zero
   42dc8:	003ff306 	br	42d98 <__alt_data_end+0xfffe2d98>

00042dcc <_dtoa_r>:
   42dcc:	20801017 	ldw	r2,64(r4)
   42dd0:	deffde04 	addi	sp,sp,-136
   42dd4:	df002015 	stw	fp,128(sp)
   42dd8:	dcc01b15 	stw	r19,108(sp)
   42ddc:	dc801a15 	stw	r18,104(sp)
   42de0:	dc401915 	stw	r17,100(sp)
   42de4:	dc001815 	stw	r16,96(sp)
   42de8:	dfc02115 	stw	ra,132(sp)
   42dec:	ddc01f15 	stw	r23,124(sp)
   42df0:	dd801e15 	stw	r22,120(sp)
   42df4:	dd401d15 	stw	r21,116(sp)
   42df8:	dd001c15 	stw	r20,112(sp)
   42dfc:	d9c00315 	stw	r7,12(sp)
   42e00:	2039883a 	mov	fp,r4
   42e04:	3023883a 	mov	r17,r6
   42e08:	2825883a 	mov	r18,r5
   42e0c:	dc002417 	ldw	r16,144(sp)
   42e10:	3027883a 	mov	r19,r6
   42e14:	10000826 	beq	r2,zero,42e38 <_dtoa_r+0x6c>
   42e18:	21801117 	ldw	r6,68(r4)
   42e1c:	00c00044 	movi	r3,1
   42e20:	100b883a 	mov	r5,r2
   42e24:	1986983a 	sll	r3,r3,r6
   42e28:	11800115 	stw	r6,4(r2)
   42e2c:	10c00215 	stw	r3,8(r2)
   42e30:	0045ef80 	call	45ef8 <_Bfree>
   42e34:	e0001015 	stw	zero,64(fp)
   42e38:	88002e16 	blt	r17,zero,42ef4 <_dtoa_r+0x128>
   42e3c:	80000015 	stw	zero,0(r16)
   42e40:	889ffc2c 	andhi	r2,r17,32752
   42e44:	00dffc34 	movhi	r3,32752
   42e48:	10c01c26 	beq	r2,r3,42ebc <_dtoa_r+0xf0>
   42e4c:	000d883a 	mov	r6,zero
   42e50:	000f883a 	mov	r7,zero
   42e54:	9009883a 	mov	r4,r18
   42e58:	980b883a 	mov	r5,r19
   42e5c:	004bab40 	call	4bab4 <__eqdf2>
   42e60:	10002b1e 	bne	r2,zero,42f10 <_dtoa_r+0x144>
   42e64:	d9c02317 	ldw	r7,140(sp)
   42e68:	00800044 	movi	r2,1
   42e6c:	38800015 	stw	r2,0(r7)
   42e70:	d8802517 	ldw	r2,148(sp)
   42e74:	10019e26 	beq	r2,zero,434f0 <_dtoa_r+0x724>
   42e78:	d8c02517 	ldw	r3,148(sp)
   42e7c:	00800174 	movhi	r2,5
   42e80:	10becc44 	addi	r2,r2,-1231
   42e84:	18800015 	stw	r2,0(r3)
   42e88:	10bfffc4 	addi	r2,r2,-1
   42e8c:	dfc02117 	ldw	ra,132(sp)
   42e90:	df002017 	ldw	fp,128(sp)
   42e94:	ddc01f17 	ldw	r23,124(sp)
   42e98:	dd801e17 	ldw	r22,120(sp)
   42e9c:	dd401d17 	ldw	r21,116(sp)
   42ea0:	dd001c17 	ldw	r20,112(sp)
   42ea4:	dcc01b17 	ldw	r19,108(sp)
   42ea8:	dc801a17 	ldw	r18,104(sp)
   42eac:	dc401917 	ldw	r17,100(sp)
   42eb0:	dc001817 	ldw	r16,96(sp)
   42eb4:	dec02204 	addi	sp,sp,136
   42eb8:	f800283a 	ret
   42ebc:	d8c02317 	ldw	r3,140(sp)
   42ec0:	0089c3c4 	movi	r2,9999
   42ec4:	18800015 	stw	r2,0(r3)
   42ec8:	90017726 	beq	r18,zero,434a8 <_dtoa_r+0x6dc>
   42ecc:	00800174 	movhi	r2,5
   42ed0:	10bed804 	addi	r2,r2,-1184
   42ed4:	d9002517 	ldw	r4,148(sp)
   42ed8:	203fec26 	beq	r4,zero,42e8c <__alt_data_end+0xfffe2e8c>
   42edc:	10c000c7 	ldb	r3,3(r2)
   42ee0:	1801781e 	bne	r3,zero,434c4 <_dtoa_r+0x6f8>
   42ee4:	10c000c4 	addi	r3,r2,3
   42ee8:	d9802517 	ldw	r6,148(sp)
   42eec:	30c00015 	stw	r3,0(r6)
   42ef0:	003fe606 	br	42e8c <__alt_data_end+0xfffe2e8c>
   42ef4:	04e00034 	movhi	r19,32768
   42ef8:	9cffffc4 	addi	r19,r19,-1
   42efc:	00800044 	movi	r2,1
   42f00:	8ce6703a 	and	r19,r17,r19
   42f04:	80800015 	stw	r2,0(r16)
   42f08:	9823883a 	mov	r17,r19
   42f0c:	003fcc06 	br	42e40 <__alt_data_end+0xfffe2e40>
   42f10:	d8800204 	addi	r2,sp,8
   42f14:	d8800015 	stw	r2,0(sp)
   42f18:	d9c00104 	addi	r7,sp,4
   42f1c:	900b883a 	mov	r5,r18
   42f20:	980d883a 	mov	r6,r19
   42f24:	e009883a 	mov	r4,fp
   42f28:	8820d53a 	srli	r16,r17,20
   42f2c:	0046ae40 	call	46ae4 <__d2b>
   42f30:	d8800915 	stw	r2,36(sp)
   42f34:	8001651e 	bne	r16,zero,434cc <_dtoa_r+0x700>
   42f38:	dd800217 	ldw	r22,8(sp)
   42f3c:	dc000117 	ldw	r16,4(sp)
   42f40:	00800804 	movi	r2,32
   42f44:	b421883a 	add	r16,r22,r16
   42f48:	80c10c84 	addi	r3,r16,1074
   42f4c:	10c2d10e 	bge	r2,r3,43a94 <_dtoa_r+0xcc8>
   42f50:	00801004 	movi	r2,64
   42f54:	81010484 	addi	r4,r16,1042
   42f58:	10c7c83a 	sub	r3,r2,r3
   42f5c:	9108d83a 	srl	r4,r18,r4
   42f60:	88e2983a 	sll	r17,r17,r3
   42f64:	2448b03a 	or	r4,r4,r17
   42f68:	004ce7c0 	call	4ce7c <__floatunsidf>
   42f6c:	017f8434 	movhi	r5,65040
   42f70:	01800044 	movi	r6,1
   42f74:	1009883a 	mov	r4,r2
   42f78:	194b883a 	add	r5,r3,r5
   42f7c:	843fffc4 	addi	r16,r16,-1
   42f80:	d9801115 	stw	r6,68(sp)
   42f84:	000d883a 	mov	r6,zero
   42f88:	01cffe34 	movhi	r7,16376
   42f8c:	004c4240 	call	4c424 <__subdf3>
   42f90:	0198dbf4 	movhi	r6,25455
   42f94:	01cff4f4 	movhi	r7,16339
   42f98:	3190d844 	addi	r6,r6,17249
   42f9c:	39e1e9c4 	addi	r7,r7,-30809
   42fa0:	1009883a 	mov	r4,r2
   42fa4:	180b883a 	mov	r5,r3
   42fa8:	004bd0c0 	call	4bd0c <__muldf3>
   42fac:	01a2d874 	movhi	r6,35681
   42fb0:	01cff1f4 	movhi	r7,16327
   42fb4:	31b22cc4 	addi	r6,r6,-14157
   42fb8:	39e28a04 	addi	r7,r7,-30168
   42fbc:	180b883a 	mov	r5,r3
   42fc0:	1009883a 	mov	r4,r2
   42fc4:	004a9200 	call	4a920 <__adddf3>
   42fc8:	8009883a 	mov	r4,r16
   42fcc:	1029883a 	mov	r20,r2
   42fd0:	1823883a 	mov	r17,r3
   42fd4:	004cda00 	call	4cda0 <__floatsidf>
   42fd8:	019427f4 	movhi	r6,20639
   42fdc:	01cff4f4 	movhi	r7,16339
   42fe0:	319e7ec4 	addi	r6,r6,31227
   42fe4:	39d104c4 	addi	r7,r7,17427
   42fe8:	1009883a 	mov	r4,r2
   42fec:	180b883a 	mov	r5,r3
   42ff0:	004bd0c0 	call	4bd0c <__muldf3>
   42ff4:	100d883a 	mov	r6,r2
   42ff8:	180f883a 	mov	r7,r3
   42ffc:	a009883a 	mov	r4,r20
   43000:	880b883a 	mov	r5,r17
   43004:	004a9200 	call	4a920 <__adddf3>
   43008:	1009883a 	mov	r4,r2
   4300c:	180b883a 	mov	r5,r3
   43010:	1029883a 	mov	r20,r2
   43014:	1823883a 	mov	r17,r3
   43018:	004cd200 	call	4cd20 <__fixdfsi>
   4301c:	000d883a 	mov	r6,zero
   43020:	000f883a 	mov	r7,zero
   43024:	a009883a 	mov	r4,r20
   43028:	880b883a 	mov	r5,r17
   4302c:	d8800515 	stw	r2,20(sp)
   43030:	004bc180 	call	4bc18 <__ledf2>
   43034:	10028716 	blt	r2,zero,43a54 <_dtoa_r+0xc88>
   43038:	d8c00517 	ldw	r3,20(sp)
   4303c:	00800584 	movi	r2,22
   43040:	10c27536 	bltu	r2,r3,43a18 <_dtoa_r+0xc4c>
   43044:	180490fa 	slli	r2,r3,3
   43048:	00c00174 	movhi	r3,5
   4304c:	18fef404 	addi	r3,r3,-1072
   43050:	1885883a 	add	r2,r3,r2
   43054:	11000017 	ldw	r4,0(r2)
   43058:	11400117 	ldw	r5,4(r2)
   4305c:	900d883a 	mov	r6,r18
   43060:	980f883a 	mov	r7,r19
   43064:	004bb3c0 	call	4bb3c <__gedf2>
   43068:	00828d0e 	bge	zero,r2,43aa0 <_dtoa_r+0xcd4>
   4306c:	d9000517 	ldw	r4,20(sp)
   43070:	d8000e15 	stw	zero,56(sp)
   43074:	213fffc4 	addi	r4,r4,-1
   43078:	d9000515 	stw	r4,20(sp)
   4307c:	b42dc83a 	sub	r22,r22,r16
   43080:	b5bfffc4 	addi	r22,r22,-1
   43084:	b0026f16 	blt	r22,zero,43a44 <_dtoa_r+0xc78>
   43088:	d8000815 	stw	zero,32(sp)
   4308c:	d9c00517 	ldw	r7,20(sp)
   43090:	38026416 	blt	r7,zero,43a24 <_dtoa_r+0xc58>
   43094:	b1ed883a 	add	r22,r22,r7
   43098:	d9c00d15 	stw	r7,52(sp)
   4309c:	d8000a15 	stw	zero,40(sp)
   430a0:	d9800317 	ldw	r6,12(sp)
   430a4:	00800244 	movi	r2,9
   430a8:	11811436 	bltu	r2,r6,434fc <_dtoa_r+0x730>
   430ac:	00800144 	movi	r2,5
   430b0:	1184e10e 	bge	r2,r6,44438 <_dtoa_r+0x166c>
   430b4:	31bfff04 	addi	r6,r6,-4
   430b8:	d9800315 	stw	r6,12(sp)
   430bc:	0023883a 	mov	r17,zero
   430c0:	d9800317 	ldw	r6,12(sp)
   430c4:	008000c4 	movi	r2,3
   430c8:	30836726 	beq	r6,r2,43e68 <_dtoa_r+0x109c>
   430cc:	1183410e 	bge	r2,r6,43dd4 <_dtoa_r+0x1008>
   430d0:	d9c00317 	ldw	r7,12(sp)
   430d4:	00800104 	movi	r2,4
   430d8:	38827c26 	beq	r7,r2,43acc <_dtoa_r+0xd00>
   430dc:	00800144 	movi	r2,5
   430e0:	3884c41e 	bne	r7,r2,443f4 <_dtoa_r+0x1628>
   430e4:	00800044 	movi	r2,1
   430e8:	d8800b15 	stw	r2,44(sp)
   430ec:	d8c00517 	ldw	r3,20(sp)
   430f0:	d9002217 	ldw	r4,136(sp)
   430f4:	1907883a 	add	r3,r3,r4
   430f8:	19800044 	addi	r6,r3,1
   430fc:	d8c00c15 	stw	r3,48(sp)
   43100:	d9800615 	stw	r6,24(sp)
   43104:	0183a40e 	bge	zero,r6,43f98 <_dtoa_r+0x11cc>
   43108:	d9800617 	ldw	r6,24(sp)
   4310c:	3021883a 	mov	r16,r6
   43110:	e0001115 	stw	zero,68(fp)
   43114:	008005c4 	movi	r2,23
   43118:	1184c92e 	bgeu	r2,r6,44440 <_dtoa_r+0x1674>
   4311c:	00c00044 	movi	r3,1
   43120:	00800104 	movi	r2,4
   43124:	1085883a 	add	r2,r2,r2
   43128:	11000504 	addi	r4,r2,20
   4312c:	180b883a 	mov	r5,r3
   43130:	18c00044 	addi	r3,r3,1
   43134:	313ffb2e 	bgeu	r6,r4,43124 <__alt_data_end+0xfffe3124>
   43138:	e1401115 	stw	r5,68(fp)
   4313c:	e009883a 	mov	r4,fp
   43140:	0045e500 	call	45e50 <_Balloc>
   43144:	d8800715 	stw	r2,28(sp)
   43148:	e0801015 	stw	r2,64(fp)
   4314c:	00800384 	movi	r2,14
   43150:	1400f736 	bltu	r2,r16,43530 <_dtoa_r+0x764>
   43154:	8800f626 	beq	r17,zero,43530 <_dtoa_r+0x764>
   43158:	d9c00517 	ldw	r7,20(sp)
   4315c:	01c39a0e 	bge	zero,r7,43fc8 <_dtoa_r+0x11fc>
   43160:	388003cc 	andi	r2,r7,15
   43164:	100490fa 	slli	r2,r2,3
   43168:	382bd13a 	srai	r21,r7,4
   4316c:	00c00174 	movhi	r3,5
   43170:	18fef404 	addi	r3,r3,-1072
   43174:	1885883a 	add	r2,r3,r2
   43178:	a8c0040c 	andi	r3,r21,16
   4317c:	12400017 	ldw	r9,0(r2)
   43180:	12000117 	ldw	r8,4(r2)
   43184:	18037926 	beq	r3,zero,43f6c <_dtoa_r+0x11a0>
   43188:	00800174 	movhi	r2,5
   4318c:	10beea04 	addi	r2,r2,-1112
   43190:	11800817 	ldw	r6,32(r2)
   43194:	11c00917 	ldw	r7,36(r2)
   43198:	9009883a 	mov	r4,r18
   4319c:	980b883a 	mov	r5,r19
   431a0:	da001715 	stw	r8,92(sp)
   431a4:	da401615 	stw	r9,88(sp)
   431a8:	004b1cc0 	call	4b1cc <__divdf3>
   431ac:	da001717 	ldw	r8,92(sp)
   431b0:	da401617 	ldw	r9,88(sp)
   431b4:	ad4003cc 	andi	r21,r21,15
   431b8:	040000c4 	movi	r16,3
   431bc:	1023883a 	mov	r17,r2
   431c0:	1829883a 	mov	r20,r3
   431c4:	a8001126 	beq	r21,zero,4320c <_dtoa_r+0x440>
   431c8:	05c00174 	movhi	r23,5
   431cc:	bdfeea04 	addi	r23,r23,-1112
   431d0:	4805883a 	mov	r2,r9
   431d4:	4007883a 	mov	r3,r8
   431d8:	a980004c 	andi	r6,r21,1
   431dc:	1009883a 	mov	r4,r2
   431e0:	a82bd07a 	srai	r21,r21,1
   431e4:	180b883a 	mov	r5,r3
   431e8:	30000426 	beq	r6,zero,431fc <_dtoa_r+0x430>
   431ec:	b9800017 	ldw	r6,0(r23)
   431f0:	b9c00117 	ldw	r7,4(r23)
   431f4:	84000044 	addi	r16,r16,1
   431f8:	004bd0c0 	call	4bd0c <__muldf3>
   431fc:	bdc00204 	addi	r23,r23,8
   43200:	a83ff51e 	bne	r21,zero,431d8 <__alt_data_end+0xfffe31d8>
   43204:	1013883a 	mov	r9,r2
   43208:	1811883a 	mov	r8,r3
   4320c:	480d883a 	mov	r6,r9
   43210:	400f883a 	mov	r7,r8
   43214:	8809883a 	mov	r4,r17
   43218:	a00b883a 	mov	r5,r20
   4321c:	004b1cc0 	call	4b1cc <__divdf3>
   43220:	d8800f15 	stw	r2,60(sp)
   43224:	d8c01015 	stw	r3,64(sp)
   43228:	d8c00e17 	ldw	r3,56(sp)
   4322c:	18000626 	beq	r3,zero,43248 <_dtoa_r+0x47c>
   43230:	d9000f17 	ldw	r4,60(sp)
   43234:	d9401017 	ldw	r5,64(sp)
   43238:	000d883a 	mov	r6,zero
   4323c:	01cffc34 	movhi	r7,16368
   43240:	004bc180 	call	4bc18 <__ledf2>
   43244:	10040b16 	blt	r2,zero,44274 <_dtoa_r+0x14a8>
   43248:	8009883a 	mov	r4,r16
   4324c:	004cda00 	call	4cda0 <__floatsidf>
   43250:	d9800f17 	ldw	r6,60(sp)
   43254:	d9c01017 	ldw	r7,64(sp)
   43258:	1009883a 	mov	r4,r2
   4325c:	180b883a 	mov	r5,r3
   43260:	004bd0c0 	call	4bd0c <__muldf3>
   43264:	000d883a 	mov	r6,zero
   43268:	01d00734 	movhi	r7,16412
   4326c:	1009883a 	mov	r4,r2
   43270:	180b883a 	mov	r5,r3
   43274:	004a9200 	call	4a920 <__adddf3>
   43278:	1021883a 	mov	r16,r2
   4327c:	d8800617 	ldw	r2,24(sp)
   43280:	047f3034 	movhi	r17,64704
   43284:	1c63883a 	add	r17,r3,r17
   43288:	10031826 	beq	r2,zero,43eec <_dtoa_r+0x1120>
   4328c:	d8c00517 	ldw	r3,20(sp)
   43290:	db000617 	ldw	r12,24(sp)
   43294:	d8c01315 	stw	r3,76(sp)
   43298:	d9000b17 	ldw	r4,44(sp)
   4329c:	20038f26 	beq	r4,zero,440dc <_dtoa_r+0x1310>
   432a0:	60bfffc4 	addi	r2,r12,-1
   432a4:	100490fa 	slli	r2,r2,3
   432a8:	00c00174 	movhi	r3,5
   432ac:	18fef404 	addi	r3,r3,-1072
   432b0:	1885883a 	add	r2,r3,r2
   432b4:	11800017 	ldw	r6,0(r2)
   432b8:	11c00117 	ldw	r7,4(r2)
   432bc:	d8800717 	ldw	r2,28(sp)
   432c0:	0009883a 	mov	r4,zero
   432c4:	014ff834 	movhi	r5,16352
   432c8:	db001615 	stw	r12,88(sp)
   432cc:	15c00044 	addi	r23,r2,1
   432d0:	004b1cc0 	call	4b1cc <__divdf3>
   432d4:	800d883a 	mov	r6,r16
   432d8:	880f883a 	mov	r7,r17
   432dc:	1009883a 	mov	r4,r2
   432e0:	180b883a 	mov	r5,r3
   432e4:	004c4240 	call	4c424 <__subdf3>
   432e8:	d9401017 	ldw	r5,64(sp)
   432ec:	d9000f17 	ldw	r4,60(sp)
   432f0:	102b883a 	mov	r21,r2
   432f4:	d8c01215 	stw	r3,72(sp)
   432f8:	004cd200 	call	4cd20 <__fixdfsi>
   432fc:	1009883a 	mov	r4,r2
   43300:	1029883a 	mov	r20,r2
   43304:	004cda00 	call	4cda0 <__floatsidf>
   43308:	d9000f17 	ldw	r4,60(sp)
   4330c:	d9401017 	ldw	r5,64(sp)
   43310:	100d883a 	mov	r6,r2
   43314:	180f883a 	mov	r7,r3
   43318:	004c4240 	call	4c424 <__subdf3>
   4331c:	1823883a 	mov	r17,r3
   43320:	d8c00717 	ldw	r3,28(sp)
   43324:	d9401217 	ldw	r5,72(sp)
   43328:	a2000c04 	addi	r8,r20,48
   4332c:	1021883a 	mov	r16,r2
   43330:	1a000005 	stb	r8,0(r3)
   43334:	800d883a 	mov	r6,r16
   43338:	880f883a 	mov	r7,r17
   4333c:	a809883a 	mov	r4,r21
   43340:	4029883a 	mov	r20,r8
   43344:	004bb3c0 	call	4bb3c <__gedf2>
   43348:	00841d16 	blt	zero,r2,443c0 <_dtoa_r+0x15f4>
   4334c:	800d883a 	mov	r6,r16
   43350:	880f883a 	mov	r7,r17
   43354:	0009883a 	mov	r4,zero
   43358:	014ffc34 	movhi	r5,16368
   4335c:	004c4240 	call	4c424 <__subdf3>
   43360:	d9401217 	ldw	r5,72(sp)
   43364:	100d883a 	mov	r6,r2
   43368:	180f883a 	mov	r7,r3
   4336c:	a809883a 	mov	r4,r21
   43370:	004bb3c0 	call	4bb3c <__gedf2>
   43374:	db001617 	ldw	r12,88(sp)
   43378:	00840e16 	blt	zero,r2,443b4 <_dtoa_r+0x15e8>
   4337c:	00800044 	movi	r2,1
   43380:	13006b0e 	bge	r2,r12,43530 <_dtoa_r+0x764>
   43384:	d9000717 	ldw	r4,28(sp)
   43388:	dd800f15 	stw	r22,60(sp)
   4338c:	dcc01015 	stw	r19,64(sp)
   43390:	2319883a 	add	r12,r4,r12
   43394:	dcc01217 	ldw	r19,72(sp)
   43398:	602d883a 	mov	r22,r12
   4339c:	dc801215 	stw	r18,72(sp)
   433a0:	b825883a 	mov	r18,r23
   433a4:	00000906 	br	433cc <_dtoa_r+0x600>
   433a8:	004c4240 	call	4c424 <__subdf3>
   433ac:	a80d883a 	mov	r6,r21
   433b0:	980f883a 	mov	r7,r19
   433b4:	1009883a 	mov	r4,r2
   433b8:	180b883a 	mov	r5,r3
   433bc:	004bc180 	call	4bc18 <__ledf2>
   433c0:	1003e816 	blt	r2,zero,44364 <_dtoa_r+0x1598>
   433c4:	b825883a 	mov	r18,r23
   433c8:	bd83e926 	beq	r23,r22,44370 <_dtoa_r+0x15a4>
   433cc:	a809883a 	mov	r4,r21
   433d0:	980b883a 	mov	r5,r19
   433d4:	000d883a 	mov	r6,zero
   433d8:	01d00934 	movhi	r7,16420
   433dc:	004bd0c0 	call	4bd0c <__muldf3>
   433e0:	000d883a 	mov	r6,zero
   433e4:	01d00934 	movhi	r7,16420
   433e8:	8009883a 	mov	r4,r16
   433ec:	880b883a 	mov	r5,r17
   433f0:	102b883a 	mov	r21,r2
   433f4:	1827883a 	mov	r19,r3
   433f8:	004bd0c0 	call	4bd0c <__muldf3>
   433fc:	180b883a 	mov	r5,r3
   43400:	1009883a 	mov	r4,r2
   43404:	1821883a 	mov	r16,r3
   43408:	1023883a 	mov	r17,r2
   4340c:	004cd200 	call	4cd20 <__fixdfsi>
   43410:	1009883a 	mov	r4,r2
   43414:	1029883a 	mov	r20,r2
   43418:	004cda00 	call	4cda0 <__floatsidf>
   4341c:	8809883a 	mov	r4,r17
   43420:	800b883a 	mov	r5,r16
   43424:	100d883a 	mov	r6,r2
   43428:	180f883a 	mov	r7,r3
   4342c:	004c4240 	call	4c424 <__subdf3>
   43430:	a5000c04 	addi	r20,r20,48
   43434:	a80d883a 	mov	r6,r21
   43438:	980f883a 	mov	r7,r19
   4343c:	1009883a 	mov	r4,r2
   43440:	180b883a 	mov	r5,r3
   43444:	95000005 	stb	r20,0(r18)
   43448:	1021883a 	mov	r16,r2
   4344c:	1823883a 	mov	r17,r3
   43450:	004bc180 	call	4bc18 <__ledf2>
   43454:	bdc00044 	addi	r23,r23,1
   43458:	800d883a 	mov	r6,r16
   4345c:	880f883a 	mov	r7,r17
   43460:	0009883a 	mov	r4,zero
   43464:	014ffc34 	movhi	r5,16368
   43468:	103fcf0e 	bge	r2,zero,433a8 <__alt_data_end+0xfffe33a8>
   4346c:	d8c01317 	ldw	r3,76(sp)
   43470:	d8c00515 	stw	r3,20(sp)
   43474:	d9400917 	ldw	r5,36(sp)
   43478:	e009883a 	mov	r4,fp
   4347c:	0045ef80 	call	45ef8 <_Bfree>
   43480:	d9000517 	ldw	r4,20(sp)
   43484:	d9802317 	ldw	r6,140(sp)
   43488:	d9c02517 	ldw	r7,148(sp)
   4348c:	b8000005 	stb	zero,0(r23)
   43490:	20800044 	addi	r2,r4,1
   43494:	30800015 	stw	r2,0(r6)
   43498:	3802aa26 	beq	r7,zero,43f44 <_dtoa_r+0x1178>
   4349c:	3dc00015 	stw	r23,0(r7)
   434a0:	d8800717 	ldw	r2,28(sp)
   434a4:	003e7906 	br	42e8c <__alt_data_end+0xfffe2e8c>
   434a8:	00800434 	movhi	r2,16
   434ac:	10bfffc4 	addi	r2,r2,-1
   434b0:	88a2703a 	and	r17,r17,r2
   434b4:	883e851e 	bne	r17,zero,42ecc <__alt_data_end+0xfffe2ecc>
   434b8:	00800174 	movhi	r2,5
   434bc:	10bed504 	addi	r2,r2,-1196
   434c0:	003e8406 	br	42ed4 <__alt_data_end+0xfffe2ed4>
   434c4:	10c00204 	addi	r3,r2,8
   434c8:	003e8706 	br	42ee8 <__alt_data_end+0xfffe2ee8>
   434cc:	01400434 	movhi	r5,16
   434d0:	297fffc4 	addi	r5,r5,-1
   434d4:	994a703a 	and	r5,r19,r5
   434d8:	9009883a 	mov	r4,r18
   434dc:	843f0044 	addi	r16,r16,-1023
   434e0:	294ffc34 	orhi	r5,r5,16368
   434e4:	dd800217 	ldw	r22,8(sp)
   434e8:	d8001115 	stw	zero,68(sp)
   434ec:	003ea506 	br	42f84 <__alt_data_end+0xfffe2f84>
   434f0:	00800174 	movhi	r2,5
   434f4:	10becc04 	addi	r2,r2,-1232
   434f8:	003e6406 	br	42e8c <__alt_data_end+0xfffe2e8c>
   434fc:	e0001115 	stw	zero,68(fp)
   43500:	000b883a 	mov	r5,zero
   43504:	e009883a 	mov	r4,fp
   43508:	0045e500 	call	45e50 <_Balloc>
   4350c:	01bfffc4 	movi	r6,-1
   43510:	01c00044 	movi	r7,1
   43514:	d8800715 	stw	r2,28(sp)
   43518:	d9800c15 	stw	r6,48(sp)
   4351c:	e0801015 	stw	r2,64(fp)
   43520:	d8000315 	stw	zero,12(sp)
   43524:	d9c00b15 	stw	r7,44(sp)
   43528:	d9800615 	stw	r6,24(sp)
   4352c:	d8002215 	stw	zero,136(sp)
   43530:	d8800117 	ldw	r2,4(sp)
   43534:	10008916 	blt	r2,zero,4375c <_dtoa_r+0x990>
   43538:	d9000517 	ldw	r4,20(sp)
   4353c:	00c00384 	movi	r3,14
   43540:	19008616 	blt	r3,r4,4375c <_dtoa_r+0x990>
   43544:	200490fa 	slli	r2,r4,3
   43548:	00c00174 	movhi	r3,5
   4354c:	d9802217 	ldw	r6,136(sp)
   43550:	18fef404 	addi	r3,r3,-1072
   43554:	1885883a 	add	r2,r3,r2
   43558:	14000017 	ldw	r16,0(r2)
   4355c:	14400117 	ldw	r17,4(r2)
   43560:	30016316 	blt	r6,zero,43af0 <_dtoa_r+0xd24>
   43564:	800d883a 	mov	r6,r16
   43568:	880f883a 	mov	r7,r17
   4356c:	9009883a 	mov	r4,r18
   43570:	980b883a 	mov	r5,r19
   43574:	004b1cc0 	call	4b1cc <__divdf3>
   43578:	180b883a 	mov	r5,r3
   4357c:	1009883a 	mov	r4,r2
   43580:	004cd200 	call	4cd20 <__fixdfsi>
   43584:	1009883a 	mov	r4,r2
   43588:	102b883a 	mov	r21,r2
   4358c:	004cda00 	call	4cda0 <__floatsidf>
   43590:	800d883a 	mov	r6,r16
   43594:	880f883a 	mov	r7,r17
   43598:	1009883a 	mov	r4,r2
   4359c:	180b883a 	mov	r5,r3
   435a0:	004bd0c0 	call	4bd0c <__muldf3>
   435a4:	100d883a 	mov	r6,r2
   435a8:	180f883a 	mov	r7,r3
   435ac:	9009883a 	mov	r4,r18
   435b0:	980b883a 	mov	r5,r19
   435b4:	004c4240 	call	4c424 <__subdf3>
   435b8:	d9c00717 	ldw	r7,28(sp)
   435bc:	1009883a 	mov	r4,r2
   435c0:	a8800c04 	addi	r2,r21,48
   435c4:	38800005 	stb	r2,0(r7)
   435c8:	3dc00044 	addi	r23,r7,1
   435cc:	d9c00617 	ldw	r7,24(sp)
   435d0:	01800044 	movi	r6,1
   435d4:	180b883a 	mov	r5,r3
   435d8:	2005883a 	mov	r2,r4
   435dc:	39803826 	beq	r7,r6,436c0 <_dtoa_r+0x8f4>
   435e0:	000d883a 	mov	r6,zero
   435e4:	01d00934 	movhi	r7,16420
   435e8:	004bd0c0 	call	4bd0c <__muldf3>
   435ec:	000d883a 	mov	r6,zero
   435f0:	000f883a 	mov	r7,zero
   435f4:	1009883a 	mov	r4,r2
   435f8:	180b883a 	mov	r5,r3
   435fc:	1025883a 	mov	r18,r2
   43600:	1827883a 	mov	r19,r3
   43604:	004bab40 	call	4bab4 <__eqdf2>
   43608:	103f9a26 	beq	r2,zero,43474 <__alt_data_end+0xfffe3474>
   4360c:	d9c00617 	ldw	r7,24(sp)
   43610:	d8c00717 	ldw	r3,28(sp)
   43614:	b829883a 	mov	r20,r23
   43618:	38bfffc4 	addi	r2,r7,-1
   4361c:	18ad883a 	add	r22,r3,r2
   43620:	00000a06 	br	4364c <_dtoa_r+0x880>
   43624:	004bd0c0 	call	4bd0c <__muldf3>
   43628:	000d883a 	mov	r6,zero
   4362c:	000f883a 	mov	r7,zero
   43630:	1009883a 	mov	r4,r2
   43634:	180b883a 	mov	r5,r3
   43638:	1025883a 	mov	r18,r2
   4363c:	1827883a 	mov	r19,r3
   43640:	b829883a 	mov	r20,r23
   43644:	004bab40 	call	4bab4 <__eqdf2>
   43648:	103f8a26 	beq	r2,zero,43474 <__alt_data_end+0xfffe3474>
   4364c:	800d883a 	mov	r6,r16
   43650:	880f883a 	mov	r7,r17
   43654:	9009883a 	mov	r4,r18
   43658:	980b883a 	mov	r5,r19
   4365c:	004b1cc0 	call	4b1cc <__divdf3>
   43660:	180b883a 	mov	r5,r3
   43664:	1009883a 	mov	r4,r2
   43668:	004cd200 	call	4cd20 <__fixdfsi>
   4366c:	1009883a 	mov	r4,r2
   43670:	102b883a 	mov	r21,r2
   43674:	004cda00 	call	4cda0 <__floatsidf>
   43678:	800d883a 	mov	r6,r16
   4367c:	880f883a 	mov	r7,r17
   43680:	1009883a 	mov	r4,r2
   43684:	180b883a 	mov	r5,r3
   43688:	004bd0c0 	call	4bd0c <__muldf3>
   4368c:	100d883a 	mov	r6,r2
   43690:	180f883a 	mov	r7,r3
   43694:	9009883a 	mov	r4,r18
   43698:	980b883a 	mov	r5,r19
   4369c:	004c4240 	call	4c424 <__subdf3>
   436a0:	aa000c04 	addi	r8,r21,48
   436a4:	a2000005 	stb	r8,0(r20)
   436a8:	000d883a 	mov	r6,zero
   436ac:	01d00934 	movhi	r7,16420
   436b0:	1009883a 	mov	r4,r2
   436b4:	180b883a 	mov	r5,r3
   436b8:	a5c00044 	addi	r23,r20,1
   436bc:	b53fd91e 	bne	r22,r20,43624 <__alt_data_end+0xfffe3624>
   436c0:	100d883a 	mov	r6,r2
   436c4:	180f883a 	mov	r7,r3
   436c8:	1009883a 	mov	r4,r2
   436cc:	180b883a 	mov	r5,r3
   436d0:	004a9200 	call	4a920 <__adddf3>
   436d4:	100d883a 	mov	r6,r2
   436d8:	180f883a 	mov	r7,r3
   436dc:	8009883a 	mov	r4,r16
   436e0:	880b883a 	mov	r5,r17
   436e4:	1027883a 	mov	r19,r2
   436e8:	1825883a 	mov	r18,r3
   436ec:	004bc180 	call	4bc18 <__ledf2>
   436f0:	10000816 	blt	r2,zero,43714 <_dtoa_r+0x948>
   436f4:	980d883a 	mov	r6,r19
   436f8:	900f883a 	mov	r7,r18
   436fc:	8009883a 	mov	r4,r16
   43700:	880b883a 	mov	r5,r17
   43704:	004bab40 	call	4bab4 <__eqdf2>
   43708:	103f5a1e 	bne	r2,zero,43474 <__alt_data_end+0xfffe3474>
   4370c:	ad40004c 	andi	r21,r21,1
   43710:	a83f5826 	beq	r21,zero,43474 <__alt_data_end+0xfffe3474>
   43714:	bd3fffc3 	ldbu	r20,-1(r23)
   43718:	b8bfffc4 	addi	r2,r23,-1
   4371c:	1007883a 	mov	r3,r2
   43720:	01400e44 	movi	r5,57
   43724:	d9800717 	ldw	r6,28(sp)
   43728:	00000506 	br	43740 <_dtoa_r+0x974>
   4372c:	18ffffc4 	addi	r3,r3,-1
   43730:	11824726 	beq	r2,r6,44050 <_dtoa_r+0x1284>
   43734:	1d000003 	ldbu	r20,0(r3)
   43738:	102f883a 	mov	r23,r2
   4373c:	10bfffc4 	addi	r2,r2,-1
   43740:	a1003fcc 	andi	r4,r20,255
   43744:	2100201c 	xori	r4,r4,128
   43748:	213fe004 	addi	r4,r4,-128
   4374c:	217ff726 	beq	r4,r5,4372c <__alt_data_end+0xfffe372c>
   43750:	a2000044 	addi	r8,r20,1
   43754:	12000005 	stb	r8,0(r2)
   43758:	003f4606 	br	43474 <__alt_data_end+0xfffe3474>
   4375c:	d9000b17 	ldw	r4,44(sp)
   43760:	2000c826 	beq	r4,zero,43a84 <_dtoa_r+0xcb8>
   43764:	d9800317 	ldw	r6,12(sp)
   43768:	00c00044 	movi	r3,1
   4376c:	1980f90e 	bge	r3,r6,43b54 <_dtoa_r+0xd88>
   43770:	d8800617 	ldw	r2,24(sp)
   43774:	d8c00a17 	ldw	r3,40(sp)
   43778:	157fffc4 	addi	r21,r2,-1
   4377c:	1d41f316 	blt	r3,r21,43f4c <_dtoa_r+0x1180>
   43780:	1d6bc83a 	sub	r21,r3,r21
   43784:	d9c00617 	ldw	r7,24(sp)
   43788:	3802aa16 	blt	r7,zero,44234 <_dtoa_r+0x1468>
   4378c:	dd000817 	ldw	r20,32(sp)
   43790:	d8800617 	ldw	r2,24(sp)
   43794:	d8c00817 	ldw	r3,32(sp)
   43798:	01400044 	movi	r5,1
   4379c:	e009883a 	mov	r4,fp
   437a0:	1887883a 	add	r3,r3,r2
   437a4:	d8c00815 	stw	r3,32(sp)
   437a8:	b0ad883a 	add	r22,r22,r2
   437ac:	004625c0 	call	4625c <__i2b>
   437b0:	1023883a 	mov	r17,r2
   437b4:	a0000826 	beq	r20,zero,437d8 <_dtoa_r+0xa0c>
   437b8:	0580070e 	bge	zero,r22,437d8 <_dtoa_r+0xa0c>
   437bc:	a005883a 	mov	r2,r20
   437c0:	b500b916 	blt	r22,r20,43aa8 <_dtoa_r+0xcdc>
   437c4:	d9000817 	ldw	r4,32(sp)
   437c8:	a0a9c83a 	sub	r20,r20,r2
   437cc:	b0adc83a 	sub	r22,r22,r2
   437d0:	2089c83a 	sub	r4,r4,r2
   437d4:	d9000815 	stw	r4,32(sp)
   437d8:	d9800a17 	ldw	r6,40(sp)
   437dc:	0181810e 	bge	zero,r6,43de4 <_dtoa_r+0x1018>
   437e0:	d9c00b17 	ldw	r7,44(sp)
   437e4:	3800b326 	beq	r7,zero,43ab4 <_dtoa_r+0xce8>
   437e8:	a800b226 	beq	r21,zero,43ab4 <_dtoa_r+0xce8>
   437ec:	880b883a 	mov	r5,r17
   437f0:	a80d883a 	mov	r6,r21
   437f4:	e009883a 	mov	r4,fp
   437f8:	00464900 	call	46490 <__pow5mult>
   437fc:	d9800917 	ldw	r6,36(sp)
   43800:	100b883a 	mov	r5,r2
   43804:	e009883a 	mov	r4,fp
   43808:	1023883a 	mov	r17,r2
   4380c:	00462980 	call	46298 <__multiply>
   43810:	1021883a 	mov	r16,r2
   43814:	d8800a17 	ldw	r2,40(sp)
   43818:	d9400917 	ldw	r5,36(sp)
   4381c:	e009883a 	mov	r4,fp
   43820:	1545c83a 	sub	r2,r2,r21
   43824:	d8800a15 	stw	r2,40(sp)
   43828:	0045ef80 	call	45ef8 <_Bfree>
   4382c:	d8c00a17 	ldw	r3,40(sp)
   43830:	18009f1e 	bne	r3,zero,43ab0 <_dtoa_r+0xce4>
   43834:	05c00044 	movi	r23,1
   43838:	e009883a 	mov	r4,fp
   4383c:	b80b883a 	mov	r5,r23
   43840:	004625c0 	call	4625c <__i2b>
   43844:	d9000d17 	ldw	r4,52(sp)
   43848:	102b883a 	mov	r21,r2
   4384c:	2000ce26 	beq	r4,zero,43b88 <_dtoa_r+0xdbc>
   43850:	200d883a 	mov	r6,r4
   43854:	100b883a 	mov	r5,r2
   43858:	e009883a 	mov	r4,fp
   4385c:	00464900 	call	46490 <__pow5mult>
   43860:	d9800317 	ldw	r6,12(sp)
   43864:	102b883a 	mov	r21,r2
   43868:	b981810e 	bge	r23,r6,43e70 <_dtoa_r+0x10a4>
   4386c:	0027883a 	mov	r19,zero
   43870:	a8800417 	ldw	r2,16(r21)
   43874:	05c00804 	movi	r23,32
   43878:	10800104 	addi	r2,r2,4
   4387c:	1085883a 	add	r2,r2,r2
   43880:	1085883a 	add	r2,r2,r2
   43884:	a885883a 	add	r2,r21,r2
   43888:	11000017 	ldw	r4,0(r2)
   4388c:	00461440 	call	46144 <__hi0bits>
   43890:	b885c83a 	sub	r2,r23,r2
   43894:	1585883a 	add	r2,r2,r22
   43898:	108007cc 	andi	r2,r2,31
   4389c:	1000b326 	beq	r2,zero,43b6c <_dtoa_r+0xda0>
   438a0:	00c00804 	movi	r3,32
   438a4:	1887c83a 	sub	r3,r3,r2
   438a8:	01000104 	movi	r4,4
   438ac:	20c2cd0e 	bge	r4,r3,443e4 <_dtoa_r+0x1618>
   438b0:	00c00704 	movi	r3,28
   438b4:	1885c83a 	sub	r2,r3,r2
   438b8:	d8c00817 	ldw	r3,32(sp)
   438bc:	a0a9883a 	add	r20,r20,r2
   438c0:	b0ad883a 	add	r22,r22,r2
   438c4:	1887883a 	add	r3,r3,r2
   438c8:	d8c00815 	stw	r3,32(sp)
   438cc:	d9800817 	ldw	r6,32(sp)
   438d0:	0180040e 	bge	zero,r6,438e4 <_dtoa_r+0xb18>
   438d4:	800b883a 	mov	r5,r16
   438d8:	e009883a 	mov	r4,fp
   438dc:	00465d00 	call	465d0 <__lshift>
   438e0:	1021883a 	mov	r16,r2
   438e4:	0580050e 	bge	zero,r22,438fc <_dtoa_r+0xb30>
   438e8:	a80b883a 	mov	r5,r21
   438ec:	b00d883a 	mov	r6,r22
   438f0:	e009883a 	mov	r4,fp
   438f4:	00465d00 	call	465d0 <__lshift>
   438f8:	102b883a 	mov	r21,r2
   438fc:	d9c00e17 	ldw	r7,56(sp)
   43900:	3801211e 	bne	r7,zero,43d88 <_dtoa_r+0xfbc>
   43904:	d9800617 	ldw	r6,24(sp)
   43908:	0181380e 	bge	zero,r6,43dec <_dtoa_r+0x1020>
   4390c:	d8c00b17 	ldw	r3,44(sp)
   43910:	1800ab1e 	bne	r3,zero,43bc0 <_dtoa_r+0xdf4>
   43914:	dc800717 	ldw	r18,28(sp)
   43918:	dcc00617 	ldw	r19,24(sp)
   4391c:	9029883a 	mov	r20,r18
   43920:	00000206 	br	4392c <_dtoa_r+0xb60>
   43924:	0045f200 	call	45f20 <__multadd>
   43928:	1021883a 	mov	r16,r2
   4392c:	a80b883a 	mov	r5,r21
   43930:	8009883a 	mov	r4,r16
   43934:	0042bcc0 	call	42bcc <quorem>
   43938:	10800c04 	addi	r2,r2,48
   4393c:	90800005 	stb	r2,0(r18)
   43940:	94800044 	addi	r18,r18,1
   43944:	9507c83a 	sub	r3,r18,r20
   43948:	000f883a 	mov	r7,zero
   4394c:	01800284 	movi	r6,10
   43950:	800b883a 	mov	r5,r16
   43954:	e009883a 	mov	r4,fp
   43958:	1cfff216 	blt	r3,r19,43924 <__alt_data_end+0xfffe3924>
   4395c:	1011883a 	mov	r8,r2
   43960:	d8800617 	ldw	r2,24(sp)
   43964:	0082370e 	bge	zero,r2,44244 <_dtoa_r+0x1478>
   43968:	d9000717 	ldw	r4,28(sp)
   4396c:	0025883a 	mov	r18,zero
   43970:	20af883a 	add	r23,r4,r2
   43974:	01800044 	movi	r6,1
   43978:	800b883a 	mov	r5,r16
   4397c:	e009883a 	mov	r4,fp
   43980:	da001715 	stw	r8,92(sp)
   43984:	00465d00 	call	465d0 <__lshift>
   43988:	a80b883a 	mov	r5,r21
   4398c:	1009883a 	mov	r4,r2
   43990:	d8800915 	stw	r2,36(sp)
   43994:	00467180 	call	46718 <__mcmp>
   43998:	da001717 	ldw	r8,92(sp)
   4399c:	0081800e 	bge	zero,r2,43fa0 <_dtoa_r+0x11d4>
   439a0:	b93fffc3 	ldbu	r4,-1(r23)
   439a4:	b8bfffc4 	addi	r2,r23,-1
   439a8:	1007883a 	mov	r3,r2
   439ac:	01800e44 	movi	r6,57
   439b0:	d9c00717 	ldw	r7,28(sp)
   439b4:	00000506 	br	439cc <_dtoa_r+0xc00>
   439b8:	18ffffc4 	addi	r3,r3,-1
   439bc:	11c12326 	beq	r2,r7,43e4c <_dtoa_r+0x1080>
   439c0:	19000003 	ldbu	r4,0(r3)
   439c4:	102f883a 	mov	r23,r2
   439c8:	10bfffc4 	addi	r2,r2,-1
   439cc:	21403fcc 	andi	r5,r4,255
   439d0:	2940201c 	xori	r5,r5,128
   439d4:	297fe004 	addi	r5,r5,-128
   439d8:	29bff726 	beq	r5,r6,439b8 <__alt_data_end+0xfffe39b8>
   439dc:	21000044 	addi	r4,r4,1
   439e0:	11000005 	stb	r4,0(r2)
   439e4:	a80b883a 	mov	r5,r21
   439e8:	e009883a 	mov	r4,fp
   439ec:	0045ef80 	call	45ef8 <_Bfree>
   439f0:	883ea026 	beq	r17,zero,43474 <__alt_data_end+0xfffe3474>
   439f4:	90000426 	beq	r18,zero,43a08 <_dtoa_r+0xc3c>
   439f8:	94400326 	beq	r18,r17,43a08 <_dtoa_r+0xc3c>
   439fc:	900b883a 	mov	r5,r18
   43a00:	e009883a 	mov	r4,fp
   43a04:	0045ef80 	call	45ef8 <_Bfree>
   43a08:	880b883a 	mov	r5,r17
   43a0c:	e009883a 	mov	r4,fp
   43a10:	0045ef80 	call	45ef8 <_Bfree>
   43a14:	003e9706 	br	43474 <__alt_data_end+0xfffe3474>
   43a18:	01800044 	movi	r6,1
   43a1c:	d9800e15 	stw	r6,56(sp)
   43a20:	003d9606 	br	4307c <__alt_data_end+0xfffe307c>
   43a24:	d8800817 	ldw	r2,32(sp)
   43a28:	d8c00517 	ldw	r3,20(sp)
   43a2c:	d8000d15 	stw	zero,52(sp)
   43a30:	10c5c83a 	sub	r2,r2,r3
   43a34:	00c9c83a 	sub	r4,zero,r3
   43a38:	d8800815 	stw	r2,32(sp)
   43a3c:	d9000a15 	stw	r4,40(sp)
   43a40:	003d9706 	br	430a0 <__alt_data_end+0xfffe30a0>
   43a44:	05adc83a 	sub	r22,zero,r22
   43a48:	dd800815 	stw	r22,32(sp)
   43a4c:	002d883a 	mov	r22,zero
   43a50:	003d8e06 	br	4308c <__alt_data_end+0xfffe308c>
   43a54:	d9000517 	ldw	r4,20(sp)
   43a58:	004cda00 	call	4cda0 <__floatsidf>
   43a5c:	100d883a 	mov	r6,r2
   43a60:	180f883a 	mov	r7,r3
   43a64:	a009883a 	mov	r4,r20
   43a68:	880b883a 	mov	r5,r17
   43a6c:	004bab40 	call	4bab4 <__eqdf2>
   43a70:	103d7126 	beq	r2,zero,43038 <__alt_data_end+0xfffe3038>
   43a74:	d9c00517 	ldw	r7,20(sp)
   43a78:	39ffffc4 	addi	r7,r7,-1
   43a7c:	d9c00515 	stw	r7,20(sp)
   43a80:	003d6d06 	br	43038 <__alt_data_end+0xfffe3038>
   43a84:	dd400a17 	ldw	r21,40(sp)
   43a88:	dd000817 	ldw	r20,32(sp)
   43a8c:	0023883a 	mov	r17,zero
   43a90:	003f4806 	br	437b4 <__alt_data_end+0xfffe37b4>
   43a94:	10e3c83a 	sub	r17,r2,r3
   43a98:	9448983a 	sll	r4,r18,r17
   43a9c:	003d3206 	br	42f68 <__alt_data_end+0xfffe2f68>
   43aa0:	d8000e15 	stw	zero,56(sp)
   43aa4:	003d7506 	br	4307c <__alt_data_end+0xfffe307c>
   43aa8:	b005883a 	mov	r2,r22
   43aac:	003f4506 	br	437c4 <__alt_data_end+0xfffe37c4>
   43ab0:	dc000915 	stw	r16,36(sp)
   43ab4:	d9800a17 	ldw	r6,40(sp)
   43ab8:	d9400917 	ldw	r5,36(sp)
   43abc:	e009883a 	mov	r4,fp
   43ac0:	00464900 	call	46490 <__pow5mult>
   43ac4:	1021883a 	mov	r16,r2
   43ac8:	003f5a06 	br	43834 <__alt_data_end+0xfffe3834>
   43acc:	01c00044 	movi	r7,1
   43ad0:	d9c00b15 	stw	r7,44(sp)
   43ad4:	d8802217 	ldw	r2,136(sp)
   43ad8:	0081280e 	bge	zero,r2,43f7c <_dtoa_r+0x11b0>
   43adc:	100d883a 	mov	r6,r2
   43ae0:	1021883a 	mov	r16,r2
   43ae4:	d8800c15 	stw	r2,48(sp)
   43ae8:	d8800615 	stw	r2,24(sp)
   43aec:	003d8806 	br	43110 <__alt_data_end+0xfffe3110>
   43af0:	d8800617 	ldw	r2,24(sp)
   43af4:	00be9b16 	blt	zero,r2,43564 <__alt_data_end+0xfffe3564>
   43af8:	10010f1e 	bne	r2,zero,43f38 <_dtoa_r+0x116c>
   43afc:	880b883a 	mov	r5,r17
   43b00:	000d883a 	mov	r6,zero
   43b04:	01d00534 	movhi	r7,16404
   43b08:	8009883a 	mov	r4,r16
   43b0c:	004bd0c0 	call	4bd0c <__muldf3>
   43b10:	900d883a 	mov	r6,r18
   43b14:	980f883a 	mov	r7,r19
   43b18:	1009883a 	mov	r4,r2
   43b1c:	180b883a 	mov	r5,r3
   43b20:	004bb3c0 	call	4bb3c <__gedf2>
   43b24:	002b883a 	mov	r21,zero
   43b28:	0023883a 	mov	r17,zero
   43b2c:	1000bf16 	blt	r2,zero,43e2c <_dtoa_r+0x1060>
   43b30:	d9802217 	ldw	r6,136(sp)
   43b34:	ddc00717 	ldw	r23,28(sp)
   43b38:	018c303a 	nor	r6,zero,r6
   43b3c:	d9800515 	stw	r6,20(sp)
   43b40:	a80b883a 	mov	r5,r21
   43b44:	e009883a 	mov	r4,fp
   43b48:	0045ef80 	call	45ef8 <_Bfree>
   43b4c:	883e4926 	beq	r17,zero,43474 <__alt_data_end+0xfffe3474>
   43b50:	003fad06 	br	43a08 <__alt_data_end+0xfffe3a08>
   43b54:	d9c01117 	ldw	r7,68(sp)
   43b58:	3801bc26 	beq	r7,zero,4424c <_dtoa_r+0x1480>
   43b5c:	10810cc4 	addi	r2,r2,1075
   43b60:	dd400a17 	ldw	r21,40(sp)
   43b64:	dd000817 	ldw	r20,32(sp)
   43b68:	003f0a06 	br	43794 <__alt_data_end+0xfffe3794>
   43b6c:	00800704 	movi	r2,28
   43b70:	d9000817 	ldw	r4,32(sp)
   43b74:	a0a9883a 	add	r20,r20,r2
   43b78:	b0ad883a 	add	r22,r22,r2
   43b7c:	2089883a 	add	r4,r4,r2
   43b80:	d9000815 	stw	r4,32(sp)
   43b84:	003f5106 	br	438cc <__alt_data_end+0xfffe38cc>
   43b88:	d8c00317 	ldw	r3,12(sp)
   43b8c:	b8c1fc0e 	bge	r23,r3,44380 <_dtoa_r+0x15b4>
   43b90:	0027883a 	mov	r19,zero
   43b94:	b805883a 	mov	r2,r23
   43b98:	003f3e06 	br	43894 <__alt_data_end+0xfffe3894>
   43b9c:	880b883a 	mov	r5,r17
   43ba0:	e009883a 	mov	r4,fp
   43ba4:	000f883a 	mov	r7,zero
   43ba8:	01800284 	movi	r6,10
   43bac:	0045f200 	call	45f20 <__multadd>
   43bb0:	d9000c17 	ldw	r4,48(sp)
   43bb4:	1023883a 	mov	r17,r2
   43bb8:	0102040e 	bge	zero,r4,443cc <_dtoa_r+0x1600>
   43bbc:	d9000615 	stw	r4,24(sp)
   43bc0:	0500050e 	bge	zero,r20,43bd8 <_dtoa_r+0xe0c>
   43bc4:	880b883a 	mov	r5,r17
   43bc8:	a00d883a 	mov	r6,r20
   43bcc:	e009883a 	mov	r4,fp
   43bd0:	00465d00 	call	465d0 <__lshift>
   43bd4:	1023883a 	mov	r17,r2
   43bd8:	9801241e 	bne	r19,zero,4406c <_dtoa_r+0x12a0>
   43bdc:	8829883a 	mov	r20,r17
   43be0:	d9000617 	ldw	r4,24(sp)
   43be4:	dcc00717 	ldw	r19,28(sp)
   43be8:	9480004c 	andi	r18,r18,1
   43bec:	20bfffc4 	addi	r2,r4,-1
   43bf0:	9885883a 	add	r2,r19,r2
   43bf4:	d8800415 	stw	r2,16(sp)
   43bf8:	dc800615 	stw	r18,24(sp)
   43bfc:	a80b883a 	mov	r5,r21
   43c00:	8009883a 	mov	r4,r16
   43c04:	0042bcc0 	call	42bcc <quorem>
   43c08:	880b883a 	mov	r5,r17
   43c0c:	8009883a 	mov	r4,r16
   43c10:	102f883a 	mov	r23,r2
   43c14:	00467180 	call	46718 <__mcmp>
   43c18:	a80b883a 	mov	r5,r21
   43c1c:	a00d883a 	mov	r6,r20
   43c20:	e009883a 	mov	r4,fp
   43c24:	102d883a 	mov	r22,r2
   43c28:	00467780 	call	46778 <__mdiff>
   43c2c:	1007883a 	mov	r3,r2
   43c30:	10800317 	ldw	r2,12(r2)
   43c34:	bc800c04 	addi	r18,r23,48
   43c38:	180b883a 	mov	r5,r3
   43c3c:	10004e1e 	bne	r2,zero,43d78 <_dtoa_r+0xfac>
   43c40:	8009883a 	mov	r4,r16
   43c44:	d8c01615 	stw	r3,88(sp)
   43c48:	00467180 	call	46718 <__mcmp>
   43c4c:	d8c01617 	ldw	r3,88(sp)
   43c50:	e009883a 	mov	r4,fp
   43c54:	d8801615 	stw	r2,88(sp)
   43c58:	180b883a 	mov	r5,r3
   43c5c:	0045ef80 	call	45ef8 <_Bfree>
   43c60:	d8801617 	ldw	r2,88(sp)
   43c64:	1000041e 	bne	r2,zero,43c78 <_dtoa_r+0xeac>
   43c68:	d9800317 	ldw	r6,12(sp)
   43c6c:	3000021e 	bne	r6,zero,43c78 <_dtoa_r+0xeac>
   43c70:	d8c00617 	ldw	r3,24(sp)
   43c74:	18003726 	beq	r3,zero,43d54 <_dtoa_r+0xf88>
   43c78:	b0002016 	blt	r22,zero,43cfc <_dtoa_r+0xf30>
   43c7c:	b000041e 	bne	r22,zero,43c90 <_dtoa_r+0xec4>
   43c80:	d9000317 	ldw	r4,12(sp)
   43c84:	2000021e 	bne	r4,zero,43c90 <_dtoa_r+0xec4>
   43c88:	d8c00617 	ldw	r3,24(sp)
   43c8c:	18001b26 	beq	r3,zero,43cfc <_dtoa_r+0xf30>
   43c90:	00810716 	blt	zero,r2,440b0 <_dtoa_r+0x12e4>
   43c94:	d8c00417 	ldw	r3,16(sp)
   43c98:	9d800044 	addi	r22,r19,1
   43c9c:	9c800005 	stb	r18,0(r19)
   43ca0:	b02f883a 	mov	r23,r22
   43ca4:	98c10626 	beq	r19,r3,440c0 <_dtoa_r+0x12f4>
   43ca8:	800b883a 	mov	r5,r16
   43cac:	000f883a 	mov	r7,zero
   43cb0:	01800284 	movi	r6,10
   43cb4:	e009883a 	mov	r4,fp
   43cb8:	0045f200 	call	45f20 <__multadd>
   43cbc:	1021883a 	mov	r16,r2
   43cc0:	000f883a 	mov	r7,zero
   43cc4:	01800284 	movi	r6,10
   43cc8:	880b883a 	mov	r5,r17
   43ccc:	e009883a 	mov	r4,fp
   43cd0:	8d002526 	beq	r17,r20,43d68 <_dtoa_r+0xf9c>
   43cd4:	0045f200 	call	45f20 <__multadd>
   43cd8:	a00b883a 	mov	r5,r20
   43cdc:	000f883a 	mov	r7,zero
   43ce0:	01800284 	movi	r6,10
   43ce4:	e009883a 	mov	r4,fp
   43ce8:	1023883a 	mov	r17,r2
   43cec:	0045f200 	call	45f20 <__multadd>
   43cf0:	1029883a 	mov	r20,r2
   43cf4:	b027883a 	mov	r19,r22
   43cf8:	003fc006 	br	43bfc <__alt_data_end+0xfffe3bfc>
   43cfc:	9011883a 	mov	r8,r18
   43d00:	00800e0e 	bge	zero,r2,43d3c <_dtoa_r+0xf70>
   43d04:	800b883a 	mov	r5,r16
   43d08:	01800044 	movi	r6,1
   43d0c:	e009883a 	mov	r4,fp
   43d10:	da001715 	stw	r8,92(sp)
   43d14:	00465d00 	call	465d0 <__lshift>
   43d18:	a80b883a 	mov	r5,r21
   43d1c:	1009883a 	mov	r4,r2
   43d20:	1021883a 	mov	r16,r2
   43d24:	00467180 	call	46718 <__mcmp>
   43d28:	da001717 	ldw	r8,92(sp)
   43d2c:	0081960e 	bge	zero,r2,44388 <_dtoa_r+0x15bc>
   43d30:	00800e44 	movi	r2,57
   43d34:	40817026 	beq	r8,r2,442f8 <_dtoa_r+0x152c>
   43d38:	ba000c44 	addi	r8,r23,49
   43d3c:	8825883a 	mov	r18,r17
   43d40:	9dc00044 	addi	r23,r19,1
   43d44:	9a000005 	stb	r8,0(r19)
   43d48:	a023883a 	mov	r17,r20
   43d4c:	dc000915 	stw	r16,36(sp)
   43d50:	003f2406 	br	439e4 <__alt_data_end+0xfffe39e4>
   43d54:	00800e44 	movi	r2,57
   43d58:	9011883a 	mov	r8,r18
   43d5c:	90816626 	beq	r18,r2,442f8 <_dtoa_r+0x152c>
   43d60:	05bff516 	blt	zero,r22,43d38 <__alt_data_end+0xfffe3d38>
   43d64:	003ff506 	br	43d3c <__alt_data_end+0xfffe3d3c>
   43d68:	0045f200 	call	45f20 <__multadd>
   43d6c:	1023883a 	mov	r17,r2
   43d70:	1029883a 	mov	r20,r2
   43d74:	003fdf06 	br	43cf4 <__alt_data_end+0xfffe3cf4>
   43d78:	e009883a 	mov	r4,fp
   43d7c:	0045ef80 	call	45ef8 <_Bfree>
   43d80:	00800044 	movi	r2,1
   43d84:	003fbc06 	br	43c78 <__alt_data_end+0xfffe3c78>
   43d88:	a80b883a 	mov	r5,r21
   43d8c:	8009883a 	mov	r4,r16
   43d90:	00467180 	call	46718 <__mcmp>
   43d94:	103edb0e 	bge	r2,zero,43904 <__alt_data_end+0xfffe3904>
   43d98:	800b883a 	mov	r5,r16
   43d9c:	000f883a 	mov	r7,zero
   43da0:	01800284 	movi	r6,10
   43da4:	e009883a 	mov	r4,fp
   43da8:	0045f200 	call	45f20 <__multadd>
   43dac:	1021883a 	mov	r16,r2
   43db0:	d8800517 	ldw	r2,20(sp)
   43db4:	d8c00b17 	ldw	r3,44(sp)
   43db8:	10bfffc4 	addi	r2,r2,-1
   43dbc:	d8800515 	stw	r2,20(sp)
   43dc0:	183f761e 	bne	r3,zero,43b9c <__alt_data_end+0xfffe3b9c>
   43dc4:	d9000c17 	ldw	r4,48(sp)
   43dc8:	0101730e 	bge	zero,r4,44398 <_dtoa_r+0x15cc>
   43dcc:	d9000615 	stw	r4,24(sp)
   43dd0:	003ed006 	br	43914 <__alt_data_end+0xfffe3914>
   43dd4:	00800084 	movi	r2,2
   43dd8:	3081861e 	bne	r6,r2,443f4 <_dtoa_r+0x1628>
   43ddc:	d8000b15 	stw	zero,44(sp)
   43de0:	003f3c06 	br	43ad4 <__alt_data_end+0xfffe3ad4>
   43de4:	dc000917 	ldw	r16,36(sp)
   43de8:	003e9206 	br	43834 <__alt_data_end+0xfffe3834>
   43dec:	d9c00317 	ldw	r7,12(sp)
   43df0:	00800084 	movi	r2,2
   43df4:	11fec50e 	bge	r2,r7,4390c <__alt_data_end+0xfffe390c>
   43df8:	d9000617 	ldw	r4,24(sp)
   43dfc:	20013c1e 	bne	r4,zero,442f0 <_dtoa_r+0x1524>
   43e00:	a80b883a 	mov	r5,r21
   43e04:	000f883a 	mov	r7,zero
   43e08:	01800144 	movi	r6,5
   43e0c:	e009883a 	mov	r4,fp
   43e10:	0045f200 	call	45f20 <__multadd>
   43e14:	100b883a 	mov	r5,r2
   43e18:	8009883a 	mov	r4,r16
   43e1c:	102b883a 	mov	r21,r2
   43e20:	00467180 	call	46718 <__mcmp>
   43e24:	dc000915 	stw	r16,36(sp)
   43e28:	00bf410e 	bge	zero,r2,43b30 <__alt_data_end+0xfffe3b30>
   43e2c:	d9c00717 	ldw	r7,28(sp)
   43e30:	00800c44 	movi	r2,49
   43e34:	38800005 	stb	r2,0(r7)
   43e38:	d8800517 	ldw	r2,20(sp)
   43e3c:	3dc00044 	addi	r23,r7,1
   43e40:	10800044 	addi	r2,r2,1
   43e44:	d8800515 	stw	r2,20(sp)
   43e48:	003f3d06 	br	43b40 <__alt_data_end+0xfffe3b40>
   43e4c:	d9800517 	ldw	r6,20(sp)
   43e50:	d9c00717 	ldw	r7,28(sp)
   43e54:	00800c44 	movi	r2,49
   43e58:	31800044 	addi	r6,r6,1
   43e5c:	d9800515 	stw	r6,20(sp)
   43e60:	38800005 	stb	r2,0(r7)
   43e64:	003edf06 	br	439e4 <__alt_data_end+0xfffe39e4>
   43e68:	d8000b15 	stw	zero,44(sp)
   43e6c:	003c9f06 	br	430ec <__alt_data_end+0xfffe30ec>
   43e70:	903e7e1e 	bne	r18,zero,4386c <__alt_data_end+0xfffe386c>
   43e74:	00800434 	movhi	r2,16
   43e78:	10bfffc4 	addi	r2,r2,-1
   43e7c:	9884703a 	and	r2,r19,r2
   43e80:	1000ea1e 	bne	r2,zero,4422c <_dtoa_r+0x1460>
   43e84:	9cdffc2c 	andhi	r19,r19,32752
   43e88:	9800e826 	beq	r19,zero,4422c <_dtoa_r+0x1460>
   43e8c:	d9c00817 	ldw	r7,32(sp)
   43e90:	b5800044 	addi	r22,r22,1
   43e94:	04c00044 	movi	r19,1
   43e98:	39c00044 	addi	r7,r7,1
   43e9c:	d9c00815 	stw	r7,32(sp)
   43ea0:	d8800d17 	ldw	r2,52(sp)
   43ea4:	103e721e 	bne	r2,zero,43870 <__alt_data_end+0xfffe3870>
   43ea8:	00800044 	movi	r2,1
   43eac:	003e7906 	br	43894 <__alt_data_end+0xfffe3894>
   43eb0:	8009883a 	mov	r4,r16
   43eb4:	004cda00 	call	4cda0 <__floatsidf>
   43eb8:	d9800f17 	ldw	r6,60(sp)
   43ebc:	d9c01017 	ldw	r7,64(sp)
   43ec0:	1009883a 	mov	r4,r2
   43ec4:	180b883a 	mov	r5,r3
   43ec8:	004bd0c0 	call	4bd0c <__muldf3>
   43ecc:	000d883a 	mov	r6,zero
   43ed0:	01d00734 	movhi	r7,16412
   43ed4:	1009883a 	mov	r4,r2
   43ed8:	180b883a 	mov	r5,r3
   43edc:	004a9200 	call	4a920 <__adddf3>
   43ee0:	047f3034 	movhi	r17,64704
   43ee4:	1021883a 	mov	r16,r2
   43ee8:	1c63883a 	add	r17,r3,r17
   43eec:	d9000f17 	ldw	r4,60(sp)
   43ef0:	d9401017 	ldw	r5,64(sp)
   43ef4:	000d883a 	mov	r6,zero
   43ef8:	01d00534 	movhi	r7,16404
   43efc:	004c4240 	call	4c424 <__subdf3>
   43f00:	800d883a 	mov	r6,r16
   43f04:	880f883a 	mov	r7,r17
   43f08:	1009883a 	mov	r4,r2
   43f0c:	180b883a 	mov	r5,r3
   43f10:	102b883a 	mov	r21,r2
   43f14:	1829883a 	mov	r20,r3
   43f18:	004bb3c0 	call	4bb3c <__gedf2>
   43f1c:	00806c16 	blt	zero,r2,440d0 <_dtoa_r+0x1304>
   43f20:	89e0003c 	xorhi	r7,r17,32768
   43f24:	800d883a 	mov	r6,r16
   43f28:	a809883a 	mov	r4,r21
   43f2c:	a00b883a 	mov	r5,r20
   43f30:	004bc180 	call	4bc18 <__ledf2>
   43f34:	103d7e0e 	bge	r2,zero,43530 <__alt_data_end+0xfffe3530>
   43f38:	002b883a 	mov	r21,zero
   43f3c:	0023883a 	mov	r17,zero
   43f40:	003efb06 	br	43b30 <__alt_data_end+0xfffe3b30>
   43f44:	d8800717 	ldw	r2,28(sp)
   43f48:	003bd006 	br	42e8c <__alt_data_end+0xfffe2e8c>
   43f4c:	d9000a17 	ldw	r4,40(sp)
   43f50:	d9800d17 	ldw	r6,52(sp)
   43f54:	dd400a15 	stw	r21,40(sp)
   43f58:	a905c83a 	sub	r2,r21,r4
   43f5c:	308d883a 	add	r6,r6,r2
   43f60:	d9800d15 	stw	r6,52(sp)
   43f64:	002b883a 	mov	r21,zero
   43f68:	003e0606 	br	43784 <__alt_data_end+0xfffe3784>
   43f6c:	9023883a 	mov	r17,r18
   43f70:	9829883a 	mov	r20,r19
   43f74:	04000084 	movi	r16,2
   43f78:	003c9206 	br	431c4 <__alt_data_end+0xfffe31c4>
   43f7c:	04000044 	movi	r16,1
   43f80:	dc000c15 	stw	r16,48(sp)
   43f84:	dc000615 	stw	r16,24(sp)
   43f88:	dc002215 	stw	r16,136(sp)
   43f8c:	e0001115 	stw	zero,68(fp)
   43f90:	000b883a 	mov	r5,zero
   43f94:	003c6906 	br	4313c <__alt_data_end+0xfffe313c>
   43f98:	3021883a 	mov	r16,r6
   43f9c:	003ffb06 	br	43f8c <__alt_data_end+0xfffe3f8c>
   43fa0:	1000021e 	bne	r2,zero,43fac <_dtoa_r+0x11e0>
   43fa4:	4200004c 	andi	r8,r8,1
   43fa8:	403e7d1e 	bne	r8,zero,439a0 <__alt_data_end+0xfffe39a0>
   43fac:	01000c04 	movi	r4,48
   43fb0:	00000106 	br	43fb8 <_dtoa_r+0x11ec>
   43fb4:	102f883a 	mov	r23,r2
   43fb8:	b8bfffc4 	addi	r2,r23,-1
   43fbc:	10c00007 	ldb	r3,0(r2)
   43fc0:	193ffc26 	beq	r3,r4,43fb4 <__alt_data_end+0xfffe3fb4>
   43fc4:	003e8706 	br	439e4 <__alt_data_end+0xfffe39e4>
   43fc8:	d8800517 	ldw	r2,20(sp)
   43fcc:	00a3c83a 	sub	r17,zero,r2
   43fd0:	8800a426 	beq	r17,zero,44264 <_dtoa_r+0x1498>
   43fd4:	888003cc 	andi	r2,r17,15
   43fd8:	100490fa 	slli	r2,r2,3
   43fdc:	00c00174 	movhi	r3,5
   43fe0:	18fef404 	addi	r3,r3,-1072
   43fe4:	1885883a 	add	r2,r3,r2
   43fe8:	11800017 	ldw	r6,0(r2)
   43fec:	11c00117 	ldw	r7,4(r2)
   43ff0:	9009883a 	mov	r4,r18
   43ff4:	980b883a 	mov	r5,r19
   43ff8:	8823d13a 	srai	r17,r17,4
   43ffc:	004bd0c0 	call	4bd0c <__muldf3>
   44000:	d8800f15 	stw	r2,60(sp)
   44004:	d8c01015 	stw	r3,64(sp)
   44008:	8800e826 	beq	r17,zero,443ac <_dtoa_r+0x15e0>
   4400c:	05000174 	movhi	r20,5
   44010:	a53eea04 	addi	r20,r20,-1112
   44014:	04000084 	movi	r16,2
   44018:	8980004c 	andi	r6,r17,1
   4401c:	1009883a 	mov	r4,r2
   44020:	8823d07a 	srai	r17,r17,1
   44024:	180b883a 	mov	r5,r3
   44028:	30000426 	beq	r6,zero,4403c <_dtoa_r+0x1270>
   4402c:	a1800017 	ldw	r6,0(r20)
   44030:	a1c00117 	ldw	r7,4(r20)
   44034:	84000044 	addi	r16,r16,1
   44038:	004bd0c0 	call	4bd0c <__muldf3>
   4403c:	a5000204 	addi	r20,r20,8
   44040:	883ff51e 	bne	r17,zero,44018 <__alt_data_end+0xfffe4018>
   44044:	d8800f15 	stw	r2,60(sp)
   44048:	d8c01015 	stw	r3,64(sp)
   4404c:	003c7606 	br	43228 <__alt_data_end+0xfffe3228>
   44050:	00c00c04 	movi	r3,48
   44054:	10c00005 	stb	r3,0(r2)
   44058:	d8c00517 	ldw	r3,20(sp)
   4405c:	bd3fffc3 	ldbu	r20,-1(r23)
   44060:	18c00044 	addi	r3,r3,1
   44064:	d8c00515 	stw	r3,20(sp)
   44068:	003db906 	br	43750 <__alt_data_end+0xfffe3750>
   4406c:	89400117 	ldw	r5,4(r17)
   44070:	e009883a 	mov	r4,fp
   44074:	0045e500 	call	45e50 <_Balloc>
   44078:	89800417 	ldw	r6,16(r17)
   4407c:	89400304 	addi	r5,r17,12
   44080:	11000304 	addi	r4,r2,12
   44084:	31800084 	addi	r6,r6,2
   44088:	318d883a 	add	r6,r6,r6
   4408c:	318d883a 	add	r6,r6,r6
   44090:	1027883a 	mov	r19,r2
   44094:	0045be00 	call	45be0 <memcpy>
   44098:	01800044 	movi	r6,1
   4409c:	980b883a 	mov	r5,r19
   440a0:	e009883a 	mov	r4,fp
   440a4:	00465d00 	call	465d0 <__lshift>
   440a8:	1029883a 	mov	r20,r2
   440ac:	003ecc06 	br	43be0 <__alt_data_end+0xfffe3be0>
   440b0:	00800e44 	movi	r2,57
   440b4:	90809026 	beq	r18,r2,442f8 <_dtoa_r+0x152c>
   440b8:	92000044 	addi	r8,r18,1
   440bc:	003f1f06 	br	43d3c <__alt_data_end+0xfffe3d3c>
   440c0:	9011883a 	mov	r8,r18
   440c4:	8825883a 	mov	r18,r17
   440c8:	a023883a 	mov	r17,r20
   440cc:	003e2906 	br	43974 <__alt_data_end+0xfffe3974>
   440d0:	002b883a 	mov	r21,zero
   440d4:	0023883a 	mov	r17,zero
   440d8:	003f5406 	br	43e2c <__alt_data_end+0xfffe3e2c>
   440dc:	61bfffc4 	addi	r6,r12,-1
   440e0:	300490fa 	slli	r2,r6,3
   440e4:	00c00174 	movhi	r3,5
   440e8:	18fef404 	addi	r3,r3,-1072
   440ec:	1885883a 	add	r2,r3,r2
   440f0:	11000017 	ldw	r4,0(r2)
   440f4:	11400117 	ldw	r5,4(r2)
   440f8:	d8800717 	ldw	r2,28(sp)
   440fc:	880f883a 	mov	r7,r17
   44100:	d9801215 	stw	r6,72(sp)
   44104:	800d883a 	mov	r6,r16
   44108:	db001615 	stw	r12,88(sp)
   4410c:	15c00044 	addi	r23,r2,1
   44110:	004bd0c0 	call	4bd0c <__muldf3>
   44114:	d9401017 	ldw	r5,64(sp)
   44118:	d9000f17 	ldw	r4,60(sp)
   4411c:	d8c01515 	stw	r3,84(sp)
   44120:	d8801415 	stw	r2,80(sp)
   44124:	004cd200 	call	4cd20 <__fixdfsi>
   44128:	1009883a 	mov	r4,r2
   4412c:	1021883a 	mov	r16,r2
   44130:	004cda00 	call	4cda0 <__floatsidf>
   44134:	d9000f17 	ldw	r4,60(sp)
   44138:	d9401017 	ldw	r5,64(sp)
   4413c:	100d883a 	mov	r6,r2
   44140:	180f883a 	mov	r7,r3
   44144:	004c4240 	call	4c424 <__subdf3>
   44148:	1829883a 	mov	r20,r3
   4414c:	d8c00717 	ldw	r3,28(sp)
   44150:	84000c04 	addi	r16,r16,48
   44154:	1023883a 	mov	r17,r2
   44158:	1c000005 	stb	r16,0(r3)
   4415c:	db001617 	ldw	r12,88(sp)
   44160:	00800044 	movi	r2,1
   44164:	60802226 	beq	r12,r2,441f0 <_dtoa_r+0x1424>
   44168:	d9c00717 	ldw	r7,28(sp)
   4416c:	8805883a 	mov	r2,r17
   44170:	b82b883a 	mov	r21,r23
   44174:	3b19883a 	add	r12,r7,r12
   44178:	6023883a 	mov	r17,r12
   4417c:	a007883a 	mov	r3,r20
   44180:	dc800f15 	stw	r18,60(sp)
   44184:	000d883a 	mov	r6,zero
   44188:	01d00934 	movhi	r7,16420
   4418c:	1009883a 	mov	r4,r2
   44190:	180b883a 	mov	r5,r3
   44194:	004bd0c0 	call	4bd0c <__muldf3>
   44198:	180b883a 	mov	r5,r3
   4419c:	1009883a 	mov	r4,r2
   441a0:	1829883a 	mov	r20,r3
   441a4:	1025883a 	mov	r18,r2
   441a8:	004cd200 	call	4cd20 <__fixdfsi>
   441ac:	1009883a 	mov	r4,r2
   441b0:	1021883a 	mov	r16,r2
   441b4:	004cda00 	call	4cda0 <__floatsidf>
   441b8:	100d883a 	mov	r6,r2
   441bc:	180f883a 	mov	r7,r3
   441c0:	9009883a 	mov	r4,r18
   441c4:	a00b883a 	mov	r5,r20
   441c8:	84000c04 	addi	r16,r16,48
   441cc:	004c4240 	call	4c424 <__subdf3>
   441d0:	ad400044 	addi	r21,r21,1
   441d4:	ac3fffc5 	stb	r16,-1(r21)
   441d8:	ac7fea1e 	bne	r21,r17,44184 <__alt_data_end+0xfffe4184>
   441dc:	1023883a 	mov	r17,r2
   441e0:	d8801217 	ldw	r2,72(sp)
   441e4:	dc800f17 	ldw	r18,60(sp)
   441e8:	1829883a 	mov	r20,r3
   441ec:	b8af883a 	add	r23,r23,r2
   441f0:	d9001417 	ldw	r4,80(sp)
   441f4:	d9401517 	ldw	r5,84(sp)
   441f8:	000d883a 	mov	r6,zero
   441fc:	01cff834 	movhi	r7,16352
   44200:	004a9200 	call	4a920 <__adddf3>
   44204:	880d883a 	mov	r6,r17
   44208:	a00f883a 	mov	r7,r20
   4420c:	1009883a 	mov	r4,r2
   44210:	180b883a 	mov	r5,r3
   44214:	004bc180 	call	4bc18 <__ledf2>
   44218:	10003e0e 	bge	r2,zero,44314 <_dtoa_r+0x1548>
   4421c:	d9001317 	ldw	r4,76(sp)
   44220:	bd3fffc3 	ldbu	r20,-1(r23)
   44224:	d9000515 	stw	r4,20(sp)
   44228:	003d3b06 	br	43718 <__alt_data_end+0xfffe3718>
   4422c:	0027883a 	mov	r19,zero
   44230:	003f1b06 	br	43ea0 <__alt_data_end+0xfffe3ea0>
   44234:	d8800817 	ldw	r2,32(sp)
   44238:	11e9c83a 	sub	r20,r2,r7
   4423c:	0005883a 	mov	r2,zero
   44240:	003d5406 	br	43794 <__alt_data_end+0xfffe3794>
   44244:	00800044 	movi	r2,1
   44248:	003dc706 	br	43968 <__alt_data_end+0xfffe3968>
   4424c:	d8c00217 	ldw	r3,8(sp)
   44250:	00800d84 	movi	r2,54
   44254:	dd400a17 	ldw	r21,40(sp)
   44258:	10c5c83a 	sub	r2,r2,r3
   4425c:	dd000817 	ldw	r20,32(sp)
   44260:	003d4c06 	br	43794 <__alt_data_end+0xfffe3794>
   44264:	dc800f15 	stw	r18,60(sp)
   44268:	dcc01015 	stw	r19,64(sp)
   4426c:	04000084 	movi	r16,2
   44270:	003bed06 	br	43228 <__alt_data_end+0xfffe3228>
   44274:	d9000617 	ldw	r4,24(sp)
   44278:	203f0d26 	beq	r4,zero,43eb0 <__alt_data_end+0xfffe3eb0>
   4427c:	d9800c17 	ldw	r6,48(sp)
   44280:	01bcab0e 	bge	zero,r6,43530 <__alt_data_end+0xfffe3530>
   44284:	d9401017 	ldw	r5,64(sp)
   44288:	d9000f17 	ldw	r4,60(sp)
   4428c:	000d883a 	mov	r6,zero
   44290:	01d00934 	movhi	r7,16420
   44294:	004bd0c0 	call	4bd0c <__muldf3>
   44298:	81000044 	addi	r4,r16,1
   4429c:	d8800f15 	stw	r2,60(sp)
   442a0:	d8c01015 	stw	r3,64(sp)
   442a4:	004cda00 	call	4cda0 <__floatsidf>
   442a8:	d9800f17 	ldw	r6,60(sp)
   442ac:	d9c01017 	ldw	r7,64(sp)
   442b0:	1009883a 	mov	r4,r2
   442b4:	180b883a 	mov	r5,r3
   442b8:	004bd0c0 	call	4bd0c <__muldf3>
   442bc:	01d00734 	movhi	r7,16412
   442c0:	000d883a 	mov	r6,zero
   442c4:	1009883a 	mov	r4,r2
   442c8:	180b883a 	mov	r5,r3
   442cc:	004a9200 	call	4a920 <__adddf3>
   442d0:	d9c00517 	ldw	r7,20(sp)
   442d4:	047f3034 	movhi	r17,64704
   442d8:	1021883a 	mov	r16,r2
   442dc:	39ffffc4 	addi	r7,r7,-1
   442e0:	d9c01315 	stw	r7,76(sp)
   442e4:	1c63883a 	add	r17,r3,r17
   442e8:	db000c17 	ldw	r12,48(sp)
   442ec:	003bea06 	br	43298 <__alt_data_end+0xfffe3298>
   442f0:	dc000915 	stw	r16,36(sp)
   442f4:	003e0e06 	br	43b30 <__alt_data_end+0xfffe3b30>
   442f8:	01000e44 	movi	r4,57
   442fc:	8825883a 	mov	r18,r17
   44300:	9dc00044 	addi	r23,r19,1
   44304:	99000005 	stb	r4,0(r19)
   44308:	a023883a 	mov	r17,r20
   4430c:	dc000915 	stw	r16,36(sp)
   44310:	003da406 	br	439a4 <__alt_data_end+0xfffe39a4>
   44314:	d9801417 	ldw	r6,80(sp)
   44318:	d9c01517 	ldw	r7,84(sp)
   4431c:	0009883a 	mov	r4,zero
   44320:	014ff834 	movhi	r5,16352
   44324:	004c4240 	call	4c424 <__subdf3>
   44328:	880d883a 	mov	r6,r17
   4432c:	a00f883a 	mov	r7,r20
   44330:	1009883a 	mov	r4,r2
   44334:	180b883a 	mov	r5,r3
   44338:	004bb3c0 	call	4bb3c <__gedf2>
   4433c:	00bc7c0e 	bge	zero,r2,43530 <__alt_data_end+0xfffe3530>
   44340:	01000c04 	movi	r4,48
   44344:	00000106 	br	4434c <_dtoa_r+0x1580>
   44348:	102f883a 	mov	r23,r2
   4434c:	b8bfffc4 	addi	r2,r23,-1
   44350:	10c00007 	ldb	r3,0(r2)
   44354:	193ffc26 	beq	r3,r4,44348 <__alt_data_end+0xfffe4348>
   44358:	d9801317 	ldw	r6,76(sp)
   4435c:	d9800515 	stw	r6,20(sp)
   44360:	003c4406 	br	43474 <__alt_data_end+0xfffe3474>
   44364:	d9801317 	ldw	r6,76(sp)
   44368:	d9800515 	stw	r6,20(sp)
   4436c:	003cea06 	br	43718 <__alt_data_end+0xfffe3718>
   44370:	dd800f17 	ldw	r22,60(sp)
   44374:	dcc01017 	ldw	r19,64(sp)
   44378:	dc801217 	ldw	r18,72(sp)
   4437c:	003c6c06 	br	43530 <__alt_data_end+0xfffe3530>
   44380:	903e031e 	bne	r18,zero,43b90 <__alt_data_end+0xfffe3b90>
   44384:	003ebb06 	br	43e74 <__alt_data_end+0xfffe3e74>
   44388:	103e6c1e 	bne	r2,zero,43d3c <__alt_data_end+0xfffe3d3c>
   4438c:	4080004c 	andi	r2,r8,1
   44390:	103e6a26 	beq	r2,zero,43d3c <__alt_data_end+0xfffe3d3c>
   44394:	003e6606 	br	43d30 <__alt_data_end+0xfffe3d30>
   44398:	d8c00317 	ldw	r3,12(sp)
   4439c:	00800084 	movi	r2,2
   443a0:	10c02916 	blt	r2,r3,44448 <_dtoa_r+0x167c>
   443a4:	d9000c17 	ldw	r4,48(sp)
   443a8:	003e8806 	br	43dcc <__alt_data_end+0xfffe3dcc>
   443ac:	04000084 	movi	r16,2
   443b0:	003b9d06 	br	43228 <__alt_data_end+0xfffe3228>
   443b4:	d9001317 	ldw	r4,76(sp)
   443b8:	d9000515 	stw	r4,20(sp)
   443bc:	003cd606 	br	43718 <__alt_data_end+0xfffe3718>
   443c0:	d8801317 	ldw	r2,76(sp)
   443c4:	d8800515 	stw	r2,20(sp)
   443c8:	003c2a06 	br	43474 <__alt_data_end+0xfffe3474>
   443cc:	d9800317 	ldw	r6,12(sp)
   443d0:	00800084 	movi	r2,2
   443d4:	11801516 	blt	r2,r6,4442c <_dtoa_r+0x1660>
   443d8:	d9c00c17 	ldw	r7,48(sp)
   443dc:	d9c00615 	stw	r7,24(sp)
   443e0:	003df706 	br	43bc0 <__alt_data_end+0xfffe3bc0>
   443e4:	193d3926 	beq	r3,r4,438cc <__alt_data_end+0xfffe38cc>
   443e8:	00c00f04 	movi	r3,60
   443ec:	1885c83a 	sub	r2,r3,r2
   443f0:	003ddf06 	br	43b70 <__alt_data_end+0xfffe3b70>
   443f4:	e009883a 	mov	r4,fp
   443f8:	e0001115 	stw	zero,68(fp)
   443fc:	000b883a 	mov	r5,zero
   44400:	0045e500 	call	45e50 <_Balloc>
   44404:	d8800715 	stw	r2,28(sp)
   44408:	d8c00717 	ldw	r3,28(sp)
   4440c:	00bfffc4 	movi	r2,-1
   44410:	01000044 	movi	r4,1
   44414:	d8800c15 	stw	r2,48(sp)
   44418:	e0c01015 	stw	r3,64(fp)
   4441c:	d9000b15 	stw	r4,44(sp)
   44420:	d8800615 	stw	r2,24(sp)
   44424:	d8002215 	stw	zero,136(sp)
   44428:	003c4106 	br	43530 <__alt_data_end+0xfffe3530>
   4442c:	d8c00c17 	ldw	r3,48(sp)
   44430:	d8c00615 	stw	r3,24(sp)
   44434:	003e7006 	br	43df8 <__alt_data_end+0xfffe3df8>
   44438:	04400044 	movi	r17,1
   4443c:	003b2006 	br	430c0 <__alt_data_end+0xfffe30c0>
   44440:	000b883a 	mov	r5,zero
   44444:	003b3d06 	br	4313c <__alt_data_end+0xfffe313c>
   44448:	d8800c17 	ldw	r2,48(sp)
   4444c:	d8800615 	stw	r2,24(sp)
   44450:	003e6906 	br	43df8 <__alt_data_end+0xfffe3df8>

00044454 <__sflush_r>:
   44454:	2880030b 	ldhu	r2,12(r5)
   44458:	defffb04 	addi	sp,sp,-20
   4445c:	dcc00315 	stw	r19,12(sp)
   44460:	dc400115 	stw	r17,4(sp)
   44464:	dfc00415 	stw	ra,16(sp)
   44468:	dc800215 	stw	r18,8(sp)
   4446c:	dc000015 	stw	r16,0(sp)
   44470:	10c0020c 	andi	r3,r2,8
   44474:	2823883a 	mov	r17,r5
   44478:	2027883a 	mov	r19,r4
   4447c:	1800311e 	bne	r3,zero,44544 <__sflush_r+0xf0>
   44480:	28c00117 	ldw	r3,4(r5)
   44484:	10820014 	ori	r2,r2,2048
   44488:	2880030d 	sth	r2,12(r5)
   4448c:	00c04b0e 	bge	zero,r3,445bc <__sflush_r+0x168>
   44490:	8a000a17 	ldw	r8,40(r17)
   44494:	40002326 	beq	r8,zero,44524 <__sflush_r+0xd0>
   44498:	9c000017 	ldw	r16,0(r19)
   4449c:	10c4000c 	andi	r3,r2,4096
   444a0:	98000015 	stw	zero,0(r19)
   444a4:	18004826 	beq	r3,zero,445c8 <__sflush_r+0x174>
   444a8:	89801417 	ldw	r6,80(r17)
   444ac:	10c0010c 	andi	r3,r2,4
   444b0:	18000626 	beq	r3,zero,444cc <__sflush_r+0x78>
   444b4:	88c00117 	ldw	r3,4(r17)
   444b8:	88800c17 	ldw	r2,48(r17)
   444bc:	30cdc83a 	sub	r6,r6,r3
   444c0:	10000226 	beq	r2,zero,444cc <__sflush_r+0x78>
   444c4:	88800f17 	ldw	r2,60(r17)
   444c8:	308dc83a 	sub	r6,r6,r2
   444cc:	89400717 	ldw	r5,28(r17)
   444d0:	000f883a 	mov	r7,zero
   444d4:	9809883a 	mov	r4,r19
   444d8:	403ee83a 	callr	r8
   444dc:	00ffffc4 	movi	r3,-1
   444e0:	10c04426 	beq	r2,r3,445f4 <__sflush_r+0x1a0>
   444e4:	88c0030b 	ldhu	r3,12(r17)
   444e8:	89000417 	ldw	r4,16(r17)
   444ec:	88000115 	stw	zero,4(r17)
   444f0:	197dffcc 	andi	r5,r3,63487
   444f4:	8940030d 	sth	r5,12(r17)
   444f8:	89000015 	stw	r4,0(r17)
   444fc:	18c4000c 	andi	r3,r3,4096
   44500:	18002c1e 	bne	r3,zero,445b4 <__sflush_r+0x160>
   44504:	89400c17 	ldw	r5,48(r17)
   44508:	9c000015 	stw	r16,0(r19)
   4450c:	28000526 	beq	r5,zero,44524 <__sflush_r+0xd0>
   44510:	88801004 	addi	r2,r17,64
   44514:	28800226 	beq	r5,r2,44520 <__sflush_r+0xcc>
   44518:	9809883a 	mov	r4,r19
   4451c:	0044bc00 	call	44bc0 <_free_r>
   44520:	88000c15 	stw	zero,48(r17)
   44524:	0005883a 	mov	r2,zero
   44528:	dfc00417 	ldw	ra,16(sp)
   4452c:	dcc00317 	ldw	r19,12(sp)
   44530:	dc800217 	ldw	r18,8(sp)
   44534:	dc400117 	ldw	r17,4(sp)
   44538:	dc000017 	ldw	r16,0(sp)
   4453c:	dec00504 	addi	sp,sp,20
   44540:	f800283a 	ret
   44544:	2c800417 	ldw	r18,16(r5)
   44548:	903ff626 	beq	r18,zero,44524 <__alt_data_end+0xfffe4524>
   4454c:	2c000017 	ldw	r16,0(r5)
   44550:	108000cc 	andi	r2,r2,3
   44554:	2c800015 	stw	r18,0(r5)
   44558:	84a1c83a 	sub	r16,r16,r18
   4455c:	1000131e 	bne	r2,zero,445ac <__sflush_r+0x158>
   44560:	28800517 	ldw	r2,20(r5)
   44564:	88800215 	stw	r2,8(r17)
   44568:	04000316 	blt	zero,r16,44578 <__sflush_r+0x124>
   4456c:	003fed06 	br	44524 <__alt_data_end+0xfffe4524>
   44570:	90a5883a 	add	r18,r18,r2
   44574:	043feb0e 	bge	zero,r16,44524 <__alt_data_end+0xfffe4524>
   44578:	88800917 	ldw	r2,36(r17)
   4457c:	89400717 	ldw	r5,28(r17)
   44580:	800f883a 	mov	r7,r16
   44584:	900d883a 	mov	r6,r18
   44588:	9809883a 	mov	r4,r19
   4458c:	103ee83a 	callr	r2
   44590:	80a1c83a 	sub	r16,r16,r2
   44594:	00bff616 	blt	zero,r2,44570 <__alt_data_end+0xfffe4570>
   44598:	88c0030b 	ldhu	r3,12(r17)
   4459c:	00bfffc4 	movi	r2,-1
   445a0:	18c01014 	ori	r3,r3,64
   445a4:	88c0030d 	sth	r3,12(r17)
   445a8:	003fdf06 	br	44528 <__alt_data_end+0xfffe4528>
   445ac:	0005883a 	mov	r2,zero
   445b0:	003fec06 	br	44564 <__alt_data_end+0xfffe4564>
   445b4:	88801415 	stw	r2,80(r17)
   445b8:	003fd206 	br	44504 <__alt_data_end+0xfffe4504>
   445bc:	28c00f17 	ldw	r3,60(r5)
   445c0:	00ffb316 	blt	zero,r3,44490 <__alt_data_end+0xfffe4490>
   445c4:	003fd706 	br	44524 <__alt_data_end+0xfffe4524>
   445c8:	89400717 	ldw	r5,28(r17)
   445cc:	000d883a 	mov	r6,zero
   445d0:	01c00044 	movi	r7,1
   445d4:	9809883a 	mov	r4,r19
   445d8:	403ee83a 	callr	r8
   445dc:	100d883a 	mov	r6,r2
   445e0:	00bfffc4 	movi	r2,-1
   445e4:	30801426 	beq	r6,r2,44638 <__sflush_r+0x1e4>
   445e8:	8880030b 	ldhu	r2,12(r17)
   445ec:	8a000a17 	ldw	r8,40(r17)
   445f0:	003fae06 	br	444ac <__alt_data_end+0xfffe44ac>
   445f4:	98c00017 	ldw	r3,0(r19)
   445f8:	183fba26 	beq	r3,zero,444e4 <__alt_data_end+0xfffe44e4>
   445fc:	01000744 	movi	r4,29
   44600:	19000626 	beq	r3,r4,4461c <__sflush_r+0x1c8>
   44604:	01000584 	movi	r4,22
   44608:	19000426 	beq	r3,r4,4461c <__sflush_r+0x1c8>
   4460c:	88c0030b 	ldhu	r3,12(r17)
   44610:	18c01014 	ori	r3,r3,64
   44614:	88c0030d 	sth	r3,12(r17)
   44618:	003fc306 	br	44528 <__alt_data_end+0xfffe4528>
   4461c:	8880030b 	ldhu	r2,12(r17)
   44620:	88c00417 	ldw	r3,16(r17)
   44624:	88000115 	stw	zero,4(r17)
   44628:	10bdffcc 	andi	r2,r2,63487
   4462c:	8880030d 	sth	r2,12(r17)
   44630:	88c00015 	stw	r3,0(r17)
   44634:	003fb306 	br	44504 <__alt_data_end+0xfffe4504>
   44638:	98800017 	ldw	r2,0(r19)
   4463c:	103fea26 	beq	r2,zero,445e8 <__alt_data_end+0xfffe45e8>
   44640:	00c00744 	movi	r3,29
   44644:	10c00226 	beq	r2,r3,44650 <__sflush_r+0x1fc>
   44648:	00c00584 	movi	r3,22
   4464c:	10c0031e 	bne	r2,r3,4465c <__sflush_r+0x208>
   44650:	9c000015 	stw	r16,0(r19)
   44654:	0005883a 	mov	r2,zero
   44658:	003fb306 	br	44528 <__alt_data_end+0xfffe4528>
   4465c:	88c0030b 	ldhu	r3,12(r17)
   44660:	3005883a 	mov	r2,r6
   44664:	18c01014 	ori	r3,r3,64
   44668:	88c0030d 	sth	r3,12(r17)
   4466c:	003fae06 	br	44528 <__alt_data_end+0xfffe4528>

00044670 <_fflush_r>:
   44670:	defffd04 	addi	sp,sp,-12
   44674:	dc000115 	stw	r16,4(sp)
   44678:	dfc00215 	stw	ra,8(sp)
   4467c:	2021883a 	mov	r16,r4
   44680:	20000226 	beq	r4,zero,4468c <_fflush_r+0x1c>
   44684:	20800e17 	ldw	r2,56(r4)
   44688:	10000c26 	beq	r2,zero,446bc <_fflush_r+0x4c>
   4468c:	2880030f 	ldh	r2,12(r5)
   44690:	1000051e 	bne	r2,zero,446a8 <_fflush_r+0x38>
   44694:	0005883a 	mov	r2,zero
   44698:	dfc00217 	ldw	ra,8(sp)
   4469c:	dc000117 	ldw	r16,4(sp)
   446a0:	dec00304 	addi	sp,sp,12
   446a4:	f800283a 	ret
   446a8:	8009883a 	mov	r4,r16
   446ac:	dfc00217 	ldw	ra,8(sp)
   446b0:	dc000117 	ldw	r16,4(sp)
   446b4:	dec00304 	addi	sp,sp,12
   446b8:	00444541 	jmpi	44454 <__sflush_r>
   446bc:	d9400015 	stw	r5,0(sp)
   446c0:	0044a4c0 	call	44a4c <__sinit>
   446c4:	d9400017 	ldw	r5,0(sp)
   446c8:	003ff006 	br	4468c <__alt_data_end+0xfffe468c>

000446cc <fflush>:
   446cc:	20000526 	beq	r4,zero,446e4 <fflush+0x18>
   446d0:	00800174 	movhi	r2,5
   446d4:	10862704 	addi	r2,r2,6300
   446d8:	200b883a 	mov	r5,r4
   446dc:	11000017 	ldw	r4,0(r2)
   446e0:	00446701 	jmpi	44670 <_fflush_r>
   446e4:	00800174 	movhi	r2,5
   446e8:	10862604 	addi	r2,r2,6296
   446ec:	11000017 	ldw	r4,0(r2)
   446f0:	01400134 	movhi	r5,4
   446f4:	29519c04 	addi	r5,r5,18032
   446f8:	0044f941 	jmpi	44f94 <_fwalk_reent>

000446fc <__fp_unlock>:
   446fc:	0005883a 	mov	r2,zero
   44700:	f800283a 	ret

00044704 <_cleanup_r>:
   44704:	01400174 	movhi	r5,5
   44708:	29626104 	addi	r5,r5,-30332
   4470c:	0044f941 	jmpi	44f94 <_fwalk_reent>

00044710 <__sinit.part.1>:
   44710:	defff704 	addi	sp,sp,-36
   44714:	00c00134 	movhi	r3,4
   44718:	dfc00815 	stw	ra,32(sp)
   4471c:	ddc00715 	stw	r23,28(sp)
   44720:	dd800615 	stw	r22,24(sp)
   44724:	dd400515 	stw	r21,20(sp)
   44728:	dd000415 	stw	r20,16(sp)
   4472c:	dcc00315 	stw	r19,12(sp)
   44730:	dc800215 	stw	r18,8(sp)
   44734:	dc400115 	stw	r17,4(sp)
   44738:	dc000015 	stw	r16,0(sp)
   4473c:	18d1c104 	addi	r3,r3,18180
   44740:	24000117 	ldw	r16,4(r4)
   44744:	20c00f15 	stw	r3,60(r4)
   44748:	2080bb04 	addi	r2,r4,748
   4474c:	00c000c4 	movi	r3,3
   44750:	20c0b915 	stw	r3,740(r4)
   44754:	2080ba15 	stw	r2,744(r4)
   44758:	2000b815 	stw	zero,736(r4)
   4475c:	05c00204 	movi	r23,8
   44760:	00800104 	movi	r2,4
   44764:	2025883a 	mov	r18,r4
   44768:	b80d883a 	mov	r6,r23
   4476c:	81001704 	addi	r4,r16,92
   44770:	000b883a 	mov	r5,zero
   44774:	80000015 	stw	zero,0(r16)
   44778:	80000115 	stw	zero,4(r16)
   4477c:	80000215 	stw	zero,8(r16)
   44780:	8080030d 	sth	r2,12(r16)
   44784:	80001915 	stw	zero,100(r16)
   44788:	8000038d 	sth	zero,14(r16)
   4478c:	80000415 	stw	zero,16(r16)
   44790:	80000515 	stw	zero,20(r16)
   44794:	80000615 	stw	zero,24(r16)
   44798:	0045d280 	call	45d28 <memset>
   4479c:	05800134 	movhi	r22,4
   447a0:	94400217 	ldw	r17,8(r18)
   447a4:	05400134 	movhi	r21,4
   447a8:	05000134 	movhi	r20,4
   447ac:	04c00134 	movhi	r19,4
   447b0:	b59bc504 	addi	r22,r22,28436
   447b4:	ad5bdc04 	addi	r21,r21,28528
   447b8:	a51bfb04 	addi	r20,r20,28652
   447bc:	9cdc1204 	addi	r19,r19,28744
   447c0:	85800815 	stw	r22,32(r16)
   447c4:	85400915 	stw	r21,36(r16)
   447c8:	85000a15 	stw	r20,40(r16)
   447cc:	84c00b15 	stw	r19,44(r16)
   447d0:	84000715 	stw	r16,28(r16)
   447d4:	00800284 	movi	r2,10
   447d8:	8880030d 	sth	r2,12(r17)
   447dc:	00800044 	movi	r2,1
   447e0:	b80d883a 	mov	r6,r23
   447e4:	89001704 	addi	r4,r17,92
   447e8:	000b883a 	mov	r5,zero
   447ec:	88000015 	stw	zero,0(r17)
   447f0:	88000115 	stw	zero,4(r17)
   447f4:	88000215 	stw	zero,8(r17)
   447f8:	88001915 	stw	zero,100(r17)
   447fc:	8880038d 	sth	r2,14(r17)
   44800:	88000415 	stw	zero,16(r17)
   44804:	88000515 	stw	zero,20(r17)
   44808:	88000615 	stw	zero,24(r17)
   4480c:	0045d280 	call	45d28 <memset>
   44810:	94000317 	ldw	r16,12(r18)
   44814:	00800484 	movi	r2,18
   44818:	8c400715 	stw	r17,28(r17)
   4481c:	8d800815 	stw	r22,32(r17)
   44820:	8d400915 	stw	r21,36(r17)
   44824:	8d000a15 	stw	r20,40(r17)
   44828:	8cc00b15 	stw	r19,44(r17)
   4482c:	8080030d 	sth	r2,12(r16)
   44830:	00800084 	movi	r2,2
   44834:	80000015 	stw	zero,0(r16)
   44838:	80000115 	stw	zero,4(r16)
   4483c:	80000215 	stw	zero,8(r16)
   44840:	80001915 	stw	zero,100(r16)
   44844:	8080038d 	sth	r2,14(r16)
   44848:	80000415 	stw	zero,16(r16)
   4484c:	80000515 	stw	zero,20(r16)
   44850:	80000615 	stw	zero,24(r16)
   44854:	b80d883a 	mov	r6,r23
   44858:	000b883a 	mov	r5,zero
   4485c:	81001704 	addi	r4,r16,92
   44860:	0045d280 	call	45d28 <memset>
   44864:	00800044 	movi	r2,1
   44868:	84000715 	stw	r16,28(r16)
   4486c:	85800815 	stw	r22,32(r16)
   44870:	85400915 	stw	r21,36(r16)
   44874:	85000a15 	stw	r20,40(r16)
   44878:	84c00b15 	stw	r19,44(r16)
   4487c:	90800e15 	stw	r2,56(r18)
   44880:	dfc00817 	ldw	ra,32(sp)
   44884:	ddc00717 	ldw	r23,28(sp)
   44888:	dd800617 	ldw	r22,24(sp)
   4488c:	dd400517 	ldw	r21,20(sp)
   44890:	dd000417 	ldw	r20,16(sp)
   44894:	dcc00317 	ldw	r19,12(sp)
   44898:	dc800217 	ldw	r18,8(sp)
   4489c:	dc400117 	ldw	r17,4(sp)
   448a0:	dc000017 	ldw	r16,0(sp)
   448a4:	dec00904 	addi	sp,sp,36
   448a8:	f800283a 	ret

000448ac <__fp_lock>:
   448ac:	0005883a 	mov	r2,zero
   448b0:	f800283a 	ret

000448b4 <__sfmoreglue>:
   448b4:	defffc04 	addi	sp,sp,-16
   448b8:	dc400115 	stw	r17,4(sp)
   448bc:	2c7fffc4 	addi	r17,r5,-1
   448c0:	8c401a24 	muli	r17,r17,104
   448c4:	dc800215 	stw	r18,8(sp)
   448c8:	2825883a 	mov	r18,r5
   448cc:	89401d04 	addi	r5,r17,116
   448d0:	dc000015 	stw	r16,0(sp)
   448d4:	dfc00315 	stw	ra,12(sp)
   448d8:	00452f00 	call	452f0 <_malloc_r>
   448dc:	1021883a 	mov	r16,r2
   448e0:	10000726 	beq	r2,zero,44900 <__sfmoreglue+0x4c>
   448e4:	11000304 	addi	r4,r2,12
   448e8:	10000015 	stw	zero,0(r2)
   448ec:	14800115 	stw	r18,4(r2)
   448f0:	11000215 	stw	r4,8(r2)
   448f4:	89801a04 	addi	r6,r17,104
   448f8:	000b883a 	mov	r5,zero
   448fc:	0045d280 	call	45d28 <memset>
   44900:	8005883a 	mov	r2,r16
   44904:	dfc00317 	ldw	ra,12(sp)
   44908:	dc800217 	ldw	r18,8(sp)
   4490c:	dc400117 	ldw	r17,4(sp)
   44910:	dc000017 	ldw	r16,0(sp)
   44914:	dec00404 	addi	sp,sp,16
   44918:	f800283a 	ret

0004491c <__sfp>:
   4491c:	defffb04 	addi	sp,sp,-20
   44920:	dc000015 	stw	r16,0(sp)
   44924:	04000174 	movhi	r16,5
   44928:	84062604 	addi	r16,r16,6296
   4492c:	dcc00315 	stw	r19,12(sp)
   44930:	2027883a 	mov	r19,r4
   44934:	81000017 	ldw	r4,0(r16)
   44938:	dfc00415 	stw	ra,16(sp)
   4493c:	dc800215 	stw	r18,8(sp)
   44940:	20800e17 	ldw	r2,56(r4)
   44944:	dc400115 	stw	r17,4(sp)
   44948:	1000021e 	bne	r2,zero,44954 <__sfp+0x38>
   4494c:	00447100 	call	44710 <__sinit.part.1>
   44950:	81000017 	ldw	r4,0(r16)
   44954:	2480b804 	addi	r18,r4,736
   44958:	047fffc4 	movi	r17,-1
   4495c:	91000117 	ldw	r4,4(r18)
   44960:	94000217 	ldw	r16,8(r18)
   44964:	213fffc4 	addi	r4,r4,-1
   44968:	20000a16 	blt	r4,zero,44994 <__sfp+0x78>
   4496c:	8080030f 	ldh	r2,12(r16)
   44970:	10000c26 	beq	r2,zero,449a4 <__sfp+0x88>
   44974:	80c01d04 	addi	r3,r16,116
   44978:	00000206 	br	44984 <__sfp+0x68>
   4497c:	18bfe60f 	ldh	r2,-104(r3)
   44980:	10000826 	beq	r2,zero,449a4 <__sfp+0x88>
   44984:	213fffc4 	addi	r4,r4,-1
   44988:	1c3ffd04 	addi	r16,r3,-12
   4498c:	18c01a04 	addi	r3,r3,104
   44990:	247ffa1e 	bne	r4,r17,4497c <__alt_data_end+0xfffe497c>
   44994:	90800017 	ldw	r2,0(r18)
   44998:	10001d26 	beq	r2,zero,44a10 <__sfp+0xf4>
   4499c:	1025883a 	mov	r18,r2
   449a0:	003fee06 	br	4495c <__alt_data_end+0xfffe495c>
   449a4:	00bfffc4 	movi	r2,-1
   449a8:	8080038d 	sth	r2,14(r16)
   449ac:	00800044 	movi	r2,1
   449b0:	8080030d 	sth	r2,12(r16)
   449b4:	80001915 	stw	zero,100(r16)
   449b8:	80000015 	stw	zero,0(r16)
   449bc:	80000215 	stw	zero,8(r16)
   449c0:	80000115 	stw	zero,4(r16)
   449c4:	80000415 	stw	zero,16(r16)
   449c8:	80000515 	stw	zero,20(r16)
   449cc:	80000615 	stw	zero,24(r16)
   449d0:	01800204 	movi	r6,8
   449d4:	000b883a 	mov	r5,zero
   449d8:	81001704 	addi	r4,r16,92
   449dc:	0045d280 	call	45d28 <memset>
   449e0:	8005883a 	mov	r2,r16
   449e4:	80000c15 	stw	zero,48(r16)
   449e8:	80000d15 	stw	zero,52(r16)
   449ec:	80001115 	stw	zero,68(r16)
   449f0:	80001215 	stw	zero,72(r16)
   449f4:	dfc00417 	ldw	ra,16(sp)
   449f8:	dcc00317 	ldw	r19,12(sp)
   449fc:	dc800217 	ldw	r18,8(sp)
   44a00:	dc400117 	ldw	r17,4(sp)
   44a04:	dc000017 	ldw	r16,0(sp)
   44a08:	dec00504 	addi	sp,sp,20
   44a0c:	f800283a 	ret
   44a10:	01400104 	movi	r5,4
   44a14:	9809883a 	mov	r4,r19
   44a18:	00448b40 	call	448b4 <__sfmoreglue>
   44a1c:	90800015 	stw	r2,0(r18)
   44a20:	103fde1e 	bne	r2,zero,4499c <__alt_data_end+0xfffe499c>
   44a24:	00800304 	movi	r2,12
   44a28:	98800015 	stw	r2,0(r19)
   44a2c:	0005883a 	mov	r2,zero
   44a30:	003ff006 	br	449f4 <__alt_data_end+0xfffe49f4>

00044a34 <_cleanup>:
   44a34:	00800174 	movhi	r2,5
   44a38:	10862604 	addi	r2,r2,6296
   44a3c:	11000017 	ldw	r4,0(r2)
   44a40:	01400174 	movhi	r5,5
   44a44:	29626104 	addi	r5,r5,-30332
   44a48:	0044f941 	jmpi	44f94 <_fwalk_reent>

00044a4c <__sinit>:
   44a4c:	20800e17 	ldw	r2,56(r4)
   44a50:	10000126 	beq	r2,zero,44a58 <__sinit+0xc>
   44a54:	f800283a 	ret
   44a58:	00447101 	jmpi	44710 <__sinit.part.1>

00044a5c <__sfp_lock_acquire>:
   44a5c:	f800283a 	ret

00044a60 <__sfp_lock_release>:
   44a60:	f800283a 	ret

00044a64 <__sinit_lock_acquire>:
   44a64:	f800283a 	ret

00044a68 <__sinit_lock_release>:
   44a68:	f800283a 	ret

00044a6c <__fp_lock_all>:
   44a6c:	00800174 	movhi	r2,5
   44a70:	10862704 	addi	r2,r2,6300
   44a74:	11000017 	ldw	r4,0(r2)
   44a78:	01400134 	movhi	r5,4
   44a7c:	29522b04 	addi	r5,r5,18604
   44a80:	0044ed01 	jmpi	44ed0 <_fwalk>

00044a84 <__fp_unlock_all>:
   44a84:	00800174 	movhi	r2,5
   44a88:	10862704 	addi	r2,r2,6300
   44a8c:	11000017 	ldw	r4,0(r2)
   44a90:	01400134 	movhi	r5,4
   44a94:	2951bf04 	addi	r5,r5,18172
   44a98:	0044ed01 	jmpi	44ed0 <_fwalk>

00044a9c <_malloc_trim_r>:
   44a9c:	defffb04 	addi	sp,sp,-20
   44aa0:	dcc00315 	stw	r19,12(sp)
   44aa4:	04c00174 	movhi	r19,5
   44aa8:	dc800215 	stw	r18,8(sp)
   44aac:	dc400115 	stw	r17,4(sp)
   44ab0:	dc000015 	stw	r16,0(sp)
   44ab4:	dfc00415 	stw	ra,16(sp)
   44ab8:	2821883a 	mov	r16,r5
   44abc:	9cc0a204 	addi	r19,r19,648
   44ac0:	2025883a 	mov	r18,r4
   44ac4:	004d7a40 	call	4d7a4 <__malloc_lock>
   44ac8:	98800217 	ldw	r2,8(r19)
   44acc:	14400117 	ldw	r17,4(r2)
   44ad0:	00bfff04 	movi	r2,-4
   44ad4:	88a2703a 	and	r17,r17,r2
   44ad8:	8c21c83a 	sub	r16,r17,r16
   44adc:	8403fbc4 	addi	r16,r16,4079
   44ae0:	8020d33a 	srli	r16,r16,12
   44ae4:	0083ffc4 	movi	r2,4095
   44ae8:	843fffc4 	addi	r16,r16,-1
   44aec:	8020933a 	slli	r16,r16,12
   44af0:	1400060e 	bge	r2,r16,44b0c <_malloc_trim_r+0x70>
   44af4:	000b883a 	mov	r5,zero
   44af8:	9009883a 	mov	r4,r18
   44afc:	0046ec00 	call	46ec0 <_sbrk_r>
   44b00:	98c00217 	ldw	r3,8(r19)
   44b04:	1c47883a 	add	r3,r3,r17
   44b08:	10c00a26 	beq	r2,r3,44b34 <_malloc_trim_r+0x98>
   44b0c:	9009883a 	mov	r4,r18
   44b10:	004d7c80 	call	4d7c8 <__malloc_unlock>
   44b14:	0005883a 	mov	r2,zero
   44b18:	dfc00417 	ldw	ra,16(sp)
   44b1c:	dcc00317 	ldw	r19,12(sp)
   44b20:	dc800217 	ldw	r18,8(sp)
   44b24:	dc400117 	ldw	r17,4(sp)
   44b28:	dc000017 	ldw	r16,0(sp)
   44b2c:	dec00504 	addi	sp,sp,20
   44b30:	f800283a 	ret
   44b34:	040bc83a 	sub	r5,zero,r16
   44b38:	9009883a 	mov	r4,r18
   44b3c:	0046ec00 	call	46ec0 <_sbrk_r>
   44b40:	00ffffc4 	movi	r3,-1
   44b44:	10c00d26 	beq	r2,r3,44b7c <_malloc_trim_r+0xe0>
   44b48:	00c00174 	movhi	r3,5
   44b4c:	18cd0104 	addi	r3,r3,13316
   44b50:	18800017 	ldw	r2,0(r3)
   44b54:	99000217 	ldw	r4,8(r19)
   44b58:	8c23c83a 	sub	r17,r17,r16
   44b5c:	8c400054 	ori	r17,r17,1
   44b60:	1421c83a 	sub	r16,r2,r16
   44b64:	24400115 	stw	r17,4(r4)
   44b68:	9009883a 	mov	r4,r18
   44b6c:	1c000015 	stw	r16,0(r3)
   44b70:	004d7c80 	call	4d7c8 <__malloc_unlock>
   44b74:	00800044 	movi	r2,1
   44b78:	003fe706 	br	44b18 <__alt_data_end+0xfffe4b18>
   44b7c:	000b883a 	mov	r5,zero
   44b80:	9009883a 	mov	r4,r18
   44b84:	0046ec00 	call	46ec0 <_sbrk_r>
   44b88:	99000217 	ldw	r4,8(r19)
   44b8c:	014003c4 	movi	r5,15
   44b90:	1107c83a 	sub	r3,r2,r4
   44b94:	28ffdd0e 	bge	r5,r3,44b0c <__alt_data_end+0xfffe4b0c>
   44b98:	01400174 	movhi	r5,5
   44b9c:	29462904 	addi	r5,r5,6308
   44ba0:	29400017 	ldw	r5,0(r5)
   44ba4:	18c00054 	ori	r3,r3,1
   44ba8:	20c00115 	stw	r3,4(r4)
   44bac:	00c00174 	movhi	r3,5
   44bb0:	1145c83a 	sub	r2,r2,r5
   44bb4:	18cd0104 	addi	r3,r3,13316
   44bb8:	18800015 	stw	r2,0(r3)
   44bbc:	003fd306 	br	44b0c <__alt_data_end+0xfffe4b0c>

00044bc0 <_free_r>:
   44bc0:	28004126 	beq	r5,zero,44cc8 <_free_r+0x108>
   44bc4:	defffd04 	addi	sp,sp,-12
   44bc8:	dc400115 	stw	r17,4(sp)
   44bcc:	dc000015 	stw	r16,0(sp)
   44bd0:	2023883a 	mov	r17,r4
   44bd4:	2821883a 	mov	r16,r5
   44bd8:	dfc00215 	stw	ra,8(sp)
   44bdc:	004d7a40 	call	4d7a4 <__malloc_lock>
   44be0:	81ffff17 	ldw	r7,-4(r16)
   44be4:	00bfff84 	movi	r2,-2
   44be8:	01000174 	movhi	r4,5
   44bec:	81bffe04 	addi	r6,r16,-8
   44bf0:	3884703a 	and	r2,r7,r2
   44bf4:	2100a204 	addi	r4,r4,648
   44bf8:	308b883a 	add	r5,r6,r2
   44bfc:	2a400117 	ldw	r9,4(r5)
   44c00:	22000217 	ldw	r8,8(r4)
   44c04:	00ffff04 	movi	r3,-4
   44c08:	48c6703a 	and	r3,r9,r3
   44c0c:	2a005726 	beq	r5,r8,44d6c <_free_r+0x1ac>
   44c10:	28c00115 	stw	r3,4(r5)
   44c14:	39c0004c 	andi	r7,r7,1
   44c18:	3800091e 	bne	r7,zero,44c40 <_free_r+0x80>
   44c1c:	823ffe17 	ldw	r8,-8(r16)
   44c20:	22400204 	addi	r9,r4,8
   44c24:	320dc83a 	sub	r6,r6,r8
   44c28:	31c00217 	ldw	r7,8(r6)
   44c2c:	1205883a 	add	r2,r2,r8
   44c30:	3a406526 	beq	r7,r9,44dc8 <_free_r+0x208>
   44c34:	32000317 	ldw	r8,12(r6)
   44c38:	3a000315 	stw	r8,12(r7)
   44c3c:	41c00215 	stw	r7,8(r8)
   44c40:	28cf883a 	add	r7,r5,r3
   44c44:	39c00117 	ldw	r7,4(r7)
   44c48:	39c0004c 	andi	r7,r7,1
   44c4c:	38003a26 	beq	r7,zero,44d38 <_free_r+0x178>
   44c50:	10c00054 	ori	r3,r2,1
   44c54:	30c00115 	stw	r3,4(r6)
   44c58:	3087883a 	add	r3,r6,r2
   44c5c:	18800015 	stw	r2,0(r3)
   44c60:	00c07fc4 	movi	r3,511
   44c64:	18801936 	bltu	r3,r2,44ccc <_free_r+0x10c>
   44c68:	1004d0fa 	srli	r2,r2,3
   44c6c:	01c00044 	movi	r7,1
   44c70:	21400117 	ldw	r5,4(r4)
   44c74:	10c00044 	addi	r3,r2,1
   44c78:	18c7883a 	add	r3,r3,r3
   44c7c:	1005d0ba 	srai	r2,r2,2
   44c80:	18c7883a 	add	r3,r3,r3
   44c84:	18c7883a 	add	r3,r3,r3
   44c88:	1907883a 	add	r3,r3,r4
   44c8c:	3884983a 	sll	r2,r7,r2
   44c90:	19c00017 	ldw	r7,0(r3)
   44c94:	1a3ffe04 	addi	r8,r3,-8
   44c98:	1144b03a 	or	r2,r2,r5
   44c9c:	32000315 	stw	r8,12(r6)
   44ca0:	31c00215 	stw	r7,8(r6)
   44ca4:	20800115 	stw	r2,4(r4)
   44ca8:	19800015 	stw	r6,0(r3)
   44cac:	39800315 	stw	r6,12(r7)
   44cb0:	8809883a 	mov	r4,r17
   44cb4:	dfc00217 	ldw	ra,8(sp)
   44cb8:	dc400117 	ldw	r17,4(sp)
   44cbc:	dc000017 	ldw	r16,0(sp)
   44cc0:	dec00304 	addi	sp,sp,12
   44cc4:	004d7c81 	jmpi	4d7c8 <__malloc_unlock>
   44cc8:	f800283a 	ret
   44ccc:	100ad27a 	srli	r5,r2,9
   44cd0:	00c00104 	movi	r3,4
   44cd4:	19404a36 	bltu	r3,r5,44e00 <_free_r+0x240>
   44cd8:	100ad1ba 	srli	r5,r2,6
   44cdc:	28c00e44 	addi	r3,r5,57
   44ce0:	18c7883a 	add	r3,r3,r3
   44ce4:	29400e04 	addi	r5,r5,56
   44ce8:	18c7883a 	add	r3,r3,r3
   44cec:	18c7883a 	add	r3,r3,r3
   44cf0:	1909883a 	add	r4,r3,r4
   44cf4:	20c00017 	ldw	r3,0(r4)
   44cf8:	01c00174 	movhi	r7,5
   44cfc:	213ffe04 	addi	r4,r4,-8
   44d00:	39c0a204 	addi	r7,r7,648
   44d04:	20c04426 	beq	r4,r3,44e18 <_free_r+0x258>
   44d08:	01ffff04 	movi	r7,-4
   44d0c:	19400117 	ldw	r5,4(r3)
   44d10:	29ca703a 	and	r5,r5,r7
   44d14:	1140022e 	bgeu	r2,r5,44d20 <_free_r+0x160>
   44d18:	18c00217 	ldw	r3,8(r3)
   44d1c:	20fffb1e 	bne	r4,r3,44d0c <__alt_data_end+0xfffe4d0c>
   44d20:	19000317 	ldw	r4,12(r3)
   44d24:	31000315 	stw	r4,12(r6)
   44d28:	30c00215 	stw	r3,8(r6)
   44d2c:	21800215 	stw	r6,8(r4)
   44d30:	19800315 	stw	r6,12(r3)
   44d34:	003fde06 	br	44cb0 <__alt_data_end+0xfffe4cb0>
   44d38:	29c00217 	ldw	r7,8(r5)
   44d3c:	10c5883a 	add	r2,r2,r3
   44d40:	00c00174 	movhi	r3,5
   44d44:	18c0a404 	addi	r3,r3,656
   44d48:	38c03b26 	beq	r7,r3,44e38 <_free_r+0x278>
   44d4c:	2a000317 	ldw	r8,12(r5)
   44d50:	11400054 	ori	r5,r2,1
   44d54:	3087883a 	add	r3,r6,r2
   44d58:	3a000315 	stw	r8,12(r7)
   44d5c:	41c00215 	stw	r7,8(r8)
   44d60:	31400115 	stw	r5,4(r6)
   44d64:	18800015 	stw	r2,0(r3)
   44d68:	003fbd06 	br	44c60 <__alt_data_end+0xfffe4c60>
   44d6c:	39c0004c 	andi	r7,r7,1
   44d70:	10c5883a 	add	r2,r2,r3
   44d74:	3800071e 	bne	r7,zero,44d94 <_free_r+0x1d4>
   44d78:	81fffe17 	ldw	r7,-8(r16)
   44d7c:	31cdc83a 	sub	r6,r6,r7
   44d80:	30c00317 	ldw	r3,12(r6)
   44d84:	31400217 	ldw	r5,8(r6)
   44d88:	11c5883a 	add	r2,r2,r7
   44d8c:	28c00315 	stw	r3,12(r5)
   44d90:	19400215 	stw	r5,8(r3)
   44d94:	10c00054 	ori	r3,r2,1
   44d98:	30c00115 	stw	r3,4(r6)
   44d9c:	00c00174 	movhi	r3,5
   44da0:	18c62a04 	addi	r3,r3,6312
   44da4:	18c00017 	ldw	r3,0(r3)
   44da8:	21800215 	stw	r6,8(r4)
   44dac:	10ffc036 	bltu	r2,r3,44cb0 <__alt_data_end+0xfffe4cb0>
   44db0:	00800174 	movhi	r2,5
   44db4:	108cf804 	addi	r2,r2,13280
   44db8:	11400017 	ldw	r5,0(r2)
   44dbc:	8809883a 	mov	r4,r17
   44dc0:	0044a9c0 	call	44a9c <_malloc_trim_r>
   44dc4:	003fba06 	br	44cb0 <__alt_data_end+0xfffe4cb0>
   44dc8:	28c9883a 	add	r4,r5,r3
   44dcc:	21000117 	ldw	r4,4(r4)
   44dd0:	2100004c 	andi	r4,r4,1
   44dd4:	2000391e 	bne	r4,zero,44ebc <_free_r+0x2fc>
   44dd8:	29c00217 	ldw	r7,8(r5)
   44ddc:	29000317 	ldw	r4,12(r5)
   44de0:	1885883a 	add	r2,r3,r2
   44de4:	10c00054 	ori	r3,r2,1
   44de8:	39000315 	stw	r4,12(r7)
   44dec:	21c00215 	stw	r7,8(r4)
   44df0:	30c00115 	stw	r3,4(r6)
   44df4:	308d883a 	add	r6,r6,r2
   44df8:	30800015 	stw	r2,0(r6)
   44dfc:	003fac06 	br	44cb0 <__alt_data_end+0xfffe4cb0>
   44e00:	00c00504 	movi	r3,20
   44e04:	19401536 	bltu	r3,r5,44e5c <_free_r+0x29c>
   44e08:	28c01704 	addi	r3,r5,92
   44e0c:	18c7883a 	add	r3,r3,r3
   44e10:	294016c4 	addi	r5,r5,91
   44e14:	003fb406 	br	44ce8 <__alt_data_end+0xfffe4ce8>
   44e18:	280bd0ba 	srai	r5,r5,2
   44e1c:	00c00044 	movi	r3,1
   44e20:	38800117 	ldw	r2,4(r7)
   44e24:	194a983a 	sll	r5,r3,r5
   44e28:	2007883a 	mov	r3,r4
   44e2c:	2884b03a 	or	r2,r5,r2
   44e30:	38800115 	stw	r2,4(r7)
   44e34:	003fbb06 	br	44d24 <__alt_data_end+0xfffe4d24>
   44e38:	21800515 	stw	r6,20(r4)
   44e3c:	21800415 	stw	r6,16(r4)
   44e40:	10c00054 	ori	r3,r2,1
   44e44:	31c00315 	stw	r7,12(r6)
   44e48:	31c00215 	stw	r7,8(r6)
   44e4c:	30c00115 	stw	r3,4(r6)
   44e50:	308d883a 	add	r6,r6,r2
   44e54:	30800015 	stw	r2,0(r6)
   44e58:	003f9506 	br	44cb0 <__alt_data_end+0xfffe4cb0>
   44e5c:	00c01504 	movi	r3,84
   44e60:	19400536 	bltu	r3,r5,44e78 <_free_r+0x2b8>
   44e64:	100ad33a 	srli	r5,r2,12
   44e68:	28c01bc4 	addi	r3,r5,111
   44e6c:	18c7883a 	add	r3,r3,r3
   44e70:	29401b84 	addi	r5,r5,110
   44e74:	003f9c06 	br	44ce8 <__alt_data_end+0xfffe4ce8>
   44e78:	00c05504 	movi	r3,340
   44e7c:	19400536 	bltu	r3,r5,44e94 <_free_r+0x2d4>
   44e80:	100ad3fa 	srli	r5,r2,15
   44e84:	28c01e04 	addi	r3,r5,120
   44e88:	18c7883a 	add	r3,r3,r3
   44e8c:	29401dc4 	addi	r5,r5,119
   44e90:	003f9506 	br	44ce8 <__alt_data_end+0xfffe4ce8>
   44e94:	00c15504 	movi	r3,1364
   44e98:	19400536 	bltu	r3,r5,44eb0 <_free_r+0x2f0>
   44e9c:	100ad4ba 	srli	r5,r2,18
   44ea0:	28c01f44 	addi	r3,r5,125
   44ea4:	18c7883a 	add	r3,r3,r3
   44ea8:	29401f04 	addi	r5,r5,124
   44eac:	003f8e06 	br	44ce8 <__alt_data_end+0xfffe4ce8>
   44eb0:	00c03f84 	movi	r3,254
   44eb4:	01401f84 	movi	r5,126
   44eb8:	003f8b06 	br	44ce8 <__alt_data_end+0xfffe4ce8>
   44ebc:	10c00054 	ori	r3,r2,1
   44ec0:	30c00115 	stw	r3,4(r6)
   44ec4:	308d883a 	add	r6,r6,r2
   44ec8:	30800015 	stw	r2,0(r6)
   44ecc:	003f7806 	br	44cb0 <__alt_data_end+0xfffe4cb0>

00044ed0 <_fwalk>:
   44ed0:	defff704 	addi	sp,sp,-36
   44ed4:	dd000415 	stw	r20,16(sp)
   44ed8:	dfc00815 	stw	ra,32(sp)
   44edc:	ddc00715 	stw	r23,28(sp)
   44ee0:	dd800615 	stw	r22,24(sp)
   44ee4:	dd400515 	stw	r21,20(sp)
   44ee8:	dcc00315 	stw	r19,12(sp)
   44eec:	dc800215 	stw	r18,8(sp)
   44ef0:	dc400115 	stw	r17,4(sp)
   44ef4:	dc000015 	stw	r16,0(sp)
   44ef8:	2500b804 	addi	r20,r4,736
   44efc:	a0002326 	beq	r20,zero,44f8c <_fwalk+0xbc>
   44f00:	282b883a 	mov	r21,r5
   44f04:	002f883a 	mov	r23,zero
   44f08:	05800044 	movi	r22,1
   44f0c:	04ffffc4 	movi	r19,-1
   44f10:	a4400117 	ldw	r17,4(r20)
   44f14:	a4800217 	ldw	r18,8(r20)
   44f18:	8c7fffc4 	addi	r17,r17,-1
   44f1c:	88000d16 	blt	r17,zero,44f54 <_fwalk+0x84>
   44f20:	94000304 	addi	r16,r18,12
   44f24:	94800384 	addi	r18,r18,14
   44f28:	8080000b 	ldhu	r2,0(r16)
   44f2c:	8c7fffc4 	addi	r17,r17,-1
   44f30:	813ffd04 	addi	r4,r16,-12
   44f34:	b080042e 	bgeu	r22,r2,44f48 <_fwalk+0x78>
   44f38:	9080000f 	ldh	r2,0(r18)
   44f3c:	14c00226 	beq	r2,r19,44f48 <_fwalk+0x78>
   44f40:	a83ee83a 	callr	r21
   44f44:	b8aeb03a 	or	r23,r23,r2
   44f48:	84001a04 	addi	r16,r16,104
   44f4c:	94801a04 	addi	r18,r18,104
   44f50:	8cfff51e 	bne	r17,r19,44f28 <__alt_data_end+0xfffe4f28>
   44f54:	a5000017 	ldw	r20,0(r20)
   44f58:	a03fed1e 	bne	r20,zero,44f10 <__alt_data_end+0xfffe4f10>
   44f5c:	b805883a 	mov	r2,r23
   44f60:	dfc00817 	ldw	ra,32(sp)
   44f64:	ddc00717 	ldw	r23,28(sp)
   44f68:	dd800617 	ldw	r22,24(sp)
   44f6c:	dd400517 	ldw	r21,20(sp)
   44f70:	dd000417 	ldw	r20,16(sp)
   44f74:	dcc00317 	ldw	r19,12(sp)
   44f78:	dc800217 	ldw	r18,8(sp)
   44f7c:	dc400117 	ldw	r17,4(sp)
   44f80:	dc000017 	ldw	r16,0(sp)
   44f84:	dec00904 	addi	sp,sp,36
   44f88:	f800283a 	ret
   44f8c:	002f883a 	mov	r23,zero
   44f90:	003ff206 	br	44f5c <__alt_data_end+0xfffe4f5c>

00044f94 <_fwalk_reent>:
   44f94:	defff704 	addi	sp,sp,-36
   44f98:	dd000415 	stw	r20,16(sp)
   44f9c:	dfc00815 	stw	ra,32(sp)
   44fa0:	ddc00715 	stw	r23,28(sp)
   44fa4:	dd800615 	stw	r22,24(sp)
   44fa8:	dd400515 	stw	r21,20(sp)
   44fac:	dcc00315 	stw	r19,12(sp)
   44fb0:	dc800215 	stw	r18,8(sp)
   44fb4:	dc400115 	stw	r17,4(sp)
   44fb8:	dc000015 	stw	r16,0(sp)
   44fbc:	2500b804 	addi	r20,r4,736
   44fc0:	a0002326 	beq	r20,zero,45050 <_fwalk_reent+0xbc>
   44fc4:	282b883a 	mov	r21,r5
   44fc8:	2027883a 	mov	r19,r4
   44fcc:	002f883a 	mov	r23,zero
   44fd0:	05800044 	movi	r22,1
   44fd4:	04bfffc4 	movi	r18,-1
   44fd8:	a4400117 	ldw	r17,4(r20)
   44fdc:	a4000217 	ldw	r16,8(r20)
   44fe0:	8c7fffc4 	addi	r17,r17,-1
   44fe4:	88000c16 	blt	r17,zero,45018 <_fwalk_reent+0x84>
   44fe8:	84000304 	addi	r16,r16,12
   44fec:	8080000b 	ldhu	r2,0(r16)
   44ff0:	8c7fffc4 	addi	r17,r17,-1
   44ff4:	817ffd04 	addi	r5,r16,-12
   44ff8:	b080052e 	bgeu	r22,r2,45010 <_fwalk_reent+0x7c>
   44ffc:	8080008f 	ldh	r2,2(r16)
   45000:	9809883a 	mov	r4,r19
   45004:	14800226 	beq	r2,r18,45010 <_fwalk_reent+0x7c>
   45008:	a83ee83a 	callr	r21
   4500c:	b8aeb03a 	or	r23,r23,r2
   45010:	84001a04 	addi	r16,r16,104
   45014:	8cbff51e 	bne	r17,r18,44fec <__alt_data_end+0xfffe4fec>
   45018:	a5000017 	ldw	r20,0(r20)
   4501c:	a03fee1e 	bne	r20,zero,44fd8 <__alt_data_end+0xfffe4fd8>
   45020:	b805883a 	mov	r2,r23
   45024:	dfc00817 	ldw	ra,32(sp)
   45028:	ddc00717 	ldw	r23,28(sp)
   4502c:	dd800617 	ldw	r22,24(sp)
   45030:	dd400517 	ldw	r21,20(sp)
   45034:	dd000417 	ldw	r20,16(sp)
   45038:	dcc00317 	ldw	r19,12(sp)
   4503c:	dc800217 	ldw	r18,8(sp)
   45040:	dc400117 	ldw	r17,4(sp)
   45044:	dc000017 	ldw	r16,0(sp)
   45048:	dec00904 	addi	sp,sp,36
   4504c:	f800283a 	ret
   45050:	002f883a 	mov	r23,zero
   45054:	003ff206 	br	45020 <__alt_data_end+0xfffe5020>

00045058 <_setlocale_r>:
   45058:	30001b26 	beq	r6,zero,450c8 <_setlocale_r+0x70>
   4505c:	01400174 	movhi	r5,5
   45060:	defffe04 	addi	sp,sp,-8
   45064:	297eda04 	addi	r5,r5,-1176
   45068:	3009883a 	mov	r4,r6
   4506c:	dc000015 	stw	r16,0(sp)
   45070:	dfc00115 	stw	ra,4(sp)
   45074:	3021883a 	mov	r16,r6
   45078:	00470500 	call	47050 <strcmp>
   4507c:	1000061e 	bne	r2,zero,45098 <_setlocale_r+0x40>
   45080:	00800174 	movhi	r2,5
   45084:	10bed904 	addi	r2,r2,-1180
   45088:	dfc00117 	ldw	ra,4(sp)
   4508c:	dc000017 	ldw	r16,0(sp)
   45090:	dec00204 	addi	sp,sp,8
   45094:	f800283a 	ret
   45098:	01400174 	movhi	r5,5
   4509c:	297ed904 	addi	r5,r5,-1180
   450a0:	8009883a 	mov	r4,r16
   450a4:	00470500 	call	47050 <strcmp>
   450a8:	103ff526 	beq	r2,zero,45080 <__alt_data_end+0xfffe5080>
   450ac:	01400174 	movhi	r5,5
   450b0:	297ec404 	addi	r5,r5,-1264
   450b4:	8009883a 	mov	r4,r16
   450b8:	00470500 	call	47050 <strcmp>
   450bc:	103ff026 	beq	r2,zero,45080 <__alt_data_end+0xfffe5080>
   450c0:	0005883a 	mov	r2,zero
   450c4:	003ff006 	br	45088 <__alt_data_end+0xfffe5088>
   450c8:	00800174 	movhi	r2,5
   450cc:	10bed904 	addi	r2,r2,-1180
   450d0:	f800283a 	ret

000450d4 <__locale_charset>:
   450d4:	00800174 	movhi	r2,5
   450d8:	10808c04 	addi	r2,r2,560
   450dc:	f800283a 	ret

000450e0 <__locale_mb_cur_max>:
   450e0:	00800174 	movhi	r2,5
   450e4:	10862804 	addi	r2,r2,6304
   450e8:	10800017 	ldw	r2,0(r2)
   450ec:	f800283a 	ret

000450f0 <__locale_msgcharset>:
   450f0:	00800174 	movhi	r2,5
   450f4:	10808404 	addi	r2,r2,528
   450f8:	f800283a 	ret

000450fc <__locale_cjk_lang>:
   450fc:	0005883a 	mov	r2,zero
   45100:	f800283a 	ret

00045104 <_localeconv_r>:
   45104:	00800174 	movhi	r2,5
   45108:	10809404 	addi	r2,r2,592
   4510c:	f800283a 	ret

00045110 <setlocale>:
   45110:	00800174 	movhi	r2,5
   45114:	10862704 	addi	r2,r2,6300
   45118:	280d883a 	mov	r6,r5
   4511c:	200b883a 	mov	r5,r4
   45120:	11000017 	ldw	r4,0(r2)
   45124:	00450581 	jmpi	45058 <_setlocale_r>

00045128 <localeconv>:
   45128:	00800174 	movhi	r2,5
   4512c:	10809404 	addi	r2,r2,592
   45130:	f800283a 	ret

00045134 <__smakebuf_r>:
   45134:	2880030b 	ldhu	r2,12(r5)
   45138:	10c0008c 	andi	r3,r2,2
   4513c:	1800411e 	bne	r3,zero,45244 <__smakebuf_r+0x110>
   45140:	deffec04 	addi	sp,sp,-80
   45144:	dc000f15 	stw	r16,60(sp)
   45148:	2821883a 	mov	r16,r5
   4514c:	2940038f 	ldh	r5,14(r5)
   45150:	dc401015 	stw	r17,64(sp)
   45154:	dfc01315 	stw	ra,76(sp)
   45158:	dcc01215 	stw	r19,72(sp)
   4515c:	dc801115 	stw	r18,68(sp)
   45160:	2023883a 	mov	r17,r4
   45164:	28001c16 	blt	r5,zero,451d8 <__smakebuf_r+0xa4>
   45168:	d80d883a 	mov	r6,sp
   4516c:	0048c900 	call	48c90 <_fstat_r>
   45170:	10001816 	blt	r2,zero,451d4 <__smakebuf_r+0xa0>
   45174:	d8800117 	ldw	r2,4(sp)
   45178:	00e00014 	movui	r3,32768
   4517c:	10bc000c 	andi	r2,r2,61440
   45180:	14c80020 	cmpeqi	r19,r2,8192
   45184:	10c03726 	beq	r2,r3,45264 <__smakebuf_r+0x130>
   45188:	80c0030b 	ldhu	r3,12(r16)
   4518c:	18c20014 	ori	r3,r3,2048
   45190:	80c0030d 	sth	r3,12(r16)
   45194:	00c80004 	movi	r3,8192
   45198:	10c0521e 	bne	r2,r3,452e4 <__smakebuf_r+0x1b0>
   4519c:	8140038f 	ldh	r5,14(r16)
   451a0:	8809883a 	mov	r4,r17
   451a4:	00491a80 	call	491a8 <_isatty_r>
   451a8:	10004c26 	beq	r2,zero,452dc <__smakebuf_r+0x1a8>
   451ac:	8080030b 	ldhu	r2,12(r16)
   451b0:	80c010c4 	addi	r3,r16,67
   451b4:	80c00015 	stw	r3,0(r16)
   451b8:	10800054 	ori	r2,r2,1
   451bc:	8080030d 	sth	r2,12(r16)
   451c0:	00800044 	movi	r2,1
   451c4:	80c00415 	stw	r3,16(r16)
   451c8:	80800515 	stw	r2,20(r16)
   451cc:	04810004 	movi	r18,1024
   451d0:	00000706 	br	451f0 <__smakebuf_r+0xbc>
   451d4:	8080030b 	ldhu	r2,12(r16)
   451d8:	10c0200c 	andi	r3,r2,128
   451dc:	18001f1e 	bne	r3,zero,4525c <__smakebuf_r+0x128>
   451e0:	04810004 	movi	r18,1024
   451e4:	10820014 	ori	r2,r2,2048
   451e8:	8080030d 	sth	r2,12(r16)
   451ec:	0027883a 	mov	r19,zero
   451f0:	900b883a 	mov	r5,r18
   451f4:	8809883a 	mov	r4,r17
   451f8:	00452f00 	call	452f0 <_malloc_r>
   451fc:	10002c26 	beq	r2,zero,452b0 <__smakebuf_r+0x17c>
   45200:	80c0030b 	ldhu	r3,12(r16)
   45204:	01000134 	movhi	r4,4
   45208:	2111c104 	addi	r4,r4,18180
   4520c:	89000f15 	stw	r4,60(r17)
   45210:	18c02014 	ori	r3,r3,128
   45214:	80c0030d 	sth	r3,12(r16)
   45218:	80800015 	stw	r2,0(r16)
   4521c:	80800415 	stw	r2,16(r16)
   45220:	84800515 	stw	r18,20(r16)
   45224:	98001a1e 	bne	r19,zero,45290 <__smakebuf_r+0x15c>
   45228:	dfc01317 	ldw	ra,76(sp)
   4522c:	dcc01217 	ldw	r19,72(sp)
   45230:	dc801117 	ldw	r18,68(sp)
   45234:	dc401017 	ldw	r17,64(sp)
   45238:	dc000f17 	ldw	r16,60(sp)
   4523c:	dec01404 	addi	sp,sp,80
   45240:	f800283a 	ret
   45244:	288010c4 	addi	r2,r5,67
   45248:	28800015 	stw	r2,0(r5)
   4524c:	28800415 	stw	r2,16(r5)
   45250:	00800044 	movi	r2,1
   45254:	28800515 	stw	r2,20(r5)
   45258:	f800283a 	ret
   4525c:	04801004 	movi	r18,64
   45260:	003fe006 	br	451e4 <__alt_data_end+0xfffe51e4>
   45264:	81000a17 	ldw	r4,40(r16)
   45268:	00c00134 	movhi	r3,4
   4526c:	18dbfb04 	addi	r3,r3,28652
   45270:	20ffc51e 	bne	r4,r3,45188 <__alt_data_end+0xfffe5188>
   45274:	8080030b 	ldhu	r2,12(r16)
   45278:	04810004 	movi	r18,1024
   4527c:	84801315 	stw	r18,76(r16)
   45280:	1484b03a 	or	r2,r2,r18
   45284:	8080030d 	sth	r2,12(r16)
   45288:	0027883a 	mov	r19,zero
   4528c:	003fd806 	br	451f0 <__alt_data_end+0xfffe51f0>
   45290:	8140038f 	ldh	r5,14(r16)
   45294:	8809883a 	mov	r4,r17
   45298:	00491a80 	call	491a8 <_isatty_r>
   4529c:	103fe226 	beq	r2,zero,45228 <__alt_data_end+0xfffe5228>
   452a0:	8080030b 	ldhu	r2,12(r16)
   452a4:	10800054 	ori	r2,r2,1
   452a8:	8080030d 	sth	r2,12(r16)
   452ac:	003fde06 	br	45228 <__alt_data_end+0xfffe5228>
   452b0:	8080030b 	ldhu	r2,12(r16)
   452b4:	10c0800c 	andi	r3,r2,512
   452b8:	183fdb1e 	bne	r3,zero,45228 <__alt_data_end+0xfffe5228>
   452bc:	10800094 	ori	r2,r2,2
   452c0:	80c010c4 	addi	r3,r16,67
   452c4:	8080030d 	sth	r2,12(r16)
   452c8:	00800044 	movi	r2,1
   452cc:	80c00015 	stw	r3,0(r16)
   452d0:	80c00415 	stw	r3,16(r16)
   452d4:	80800515 	stw	r2,20(r16)
   452d8:	003fd306 	br	45228 <__alt_data_end+0xfffe5228>
   452dc:	04810004 	movi	r18,1024
   452e0:	003fc306 	br	451f0 <__alt_data_end+0xfffe51f0>
   452e4:	0027883a 	mov	r19,zero
   452e8:	04810004 	movi	r18,1024
   452ec:	003fc006 	br	451f0 <__alt_data_end+0xfffe51f0>

000452f0 <_malloc_r>:
   452f0:	defff504 	addi	sp,sp,-44
   452f4:	dc800315 	stw	r18,12(sp)
   452f8:	dfc00a15 	stw	ra,40(sp)
   452fc:	df000915 	stw	fp,36(sp)
   45300:	ddc00815 	stw	r23,32(sp)
   45304:	dd800715 	stw	r22,28(sp)
   45308:	dd400615 	stw	r21,24(sp)
   4530c:	dd000515 	stw	r20,20(sp)
   45310:	dcc00415 	stw	r19,16(sp)
   45314:	dc400215 	stw	r17,8(sp)
   45318:	dc000115 	stw	r16,4(sp)
   4531c:	288002c4 	addi	r2,r5,11
   45320:	00c00584 	movi	r3,22
   45324:	2025883a 	mov	r18,r4
   45328:	18807f2e 	bgeu	r3,r2,45528 <_malloc_r+0x238>
   4532c:	047ffe04 	movi	r17,-8
   45330:	1462703a 	and	r17,r2,r17
   45334:	8800a316 	blt	r17,zero,455c4 <_malloc_r+0x2d4>
   45338:	8940a236 	bltu	r17,r5,455c4 <_malloc_r+0x2d4>
   4533c:	004d7a40 	call	4d7a4 <__malloc_lock>
   45340:	00807dc4 	movi	r2,503
   45344:	1441e92e 	bgeu	r2,r17,45aec <_malloc_r+0x7fc>
   45348:	8804d27a 	srli	r2,r17,9
   4534c:	1000a126 	beq	r2,zero,455d4 <_malloc_r+0x2e4>
   45350:	00c00104 	movi	r3,4
   45354:	18811e36 	bltu	r3,r2,457d0 <_malloc_r+0x4e0>
   45358:	8804d1ba 	srli	r2,r17,6
   4535c:	12000e44 	addi	r8,r2,57
   45360:	11c00e04 	addi	r7,r2,56
   45364:	4209883a 	add	r4,r8,r8
   45368:	04c00174 	movhi	r19,5
   4536c:	2109883a 	add	r4,r4,r4
   45370:	9cc0a204 	addi	r19,r19,648
   45374:	2109883a 	add	r4,r4,r4
   45378:	9909883a 	add	r4,r19,r4
   4537c:	24000117 	ldw	r16,4(r4)
   45380:	213ffe04 	addi	r4,r4,-8
   45384:	24009726 	beq	r4,r16,455e4 <_malloc_r+0x2f4>
   45388:	80800117 	ldw	r2,4(r16)
   4538c:	01bfff04 	movi	r6,-4
   45390:	014003c4 	movi	r5,15
   45394:	1184703a 	and	r2,r2,r6
   45398:	1447c83a 	sub	r3,r2,r17
   4539c:	28c00716 	blt	r5,r3,453bc <_malloc_r+0xcc>
   453a0:	1800920e 	bge	r3,zero,455ec <_malloc_r+0x2fc>
   453a4:	84000317 	ldw	r16,12(r16)
   453a8:	24008e26 	beq	r4,r16,455e4 <_malloc_r+0x2f4>
   453ac:	80800117 	ldw	r2,4(r16)
   453b0:	1184703a 	and	r2,r2,r6
   453b4:	1447c83a 	sub	r3,r2,r17
   453b8:	28fff90e 	bge	r5,r3,453a0 <__alt_data_end+0xfffe53a0>
   453bc:	3809883a 	mov	r4,r7
   453c0:	01800174 	movhi	r6,5
   453c4:	9c000417 	ldw	r16,16(r19)
   453c8:	3180a204 	addi	r6,r6,648
   453cc:	32000204 	addi	r8,r6,8
   453d0:	82013426 	beq	r16,r8,458a4 <_malloc_r+0x5b4>
   453d4:	80c00117 	ldw	r3,4(r16)
   453d8:	00bfff04 	movi	r2,-4
   453dc:	188e703a 	and	r7,r3,r2
   453e0:	3c45c83a 	sub	r2,r7,r17
   453e4:	00c003c4 	movi	r3,15
   453e8:	18811f16 	blt	r3,r2,45868 <_malloc_r+0x578>
   453ec:	32000515 	stw	r8,20(r6)
   453f0:	32000415 	stw	r8,16(r6)
   453f4:	10007f0e 	bge	r2,zero,455f4 <_malloc_r+0x304>
   453f8:	00807fc4 	movi	r2,511
   453fc:	11c0fd36 	bltu	r2,r7,457f4 <_malloc_r+0x504>
   45400:	3806d0fa 	srli	r3,r7,3
   45404:	01c00044 	movi	r7,1
   45408:	30800117 	ldw	r2,4(r6)
   4540c:	19400044 	addi	r5,r3,1
   45410:	294b883a 	add	r5,r5,r5
   45414:	1807d0ba 	srai	r3,r3,2
   45418:	294b883a 	add	r5,r5,r5
   4541c:	294b883a 	add	r5,r5,r5
   45420:	298b883a 	add	r5,r5,r6
   45424:	38c6983a 	sll	r3,r7,r3
   45428:	29c00017 	ldw	r7,0(r5)
   4542c:	2a7ffe04 	addi	r9,r5,-8
   45430:	1886b03a 	or	r3,r3,r2
   45434:	82400315 	stw	r9,12(r16)
   45438:	81c00215 	stw	r7,8(r16)
   4543c:	30c00115 	stw	r3,4(r6)
   45440:	2c000015 	stw	r16,0(r5)
   45444:	3c000315 	stw	r16,12(r7)
   45448:	2005d0ba 	srai	r2,r4,2
   4544c:	01400044 	movi	r5,1
   45450:	288a983a 	sll	r5,r5,r2
   45454:	19406f36 	bltu	r3,r5,45614 <_malloc_r+0x324>
   45458:	28c4703a 	and	r2,r5,r3
   4545c:	10000a1e 	bne	r2,zero,45488 <_malloc_r+0x198>
   45460:	00bfff04 	movi	r2,-4
   45464:	294b883a 	add	r5,r5,r5
   45468:	2088703a 	and	r4,r4,r2
   4546c:	28c4703a 	and	r2,r5,r3
   45470:	21000104 	addi	r4,r4,4
   45474:	1000041e 	bne	r2,zero,45488 <_malloc_r+0x198>
   45478:	294b883a 	add	r5,r5,r5
   4547c:	28c4703a 	and	r2,r5,r3
   45480:	21000104 	addi	r4,r4,4
   45484:	103ffc26 	beq	r2,zero,45478 <__alt_data_end+0xfffe5478>
   45488:	02bfff04 	movi	r10,-4
   4548c:	024003c4 	movi	r9,15
   45490:	21800044 	addi	r6,r4,1
   45494:	318d883a 	add	r6,r6,r6
   45498:	318d883a 	add	r6,r6,r6
   4549c:	318d883a 	add	r6,r6,r6
   454a0:	998d883a 	add	r6,r19,r6
   454a4:	333ffe04 	addi	r12,r6,-8
   454a8:	2017883a 	mov	r11,r4
   454ac:	31800104 	addi	r6,r6,4
   454b0:	34000017 	ldw	r16,0(r6)
   454b4:	31fffd04 	addi	r7,r6,-12
   454b8:	81c0041e 	bne	r16,r7,454cc <_malloc_r+0x1dc>
   454bc:	0000fb06 	br	458ac <_malloc_r+0x5bc>
   454c0:	1801030e 	bge	r3,zero,458d0 <_malloc_r+0x5e0>
   454c4:	84000317 	ldw	r16,12(r16)
   454c8:	81c0f826 	beq	r16,r7,458ac <_malloc_r+0x5bc>
   454cc:	80800117 	ldw	r2,4(r16)
   454d0:	1284703a 	and	r2,r2,r10
   454d4:	1447c83a 	sub	r3,r2,r17
   454d8:	48fff90e 	bge	r9,r3,454c0 <__alt_data_end+0xfffe54c0>
   454dc:	80800317 	ldw	r2,12(r16)
   454e0:	81000217 	ldw	r4,8(r16)
   454e4:	89400054 	ori	r5,r17,1
   454e8:	81400115 	stw	r5,4(r16)
   454ec:	20800315 	stw	r2,12(r4)
   454f0:	11000215 	stw	r4,8(r2)
   454f4:	8463883a 	add	r17,r16,r17
   454f8:	9c400515 	stw	r17,20(r19)
   454fc:	9c400415 	stw	r17,16(r19)
   45500:	18800054 	ori	r2,r3,1
   45504:	88800115 	stw	r2,4(r17)
   45508:	8a000315 	stw	r8,12(r17)
   4550c:	8a000215 	stw	r8,8(r17)
   45510:	88e3883a 	add	r17,r17,r3
   45514:	88c00015 	stw	r3,0(r17)
   45518:	9009883a 	mov	r4,r18
   4551c:	004d7c80 	call	4d7c8 <__malloc_unlock>
   45520:	80800204 	addi	r2,r16,8
   45524:	00001b06 	br	45594 <_malloc_r+0x2a4>
   45528:	04400404 	movi	r17,16
   4552c:	89402536 	bltu	r17,r5,455c4 <_malloc_r+0x2d4>
   45530:	004d7a40 	call	4d7a4 <__malloc_lock>
   45534:	00800184 	movi	r2,6
   45538:	01000084 	movi	r4,2
   4553c:	04c00174 	movhi	r19,5
   45540:	1085883a 	add	r2,r2,r2
   45544:	9cc0a204 	addi	r19,r19,648
   45548:	1085883a 	add	r2,r2,r2
   4554c:	9885883a 	add	r2,r19,r2
   45550:	14000117 	ldw	r16,4(r2)
   45554:	10fffe04 	addi	r3,r2,-8
   45558:	80c0d926 	beq	r16,r3,458c0 <_malloc_r+0x5d0>
   4555c:	80c00117 	ldw	r3,4(r16)
   45560:	81000317 	ldw	r4,12(r16)
   45564:	00bfff04 	movi	r2,-4
   45568:	1884703a 	and	r2,r3,r2
   4556c:	81400217 	ldw	r5,8(r16)
   45570:	8085883a 	add	r2,r16,r2
   45574:	10c00117 	ldw	r3,4(r2)
   45578:	29000315 	stw	r4,12(r5)
   4557c:	21400215 	stw	r5,8(r4)
   45580:	18c00054 	ori	r3,r3,1
   45584:	10c00115 	stw	r3,4(r2)
   45588:	9009883a 	mov	r4,r18
   4558c:	004d7c80 	call	4d7c8 <__malloc_unlock>
   45590:	80800204 	addi	r2,r16,8
   45594:	dfc00a17 	ldw	ra,40(sp)
   45598:	df000917 	ldw	fp,36(sp)
   4559c:	ddc00817 	ldw	r23,32(sp)
   455a0:	dd800717 	ldw	r22,28(sp)
   455a4:	dd400617 	ldw	r21,24(sp)
   455a8:	dd000517 	ldw	r20,20(sp)
   455ac:	dcc00417 	ldw	r19,16(sp)
   455b0:	dc800317 	ldw	r18,12(sp)
   455b4:	dc400217 	ldw	r17,8(sp)
   455b8:	dc000117 	ldw	r16,4(sp)
   455bc:	dec00b04 	addi	sp,sp,44
   455c0:	f800283a 	ret
   455c4:	00800304 	movi	r2,12
   455c8:	90800015 	stw	r2,0(r18)
   455cc:	0005883a 	mov	r2,zero
   455d0:	003ff006 	br	45594 <__alt_data_end+0xfffe5594>
   455d4:	01002004 	movi	r4,128
   455d8:	02001004 	movi	r8,64
   455dc:	01c00fc4 	movi	r7,63
   455e0:	003f6106 	br	45368 <__alt_data_end+0xfffe5368>
   455e4:	4009883a 	mov	r4,r8
   455e8:	003f7506 	br	453c0 <__alt_data_end+0xfffe53c0>
   455ec:	81000317 	ldw	r4,12(r16)
   455f0:	003fde06 	br	4556c <__alt_data_end+0xfffe556c>
   455f4:	81c5883a 	add	r2,r16,r7
   455f8:	11400117 	ldw	r5,4(r2)
   455fc:	9009883a 	mov	r4,r18
   45600:	29400054 	ori	r5,r5,1
   45604:	11400115 	stw	r5,4(r2)
   45608:	004d7c80 	call	4d7c8 <__malloc_unlock>
   4560c:	80800204 	addi	r2,r16,8
   45610:	003fe006 	br	45594 <__alt_data_end+0xfffe5594>
   45614:	9c000217 	ldw	r16,8(r19)
   45618:	00bfff04 	movi	r2,-4
   4561c:	85800117 	ldw	r22,4(r16)
   45620:	b0ac703a 	and	r22,r22,r2
   45624:	b4400336 	bltu	r22,r17,45634 <_malloc_r+0x344>
   45628:	b445c83a 	sub	r2,r22,r17
   4562c:	00c003c4 	movi	r3,15
   45630:	18805d16 	blt	r3,r2,457a8 <_malloc_r+0x4b8>
   45634:	05c00174 	movhi	r23,5
   45638:	00800174 	movhi	r2,5
   4563c:	108cf804 	addi	r2,r2,13280
   45640:	bdc62904 	addi	r23,r23,6308
   45644:	15400017 	ldw	r21,0(r2)
   45648:	b8c00017 	ldw	r3,0(r23)
   4564c:	00bfffc4 	movi	r2,-1
   45650:	858d883a 	add	r6,r16,r22
   45654:	8d6b883a 	add	r21,r17,r21
   45658:	1880ea26 	beq	r3,r2,45a04 <_malloc_r+0x714>
   4565c:	ad4403c4 	addi	r21,r21,4111
   45660:	00bc0004 	movi	r2,-4096
   45664:	a8aa703a 	and	r21,r21,r2
   45668:	a80b883a 	mov	r5,r21
   4566c:	9009883a 	mov	r4,r18
   45670:	d9800015 	stw	r6,0(sp)
   45674:	0046ec00 	call	46ec0 <_sbrk_r>
   45678:	1029883a 	mov	r20,r2
   4567c:	00bfffc4 	movi	r2,-1
   45680:	d9800017 	ldw	r6,0(sp)
   45684:	a080e826 	beq	r20,r2,45a28 <_malloc_r+0x738>
   45688:	a180a636 	bltu	r20,r6,45924 <_malloc_r+0x634>
   4568c:	07000174 	movhi	fp,5
   45690:	e70d0104 	addi	fp,fp,13316
   45694:	e0800017 	ldw	r2,0(fp)
   45698:	a887883a 	add	r3,r21,r2
   4569c:	e0c00015 	stw	r3,0(fp)
   456a0:	3500e626 	beq	r6,r20,45a3c <_malloc_r+0x74c>
   456a4:	b9000017 	ldw	r4,0(r23)
   456a8:	00bfffc4 	movi	r2,-1
   456ac:	2080ee26 	beq	r4,r2,45a68 <_malloc_r+0x778>
   456b0:	a185c83a 	sub	r2,r20,r6
   456b4:	10c5883a 	add	r2,r2,r3
   456b8:	e0800015 	stw	r2,0(fp)
   456bc:	a0c001cc 	andi	r3,r20,7
   456c0:	1800bc26 	beq	r3,zero,459b4 <_malloc_r+0x6c4>
   456c4:	a0e9c83a 	sub	r20,r20,r3
   456c8:	00840204 	movi	r2,4104
   456cc:	a5000204 	addi	r20,r20,8
   456d0:	10c7c83a 	sub	r3,r2,r3
   456d4:	a545883a 	add	r2,r20,r21
   456d8:	1083ffcc 	andi	r2,r2,4095
   456dc:	18abc83a 	sub	r21,r3,r2
   456e0:	a80b883a 	mov	r5,r21
   456e4:	9009883a 	mov	r4,r18
   456e8:	0046ec00 	call	46ec0 <_sbrk_r>
   456ec:	00ffffc4 	movi	r3,-1
   456f0:	10c0e126 	beq	r2,r3,45a78 <_malloc_r+0x788>
   456f4:	1505c83a 	sub	r2,r2,r20
   456f8:	1545883a 	add	r2,r2,r21
   456fc:	10800054 	ori	r2,r2,1
   45700:	e0c00017 	ldw	r3,0(fp)
   45704:	9d000215 	stw	r20,8(r19)
   45708:	a0800115 	stw	r2,4(r20)
   4570c:	a8c7883a 	add	r3,r21,r3
   45710:	e0c00015 	stw	r3,0(fp)
   45714:	84c00e26 	beq	r16,r19,45750 <_malloc_r+0x460>
   45718:	018003c4 	movi	r6,15
   4571c:	3580a72e 	bgeu	r6,r22,459bc <_malloc_r+0x6cc>
   45720:	81400117 	ldw	r5,4(r16)
   45724:	013ffe04 	movi	r4,-8
   45728:	b0bffd04 	addi	r2,r22,-12
   4572c:	1104703a 	and	r2,r2,r4
   45730:	2900004c 	andi	r4,r5,1
   45734:	2088b03a 	or	r4,r4,r2
   45738:	81000115 	stw	r4,4(r16)
   4573c:	01400144 	movi	r5,5
   45740:	8089883a 	add	r4,r16,r2
   45744:	21400115 	stw	r5,4(r4)
   45748:	21400215 	stw	r5,8(r4)
   4574c:	3080cd36 	bltu	r6,r2,45a84 <_malloc_r+0x794>
   45750:	00800174 	movhi	r2,5
   45754:	108cf704 	addi	r2,r2,13276
   45758:	11000017 	ldw	r4,0(r2)
   4575c:	20c0012e 	bgeu	r4,r3,45764 <_malloc_r+0x474>
   45760:	10c00015 	stw	r3,0(r2)
   45764:	00800174 	movhi	r2,5
   45768:	108cf604 	addi	r2,r2,13272
   4576c:	11000017 	ldw	r4,0(r2)
   45770:	9c000217 	ldw	r16,8(r19)
   45774:	20c0012e 	bgeu	r4,r3,4577c <_malloc_r+0x48c>
   45778:	10c00015 	stw	r3,0(r2)
   4577c:	80c00117 	ldw	r3,4(r16)
   45780:	00bfff04 	movi	r2,-4
   45784:	1886703a 	and	r3,r3,r2
   45788:	1c45c83a 	sub	r2,r3,r17
   4578c:	1c400236 	bltu	r3,r17,45798 <_malloc_r+0x4a8>
   45790:	00c003c4 	movi	r3,15
   45794:	18800416 	blt	r3,r2,457a8 <_malloc_r+0x4b8>
   45798:	9009883a 	mov	r4,r18
   4579c:	004d7c80 	call	4d7c8 <__malloc_unlock>
   457a0:	0005883a 	mov	r2,zero
   457a4:	003f7b06 	br	45594 <__alt_data_end+0xfffe5594>
   457a8:	88c00054 	ori	r3,r17,1
   457ac:	80c00115 	stw	r3,4(r16)
   457b0:	8463883a 	add	r17,r16,r17
   457b4:	10800054 	ori	r2,r2,1
   457b8:	9c400215 	stw	r17,8(r19)
   457bc:	88800115 	stw	r2,4(r17)
   457c0:	9009883a 	mov	r4,r18
   457c4:	004d7c80 	call	4d7c8 <__malloc_unlock>
   457c8:	80800204 	addi	r2,r16,8
   457cc:	003f7106 	br	45594 <__alt_data_end+0xfffe5594>
   457d0:	00c00504 	movi	r3,20
   457d4:	18804a2e 	bgeu	r3,r2,45900 <_malloc_r+0x610>
   457d8:	00c01504 	movi	r3,84
   457dc:	18806e36 	bltu	r3,r2,45998 <_malloc_r+0x6a8>
   457e0:	8804d33a 	srli	r2,r17,12
   457e4:	12001bc4 	addi	r8,r2,111
   457e8:	11c01b84 	addi	r7,r2,110
   457ec:	4209883a 	add	r4,r8,r8
   457f0:	003edd06 	br	45368 <__alt_data_end+0xfffe5368>
   457f4:	3804d27a 	srli	r2,r7,9
   457f8:	00c00104 	movi	r3,4
   457fc:	1880442e 	bgeu	r3,r2,45910 <_malloc_r+0x620>
   45800:	00c00504 	movi	r3,20
   45804:	18808136 	bltu	r3,r2,45a0c <_malloc_r+0x71c>
   45808:	11401704 	addi	r5,r2,92
   4580c:	10c016c4 	addi	r3,r2,91
   45810:	294b883a 	add	r5,r5,r5
   45814:	294b883a 	add	r5,r5,r5
   45818:	294b883a 	add	r5,r5,r5
   4581c:	994b883a 	add	r5,r19,r5
   45820:	28800017 	ldw	r2,0(r5)
   45824:	01800174 	movhi	r6,5
   45828:	297ffe04 	addi	r5,r5,-8
   4582c:	3180a204 	addi	r6,r6,648
   45830:	28806526 	beq	r5,r2,459c8 <_malloc_r+0x6d8>
   45834:	01bfff04 	movi	r6,-4
   45838:	10c00117 	ldw	r3,4(r2)
   4583c:	1986703a 	and	r3,r3,r6
   45840:	38c0022e 	bgeu	r7,r3,4584c <_malloc_r+0x55c>
   45844:	10800217 	ldw	r2,8(r2)
   45848:	28bffb1e 	bne	r5,r2,45838 <__alt_data_end+0xfffe5838>
   4584c:	11400317 	ldw	r5,12(r2)
   45850:	98c00117 	ldw	r3,4(r19)
   45854:	81400315 	stw	r5,12(r16)
   45858:	80800215 	stw	r2,8(r16)
   4585c:	2c000215 	stw	r16,8(r5)
   45860:	14000315 	stw	r16,12(r2)
   45864:	003ef806 	br	45448 <__alt_data_end+0xfffe5448>
   45868:	88c00054 	ori	r3,r17,1
   4586c:	80c00115 	stw	r3,4(r16)
   45870:	8463883a 	add	r17,r16,r17
   45874:	34400515 	stw	r17,20(r6)
   45878:	34400415 	stw	r17,16(r6)
   4587c:	10c00054 	ori	r3,r2,1
   45880:	8a000315 	stw	r8,12(r17)
   45884:	8a000215 	stw	r8,8(r17)
   45888:	88c00115 	stw	r3,4(r17)
   4588c:	88a3883a 	add	r17,r17,r2
   45890:	88800015 	stw	r2,0(r17)
   45894:	9009883a 	mov	r4,r18
   45898:	004d7c80 	call	4d7c8 <__malloc_unlock>
   4589c:	80800204 	addi	r2,r16,8
   458a0:	003f3c06 	br	45594 <__alt_data_end+0xfffe5594>
   458a4:	30c00117 	ldw	r3,4(r6)
   458a8:	003ee706 	br	45448 <__alt_data_end+0xfffe5448>
   458ac:	5ac00044 	addi	r11,r11,1
   458b0:	588000cc 	andi	r2,r11,3
   458b4:	31800204 	addi	r6,r6,8
   458b8:	103efd1e 	bne	r2,zero,454b0 <__alt_data_end+0xfffe54b0>
   458bc:	00002406 	br	45950 <_malloc_r+0x660>
   458c0:	14000317 	ldw	r16,12(r2)
   458c4:	143f251e 	bne	r2,r16,4555c <__alt_data_end+0xfffe555c>
   458c8:	21000084 	addi	r4,r4,2
   458cc:	003ebc06 	br	453c0 <__alt_data_end+0xfffe53c0>
   458d0:	8085883a 	add	r2,r16,r2
   458d4:	10c00117 	ldw	r3,4(r2)
   458d8:	81000317 	ldw	r4,12(r16)
   458dc:	81400217 	ldw	r5,8(r16)
   458e0:	18c00054 	ori	r3,r3,1
   458e4:	10c00115 	stw	r3,4(r2)
   458e8:	29000315 	stw	r4,12(r5)
   458ec:	21400215 	stw	r5,8(r4)
   458f0:	9009883a 	mov	r4,r18
   458f4:	004d7c80 	call	4d7c8 <__malloc_unlock>
   458f8:	80800204 	addi	r2,r16,8
   458fc:	003f2506 	br	45594 <__alt_data_end+0xfffe5594>
   45900:	12001704 	addi	r8,r2,92
   45904:	11c016c4 	addi	r7,r2,91
   45908:	4209883a 	add	r4,r8,r8
   4590c:	003e9606 	br	45368 <__alt_data_end+0xfffe5368>
   45910:	3804d1ba 	srli	r2,r7,6
   45914:	11400e44 	addi	r5,r2,57
   45918:	10c00e04 	addi	r3,r2,56
   4591c:	294b883a 	add	r5,r5,r5
   45920:	003fbc06 	br	45814 <__alt_data_end+0xfffe5814>
   45924:	84ff5926 	beq	r16,r19,4568c <__alt_data_end+0xfffe568c>
   45928:	00800174 	movhi	r2,5
   4592c:	1080a204 	addi	r2,r2,648
   45930:	14000217 	ldw	r16,8(r2)
   45934:	00bfff04 	movi	r2,-4
   45938:	80c00117 	ldw	r3,4(r16)
   4593c:	1886703a 	and	r3,r3,r2
   45940:	003f9106 	br	45788 <__alt_data_end+0xfffe5788>
   45944:	60800217 	ldw	r2,8(r12)
   45948:	213fffc4 	addi	r4,r4,-1
   4594c:	1300651e 	bne	r2,r12,45ae4 <_malloc_r+0x7f4>
   45950:	208000cc 	andi	r2,r4,3
   45954:	633ffe04 	addi	r12,r12,-8
   45958:	103ffa1e 	bne	r2,zero,45944 <__alt_data_end+0xfffe5944>
   4595c:	98800117 	ldw	r2,4(r19)
   45960:	0146303a 	nor	r3,zero,r5
   45964:	1884703a 	and	r2,r3,r2
   45968:	98800115 	stw	r2,4(r19)
   4596c:	294b883a 	add	r5,r5,r5
   45970:	117f2836 	bltu	r2,r5,45614 <__alt_data_end+0xfffe5614>
   45974:	283f2726 	beq	r5,zero,45614 <__alt_data_end+0xfffe5614>
   45978:	2886703a 	and	r3,r5,r2
   4597c:	5809883a 	mov	r4,r11
   45980:	183ec31e 	bne	r3,zero,45490 <__alt_data_end+0xfffe5490>
   45984:	294b883a 	add	r5,r5,r5
   45988:	2886703a 	and	r3,r5,r2
   4598c:	21000104 	addi	r4,r4,4
   45990:	183ffc26 	beq	r3,zero,45984 <__alt_data_end+0xfffe5984>
   45994:	003ebe06 	br	45490 <__alt_data_end+0xfffe5490>
   45998:	00c05504 	movi	r3,340
   4599c:	18801236 	bltu	r3,r2,459e8 <_malloc_r+0x6f8>
   459a0:	8804d3fa 	srli	r2,r17,15
   459a4:	12001e04 	addi	r8,r2,120
   459a8:	11c01dc4 	addi	r7,r2,119
   459ac:	4209883a 	add	r4,r8,r8
   459b0:	003e6d06 	br	45368 <__alt_data_end+0xfffe5368>
   459b4:	00c40004 	movi	r3,4096
   459b8:	003f4606 	br	456d4 <__alt_data_end+0xfffe56d4>
   459bc:	00800044 	movi	r2,1
   459c0:	a0800115 	stw	r2,4(r20)
   459c4:	003f7406 	br	45798 <__alt_data_end+0xfffe5798>
   459c8:	1805d0ba 	srai	r2,r3,2
   459cc:	01c00044 	movi	r7,1
   459d0:	30c00117 	ldw	r3,4(r6)
   459d4:	388e983a 	sll	r7,r7,r2
   459d8:	2805883a 	mov	r2,r5
   459dc:	38c6b03a 	or	r3,r7,r3
   459e0:	30c00115 	stw	r3,4(r6)
   459e4:	003f9b06 	br	45854 <__alt_data_end+0xfffe5854>
   459e8:	00c15504 	movi	r3,1364
   459ec:	18801a36 	bltu	r3,r2,45a58 <_malloc_r+0x768>
   459f0:	8804d4ba 	srli	r2,r17,18
   459f4:	12001f44 	addi	r8,r2,125
   459f8:	11c01f04 	addi	r7,r2,124
   459fc:	4209883a 	add	r4,r8,r8
   45a00:	003e5906 	br	45368 <__alt_data_end+0xfffe5368>
   45a04:	ad400404 	addi	r21,r21,16
   45a08:	003f1706 	br	45668 <__alt_data_end+0xfffe5668>
   45a0c:	00c01504 	movi	r3,84
   45a10:	18802336 	bltu	r3,r2,45aa0 <_malloc_r+0x7b0>
   45a14:	3804d33a 	srli	r2,r7,12
   45a18:	11401bc4 	addi	r5,r2,111
   45a1c:	10c01b84 	addi	r3,r2,110
   45a20:	294b883a 	add	r5,r5,r5
   45a24:	003f7b06 	br	45814 <__alt_data_end+0xfffe5814>
   45a28:	9c000217 	ldw	r16,8(r19)
   45a2c:	00bfff04 	movi	r2,-4
   45a30:	80c00117 	ldw	r3,4(r16)
   45a34:	1886703a 	and	r3,r3,r2
   45a38:	003f5306 	br	45788 <__alt_data_end+0xfffe5788>
   45a3c:	3083ffcc 	andi	r2,r6,4095
   45a40:	103f181e 	bne	r2,zero,456a4 <__alt_data_end+0xfffe56a4>
   45a44:	99000217 	ldw	r4,8(r19)
   45a48:	b545883a 	add	r2,r22,r21
   45a4c:	10800054 	ori	r2,r2,1
   45a50:	20800115 	stw	r2,4(r4)
   45a54:	003f3e06 	br	45750 <__alt_data_end+0xfffe5750>
   45a58:	01003f84 	movi	r4,254
   45a5c:	02001fc4 	movi	r8,127
   45a60:	01c01f84 	movi	r7,126
   45a64:	003e4006 	br	45368 <__alt_data_end+0xfffe5368>
   45a68:	00800174 	movhi	r2,5
   45a6c:	10862904 	addi	r2,r2,6308
   45a70:	15000015 	stw	r20,0(r2)
   45a74:	003f1106 	br	456bc <__alt_data_end+0xfffe56bc>
   45a78:	00800044 	movi	r2,1
   45a7c:	002b883a 	mov	r21,zero
   45a80:	003f1f06 	br	45700 <__alt_data_end+0xfffe5700>
   45a84:	81400204 	addi	r5,r16,8
   45a88:	9009883a 	mov	r4,r18
   45a8c:	0044bc00 	call	44bc0 <_free_r>
   45a90:	00800174 	movhi	r2,5
   45a94:	108d0104 	addi	r2,r2,13316
   45a98:	10c00017 	ldw	r3,0(r2)
   45a9c:	003f2c06 	br	45750 <__alt_data_end+0xfffe5750>
   45aa0:	00c05504 	movi	r3,340
   45aa4:	18800536 	bltu	r3,r2,45abc <_malloc_r+0x7cc>
   45aa8:	3804d3fa 	srli	r2,r7,15
   45aac:	11401e04 	addi	r5,r2,120
   45ab0:	10c01dc4 	addi	r3,r2,119
   45ab4:	294b883a 	add	r5,r5,r5
   45ab8:	003f5606 	br	45814 <__alt_data_end+0xfffe5814>
   45abc:	00c15504 	movi	r3,1364
   45ac0:	18800536 	bltu	r3,r2,45ad8 <_malloc_r+0x7e8>
   45ac4:	3804d4ba 	srli	r2,r7,18
   45ac8:	11401f44 	addi	r5,r2,125
   45acc:	10c01f04 	addi	r3,r2,124
   45ad0:	294b883a 	add	r5,r5,r5
   45ad4:	003f4f06 	br	45814 <__alt_data_end+0xfffe5814>
   45ad8:	01403f84 	movi	r5,254
   45adc:	00c01f84 	movi	r3,126
   45ae0:	003f4c06 	br	45814 <__alt_data_end+0xfffe5814>
   45ae4:	98800117 	ldw	r2,4(r19)
   45ae8:	003fa006 	br	4596c <__alt_data_end+0xfffe596c>
   45aec:	8808d0fa 	srli	r4,r17,3
   45af0:	20800044 	addi	r2,r4,1
   45af4:	1085883a 	add	r2,r2,r2
   45af8:	003e9006 	br	4553c <__alt_data_end+0xfffe553c>

00045afc <memchr>:
   45afc:	208000cc 	andi	r2,r4,3
   45b00:	280f883a 	mov	r7,r5
   45b04:	10003426 	beq	r2,zero,45bd8 <memchr+0xdc>
   45b08:	30bfffc4 	addi	r2,r6,-1
   45b0c:	30001a26 	beq	r6,zero,45b78 <memchr+0x7c>
   45b10:	20c00003 	ldbu	r3,0(r4)
   45b14:	29803fcc 	andi	r6,r5,255
   45b18:	30c0051e 	bne	r6,r3,45b30 <memchr+0x34>
   45b1c:	00001806 	br	45b80 <memchr+0x84>
   45b20:	10001526 	beq	r2,zero,45b78 <memchr+0x7c>
   45b24:	20c00003 	ldbu	r3,0(r4)
   45b28:	10bfffc4 	addi	r2,r2,-1
   45b2c:	30c01426 	beq	r6,r3,45b80 <memchr+0x84>
   45b30:	21000044 	addi	r4,r4,1
   45b34:	20c000cc 	andi	r3,r4,3
   45b38:	183ff91e 	bne	r3,zero,45b20 <__alt_data_end+0xfffe5b20>
   45b3c:	020000c4 	movi	r8,3
   45b40:	40801136 	bltu	r8,r2,45b88 <memchr+0x8c>
   45b44:	10000c26 	beq	r2,zero,45b78 <memchr+0x7c>
   45b48:	20c00003 	ldbu	r3,0(r4)
   45b4c:	29403fcc 	andi	r5,r5,255
   45b50:	28c00b26 	beq	r5,r3,45b80 <memchr+0x84>
   45b54:	20c00044 	addi	r3,r4,1
   45b58:	39803fcc 	andi	r6,r7,255
   45b5c:	2089883a 	add	r4,r4,r2
   45b60:	00000306 	br	45b70 <memchr+0x74>
   45b64:	18c00044 	addi	r3,r3,1
   45b68:	197fffc3 	ldbu	r5,-1(r3)
   45b6c:	31400526 	beq	r6,r5,45b84 <memchr+0x88>
   45b70:	1805883a 	mov	r2,r3
   45b74:	20fffb1e 	bne	r4,r3,45b64 <__alt_data_end+0xfffe5b64>
   45b78:	0005883a 	mov	r2,zero
   45b7c:	f800283a 	ret
   45b80:	2005883a 	mov	r2,r4
   45b84:	f800283a 	ret
   45b88:	28c03fcc 	andi	r3,r5,255
   45b8c:	1812923a 	slli	r9,r3,8
   45b90:	02ffbff4 	movhi	r11,65279
   45b94:	02a02074 	movhi	r10,32897
   45b98:	48d2b03a 	or	r9,r9,r3
   45b9c:	4806943a 	slli	r3,r9,16
   45ba0:	5affbfc4 	addi	r11,r11,-257
   45ba4:	52a02004 	addi	r10,r10,-32640
   45ba8:	48d2b03a 	or	r9,r9,r3
   45bac:	20c00017 	ldw	r3,0(r4)
   45bb0:	48c6f03a 	xor	r3,r9,r3
   45bb4:	1acd883a 	add	r6,r3,r11
   45bb8:	00c6303a 	nor	r3,zero,r3
   45bbc:	30c6703a 	and	r3,r6,r3
   45bc0:	1a86703a 	and	r3,r3,r10
   45bc4:	183fe01e 	bne	r3,zero,45b48 <__alt_data_end+0xfffe5b48>
   45bc8:	10bfff04 	addi	r2,r2,-4
   45bcc:	21000104 	addi	r4,r4,4
   45bd0:	40bff636 	bltu	r8,r2,45bac <__alt_data_end+0xfffe5bac>
   45bd4:	003fdb06 	br	45b44 <__alt_data_end+0xfffe5b44>
   45bd8:	3005883a 	mov	r2,r6
   45bdc:	003fd706 	br	45b3c <__alt_data_end+0xfffe5b3c>

00045be0 <memcpy>:
   45be0:	defffd04 	addi	sp,sp,-12
   45be4:	dfc00215 	stw	ra,8(sp)
   45be8:	dc400115 	stw	r17,4(sp)
   45bec:	dc000015 	stw	r16,0(sp)
   45bf0:	00c003c4 	movi	r3,15
   45bf4:	2005883a 	mov	r2,r4
   45bf8:	1980452e 	bgeu	r3,r6,45d10 <memcpy+0x130>
   45bfc:	2906b03a 	or	r3,r5,r4
   45c00:	18c000cc 	andi	r3,r3,3
   45c04:	1800441e 	bne	r3,zero,45d18 <memcpy+0x138>
   45c08:	347ffc04 	addi	r17,r6,-16
   45c0c:	8822d13a 	srli	r17,r17,4
   45c10:	28c00104 	addi	r3,r5,4
   45c14:	23400104 	addi	r13,r4,4
   45c18:	8820913a 	slli	r16,r17,4
   45c1c:	2b000204 	addi	r12,r5,8
   45c20:	22c00204 	addi	r11,r4,8
   45c24:	84000504 	addi	r16,r16,20
   45c28:	2a800304 	addi	r10,r5,12
   45c2c:	22400304 	addi	r9,r4,12
   45c30:	2c21883a 	add	r16,r5,r16
   45c34:	2811883a 	mov	r8,r5
   45c38:	200f883a 	mov	r7,r4
   45c3c:	41000017 	ldw	r4,0(r8)
   45c40:	1fc00017 	ldw	ra,0(r3)
   45c44:	63c00017 	ldw	r15,0(r12)
   45c48:	39000015 	stw	r4,0(r7)
   45c4c:	53800017 	ldw	r14,0(r10)
   45c50:	6fc00015 	stw	ra,0(r13)
   45c54:	5bc00015 	stw	r15,0(r11)
   45c58:	4b800015 	stw	r14,0(r9)
   45c5c:	18c00404 	addi	r3,r3,16
   45c60:	39c00404 	addi	r7,r7,16
   45c64:	42000404 	addi	r8,r8,16
   45c68:	6b400404 	addi	r13,r13,16
   45c6c:	63000404 	addi	r12,r12,16
   45c70:	5ac00404 	addi	r11,r11,16
   45c74:	52800404 	addi	r10,r10,16
   45c78:	4a400404 	addi	r9,r9,16
   45c7c:	1c3fef1e 	bne	r3,r16,45c3c <__alt_data_end+0xfffe5c3c>
   45c80:	89c00044 	addi	r7,r17,1
   45c84:	380e913a 	slli	r7,r7,4
   45c88:	310003cc 	andi	r4,r6,15
   45c8c:	02c000c4 	movi	r11,3
   45c90:	11c7883a 	add	r3,r2,r7
   45c94:	29cb883a 	add	r5,r5,r7
   45c98:	5900212e 	bgeu	r11,r4,45d20 <memcpy+0x140>
   45c9c:	1813883a 	mov	r9,r3
   45ca0:	2811883a 	mov	r8,r5
   45ca4:	200f883a 	mov	r7,r4
   45ca8:	42800017 	ldw	r10,0(r8)
   45cac:	4a400104 	addi	r9,r9,4
   45cb0:	39ffff04 	addi	r7,r7,-4
   45cb4:	4abfff15 	stw	r10,-4(r9)
   45cb8:	42000104 	addi	r8,r8,4
   45cbc:	59fffa36 	bltu	r11,r7,45ca8 <__alt_data_end+0xfffe5ca8>
   45cc0:	213fff04 	addi	r4,r4,-4
   45cc4:	2008d0ba 	srli	r4,r4,2
   45cc8:	318000cc 	andi	r6,r6,3
   45ccc:	21000044 	addi	r4,r4,1
   45cd0:	2109883a 	add	r4,r4,r4
   45cd4:	2109883a 	add	r4,r4,r4
   45cd8:	1907883a 	add	r3,r3,r4
   45cdc:	290b883a 	add	r5,r5,r4
   45ce0:	30000626 	beq	r6,zero,45cfc <memcpy+0x11c>
   45ce4:	198d883a 	add	r6,r3,r6
   45ce8:	29c00003 	ldbu	r7,0(r5)
   45cec:	18c00044 	addi	r3,r3,1
   45cf0:	29400044 	addi	r5,r5,1
   45cf4:	19ffffc5 	stb	r7,-1(r3)
   45cf8:	19bffb1e 	bne	r3,r6,45ce8 <__alt_data_end+0xfffe5ce8>
   45cfc:	dfc00217 	ldw	ra,8(sp)
   45d00:	dc400117 	ldw	r17,4(sp)
   45d04:	dc000017 	ldw	r16,0(sp)
   45d08:	dec00304 	addi	sp,sp,12
   45d0c:	f800283a 	ret
   45d10:	2007883a 	mov	r3,r4
   45d14:	003ff206 	br	45ce0 <__alt_data_end+0xfffe5ce0>
   45d18:	2007883a 	mov	r3,r4
   45d1c:	003ff106 	br	45ce4 <__alt_data_end+0xfffe5ce4>
   45d20:	200d883a 	mov	r6,r4
   45d24:	003fee06 	br	45ce0 <__alt_data_end+0xfffe5ce0>

00045d28 <memset>:
   45d28:	20c000cc 	andi	r3,r4,3
   45d2c:	2005883a 	mov	r2,r4
   45d30:	18004426 	beq	r3,zero,45e44 <memset+0x11c>
   45d34:	31ffffc4 	addi	r7,r6,-1
   45d38:	30004026 	beq	r6,zero,45e3c <memset+0x114>
   45d3c:	2813883a 	mov	r9,r5
   45d40:	200d883a 	mov	r6,r4
   45d44:	2007883a 	mov	r3,r4
   45d48:	00000406 	br	45d5c <memset+0x34>
   45d4c:	3a3fffc4 	addi	r8,r7,-1
   45d50:	31800044 	addi	r6,r6,1
   45d54:	38003926 	beq	r7,zero,45e3c <memset+0x114>
   45d58:	400f883a 	mov	r7,r8
   45d5c:	18c00044 	addi	r3,r3,1
   45d60:	32400005 	stb	r9,0(r6)
   45d64:	1a0000cc 	andi	r8,r3,3
   45d68:	403ff81e 	bne	r8,zero,45d4c <__alt_data_end+0xfffe5d4c>
   45d6c:	010000c4 	movi	r4,3
   45d70:	21c02d2e 	bgeu	r4,r7,45e28 <memset+0x100>
   45d74:	29003fcc 	andi	r4,r5,255
   45d78:	200c923a 	slli	r6,r4,8
   45d7c:	3108b03a 	or	r4,r6,r4
   45d80:	200c943a 	slli	r6,r4,16
   45d84:	218cb03a 	or	r6,r4,r6
   45d88:	010003c4 	movi	r4,15
   45d8c:	21c0182e 	bgeu	r4,r7,45df0 <memset+0xc8>
   45d90:	3b3ffc04 	addi	r12,r7,-16
   45d94:	6018d13a 	srli	r12,r12,4
   45d98:	1a000104 	addi	r8,r3,4
   45d9c:	1ac00204 	addi	r11,r3,8
   45da0:	6008913a 	slli	r4,r12,4
   45da4:	1a800304 	addi	r10,r3,12
   45da8:	1813883a 	mov	r9,r3
   45dac:	21000504 	addi	r4,r4,20
   45db0:	1909883a 	add	r4,r3,r4
   45db4:	49800015 	stw	r6,0(r9)
   45db8:	41800015 	stw	r6,0(r8)
   45dbc:	59800015 	stw	r6,0(r11)
   45dc0:	51800015 	stw	r6,0(r10)
   45dc4:	42000404 	addi	r8,r8,16
   45dc8:	4a400404 	addi	r9,r9,16
   45dcc:	5ac00404 	addi	r11,r11,16
   45dd0:	52800404 	addi	r10,r10,16
   45dd4:	413ff71e 	bne	r8,r4,45db4 <__alt_data_end+0xfffe5db4>
   45dd8:	63000044 	addi	r12,r12,1
   45ddc:	6018913a 	slli	r12,r12,4
   45de0:	39c003cc 	andi	r7,r7,15
   45de4:	010000c4 	movi	r4,3
   45de8:	1b07883a 	add	r3,r3,r12
   45dec:	21c00e2e 	bgeu	r4,r7,45e28 <memset+0x100>
   45df0:	1813883a 	mov	r9,r3
   45df4:	3811883a 	mov	r8,r7
   45df8:	010000c4 	movi	r4,3
   45dfc:	49800015 	stw	r6,0(r9)
   45e00:	423fff04 	addi	r8,r8,-4
   45e04:	4a400104 	addi	r9,r9,4
   45e08:	223ffc36 	bltu	r4,r8,45dfc <__alt_data_end+0xfffe5dfc>
   45e0c:	393fff04 	addi	r4,r7,-4
   45e10:	2008d0ba 	srli	r4,r4,2
   45e14:	39c000cc 	andi	r7,r7,3
   45e18:	21000044 	addi	r4,r4,1
   45e1c:	2109883a 	add	r4,r4,r4
   45e20:	2109883a 	add	r4,r4,r4
   45e24:	1907883a 	add	r3,r3,r4
   45e28:	38000526 	beq	r7,zero,45e40 <memset+0x118>
   45e2c:	19cf883a 	add	r7,r3,r7
   45e30:	19400005 	stb	r5,0(r3)
   45e34:	18c00044 	addi	r3,r3,1
   45e38:	38fffd1e 	bne	r7,r3,45e30 <__alt_data_end+0xfffe5e30>
   45e3c:	f800283a 	ret
   45e40:	f800283a 	ret
   45e44:	2007883a 	mov	r3,r4
   45e48:	300f883a 	mov	r7,r6
   45e4c:	003fc706 	br	45d6c <__alt_data_end+0xfffe5d6c>

00045e50 <_Balloc>:
   45e50:	20801317 	ldw	r2,76(r4)
   45e54:	defffc04 	addi	sp,sp,-16
   45e58:	dc400115 	stw	r17,4(sp)
   45e5c:	dc000015 	stw	r16,0(sp)
   45e60:	dfc00315 	stw	ra,12(sp)
   45e64:	dc800215 	stw	r18,8(sp)
   45e68:	2023883a 	mov	r17,r4
   45e6c:	2821883a 	mov	r16,r5
   45e70:	10000f26 	beq	r2,zero,45eb0 <_Balloc+0x60>
   45e74:	8407883a 	add	r3,r16,r16
   45e78:	18c7883a 	add	r3,r3,r3
   45e7c:	10c7883a 	add	r3,r2,r3
   45e80:	18800017 	ldw	r2,0(r3)
   45e84:	10001126 	beq	r2,zero,45ecc <_Balloc+0x7c>
   45e88:	11000017 	ldw	r4,0(r2)
   45e8c:	19000015 	stw	r4,0(r3)
   45e90:	10000415 	stw	zero,16(r2)
   45e94:	10000315 	stw	zero,12(r2)
   45e98:	dfc00317 	ldw	ra,12(sp)
   45e9c:	dc800217 	ldw	r18,8(sp)
   45ea0:	dc400117 	ldw	r17,4(sp)
   45ea4:	dc000017 	ldw	r16,0(sp)
   45ea8:	dec00404 	addi	sp,sp,16
   45eac:	f800283a 	ret
   45eb0:	01800844 	movi	r6,33
   45eb4:	01400104 	movi	r5,4
   45eb8:	00488c00 	call	488c0 <_calloc_r>
   45ebc:	88801315 	stw	r2,76(r17)
   45ec0:	103fec1e 	bne	r2,zero,45e74 <__alt_data_end+0xfffe5e74>
   45ec4:	0005883a 	mov	r2,zero
   45ec8:	003ff306 	br	45e98 <__alt_data_end+0xfffe5e98>
   45ecc:	01400044 	movi	r5,1
   45ed0:	2c24983a 	sll	r18,r5,r16
   45ed4:	8809883a 	mov	r4,r17
   45ed8:	91800144 	addi	r6,r18,5
   45edc:	318d883a 	add	r6,r6,r6
   45ee0:	318d883a 	add	r6,r6,r6
   45ee4:	00488c00 	call	488c0 <_calloc_r>
   45ee8:	103ff626 	beq	r2,zero,45ec4 <__alt_data_end+0xfffe5ec4>
   45eec:	14000115 	stw	r16,4(r2)
   45ef0:	14800215 	stw	r18,8(r2)
   45ef4:	003fe606 	br	45e90 <__alt_data_end+0xfffe5e90>

00045ef8 <_Bfree>:
   45ef8:	28000826 	beq	r5,zero,45f1c <_Bfree+0x24>
   45efc:	28c00117 	ldw	r3,4(r5)
   45f00:	20801317 	ldw	r2,76(r4)
   45f04:	18c7883a 	add	r3,r3,r3
   45f08:	18c7883a 	add	r3,r3,r3
   45f0c:	10c5883a 	add	r2,r2,r3
   45f10:	10c00017 	ldw	r3,0(r2)
   45f14:	28c00015 	stw	r3,0(r5)
   45f18:	11400015 	stw	r5,0(r2)
   45f1c:	f800283a 	ret

00045f20 <__multadd>:
   45f20:	defffa04 	addi	sp,sp,-24
   45f24:	dc800315 	stw	r18,12(sp)
   45f28:	dc400215 	stw	r17,8(sp)
   45f2c:	dc000115 	stw	r16,4(sp)
   45f30:	2823883a 	mov	r17,r5
   45f34:	2c000417 	ldw	r16,16(r5)
   45f38:	dfc00515 	stw	ra,20(sp)
   45f3c:	dcc00415 	stw	r19,16(sp)
   45f40:	2025883a 	mov	r18,r4
   45f44:	29400504 	addi	r5,r5,20
   45f48:	0011883a 	mov	r8,zero
   45f4c:	28c00017 	ldw	r3,0(r5)
   45f50:	29400104 	addi	r5,r5,4
   45f54:	42000044 	addi	r8,r8,1
   45f58:	18bfffcc 	andi	r2,r3,65535
   45f5c:	1185383a 	mul	r2,r2,r6
   45f60:	1806d43a 	srli	r3,r3,16
   45f64:	11cf883a 	add	r7,r2,r7
   45f68:	3808d43a 	srli	r4,r7,16
   45f6c:	1987383a 	mul	r3,r3,r6
   45f70:	38bfffcc 	andi	r2,r7,65535
   45f74:	1907883a 	add	r3,r3,r4
   45f78:	1808943a 	slli	r4,r3,16
   45f7c:	180ed43a 	srli	r7,r3,16
   45f80:	2085883a 	add	r2,r4,r2
   45f84:	28bfff15 	stw	r2,-4(r5)
   45f88:	443ff016 	blt	r8,r16,45f4c <__alt_data_end+0xfffe5f4c>
   45f8c:	38000926 	beq	r7,zero,45fb4 <__multadd+0x94>
   45f90:	88800217 	ldw	r2,8(r17)
   45f94:	80800f0e 	bge	r16,r2,45fd4 <__multadd+0xb4>
   45f98:	80800144 	addi	r2,r16,5
   45f9c:	1085883a 	add	r2,r2,r2
   45fa0:	1085883a 	add	r2,r2,r2
   45fa4:	8885883a 	add	r2,r17,r2
   45fa8:	11c00015 	stw	r7,0(r2)
   45fac:	84000044 	addi	r16,r16,1
   45fb0:	8c000415 	stw	r16,16(r17)
   45fb4:	8805883a 	mov	r2,r17
   45fb8:	dfc00517 	ldw	ra,20(sp)
   45fbc:	dcc00417 	ldw	r19,16(sp)
   45fc0:	dc800317 	ldw	r18,12(sp)
   45fc4:	dc400217 	ldw	r17,8(sp)
   45fc8:	dc000117 	ldw	r16,4(sp)
   45fcc:	dec00604 	addi	sp,sp,24
   45fd0:	f800283a 	ret
   45fd4:	89400117 	ldw	r5,4(r17)
   45fd8:	9009883a 	mov	r4,r18
   45fdc:	d9c00015 	stw	r7,0(sp)
   45fe0:	29400044 	addi	r5,r5,1
   45fe4:	0045e500 	call	45e50 <_Balloc>
   45fe8:	89800417 	ldw	r6,16(r17)
   45fec:	89400304 	addi	r5,r17,12
   45ff0:	11000304 	addi	r4,r2,12
   45ff4:	31800084 	addi	r6,r6,2
   45ff8:	318d883a 	add	r6,r6,r6
   45ffc:	318d883a 	add	r6,r6,r6
   46000:	1027883a 	mov	r19,r2
   46004:	0045be00 	call	45be0 <memcpy>
   46008:	d9c00017 	ldw	r7,0(sp)
   4600c:	88000a26 	beq	r17,zero,46038 <__multadd+0x118>
   46010:	88c00117 	ldw	r3,4(r17)
   46014:	90801317 	ldw	r2,76(r18)
   46018:	18c7883a 	add	r3,r3,r3
   4601c:	18c7883a 	add	r3,r3,r3
   46020:	10c5883a 	add	r2,r2,r3
   46024:	10c00017 	ldw	r3,0(r2)
   46028:	88c00015 	stw	r3,0(r17)
   4602c:	14400015 	stw	r17,0(r2)
   46030:	9823883a 	mov	r17,r19
   46034:	003fd806 	br	45f98 <__alt_data_end+0xfffe5f98>
   46038:	9823883a 	mov	r17,r19
   4603c:	003fd606 	br	45f98 <__alt_data_end+0xfffe5f98>

00046040 <__s2b>:
   46040:	defff904 	addi	sp,sp,-28
   46044:	dc400115 	stw	r17,4(sp)
   46048:	dc000015 	stw	r16,0(sp)
   4604c:	2023883a 	mov	r17,r4
   46050:	2821883a 	mov	r16,r5
   46054:	39000204 	addi	r4,r7,8
   46058:	01400244 	movi	r5,9
   4605c:	dcc00315 	stw	r19,12(sp)
   46060:	dc800215 	stw	r18,8(sp)
   46064:	dfc00615 	stw	ra,24(sp)
   46068:	dd400515 	stw	r21,20(sp)
   4606c:	dd000415 	stw	r20,16(sp)
   46070:	3825883a 	mov	r18,r7
   46074:	3027883a 	mov	r19,r6
   46078:	004a76c0 	call	4a76c <__divsi3>
   4607c:	00c00044 	movi	r3,1
   46080:	000b883a 	mov	r5,zero
   46084:	1880030e 	bge	r3,r2,46094 <__s2b+0x54>
   46088:	18c7883a 	add	r3,r3,r3
   4608c:	29400044 	addi	r5,r5,1
   46090:	18bffd16 	blt	r3,r2,46088 <__alt_data_end+0xfffe6088>
   46094:	8809883a 	mov	r4,r17
   46098:	0045e500 	call	45e50 <_Balloc>
   4609c:	d8c00717 	ldw	r3,28(sp)
   460a0:	10c00515 	stw	r3,20(r2)
   460a4:	00c00044 	movi	r3,1
   460a8:	10c00415 	stw	r3,16(r2)
   460ac:	00c00244 	movi	r3,9
   460b0:	1cc0210e 	bge	r3,r19,46138 <__s2b+0xf8>
   460b4:	80eb883a 	add	r21,r16,r3
   460b8:	a829883a 	mov	r20,r21
   460bc:	84e1883a 	add	r16,r16,r19
   460c0:	a1c00007 	ldb	r7,0(r20)
   460c4:	01800284 	movi	r6,10
   460c8:	a5000044 	addi	r20,r20,1
   460cc:	100b883a 	mov	r5,r2
   460d0:	39fff404 	addi	r7,r7,-48
   460d4:	8809883a 	mov	r4,r17
   460d8:	0045f200 	call	45f20 <__multadd>
   460dc:	a43ff81e 	bne	r20,r16,460c0 <__alt_data_end+0xfffe60c0>
   460e0:	ace1883a 	add	r16,r21,r19
   460e4:	843ffe04 	addi	r16,r16,-8
   460e8:	9c800a0e 	bge	r19,r18,46114 <__s2b+0xd4>
   460ec:	94e5c83a 	sub	r18,r18,r19
   460f0:	84a5883a 	add	r18,r16,r18
   460f4:	81c00007 	ldb	r7,0(r16)
   460f8:	01800284 	movi	r6,10
   460fc:	84000044 	addi	r16,r16,1
   46100:	100b883a 	mov	r5,r2
   46104:	39fff404 	addi	r7,r7,-48
   46108:	8809883a 	mov	r4,r17
   4610c:	0045f200 	call	45f20 <__multadd>
   46110:	84bff81e 	bne	r16,r18,460f4 <__alt_data_end+0xfffe60f4>
   46114:	dfc00617 	ldw	ra,24(sp)
   46118:	dd400517 	ldw	r21,20(sp)
   4611c:	dd000417 	ldw	r20,16(sp)
   46120:	dcc00317 	ldw	r19,12(sp)
   46124:	dc800217 	ldw	r18,8(sp)
   46128:	dc400117 	ldw	r17,4(sp)
   4612c:	dc000017 	ldw	r16,0(sp)
   46130:	dec00704 	addi	sp,sp,28
   46134:	f800283a 	ret
   46138:	84000284 	addi	r16,r16,10
   4613c:	1827883a 	mov	r19,r3
   46140:	003fe906 	br	460e8 <__alt_data_end+0xfffe60e8>

00046144 <__hi0bits>:
   46144:	20bfffec 	andhi	r2,r4,65535
   46148:	1000141e 	bne	r2,zero,4619c <__hi0bits+0x58>
   4614c:	2008943a 	slli	r4,r4,16
   46150:	00800404 	movi	r2,16
   46154:	20ffc02c 	andhi	r3,r4,65280
   46158:	1800021e 	bne	r3,zero,46164 <__hi0bits+0x20>
   4615c:	2008923a 	slli	r4,r4,8
   46160:	10800204 	addi	r2,r2,8
   46164:	20fc002c 	andhi	r3,r4,61440
   46168:	1800021e 	bne	r3,zero,46174 <__hi0bits+0x30>
   4616c:	2008913a 	slli	r4,r4,4
   46170:	10800104 	addi	r2,r2,4
   46174:	20f0002c 	andhi	r3,r4,49152
   46178:	1800031e 	bne	r3,zero,46188 <__hi0bits+0x44>
   4617c:	2109883a 	add	r4,r4,r4
   46180:	10800084 	addi	r2,r2,2
   46184:	2109883a 	add	r4,r4,r4
   46188:	20000316 	blt	r4,zero,46198 <__hi0bits+0x54>
   4618c:	2110002c 	andhi	r4,r4,16384
   46190:	2000041e 	bne	r4,zero,461a4 <__hi0bits+0x60>
   46194:	00800804 	movi	r2,32
   46198:	f800283a 	ret
   4619c:	0005883a 	mov	r2,zero
   461a0:	003fec06 	br	46154 <__alt_data_end+0xfffe6154>
   461a4:	10800044 	addi	r2,r2,1
   461a8:	f800283a 	ret

000461ac <__lo0bits>:
   461ac:	20c00017 	ldw	r3,0(r4)
   461b0:	188001cc 	andi	r2,r3,7
   461b4:	10000826 	beq	r2,zero,461d8 <__lo0bits+0x2c>
   461b8:	1880004c 	andi	r2,r3,1
   461bc:	1000211e 	bne	r2,zero,46244 <__lo0bits+0x98>
   461c0:	1880008c 	andi	r2,r3,2
   461c4:	1000211e 	bne	r2,zero,4624c <__lo0bits+0xa0>
   461c8:	1806d0ba 	srli	r3,r3,2
   461cc:	00800084 	movi	r2,2
   461d0:	20c00015 	stw	r3,0(r4)
   461d4:	f800283a 	ret
   461d8:	18bfffcc 	andi	r2,r3,65535
   461dc:	10001326 	beq	r2,zero,4622c <__lo0bits+0x80>
   461e0:	0005883a 	mov	r2,zero
   461e4:	19403fcc 	andi	r5,r3,255
   461e8:	2800021e 	bne	r5,zero,461f4 <__lo0bits+0x48>
   461ec:	1806d23a 	srli	r3,r3,8
   461f0:	10800204 	addi	r2,r2,8
   461f4:	194003cc 	andi	r5,r3,15
   461f8:	2800021e 	bne	r5,zero,46204 <__lo0bits+0x58>
   461fc:	1806d13a 	srli	r3,r3,4
   46200:	10800104 	addi	r2,r2,4
   46204:	194000cc 	andi	r5,r3,3
   46208:	2800021e 	bne	r5,zero,46214 <__lo0bits+0x68>
   4620c:	1806d0ba 	srli	r3,r3,2
   46210:	10800084 	addi	r2,r2,2
   46214:	1940004c 	andi	r5,r3,1
   46218:	2800081e 	bne	r5,zero,4623c <__lo0bits+0x90>
   4621c:	1806d07a 	srli	r3,r3,1
   46220:	1800051e 	bne	r3,zero,46238 <__lo0bits+0x8c>
   46224:	00800804 	movi	r2,32
   46228:	f800283a 	ret
   4622c:	1806d43a 	srli	r3,r3,16
   46230:	00800404 	movi	r2,16
   46234:	003feb06 	br	461e4 <__alt_data_end+0xfffe61e4>
   46238:	10800044 	addi	r2,r2,1
   4623c:	20c00015 	stw	r3,0(r4)
   46240:	f800283a 	ret
   46244:	0005883a 	mov	r2,zero
   46248:	f800283a 	ret
   4624c:	1806d07a 	srli	r3,r3,1
   46250:	00800044 	movi	r2,1
   46254:	20c00015 	stw	r3,0(r4)
   46258:	f800283a 	ret

0004625c <__i2b>:
   4625c:	defffd04 	addi	sp,sp,-12
   46260:	dc000015 	stw	r16,0(sp)
   46264:	04000044 	movi	r16,1
   46268:	dc400115 	stw	r17,4(sp)
   4626c:	2823883a 	mov	r17,r5
   46270:	800b883a 	mov	r5,r16
   46274:	dfc00215 	stw	ra,8(sp)
   46278:	0045e500 	call	45e50 <_Balloc>
   4627c:	14400515 	stw	r17,20(r2)
   46280:	14000415 	stw	r16,16(r2)
   46284:	dfc00217 	ldw	ra,8(sp)
   46288:	dc400117 	ldw	r17,4(sp)
   4628c:	dc000017 	ldw	r16,0(sp)
   46290:	dec00304 	addi	sp,sp,12
   46294:	f800283a 	ret

00046298 <__multiply>:
   46298:	defffa04 	addi	sp,sp,-24
   4629c:	dcc00315 	stw	r19,12(sp)
   462a0:	dc800215 	stw	r18,8(sp)
   462a4:	34c00417 	ldw	r19,16(r6)
   462a8:	2c800417 	ldw	r18,16(r5)
   462ac:	dd000415 	stw	r20,16(sp)
   462b0:	dc400115 	stw	r17,4(sp)
   462b4:	dfc00515 	stw	ra,20(sp)
   462b8:	dc000015 	stw	r16,0(sp)
   462bc:	2829883a 	mov	r20,r5
   462c0:	3023883a 	mov	r17,r6
   462c4:	94c0050e 	bge	r18,r19,462dc <__multiply+0x44>
   462c8:	9007883a 	mov	r3,r18
   462cc:	3029883a 	mov	r20,r6
   462d0:	9825883a 	mov	r18,r19
   462d4:	2823883a 	mov	r17,r5
   462d8:	1827883a 	mov	r19,r3
   462dc:	a0800217 	ldw	r2,8(r20)
   462e0:	94e1883a 	add	r16,r18,r19
   462e4:	a1400117 	ldw	r5,4(r20)
   462e8:	1400010e 	bge	r2,r16,462f0 <__multiply+0x58>
   462ec:	29400044 	addi	r5,r5,1
   462f0:	0045e500 	call	45e50 <_Balloc>
   462f4:	8415883a 	add	r10,r16,r16
   462f8:	12c00504 	addi	r11,r2,20
   462fc:	5295883a 	add	r10,r10,r10
   46300:	5a95883a 	add	r10,r11,r10
   46304:	5807883a 	mov	r3,r11
   46308:	5a80032e 	bgeu	r11,r10,46318 <__multiply+0x80>
   4630c:	18000015 	stw	zero,0(r3)
   46310:	18c00104 	addi	r3,r3,4
   46314:	1abffd36 	bltu	r3,r10,4630c <__alt_data_end+0xfffe630c>
   46318:	9ce7883a 	add	r19,r19,r19
   4631c:	94a5883a 	add	r18,r18,r18
   46320:	89800504 	addi	r6,r17,20
   46324:	9ce7883a 	add	r19,r19,r19
   46328:	a3400504 	addi	r13,r20,20
   4632c:	94a5883a 	add	r18,r18,r18
   46330:	34d9883a 	add	r12,r6,r19
   46334:	6c93883a 	add	r9,r13,r18
   46338:	3300422e 	bgeu	r6,r12,46444 <__multiply+0x1ac>
   4633c:	37c00017 	ldw	ra,0(r6)
   46340:	fbffffcc 	andi	r15,ra,65535
   46344:	78001b26 	beq	r15,zero,463b4 <__multiply+0x11c>
   46348:	5811883a 	mov	r8,r11
   4634c:	681d883a 	mov	r14,r13
   46350:	000f883a 	mov	r7,zero
   46354:	71000017 	ldw	r4,0(r14)
   46358:	40c00017 	ldw	r3,0(r8)
   4635c:	73800104 	addi	r14,r14,4
   46360:	217fffcc 	andi	r5,r4,65535
   46364:	2bcb383a 	mul	r5,r5,r15
   46368:	2008d43a 	srli	r4,r4,16
   4636c:	1c7fffcc 	andi	r17,r3,65535
   46370:	2c4b883a 	add	r5,r5,r17
   46374:	29cb883a 	add	r5,r5,r7
   46378:	23c9383a 	mul	r4,r4,r15
   4637c:	1806d43a 	srli	r3,r3,16
   46380:	280ed43a 	srli	r7,r5,16
   46384:	297fffcc 	andi	r5,r5,65535
   46388:	20c7883a 	add	r3,r4,r3
   4638c:	19c7883a 	add	r3,r3,r7
   46390:	1808943a 	slli	r4,r3,16
   46394:	4023883a 	mov	r17,r8
   46398:	180ed43a 	srli	r7,r3,16
   4639c:	214ab03a 	or	r5,r4,r5
   463a0:	41400015 	stw	r5,0(r8)
   463a4:	42000104 	addi	r8,r8,4
   463a8:	727fea36 	bltu	r14,r9,46354 <__alt_data_end+0xfffe6354>
   463ac:	89c00115 	stw	r7,4(r17)
   463b0:	37c00017 	ldw	ra,0(r6)
   463b4:	f83ed43a 	srli	ra,ra,16
   463b8:	f8001f26 	beq	ra,zero,46438 <__multiply+0x1a0>
   463bc:	58c00017 	ldw	r3,0(r11)
   463c0:	681d883a 	mov	r14,r13
   463c4:	581f883a 	mov	r15,r11
   463c8:	1811883a 	mov	r8,r3
   463cc:	5825883a 	mov	r18,r11
   463d0:	000f883a 	mov	r7,zero
   463d4:	00000106 	br	463dc <__multiply+0x144>
   463d8:	8825883a 	mov	r18,r17
   463dc:	7140000b 	ldhu	r5,0(r14)
   463e0:	4010d43a 	srli	r8,r8,16
   463e4:	193fffcc 	andi	r4,r3,65535
   463e8:	2fcb383a 	mul	r5,r5,ra
   463ec:	7bc00104 	addi	r15,r15,4
   463f0:	73800104 	addi	r14,r14,4
   463f4:	2a0b883a 	add	r5,r5,r8
   463f8:	29cb883a 	add	r5,r5,r7
   463fc:	2806943a 	slli	r3,r5,16
   46400:	94400104 	addi	r17,r18,4
   46404:	280ad43a 	srli	r5,r5,16
   46408:	1908b03a 	or	r4,r3,r4
   4640c:	793fff15 	stw	r4,-4(r15)
   46410:	70ffff17 	ldw	r3,-4(r14)
   46414:	8a000017 	ldw	r8,0(r17)
   46418:	1806d43a 	srli	r3,r3,16
   4641c:	413fffcc 	andi	r4,r8,65535
   46420:	1fc7383a 	mul	r3,r3,ra
   46424:	1907883a 	add	r3,r3,r4
   46428:	1947883a 	add	r3,r3,r5
   4642c:	180ed43a 	srli	r7,r3,16
   46430:	727fe936 	bltu	r14,r9,463d8 <__alt_data_end+0xfffe63d8>
   46434:	90c00115 	stw	r3,4(r18)
   46438:	31800104 	addi	r6,r6,4
   4643c:	5ac00104 	addi	r11,r11,4
   46440:	333fbe36 	bltu	r6,r12,4633c <__alt_data_end+0xfffe633c>
   46444:	0400090e 	bge	zero,r16,4646c <__multiply+0x1d4>
   46448:	50ffff17 	ldw	r3,-4(r10)
   4644c:	52bfff04 	addi	r10,r10,-4
   46450:	18000326 	beq	r3,zero,46460 <__multiply+0x1c8>
   46454:	00000506 	br	4646c <__multiply+0x1d4>
   46458:	50c00017 	ldw	r3,0(r10)
   4645c:	1800031e 	bne	r3,zero,4646c <__multiply+0x1d4>
   46460:	843fffc4 	addi	r16,r16,-1
   46464:	52bfff04 	addi	r10,r10,-4
   46468:	803ffb1e 	bne	r16,zero,46458 <__alt_data_end+0xfffe6458>
   4646c:	14000415 	stw	r16,16(r2)
   46470:	dfc00517 	ldw	ra,20(sp)
   46474:	dd000417 	ldw	r20,16(sp)
   46478:	dcc00317 	ldw	r19,12(sp)
   4647c:	dc800217 	ldw	r18,8(sp)
   46480:	dc400117 	ldw	r17,4(sp)
   46484:	dc000017 	ldw	r16,0(sp)
   46488:	dec00604 	addi	sp,sp,24
   4648c:	f800283a 	ret

00046490 <__pow5mult>:
   46490:	defffa04 	addi	sp,sp,-24
   46494:	dcc00315 	stw	r19,12(sp)
   46498:	dc000015 	stw	r16,0(sp)
   4649c:	dfc00515 	stw	ra,20(sp)
   464a0:	dd000415 	stw	r20,16(sp)
   464a4:	dc800215 	stw	r18,8(sp)
   464a8:	dc400115 	stw	r17,4(sp)
   464ac:	308000cc 	andi	r2,r6,3
   464b0:	3021883a 	mov	r16,r6
   464b4:	2027883a 	mov	r19,r4
   464b8:	10002f1e 	bne	r2,zero,46578 <__pow5mult+0xe8>
   464bc:	2825883a 	mov	r18,r5
   464c0:	8021d0ba 	srai	r16,r16,2
   464c4:	80001a26 	beq	r16,zero,46530 <__pow5mult+0xa0>
   464c8:	9c401217 	ldw	r17,72(r19)
   464cc:	8800061e 	bne	r17,zero,464e8 <__pow5mult+0x58>
   464d0:	00003406 	br	465a4 <__pow5mult+0x114>
   464d4:	8021d07a 	srai	r16,r16,1
   464d8:	80001526 	beq	r16,zero,46530 <__pow5mult+0xa0>
   464dc:	88800017 	ldw	r2,0(r17)
   464e0:	10001c26 	beq	r2,zero,46554 <__pow5mult+0xc4>
   464e4:	1023883a 	mov	r17,r2
   464e8:	8080004c 	andi	r2,r16,1
   464ec:	103ff926 	beq	r2,zero,464d4 <__alt_data_end+0xfffe64d4>
   464f0:	880d883a 	mov	r6,r17
   464f4:	900b883a 	mov	r5,r18
   464f8:	9809883a 	mov	r4,r19
   464fc:	00462980 	call	46298 <__multiply>
   46500:	90001b26 	beq	r18,zero,46570 <__pow5mult+0xe0>
   46504:	91000117 	ldw	r4,4(r18)
   46508:	98c01317 	ldw	r3,76(r19)
   4650c:	8021d07a 	srai	r16,r16,1
   46510:	2109883a 	add	r4,r4,r4
   46514:	2109883a 	add	r4,r4,r4
   46518:	1907883a 	add	r3,r3,r4
   4651c:	19000017 	ldw	r4,0(r3)
   46520:	91000015 	stw	r4,0(r18)
   46524:	1c800015 	stw	r18,0(r3)
   46528:	1025883a 	mov	r18,r2
   4652c:	803feb1e 	bne	r16,zero,464dc <__alt_data_end+0xfffe64dc>
   46530:	9005883a 	mov	r2,r18
   46534:	dfc00517 	ldw	ra,20(sp)
   46538:	dd000417 	ldw	r20,16(sp)
   4653c:	dcc00317 	ldw	r19,12(sp)
   46540:	dc800217 	ldw	r18,8(sp)
   46544:	dc400117 	ldw	r17,4(sp)
   46548:	dc000017 	ldw	r16,0(sp)
   4654c:	dec00604 	addi	sp,sp,24
   46550:	f800283a 	ret
   46554:	880d883a 	mov	r6,r17
   46558:	880b883a 	mov	r5,r17
   4655c:	9809883a 	mov	r4,r19
   46560:	00462980 	call	46298 <__multiply>
   46564:	88800015 	stw	r2,0(r17)
   46568:	10000015 	stw	zero,0(r2)
   4656c:	003fdd06 	br	464e4 <__alt_data_end+0xfffe64e4>
   46570:	1025883a 	mov	r18,r2
   46574:	003fd706 	br	464d4 <__alt_data_end+0xfffe64d4>
   46578:	10bfffc4 	addi	r2,r2,-1
   4657c:	1085883a 	add	r2,r2,r2
   46580:	00c00174 	movhi	r3,5
   46584:	18fedd04 	addi	r3,r3,-1164
   46588:	1085883a 	add	r2,r2,r2
   4658c:	1885883a 	add	r2,r3,r2
   46590:	11800017 	ldw	r6,0(r2)
   46594:	000f883a 	mov	r7,zero
   46598:	0045f200 	call	45f20 <__multadd>
   4659c:	1025883a 	mov	r18,r2
   465a0:	003fc706 	br	464c0 <__alt_data_end+0xfffe64c0>
   465a4:	05000044 	movi	r20,1
   465a8:	a00b883a 	mov	r5,r20
   465ac:	9809883a 	mov	r4,r19
   465b0:	0045e500 	call	45e50 <_Balloc>
   465b4:	1023883a 	mov	r17,r2
   465b8:	00809c44 	movi	r2,625
   465bc:	88800515 	stw	r2,20(r17)
   465c0:	8d000415 	stw	r20,16(r17)
   465c4:	9c401215 	stw	r17,72(r19)
   465c8:	88000015 	stw	zero,0(r17)
   465cc:	003fc606 	br	464e8 <__alt_data_end+0xfffe64e8>

000465d0 <__lshift>:
   465d0:	defff904 	addi	sp,sp,-28
   465d4:	dd400515 	stw	r21,20(sp)
   465d8:	dcc00315 	stw	r19,12(sp)
   465dc:	302bd17a 	srai	r21,r6,5
   465e0:	2cc00417 	ldw	r19,16(r5)
   465e4:	28800217 	ldw	r2,8(r5)
   465e8:	dd000415 	stw	r20,16(sp)
   465ec:	ace7883a 	add	r19,r21,r19
   465f0:	dc800215 	stw	r18,8(sp)
   465f4:	dc400115 	stw	r17,4(sp)
   465f8:	dc000015 	stw	r16,0(sp)
   465fc:	dfc00615 	stw	ra,24(sp)
   46600:	9c000044 	addi	r16,r19,1
   46604:	2823883a 	mov	r17,r5
   46608:	3029883a 	mov	r20,r6
   4660c:	2025883a 	mov	r18,r4
   46610:	29400117 	ldw	r5,4(r5)
   46614:	1400030e 	bge	r2,r16,46624 <__lshift+0x54>
   46618:	1085883a 	add	r2,r2,r2
   4661c:	29400044 	addi	r5,r5,1
   46620:	143ffd16 	blt	r2,r16,46618 <__alt_data_end+0xfffe6618>
   46624:	9009883a 	mov	r4,r18
   46628:	0045e500 	call	45e50 <_Balloc>
   4662c:	10c00504 	addi	r3,r2,20
   46630:	0540070e 	bge	zero,r21,46650 <__lshift+0x80>
   46634:	ad6b883a 	add	r21,r21,r21
   46638:	ad6b883a 	add	r21,r21,r21
   4663c:	1809883a 	mov	r4,r3
   46640:	1d47883a 	add	r3,r3,r21
   46644:	20000015 	stw	zero,0(r4)
   46648:	21000104 	addi	r4,r4,4
   4664c:	193ffd1e 	bne	r3,r4,46644 <__alt_data_end+0xfffe6644>
   46650:	8a000417 	ldw	r8,16(r17)
   46654:	89000504 	addi	r4,r17,20
   46658:	a18007cc 	andi	r6,r20,31
   4665c:	4211883a 	add	r8,r8,r8
   46660:	4211883a 	add	r8,r8,r8
   46664:	2211883a 	add	r8,r4,r8
   46668:	30002326 	beq	r6,zero,466f8 <__lshift+0x128>
   4666c:	02400804 	movi	r9,32
   46670:	4993c83a 	sub	r9,r9,r6
   46674:	000b883a 	mov	r5,zero
   46678:	21c00017 	ldw	r7,0(r4)
   4667c:	1815883a 	mov	r10,r3
   46680:	18c00104 	addi	r3,r3,4
   46684:	398e983a 	sll	r7,r7,r6
   46688:	21000104 	addi	r4,r4,4
   4668c:	394ab03a 	or	r5,r7,r5
   46690:	197fff15 	stw	r5,-4(r3)
   46694:	217fff17 	ldw	r5,-4(r4)
   46698:	2a4ad83a 	srl	r5,r5,r9
   4669c:	223ff636 	bltu	r4,r8,46678 <__alt_data_end+0xfffe6678>
   466a0:	51400115 	stw	r5,4(r10)
   466a4:	28001a1e 	bne	r5,zero,46710 <__lshift+0x140>
   466a8:	843fffc4 	addi	r16,r16,-1
   466ac:	14000415 	stw	r16,16(r2)
   466b0:	88000826 	beq	r17,zero,466d4 <__lshift+0x104>
   466b4:	89000117 	ldw	r4,4(r17)
   466b8:	90c01317 	ldw	r3,76(r18)
   466bc:	2109883a 	add	r4,r4,r4
   466c0:	2109883a 	add	r4,r4,r4
   466c4:	1907883a 	add	r3,r3,r4
   466c8:	19000017 	ldw	r4,0(r3)
   466cc:	89000015 	stw	r4,0(r17)
   466d0:	1c400015 	stw	r17,0(r3)
   466d4:	dfc00617 	ldw	ra,24(sp)
   466d8:	dd400517 	ldw	r21,20(sp)
   466dc:	dd000417 	ldw	r20,16(sp)
   466e0:	dcc00317 	ldw	r19,12(sp)
   466e4:	dc800217 	ldw	r18,8(sp)
   466e8:	dc400117 	ldw	r17,4(sp)
   466ec:	dc000017 	ldw	r16,0(sp)
   466f0:	dec00704 	addi	sp,sp,28
   466f4:	f800283a 	ret
   466f8:	21400017 	ldw	r5,0(r4)
   466fc:	18c00104 	addi	r3,r3,4
   46700:	21000104 	addi	r4,r4,4
   46704:	197fff15 	stw	r5,-4(r3)
   46708:	223ffb36 	bltu	r4,r8,466f8 <__alt_data_end+0xfffe66f8>
   4670c:	003fe606 	br	466a8 <__alt_data_end+0xfffe66a8>
   46710:	9c000084 	addi	r16,r19,2
   46714:	003fe406 	br	466a8 <__alt_data_end+0xfffe66a8>

00046718 <__mcmp>:
   46718:	20800417 	ldw	r2,16(r4)
   4671c:	28c00417 	ldw	r3,16(r5)
   46720:	10c5c83a 	sub	r2,r2,r3
   46724:	1000111e 	bne	r2,zero,4676c <__mcmp+0x54>
   46728:	18c7883a 	add	r3,r3,r3
   4672c:	18c7883a 	add	r3,r3,r3
   46730:	21000504 	addi	r4,r4,20
   46734:	29400504 	addi	r5,r5,20
   46738:	20c5883a 	add	r2,r4,r3
   4673c:	28cb883a 	add	r5,r5,r3
   46740:	00000106 	br	46748 <__mcmp+0x30>
   46744:	20800a2e 	bgeu	r4,r2,46770 <__mcmp+0x58>
   46748:	10bfff04 	addi	r2,r2,-4
   4674c:	297fff04 	addi	r5,r5,-4
   46750:	11800017 	ldw	r6,0(r2)
   46754:	28c00017 	ldw	r3,0(r5)
   46758:	30fffa26 	beq	r6,r3,46744 <__alt_data_end+0xfffe6744>
   4675c:	30c00236 	bltu	r6,r3,46768 <__mcmp+0x50>
   46760:	00800044 	movi	r2,1
   46764:	f800283a 	ret
   46768:	00bfffc4 	movi	r2,-1
   4676c:	f800283a 	ret
   46770:	0005883a 	mov	r2,zero
   46774:	f800283a 	ret

00046778 <__mdiff>:
   46778:	28c00417 	ldw	r3,16(r5)
   4677c:	30800417 	ldw	r2,16(r6)
   46780:	defffa04 	addi	sp,sp,-24
   46784:	dcc00315 	stw	r19,12(sp)
   46788:	dc800215 	stw	r18,8(sp)
   4678c:	dfc00515 	stw	ra,20(sp)
   46790:	dd000415 	stw	r20,16(sp)
   46794:	dc400115 	stw	r17,4(sp)
   46798:	dc000015 	stw	r16,0(sp)
   4679c:	1887c83a 	sub	r3,r3,r2
   467a0:	2825883a 	mov	r18,r5
   467a4:	3027883a 	mov	r19,r6
   467a8:	1800141e 	bne	r3,zero,467fc <__mdiff+0x84>
   467ac:	1085883a 	add	r2,r2,r2
   467b0:	1085883a 	add	r2,r2,r2
   467b4:	2a000504 	addi	r8,r5,20
   467b8:	34000504 	addi	r16,r6,20
   467bc:	4087883a 	add	r3,r8,r2
   467c0:	8085883a 	add	r2,r16,r2
   467c4:	00000106 	br	467cc <__mdiff+0x54>
   467c8:	40c0592e 	bgeu	r8,r3,46930 <__mdiff+0x1b8>
   467cc:	18ffff04 	addi	r3,r3,-4
   467d0:	10bfff04 	addi	r2,r2,-4
   467d4:	19c00017 	ldw	r7,0(r3)
   467d8:	11400017 	ldw	r5,0(r2)
   467dc:	397ffa26 	beq	r7,r5,467c8 <__alt_data_end+0xfffe67c8>
   467e0:	3940592e 	bgeu	r7,r5,46948 <__mdiff+0x1d0>
   467e4:	9005883a 	mov	r2,r18
   467e8:	4023883a 	mov	r17,r8
   467ec:	9825883a 	mov	r18,r19
   467f0:	05000044 	movi	r20,1
   467f4:	1027883a 	mov	r19,r2
   467f8:	00000406 	br	4680c <__mdiff+0x94>
   467fc:	18005616 	blt	r3,zero,46958 <__mdiff+0x1e0>
   46800:	34400504 	addi	r17,r6,20
   46804:	2c000504 	addi	r16,r5,20
   46808:	0029883a 	mov	r20,zero
   4680c:	91400117 	ldw	r5,4(r18)
   46810:	0045e500 	call	45e50 <_Balloc>
   46814:	92400417 	ldw	r9,16(r18)
   46818:	9b000417 	ldw	r12,16(r19)
   4681c:	12c00504 	addi	r11,r2,20
   46820:	4a51883a 	add	r8,r9,r9
   46824:	6319883a 	add	r12,r12,r12
   46828:	4211883a 	add	r8,r8,r8
   4682c:	6319883a 	add	r12,r12,r12
   46830:	15000315 	stw	r20,12(r2)
   46834:	8211883a 	add	r8,r16,r8
   46838:	8b19883a 	add	r12,r17,r12
   4683c:	0007883a 	mov	r3,zero
   46840:	81400017 	ldw	r5,0(r16)
   46844:	89c00017 	ldw	r7,0(r17)
   46848:	59800104 	addi	r6,r11,4
   4684c:	293fffcc 	andi	r4,r5,65535
   46850:	20c7883a 	add	r3,r4,r3
   46854:	393fffcc 	andi	r4,r7,65535
   46858:	1909c83a 	sub	r4,r3,r4
   4685c:	280ad43a 	srli	r5,r5,16
   46860:	380ed43a 	srli	r7,r7,16
   46864:	2007d43a 	srai	r3,r4,16
   46868:	213fffcc 	andi	r4,r4,65535
   4686c:	29cbc83a 	sub	r5,r5,r7
   46870:	28c7883a 	add	r3,r5,r3
   46874:	180a943a 	slli	r5,r3,16
   46878:	8c400104 	addi	r17,r17,4
   4687c:	84000104 	addi	r16,r16,4
   46880:	2908b03a 	or	r4,r5,r4
   46884:	59000015 	stw	r4,0(r11)
   46888:	1807d43a 	srai	r3,r3,16
   4688c:	3015883a 	mov	r10,r6
   46890:	3017883a 	mov	r11,r6
   46894:	8b3fea36 	bltu	r17,r12,46840 <__alt_data_end+0xfffe6840>
   46898:	8200162e 	bgeu	r16,r8,468f4 <__mdiff+0x17c>
   4689c:	8017883a 	mov	r11,r16
   468a0:	59400017 	ldw	r5,0(r11)
   468a4:	31800104 	addi	r6,r6,4
   468a8:	5ac00104 	addi	r11,r11,4
   468ac:	293fffcc 	andi	r4,r5,65535
   468b0:	20c7883a 	add	r3,r4,r3
   468b4:	280ed43a 	srli	r7,r5,16
   468b8:	180bd43a 	srai	r5,r3,16
   468bc:	193fffcc 	andi	r4,r3,65535
   468c0:	3947883a 	add	r3,r7,r5
   468c4:	180a943a 	slli	r5,r3,16
   468c8:	1807d43a 	srai	r3,r3,16
   468cc:	2908b03a 	or	r4,r5,r4
   468d0:	313fff15 	stw	r4,-4(r6)
   468d4:	5a3ff236 	bltu	r11,r8,468a0 <__alt_data_end+0xfffe68a0>
   468d8:	0406303a 	nor	r3,zero,r16
   468dc:	1a07883a 	add	r3,r3,r8
   468e0:	1806d0ba 	srli	r3,r3,2
   468e4:	18c00044 	addi	r3,r3,1
   468e8:	18c7883a 	add	r3,r3,r3
   468ec:	18c7883a 	add	r3,r3,r3
   468f0:	50d5883a 	add	r10,r10,r3
   468f4:	50ffff04 	addi	r3,r10,-4
   468f8:	2000041e 	bne	r4,zero,4690c <__mdiff+0x194>
   468fc:	18ffff04 	addi	r3,r3,-4
   46900:	19000017 	ldw	r4,0(r3)
   46904:	4a7fffc4 	addi	r9,r9,-1
   46908:	203ffc26 	beq	r4,zero,468fc <__alt_data_end+0xfffe68fc>
   4690c:	12400415 	stw	r9,16(r2)
   46910:	dfc00517 	ldw	ra,20(sp)
   46914:	dd000417 	ldw	r20,16(sp)
   46918:	dcc00317 	ldw	r19,12(sp)
   4691c:	dc800217 	ldw	r18,8(sp)
   46920:	dc400117 	ldw	r17,4(sp)
   46924:	dc000017 	ldw	r16,0(sp)
   46928:	dec00604 	addi	sp,sp,24
   4692c:	f800283a 	ret
   46930:	000b883a 	mov	r5,zero
   46934:	0045e500 	call	45e50 <_Balloc>
   46938:	00c00044 	movi	r3,1
   4693c:	10c00415 	stw	r3,16(r2)
   46940:	10000515 	stw	zero,20(r2)
   46944:	003ff206 	br	46910 <__alt_data_end+0xfffe6910>
   46948:	8023883a 	mov	r17,r16
   4694c:	0029883a 	mov	r20,zero
   46950:	4021883a 	mov	r16,r8
   46954:	003fad06 	br	4680c <__alt_data_end+0xfffe680c>
   46958:	9005883a 	mov	r2,r18
   4695c:	94400504 	addi	r17,r18,20
   46960:	9c000504 	addi	r16,r19,20
   46964:	9825883a 	mov	r18,r19
   46968:	05000044 	movi	r20,1
   4696c:	1027883a 	mov	r19,r2
   46970:	003fa606 	br	4680c <__alt_data_end+0xfffe680c>

00046974 <__ulp>:
   46974:	295ffc2c 	andhi	r5,r5,32752
   46978:	00bf3034 	movhi	r2,64704
   4697c:	2887883a 	add	r3,r5,r2
   46980:	00c0020e 	bge	zero,r3,4698c <__ulp+0x18>
   46984:	0005883a 	mov	r2,zero
   46988:	f800283a 	ret
   4698c:	00c7c83a 	sub	r3,zero,r3
   46990:	1807d53a 	srai	r3,r3,20
   46994:	008004c4 	movi	r2,19
   46998:	10c00b0e 	bge	r2,r3,469c8 <__ulp+0x54>
   4699c:	18bffb04 	addi	r2,r3,-20
   469a0:	01000784 	movi	r4,30
   469a4:	0007883a 	mov	r3,zero
   469a8:	20800516 	blt	r4,r2,469c0 <__ulp+0x4c>
   469ac:	010007c4 	movi	r4,31
   469b0:	2089c83a 	sub	r4,r4,r2
   469b4:	00800044 	movi	r2,1
   469b8:	1104983a 	sll	r2,r2,r4
   469bc:	f800283a 	ret
   469c0:	00800044 	movi	r2,1
   469c4:	f800283a 	ret
   469c8:	01400234 	movhi	r5,8
   469cc:	28c7d83a 	sra	r3,r5,r3
   469d0:	0005883a 	mov	r2,zero
   469d4:	f800283a 	ret

000469d8 <__b2d>:
   469d8:	defffa04 	addi	sp,sp,-24
   469dc:	dc000015 	stw	r16,0(sp)
   469e0:	24000417 	ldw	r16,16(r4)
   469e4:	dc400115 	stw	r17,4(sp)
   469e8:	24400504 	addi	r17,r4,20
   469ec:	8421883a 	add	r16,r16,r16
   469f0:	8421883a 	add	r16,r16,r16
   469f4:	8c21883a 	add	r16,r17,r16
   469f8:	dc800215 	stw	r18,8(sp)
   469fc:	84bfff17 	ldw	r18,-4(r16)
   46a00:	dd000415 	stw	r20,16(sp)
   46a04:	dcc00315 	stw	r19,12(sp)
   46a08:	9009883a 	mov	r4,r18
   46a0c:	2829883a 	mov	r20,r5
   46a10:	dfc00515 	stw	ra,20(sp)
   46a14:	00461440 	call	46144 <__hi0bits>
   46a18:	00c00804 	movi	r3,32
   46a1c:	1889c83a 	sub	r4,r3,r2
   46a20:	a1000015 	stw	r4,0(r20)
   46a24:	01000284 	movi	r4,10
   46a28:	84ffff04 	addi	r19,r16,-4
   46a2c:	20801216 	blt	r4,r2,46a78 <__b2d+0xa0>
   46a30:	018002c4 	movi	r6,11
   46a34:	308dc83a 	sub	r6,r6,r2
   46a38:	9186d83a 	srl	r3,r18,r6
   46a3c:	18cffc34 	orhi	r3,r3,16368
   46a40:	8cc0212e 	bgeu	r17,r19,46ac8 <__b2d+0xf0>
   46a44:	813ffe17 	ldw	r4,-8(r16)
   46a48:	218cd83a 	srl	r6,r4,r6
   46a4c:	10800544 	addi	r2,r2,21
   46a50:	9084983a 	sll	r2,r18,r2
   46a54:	1184b03a 	or	r2,r2,r6
   46a58:	dfc00517 	ldw	ra,20(sp)
   46a5c:	dd000417 	ldw	r20,16(sp)
   46a60:	dcc00317 	ldw	r19,12(sp)
   46a64:	dc800217 	ldw	r18,8(sp)
   46a68:	dc400117 	ldw	r17,4(sp)
   46a6c:	dc000017 	ldw	r16,0(sp)
   46a70:	dec00604 	addi	sp,sp,24
   46a74:	f800283a 	ret
   46a78:	8cc00f2e 	bgeu	r17,r19,46ab8 <__b2d+0xe0>
   46a7c:	117ffd44 	addi	r5,r2,-11
   46a80:	80bffe17 	ldw	r2,-8(r16)
   46a84:	28000e26 	beq	r5,zero,46ac0 <__b2d+0xe8>
   46a88:	1949c83a 	sub	r4,r3,r5
   46a8c:	9164983a 	sll	r18,r18,r5
   46a90:	1106d83a 	srl	r3,r2,r4
   46a94:	81bffe04 	addi	r6,r16,-8
   46a98:	948ffc34 	orhi	r18,r18,16368
   46a9c:	90c6b03a 	or	r3,r18,r3
   46aa0:	89800e2e 	bgeu	r17,r6,46adc <__b2d+0x104>
   46aa4:	81bffd17 	ldw	r6,-12(r16)
   46aa8:	1144983a 	sll	r2,r2,r5
   46aac:	310ad83a 	srl	r5,r6,r4
   46ab0:	2884b03a 	or	r2,r5,r2
   46ab4:	003fe806 	br	46a58 <__alt_data_end+0xfffe6a58>
   46ab8:	10bffd44 	addi	r2,r2,-11
   46abc:	1000041e 	bne	r2,zero,46ad0 <__b2d+0xf8>
   46ac0:	90cffc34 	orhi	r3,r18,16368
   46ac4:	003fe406 	br	46a58 <__alt_data_end+0xfffe6a58>
   46ac8:	000d883a 	mov	r6,zero
   46acc:	003fdf06 	br	46a4c <__alt_data_end+0xfffe6a4c>
   46ad0:	90a4983a 	sll	r18,r18,r2
   46ad4:	0005883a 	mov	r2,zero
   46ad8:	003ff906 	br	46ac0 <__alt_data_end+0xfffe6ac0>
   46adc:	1144983a 	sll	r2,r2,r5
   46ae0:	003fdd06 	br	46a58 <__alt_data_end+0xfffe6a58>

00046ae4 <__d2b>:
   46ae4:	defff804 	addi	sp,sp,-32
   46ae8:	dc000215 	stw	r16,8(sp)
   46aec:	3021883a 	mov	r16,r6
   46af0:	dc400315 	stw	r17,12(sp)
   46af4:	8022907a 	slli	r17,r16,1
   46af8:	dd000615 	stw	r20,24(sp)
   46afc:	2829883a 	mov	r20,r5
   46b00:	01400044 	movi	r5,1
   46b04:	dcc00515 	stw	r19,20(sp)
   46b08:	dc800415 	stw	r18,16(sp)
   46b0c:	dfc00715 	stw	ra,28(sp)
   46b10:	3825883a 	mov	r18,r7
   46b14:	8822d57a 	srli	r17,r17,21
   46b18:	0045e500 	call	45e50 <_Balloc>
   46b1c:	1027883a 	mov	r19,r2
   46b20:	00800434 	movhi	r2,16
   46b24:	10bfffc4 	addi	r2,r2,-1
   46b28:	808c703a 	and	r6,r16,r2
   46b2c:	88000126 	beq	r17,zero,46b34 <__d2b+0x50>
   46b30:	31800434 	orhi	r6,r6,16
   46b34:	d9800015 	stw	r6,0(sp)
   46b38:	a0002426 	beq	r20,zero,46bcc <__d2b+0xe8>
   46b3c:	d9000104 	addi	r4,sp,4
   46b40:	dd000115 	stw	r20,4(sp)
   46b44:	00461ac0 	call	461ac <__lo0bits>
   46b48:	d8c00017 	ldw	r3,0(sp)
   46b4c:	10002f1e 	bne	r2,zero,46c0c <__d2b+0x128>
   46b50:	d9000117 	ldw	r4,4(sp)
   46b54:	99000515 	stw	r4,20(r19)
   46b58:	1821003a 	cmpeq	r16,r3,zero
   46b5c:	01000084 	movi	r4,2
   46b60:	2421c83a 	sub	r16,r4,r16
   46b64:	98c00615 	stw	r3,24(r19)
   46b68:	9c000415 	stw	r16,16(r19)
   46b6c:	88001f1e 	bne	r17,zero,46bec <__d2b+0x108>
   46b70:	10bef384 	addi	r2,r2,-1074
   46b74:	90800015 	stw	r2,0(r18)
   46b78:	00900034 	movhi	r2,16384
   46b7c:	10bfffc4 	addi	r2,r2,-1
   46b80:	8085883a 	add	r2,r16,r2
   46b84:	1085883a 	add	r2,r2,r2
   46b88:	1085883a 	add	r2,r2,r2
   46b8c:	9885883a 	add	r2,r19,r2
   46b90:	11000517 	ldw	r4,20(r2)
   46b94:	8020917a 	slli	r16,r16,5
   46b98:	00461440 	call	46144 <__hi0bits>
   46b9c:	d8c00817 	ldw	r3,32(sp)
   46ba0:	8085c83a 	sub	r2,r16,r2
   46ba4:	18800015 	stw	r2,0(r3)
   46ba8:	9805883a 	mov	r2,r19
   46bac:	dfc00717 	ldw	ra,28(sp)
   46bb0:	dd000617 	ldw	r20,24(sp)
   46bb4:	dcc00517 	ldw	r19,20(sp)
   46bb8:	dc800417 	ldw	r18,16(sp)
   46bbc:	dc400317 	ldw	r17,12(sp)
   46bc0:	dc000217 	ldw	r16,8(sp)
   46bc4:	dec00804 	addi	sp,sp,32
   46bc8:	f800283a 	ret
   46bcc:	d809883a 	mov	r4,sp
   46bd0:	00461ac0 	call	461ac <__lo0bits>
   46bd4:	d8c00017 	ldw	r3,0(sp)
   46bd8:	04000044 	movi	r16,1
   46bdc:	9c000415 	stw	r16,16(r19)
   46be0:	98c00515 	stw	r3,20(r19)
   46be4:	10800804 	addi	r2,r2,32
   46be8:	883fe126 	beq	r17,zero,46b70 <__alt_data_end+0xfffe6b70>
   46bec:	00c00d44 	movi	r3,53
   46bf0:	8c7ef344 	addi	r17,r17,-1075
   46bf4:	88a3883a 	add	r17,r17,r2
   46bf8:	1885c83a 	sub	r2,r3,r2
   46bfc:	d8c00817 	ldw	r3,32(sp)
   46c00:	94400015 	stw	r17,0(r18)
   46c04:	18800015 	stw	r2,0(r3)
   46c08:	003fe706 	br	46ba8 <__alt_data_end+0xfffe6ba8>
   46c0c:	01000804 	movi	r4,32
   46c10:	2089c83a 	sub	r4,r4,r2
   46c14:	1908983a 	sll	r4,r3,r4
   46c18:	d9400117 	ldw	r5,4(sp)
   46c1c:	1886d83a 	srl	r3,r3,r2
   46c20:	2148b03a 	or	r4,r4,r5
   46c24:	99000515 	stw	r4,20(r19)
   46c28:	d8c00015 	stw	r3,0(sp)
   46c2c:	003fca06 	br	46b58 <__alt_data_end+0xfffe6b58>

00046c30 <__ratio>:
   46c30:	defff904 	addi	sp,sp,-28
   46c34:	dc400315 	stw	r17,12(sp)
   46c38:	2823883a 	mov	r17,r5
   46c3c:	d9400104 	addi	r5,sp,4
   46c40:	dfc00615 	stw	ra,24(sp)
   46c44:	dcc00515 	stw	r19,20(sp)
   46c48:	dc800415 	stw	r18,16(sp)
   46c4c:	2027883a 	mov	r19,r4
   46c50:	dc000215 	stw	r16,8(sp)
   46c54:	00469d80 	call	469d8 <__b2d>
   46c58:	d80b883a 	mov	r5,sp
   46c5c:	8809883a 	mov	r4,r17
   46c60:	1025883a 	mov	r18,r2
   46c64:	1821883a 	mov	r16,r3
   46c68:	00469d80 	call	469d8 <__b2d>
   46c6c:	8a000417 	ldw	r8,16(r17)
   46c70:	99000417 	ldw	r4,16(r19)
   46c74:	d9400117 	ldw	r5,4(sp)
   46c78:	2209c83a 	sub	r4,r4,r8
   46c7c:	2010917a 	slli	r8,r4,5
   46c80:	d9000017 	ldw	r4,0(sp)
   46c84:	2909c83a 	sub	r4,r5,r4
   46c88:	4109883a 	add	r4,r8,r4
   46c8c:	01000e0e 	bge	zero,r4,46cc8 <__ratio+0x98>
   46c90:	2008953a 	slli	r4,r4,20
   46c94:	2421883a 	add	r16,r4,r16
   46c98:	100d883a 	mov	r6,r2
   46c9c:	180f883a 	mov	r7,r3
   46ca0:	9009883a 	mov	r4,r18
   46ca4:	800b883a 	mov	r5,r16
   46ca8:	004b1cc0 	call	4b1cc <__divdf3>
   46cac:	dfc00617 	ldw	ra,24(sp)
   46cb0:	dcc00517 	ldw	r19,20(sp)
   46cb4:	dc800417 	ldw	r18,16(sp)
   46cb8:	dc400317 	ldw	r17,12(sp)
   46cbc:	dc000217 	ldw	r16,8(sp)
   46cc0:	dec00704 	addi	sp,sp,28
   46cc4:	f800283a 	ret
   46cc8:	2008953a 	slli	r4,r4,20
   46ccc:	1907c83a 	sub	r3,r3,r4
   46cd0:	003ff106 	br	46c98 <__alt_data_end+0xfffe6c98>

00046cd4 <_mprec_log10>:
   46cd4:	defffe04 	addi	sp,sp,-8
   46cd8:	dc000015 	stw	r16,0(sp)
   46cdc:	dfc00115 	stw	ra,4(sp)
   46ce0:	008005c4 	movi	r2,23
   46ce4:	2021883a 	mov	r16,r4
   46ce8:	11000d0e 	bge	r2,r4,46d20 <_mprec_log10+0x4c>
   46cec:	0005883a 	mov	r2,zero
   46cf0:	00cffc34 	movhi	r3,16368
   46cf4:	843fffc4 	addi	r16,r16,-1
   46cf8:	000d883a 	mov	r6,zero
   46cfc:	01d00934 	movhi	r7,16420
   46d00:	1009883a 	mov	r4,r2
   46d04:	180b883a 	mov	r5,r3
   46d08:	004bd0c0 	call	4bd0c <__muldf3>
   46d0c:	803ff91e 	bne	r16,zero,46cf4 <__alt_data_end+0xfffe6cf4>
   46d10:	dfc00117 	ldw	ra,4(sp)
   46d14:	dc000017 	ldw	r16,0(sp)
   46d18:	dec00204 	addi	sp,sp,8
   46d1c:	f800283a 	ret
   46d20:	202090fa 	slli	r16,r4,3
   46d24:	00800174 	movhi	r2,5
   46d28:	10bef404 	addi	r2,r2,-1072
   46d2c:	1421883a 	add	r16,r2,r16
   46d30:	80800017 	ldw	r2,0(r16)
   46d34:	80c00117 	ldw	r3,4(r16)
   46d38:	dfc00117 	ldw	ra,4(sp)
   46d3c:	dc000017 	ldw	r16,0(sp)
   46d40:	dec00204 	addi	sp,sp,8
   46d44:	f800283a 	ret

00046d48 <__copybits>:
   46d48:	297fffc4 	addi	r5,r5,-1
   46d4c:	280fd17a 	srai	r7,r5,5
   46d50:	30c00417 	ldw	r3,16(r6)
   46d54:	30800504 	addi	r2,r6,20
   46d58:	39c00044 	addi	r7,r7,1
   46d5c:	18c7883a 	add	r3,r3,r3
   46d60:	39cf883a 	add	r7,r7,r7
   46d64:	18c7883a 	add	r3,r3,r3
   46d68:	39cf883a 	add	r7,r7,r7
   46d6c:	10c7883a 	add	r3,r2,r3
   46d70:	21cf883a 	add	r7,r4,r7
   46d74:	10c00d2e 	bgeu	r2,r3,46dac <__copybits+0x64>
   46d78:	200b883a 	mov	r5,r4
   46d7c:	12000017 	ldw	r8,0(r2)
   46d80:	29400104 	addi	r5,r5,4
   46d84:	10800104 	addi	r2,r2,4
   46d88:	2a3fff15 	stw	r8,-4(r5)
   46d8c:	10fffb36 	bltu	r2,r3,46d7c <__alt_data_end+0xfffe6d7c>
   46d90:	1985c83a 	sub	r2,r3,r6
   46d94:	10bffac4 	addi	r2,r2,-21
   46d98:	1004d0ba 	srli	r2,r2,2
   46d9c:	10800044 	addi	r2,r2,1
   46da0:	1085883a 	add	r2,r2,r2
   46da4:	1085883a 	add	r2,r2,r2
   46da8:	2089883a 	add	r4,r4,r2
   46dac:	21c0032e 	bgeu	r4,r7,46dbc <__copybits+0x74>
   46db0:	20000015 	stw	zero,0(r4)
   46db4:	21000104 	addi	r4,r4,4
   46db8:	21fffd36 	bltu	r4,r7,46db0 <__alt_data_end+0xfffe6db0>
   46dbc:	f800283a 	ret

00046dc0 <__any_on>:
   46dc0:	20c00417 	ldw	r3,16(r4)
   46dc4:	2805d17a 	srai	r2,r5,5
   46dc8:	21000504 	addi	r4,r4,20
   46dcc:	18800d0e 	bge	r3,r2,46e04 <__any_on+0x44>
   46dd0:	18c7883a 	add	r3,r3,r3
   46dd4:	18c7883a 	add	r3,r3,r3
   46dd8:	20c7883a 	add	r3,r4,r3
   46ddc:	20c0192e 	bgeu	r4,r3,46e44 <__any_on+0x84>
   46de0:	18bfff17 	ldw	r2,-4(r3)
   46de4:	18ffff04 	addi	r3,r3,-4
   46de8:	1000041e 	bne	r2,zero,46dfc <__any_on+0x3c>
   46dec:	20c0142e 	bgeu	r4,r3,46e40 <__any_on+0x80>
   46df0:	18ffff04 	addi	r3,r3,-4
   46df4:	19400017 	ldw	r5,0(r3)
   46df8:	283ffc26 	beq	r5,zero,46dec <__alt_data_end+0xfffe6dec>
   46dfc:	00800044 	movi	r2,1
   46e00:	f800283a 	ret
   46e04:	10c00a0e 	bge	r2,r3,46e30 <__any_on+0x70>
   46e08:	1085883a 	add	r2,r2,r2
   46e0c:	1085883a 	add	r2,r2,r2
   46e10:	294007cc 	andi	r5,r5,31
   46e14:	2087883a 	add	r3,r4,r2
   46e18:	283ff026 	beq	r5,zero,46ddc <__alt_data_end+0xfffe6ddc>
   46e1c:	19800017 	ldw	r6,0(r3)
   46e20:	3144d83a 	srl	r2,r6,r5
   46e24:	114a983a 	sll	r5,r2,r5
   46e28:	317ff41e 	bne	r6,r5,46dfc <__alt_data_end+0xfffe6dfc>
   46e2c:	003feb06 	br	46ddc <__alt_data_end+0xfffe6ddc>
   46e30:	1085883a 	add	r2,r2,r2
   46e34:	1085883a 	add	r2,r2,r2
   46e38:	2087883a 	add	r3,r4,r2
   46e3c:	003fe706 	br	46ddc <__alt_data_end+0xfffe6ddc>
   46e40:	f800283a 	ret
   46e44:	0005883a 	mov	r2,zero
   46e48:	f800283a 	ret

00046e4c <__fpclassifyd>:
   46e4c:	00a00034 	movhi	r2,32768
   46e50:	10bfffc4 	addi	r2,r2,-1
   46e54:	2884703a 	and	r2,r5,r2
   46e58:	10000726 	beq	r2,zero,46e78 <__fpclassifyd+0x2c>
   46e5c:	00fffc34 	movhi	r3,65520
   46e60:	019ff834 	movhi	r6,32736
   46e64:	28c7883a 	add	r3,r5,r3
   46e68:	31bfffc4 	addi	r6,r6,-1
   46e6c:	30c00536 	bltu	r6,r3,46e84 <__fpclassifyd+0x38>
   46e70:	00800104 	movi	r2,4
   46e74:	f800283a 	ret
   46e78:	2000021e 	bne	r4,zero,46e84 <__fpclassifyd+0x38>
   46e7c:	00800084 	movi	r2,2
   46e80:	f800283a 	ret
   46e84:	00dffc34 	movhi	r3,32752
   46e88:	019ff834 	movhi	r6,32736
   46e8c:	28cb883a 	add	r5,r5,r3
   46e90:	31bfffc4 	addi	r6,r6,-1
   46e94:	317ff62e 	bgeu	r6,r5,46e70 <__alt_data_end+0xfffe6e70>
   46e98:	01400434 	movhi	r5,16
   46e9c:	297fffc4 	addi	r5,r5,-1
   46ea0:	28800236 	bltu	r5,r2,46eac <__fpclassifyd+0x60>
   46ea4:	008000c4 	movi	r2,3
   46ea8:	f800283a 	ret
   46eac:	10c00226 	beq	r2,r3,46eb8 <__fpclassifyd+0x6c>
   46eb0:	0005883a 	mov	r2,zero
   46eb4:	f800283a 	ret
   46eb8:	2005003a 	cmpeq	r2,r4,zero
   46ebc:	f800283a 	ret

00046ec0 <_sbrk_r>:
   46ec0:	defffd04 	addi	sp,sp,-12
   46ec4:	dc000015 	stw	r16,0(sp)
   46ec8:	04000174 	movhi	r16,5
   46ecc:	dc400115 	stw	r17,4(sp)
   46ed0:	840cf904 	addi	r16,r16,13284
   46ed4:	2023883a 	mov	r17,r4
   46ed8:	2809883a 	mov	r4,r5
   46edc:	dfc00215 	stw	ra,8(sp)
   46ee0:	80000015 	stw	zero,0(r16)
   46ee4:	004dbf00 	call	4dbf0 <sbrk>
   46ee8:	00ffffc4 	movi	r3,-1
   46eec:	10c00526 	beq	r2,r3,46f04 <_sbrk_r+0x44>
   46ef0:	dfc00217 	ldw	ra,8(sp)
   46ef4:	dc400117 	ldw	r17,4(sp)
   46ef8:	dc000017 	ldw	r16,0(sp)
   46efc:	dec00304 	addi	sp,sp,12
   46f00:	f800283a 	ret
   46f04:	80c00017 	ldw	r3,0(r16)
   46f08:	183ff926 	beq	r3,zero,46ef0 <__alt_data_end+0xfffe6ef0>
   46f0c:	88c00015 	stw	r3,0(r17)
   46f10:	003ff706 	br	46ef0 <__alt_data_end+0xfffe6ef0>

00046f14 <__sread>:
   46f14:	defffe04 	addi	sp,sp,-8
   46f18:	dc000015 	stw	r16,0(sp)
   46f1c:	2821883a 	mov	r16,r5
   46f20:	2940038f 	ldh	r5,14(r5)
   46f24:	dfc00115 	stw	ra,4(sp)
   46f28:	00493b80 	call	493b8 <_read_r>
   46f2c:	10000716 	blt	r2,zero,46f4c <__sread+0x38>
   46f30:	80c01417 	ldw	r3,80(r16)
   46f34:	1887883a 	add	r3,r3,r2
   46f38:	80c01415 	stw	r3,80(r16)
   46f3c:	dfc00117 	ldw	ra,4(sp)
   46f40:	dc000017 	ldw	r16,0(sp)
   46f44:	dec00204 	addi	sp,sp,8
   46f48:	f800283a 	ret
   46f4c:	80c0030b 	ldhu	r3,12(r16)
   46f50:	18fbffcc 	andi	r3,r3,61439
   46f54:	80c0030d 	sth	r3,12(r16)
   46f58:	dfc00117 	ldw	ra,4(sp)
   46f5c:	dc000017 	ldw	r16,0(sp)
   46f60:	dec00204 	addi	sp,sp,8
   46f64:	f800283a 	ret

00046f68 <__seofread>:
   46f68:	0005883a 	mov	r2,zero
   46f6c:	f800283a 	ret

00046f70 <__swrite>:
   46f70:	2880030b 	ldhu	r2,12(r5)
   46f74:	defffb04 	addi	sp,sp,-20
   46f78:	dcc00315 	stw	r19,12(sp)
   46f7c:	dc800215 	stw	r18,8(sp)
   46f80:	dc400115 	stw	r17,4(sp)
   46f84:	dc000015 	stw	r16,0(sp)
   46f88:	dfc00415 	stw	ra,16(sp)
   46f8c:	10c0400c 	andi	r3,r2,256
   46f90:	2821883a 	mov	r16,r5
   46f94:	2023883a 	mov	r17,r4
   46f98:	3025883a 	mov	r18,r6
   46f9c:	3827883a 	mov	r19,r7
   46fa0:	18000526 	beq	r3,zero,46fb8 <__swrite+0x48>
   46fa4:	2940038f 	ldh	r5,14(r5)
   46fa8:	01c00084 	movi	r7,2
   46fac:	000d883a 	mov	r6,zero
   46fb0:	00491fc0 	call	491fc <_lseek_r>
   46fb4:	8080030b 	ldhu	r2,12(r16)
   46fb8:	8140038f 	ldh	r5,14(r16)
   46fbc:	10bbffcc 	andi	r2,r2,61439
   46fc0:	980f883a 	mov	r7,r19
   46fc4:	900d883a 	mov	r6,r18
   46fc8:	8809883a 	mov	r4,r17
   46fcc:	8080030d 	sth	r2,12(r16)
   46fd0:	dfc00417 	ldw	ra,16(sp)
   46fd4:	dcc00317 	ldw	r19,12(sp)
   46fd8:	dc800217 	ldw	r18,8(sp)
   46fdc:	dc400117 	ldw	r17,4(sp)
   46fe0:	dc000017 	ldw	r16,0(sp)
   46fe4:	dec00504 	addi	sp,sp,20
   46fe8:	004880c1 	jmpi	4880c <_write_r>

00046fec <__sseek>:
   46fec:	defffe04 	addi	sp,sp,-8
   46ff0:	dc000015 	stw	r16,0(sp)
   46ff4:	2821883a 	mov	r16,r5
   46ff8:	2940038f 	ldh	r5,14(r5)
   46ffc:	dfc00115 	stw	ra,4(sp)
   47000:	00491fc0 	call	491fc <_lseek_r>
   47004:	00ffffc4 	movi	r3,-1
   47008:	10c00826 	beq	r2,r3,4702c <__sseek+0x40>
   4700c:	80c0030b 	ldhu	r3,12(r16)
   47010:	80801415 	stw	r2,80(r16)
   47014:	18c40014 	ori	r3,r3,4096
   47018:	80c0030d 	sth	r3,12(r16)
   4701c:	dfc00117 	ldw	ra,4(sp)
   47020:	dc000017 	ldw	r16,0(sp)
   47024:	dec00204 	addi	sp,sp,8
   47028:	f800283a 	ret
   4702c:	80c0030b 	ldhu	r3,12(r16)
   47030:	18fbffcc 	andi	r3,r3,61439
   47034:	80c0030d 	sth	r3,12(r16)
   47038:	dfc00117 	ldw	ra,4(sp)
   4703c:	dc000017 	ldw	r16,0(sp)
   47040:	dec00204 	addi	sp,sp,8
   47044:	f800283a 	ret

00047048 <__sclose>:
   47048:	2940038f 	ldh	r5,14(r5)
   4704c:	004886c1 	jmpi	4886c <_close_r>

00047050 <strcmp>:
   47050:	2144b03a 	or	r2,r4,r5
   47054:	108000cc 	andi	r2,r2,3
   47058:	1000171e 	bne	r2,zero,470b8 <strcmp+0x68>
   4705c:	20800017 	ldw	r2,0(r4)
   47060:	28c00017 	ldw	r3,0(r5)
   47064:	10c0141e 	bne	r2,r3,470b8 <strcmp+0x68>
   47068:	027fbff4 	movhi	r9,65279
   4706c:	4a7fbfc4 	addi	r9,r9,-257
   47070:	0086303a 	nor	r3,zero,r2
   47074:	02202074 	movhi	r8,32897
   47078:	1245883a 	add	r2,r2,r9
   4707c:	42202004 	addi	r8,r8,-32640
   47080:	10c4703a 	and	r2,r2,r3
   47084:	1204703a 	and	r2,r2,r8
   47088:	10000226 	beq	r2,zero,47094 <strcmp+0x44>
   4708c:	00002306 	br	4711c <strcmp+0xcc>
   47090:	1000221e 	bne	r2,zero,4711c <strcmp+0xcc>
   47094:	21000104 	addi	r4,r4,4
   47098:	20c00017 	ldw	r3,0(r4)
   4709c:	29400104 	addi	r5,r5,4
   470a0:	29800017 	ldw	r6,0(r5)
   470a4:	1a4f883a 	add	r7,r3,r9
   470a8:	00c4303a 	nor	r2,zero,r3
   470ac:	3884703a 	and	r2,r7,r2
   470b0:	1204703a 	and	r2,r2,r8
   470b4:	19bff626 	beq	r3,r6,47090 <__alt_data_end+0xfffe7090>
   470b8:	20800003 	ldbu	r2,0(r4)
   470bc:	10c03fcc 	andi	r3,r2,255
   470c0:	18c0201c 	xori	r3,r3,128
   470c4:	18ffe004 	addi	r3,r3,-128
   470c8:	18000c26 	beq	r3,zero,470fc <strcmp+0xac>
   470cc:	29800007 	ldb	r6,0(r5)
   470d0:	19800326 	beq	r3,r6,470e0 <strcmp+0x90>
   470d4:	00001306 	br	47124 <strcmp+0xd4>
   470d8:	29800007 	ldb	r6,0(r5)
   470dc:	11800b1e 	bne	r2,r6,4710c <strcmp+0xbc>
   470e0:	21000044 	addi	r4,r4,1
   470e4:	20c00003 	ldbu	r3,0(r4)
   470e8:	29400044 	addi	r5,r5,1
   470ec:	18803fcc 	andi	r2,r3,255
   470f0:	1080201c 	xori	r2,r2,128
   470f4:	10bfe004 	addi	r2,r2,-128
   470f8:	103ff71e 	bne	r2,zero,470d8 <__alt_data_end+0xfffe70d8>
   470fc:	0007883a 	mov	r3,zero
   47100:	28800003 	ldbu	r2,0(r5)
   47104:	1885c83a 	sub	r2,r3,r2
   47108:	f800283a 	ret
   4710c:	28800003 	ldbu	r2,0(r5)
   47110:	18c03fcc 	andi	r3,r3,255
   47114:	1885c83a 	sub	r2,r3,r2
   47118:	f800283a 	ret
   4711c:	0005883a 	mov	r2,zero
   47120:	f800283a 	ret
   47124:	10c03fcc 	andi	r3,r2,255
   47128:	003ff506 	br	47100 <__alt_data_end+0xfffe7100>

0004712c <strlen>:
   4712c:	208000cc 	andi	r2,r4,3
   47130:	10002026 	beq	r2,zero,471b4 <strlen+0x88>
   47134:	20800007 	ldb	r2,0(r4)
   47138:	10002026 	beq	r2,zero,471bc <strlen+0x90>
   4713c:	2005883a 	mov	r2,r4
   47140:	00000206 	br	4714c <strlen+0x20>
   47144:	10c00007 	ldb	r3,0(r2)
   47148:	18001826 	beq	r3,zero,471ac <strlen+0x80>
   4714c:	10800044 	addi	r2,r2,1
   47150:	10c000cc 	andi	r3,r2,3
   47154:	183ffb1e 	bne	r3,zero,47144 <__alt_data_end+0xfffe7144>
   47158:	10c00017 	ldw	r3,0(r2)
   4715c:	01ffbff4 	movhi	r7,65279
   47160:	39ffbfc4 	addi	r7,r7,-257
   47164:	00ca303a 	nor	r5,zero,r3
   47168:	01a02074 	movhi	r6,32897
   4716c:	19c7883a 	add	r3,r3,r7
   47170:	31a02004 	addi	r6,r6,-32640
   47174:	1946703a 	and	r3,r3,r5
   47178:	1986703a 	and	r3,r3,r6
   4717c:	1800091e 	bne	r3,zero,471a4 <strlen+0x78>
   47180:	10800104 	addi	r2,r2,4
   47184:	10c00017 	ldw	r3,0(r2)
   47188:	19cb883a 	add	r5,r3,r7
   4718c:	00c6303a 	nor	r3,zero,r3
   47190:	28c6703a 	and	r3,r5,r3
   47194:	1986703a 	and	r3,r3,r6
   47198:	183ff926 	beq	r3,zero,47180 <__alt_data_end+0xfffe7180>
   4719c:	00000106 	br	471a4 <strlen+0x78>
   471a0:	10800044 	addi	r2,r2,1
   471a4:	10c00007 	ldb	r3,0(r2)
   471a8:	183ffd1e 	bne	r3,zero,471a0 <__alt_data_end+0xfffe71a0>
   471ac:	1105c83a 	sub	r2,r2,r4
   471b0:	f800283a 	ret
   471b4:	2005883a 	mov	r2,r4
   471b8:	003fe706 	br	47158 <__alt_data_end+0xfffe7158>
   471bc:	0005883a 	mov	r2,zero
   471c0:	f800283a 	ret

000471c4 <__sprint_r.part.0>:
   471c4:	28801917 	ldw	r2,100(r5)
   471c8:	defff604 	addi	sp,sp,-40
   471cc:	dd400515 	stw	r21,20(sp)
   471d0:	dfc00915 	stw	ra,36(sp)
   471d4:	df000815 	stw	fp,32(sp)
   471d8:	ddc00715 	stw	r23,28(sp)
   471dc:	dd800615 	stw	r22,24(sp)
   471e0:	dd000415 	stw	r20,16(sp)
   471e4:	dcc00315 	stw	r19,12(sp)
   471e8:	dc800215 	stw	r18,8(sp)
   471ec:	dc400115 	stw	r17,4(sp)
   471f0:	dc000015 	stw	r16,0(sp)
   471f4:	1088000c 	andi	r2,r2,8192
   471f8:	302b883a 	mov	r21,r6
   471fc:	10002e26 	beq	r2,zero,472b8 <__sprint_r.part.0+0xf4>
   47200:	30800217 	ldw	r2,8(r6)
   47204:	35800017 	ldw	r22,0(r6)
   47208:	10002926 	beq	r2,zero,472b0 <__sprint_r.part.0+0xec>
   4720c:	2827883a 	mov	r19,r5
   47210:	2029883a 	mov	r20,r4
   47214:	b5c00104 	addi	r23,r22,4
   47218:	04bfffc4 	movi	r18,-1
   4721c:	bc400017 	ldw	r17,0(r23)
   47220:	b4000017 	ldw	r16,0(r22)
   47224:	0039883a 	mov	fp,zero
   47228:	8822d0ba 	srli	r17,r17,2
   4722c:	8800031e 	bne	r17,zero,4723c <__sprint_r.part.0+0x78>
   47230:	00001806 	br	47294 <__sprint_r.part.0+0xd0>
   47234:	84000104 	addi	r16,r16,4
   47238:	8f001526 	beq	r17,fp,47290 <__sprint_r.part.0+0xcc>
   4723c:	81400017 	ldw	r5,0(r16)
   47240:	980d883a 	mov	r6,r19
   47244:	a009883a 	mov	r4,r20
   47248:	0048bec0 	call	48bec <_fputwc_r>
   4724c:	e7000044 	addi	fp,fp,1
   47250:	14bff81e 	bne	r2,r18,47234 <__alt_data_end+0xfffe7234>
   47254:	9005883a 	mov	r2,r18
   47258:	a8000215 	stw	zero,8(r21)
   4725c:	a8000115 	stw	zero,4(r21)
   47260:	dfc00917 	ldw	ra,36(sp)
   47264:	df000817 	ldw	fp,32(sp)
   47268:	ddc00717 	ldw	r23,28(sp)
   4726c:	dd800617 	ldw	r22,24(sp)
   47270:	dd400517 	ldw	r21,20(sp)
   47274:	dd000417 	ldw	r20,16(sp)
   47278:	dcc00317 	ldw	r19,12(sp)
   4727c:	dc800217 	ldw	r18,8(sp)
   47280:	dc400117 	ldw	r17,4(sp)
   47284:	dc000017 	ldw	r16,0(sp)
   47288:	dec00a04 	addi	sp,sp,40
   4728c:	f800283a 	ret
   47290:	a8800217 	ldw	r2,8(r21)
   47294:	8c63883a 	add	r17,r17,r17
   47298:	8c63883a 	add	r17,r17,r17
   4729c:	1445c83a 	sub	r2,r2,r17
   472a0:	a8800215 	stw	r2,8(r21)
   472a4:	b5800204 	addi	r22,r22,8
   472a8:	bdc00204 	addi	r23,r23,8
   472ac:	103fdb1e 	bne	r2,zero,4721c <__alt_data_end+0xfffe721c>
   472b0:	0005883a 	mov	r2,zero
   472b4:	003fe806 	br	47258 <__alt_data_end+0xfffe7258>
   472b8:	0048cec0 	call	48cec <__sfvwrite_r>
   472bc:	003fe606 	br	47258 <__alt_data_end+0xfffe7258>

000472c0 <__sprint_r>:
   472c0:	30c00217 	ldw	r3,8(r6)
   472c4:	18000126 	beq	r3,zero,472cc <__sprint_r+0xc>
   472c8:	00471c41 	jmpi	471c4 <__sprint_r.part.0>
   472cc:	30000115 	stw	zero,4(r6)
   472d0:	0005883a 	mov	r2,zero
   472d4:	f800283a 	ret

000472d8 <___vfiprintf_internal_r>:
   472d8:	deffc904 	addi	sp,sp,-220
   472dc:	df003515 	stw	fp,212(sp)
   472e0:	dd003115 	stw	r20,196(sp)
   472e4:	dfc03615 	stw	ra,216(sp)
   472e8:	ddc03415 	stw	r23,208(sp)
   472ec:	dd803315 	stw	r22,204(sp)
   472f0:	dd403215 	stw	r21,200(sp)
   472f4:	dcc03015 	stw	r19,192(sp)
   472f8:	dc802f15 	stw	r18,188(sp)
   472fc:	dc402e15 	stw	r17,184(sp)
   47300:	dc002d15 	stw	r16,180(sp)
   47304:	d9002015 	stw	r4,128(sp)
   47308:	d9c02215 	stw	r7,136(sp)
   4730c:	2829883a 	mov	r20,r5
   47310:	3039883a 	mov	fp,r6
   47314:	20000226 	beq	r4,zero,47320 <___vfiprintf_internal_r+0x48>
   47318:	20800e17 	ldw	r2,56(r4)
   4731c:	1000cf26 	beq	r2,zero,4765c <___vfiprintf_internal_r+0x384>
   47320:	a080030b 	ldhu	r2,12(r20)
   47324:	10c8000c 	andi	r3,r2,8192
   47328:	1800061e 	bne	r3,zero,47344 <___vfiprintf_internal_r+0x6c>
   4732c:	a1001917 	ldw	r4,100(r20)
   47330:	00f7ffc4 	movi	r3,-8193
   47334:	10880014 	ori	r2,r2,8192
   47338:	20c6703a 	and	r3,r4,r3
   4733c:	a080030d 	sth	r2,12(r20)
   47340:	a0c01915 	stw	r3,100(r20)
   47344:	10c0020c 	andi	r3,r2,8
   47348:	1800a926 	beq	r3,zero,475f0 <___vfiprintf_internal_r+0x318>
   4734c:	a0c00417 	ldw	r3,16(r20)
   47350:	1800a726 	beq	r3,zero,475f0 <___vfiprintf_internal_r+0x318>
   47354:	1080068c 	andi	r2,r2,26
   47358:	00c00284 	movi	r3,10
   4735c:	10c0ac26 	beq	r2,r3,47610 <___vfiprintf_internal_r+0x338>
   47360:	da801a04 	addi	r10,sp,104
   47364:	da801e15 	stw	r10,120(sp)
   47368:	d8801e17 	ldw	r2,120(sp)
   4736c:	da8019c4 	addi	r10,sp,103
   47370:	05800174 	movhi	r22,5
   47374:	05c00174 	movhi	r23,5
   47378:	da801f15 	stw	r10,124(sp)
   4737c:	1295c83a 	sub	r10,r2,r10
   47380:	b5bf2a04 	addi	r22,r22,-856
   47384:	bdff2604 	addi	r23,r23,-872
   47388:	dec01a15 	stw	sp,104(sp)
   4738c:	d8001c15 	stw	zero,112(sp)
   47390:	d8001b15 	stw	zero,108(sp)
   47394:	d8002615 	stw	zero,152(sp)
   47398:	d8002315 	stw	zero,140(sp)
   4739c:	da802715 	stw	r10,156(sp)
   473a0:	d811883a 	mov	r8,sp
   473a4:	dd002115 	stw	r20,132(sp)
   473a8:	e021883a 	mov	r16,fp
   473ac:	80800007 	ldb	r2,0(r16)
   473b0:	1003ea26 	beq	r2,zero,4835c <___vfiprintf_internal_r+0x1084>
   473b4:	00c00944 	movi	r3,37
   473b8:	8025883a 	mov	r18,r16
   473bc:	10c0021e 	bne	r2,r3,473c8 <___vfiprintf_internal_r+0xf0>
   473c0:	00001606 	br	4741c <___vfiprintf_internal_r+0x144>
   473c4:	10c00326 	beq	r2,r3,473d4 <___vfiprintf_internal_r+0xfc>
   473c8:	94800044 	addi	r18,r18,1
   473cc:	90800007 	ldb	r2,0(r18)
   473d0:	103ffc1e 	bne	r2,zero,473c4 <__alt_data_end+0xfffe73c4>
   473d4:	9423c83a 	sub	r17,r18,r16
   473d8:	88001026 	beq	r17,zero,4741c <___vfiprintf_internal_r+0x144>
   473dc:	d8c01c17 	ldw	r3,112(sp)
   473e0:	d8801b17 	ldw	r2,108(sp)
   473e4:	44000015 	stw	r16,0(r8)
   473e8:	88c7883a 	add	r3,r17,r3
   473ec:	10800044 	addi	r2,r2,1
   473f0:	44400115 	stw	r17,4(r8)
   473f4:	d8c01c15 	stw	r3,112(sp)
   473f8:	d8801b15 	stw	r2,108(sp)
   473fc:	010001c4 	movi	r4,7
   47400:	2080760e 	bge	r4,r2,475dc <___vfiprintf_internal_r+0x304>
   47404:	1803821e 	bne	r3,zero,48210 <___vfiprintf_internal_r+0xf38>
   47408:	da802317 	ldw	r10,140(sp)
   4740c:	d8001b15 	stw	zero,108(sp)
   47410:	d811883a 	mov	r8,sp
   47414:	5455883a 	add	r10,r10,r17
   47418:	da802315 	stw	r10,140(sp)
   4741c:	90800007 	ldb	r2,0(r18)
   47420:	10044626 	beq	r2,zero,4853c <___vfiprintf_internal_r+0x1264>
   47424:	90c00047 	ldb	r3,1(r18)
   47428:	94000044 	addi	r16,r18,1
   4742c:	d8001d85 	stb	zero,118(sp)
   47430:	0009883a 	mov	r4,zero
   47434:	000f883a 	mov	r7,zero
   47438:	027fffc4 	movi	r9,-1
   4743c:	0023883a 	mov	r17,zero
   47440:	0029883a 	mov	r20,zero
   47444:	01401604 	movi	r5,88
   47448:	01800244 	movi	r6,9
   4744c:	03400a84 	movi	r13,42
   47450:	03001b04 	movi	r12,108
   47454:	84000044 	addi	r16,r16,1
   47458:	18bff804 	addi	r2,r3,-32
   4745c:	28827336 	bltu	r5,r2,47e2c <___vfiprintf_internal_r+0xb54>
   47460:	100490ba 	slli	r2,r2,2
   47464:	02800134 	movhi	r10,4
   47468:	529d1e04 	addi	r10,r10,29816
   4746c:	1285883a 	add	r2,r2,r10
   47470:	10800017 	ldw	r2,0(r2)
   47474:	1000683a 	jmp	r2
   47478:	00047b60 	cmpeqi	zero,zero,4589
   4747c:	00047e2c 	andhi	zero,zero,4600
   47480:	00047e2c 	andhi	zero,zero,4600
   47484:	00047b80 	call	47b8 <__reset-0x3b848>
   47488:	00047e2c 	andhi	zero,zero,4600
   4748c:	00047e2c 	andhi	zero,zero,4600
   47490:	00047e2c 	andhi	zero,zero,4600
   47494:	00047e2c 	andhi	zero,zero,4600
   47498:	00047e2c 	andhi	zero,zero,4600
   4749c:	00047e2c 	andhi	zero,zero,4600
   474a0:	00047d68 	cmpgeui	zero,zero,4597
   474a4:	00047d84 	movi	zero,4598
   474a8:	00047e2c 	andhi	zero,zero,4600
   474ac:	0004766c 	andhi	zero,zero,4569
   474b0:	00047d94 	movui	zero,4598
   474b4:	00047e2c 	andhi	zero,zero,4600
   474b8:	00047b8c 	andi	zero,zero,4590
   474bc:	00047b98 	cmpnei	zero,zero,4590
   474c0:	00047b98 	cmpnei	zero,zero,4590
   474c4:	00047b98 	cmpnei	zero,zero,4590
   474c8:	00047b98 	cmpnei	zero,zero,4590
   474cc:	00047b98 	cmpnei	zero,zero,4590
   474d0:	00047b98 	cmpnei	zero,zero,4590
   474d4:	00047b98 	cmpnei	zero,zero,4590
   474d8:	00047b98 	cmpnei	zero,zero,4590
   474dc:	00047b98 	cmpnei	zero,zero,4590
   474e0:	00047e2c 	andhi	zero,zero,4600
   474e4:	00047e2c 	andhi	zero,zero,4600
   474e8:	00047e2c 	andhi	zero,zero,4600
   474ec:	00047e2c 	andhi	zero,zero,4600
   474f0:	00047e2c 	andhi	zero,zero,4600
   474f4:	00047e2c 	andhi	zero,zero,4600
   474f8:	00047e2c 	andhi	zero,zero,4600
   474fc:	00047e2c 	andhi	zero,zero,4600
   47500:	00047e2c 	andhi	zero,zero,4600
   47504:	00047e2c 	andhi	zero,zero,4600
   47508:	00047bc4 	movi	zero,4591
   4750c:	00047e2c 	andhi	zero,zero,4600
   47510:	00047e2c 	andhi	zero,zero,4600
   47514:	00047e2c 	andhi	zero,zero,4600
   47518:	00047e2c 	andhi	zero,zero,4600
   4751c:	00047e2c 	andhi	zero,zero,4600
   47520:	00047e2c 	andhi	zero,zero,4600
   47524:	00047e2c 	andhi	zero,zero,4600
   47528:	00047e2c 	andhi	zero,zero,4600
   4752c:	00047e2c 	andhi	zero,zero,4600
   47530:	00047e2c 	andhi	zero,zero,4600
   47534:	00047bfc 	xorhi	zero,zero,4591
   47538:	00047e2c 	andhi	zero,zero,4600
   4753c:	00047e2c 	andhi	zero,zero,4600
   47540:	00047e2c 	andhi	zero,zero,4600
   47544:	00047e2c 	andhi	zero,zero,4600
   47548:	00047e2c 	andhi	zero,zero,4600
   4754c:	00047c54 	movui	zero,4593
   47550:	00047e2c 	andhi	zero,zero,4600
   47554:	00047e2c 	andhi	zero,zero,4600
   47558:	00047cc4 	movi	zero,4595
   4755c:	00047e2c 	andhi	zero,zero,4600
   47560:	00047e2c 	andhi	zero,zero,4600
   47564:	00047e2c 	andhi	zero,zero,4600
   47568:	00047e2c 	andhi	zero,zero,4600
   4756c:	00047e2c 	andhi	zero,zero,4600
   47570:	00047e2c 	andhi	zero,zero,4600
   47574:	00047e2c 	andhi	zero,zero,4600
   47578:	00047e2c 	andhi	zero,zero,4600
   4757c:	00047e2c 	andhi	zero,zero,4600
   47580:	00047e2c 	andhi	zero,zero,4600
   47584:	00047a70 	cmpltui	zero,zero,4585
   47588:	00047a9c 	xori	zero,zero,4586
   4758c:	00047e2c 	andhi	zero,zero,4600
   47590:	00047e2c 	andhi	zero,zero,4600
   47594:	00047e2c 	andhi	zero,zero,4600
   47598:	00047dd4 	movui	zero,4599
   4759c:	00047a9c 	xori	zero,zero,4586
   475a0:	00047e2c 	andhi	zero,zero,4600
   475a4:	00047e2c 	andhi	zero,zero,4600
   475a8:	00047930 	cmpltui	zero,zero,4580
   475ac:	00047e2c 	andhi	zero,zero,4600
   475b0:	00047940 	call	4794 <__reset-0x3b86c>
   475b4:	0004797c 	xorhi	zero,zero,4581
   475b8:	00047678 	rdprs	zero,zero,4569
   475bc:	00047924 	muli	zero,zero,4580
   475c0:	00047e2c 	andhi	zero,zero,4600
   475c4:	00047d00 	call	47d0 <__reset-0x3b830>
   475c8:	00047e2c 	andhi	zero,zero,4600
   475cc:	00047d58 	cmpnei	zero,zero,4597
   475d0:	00047e2c 	andhi	zero,zero,4600
   475d4:	00047e2c 	andhi	zero,zero,4600
   475d8:	00047a1c 	xori	zero,zero,4584
   475dc:	42000204 	addi	r8,r8,8
   475e0:	da802317 	ldw	r10,140(sp)
   475e4:	5455883a 	add	r10,r10,r17
   475e8:	da802315 	stw	r10,140(sp)
   475ec:	003f8b06 	br	4741c <__alt_data_end+0xfffe741c>
   475f0:	d9002017 	ldw	r4,128(sp)
   475f4:	a00b883a 	mov	r5,r20
   475f8:	0042a780 	call	42a78 <__swsetup_r>
   475fc:	1003b11e 	bne	r2,zero,484c4 <___vfiprintf_internal_r+0x11ec>
   47600:	a080030b 	ldhu	r2,12(r20)
   47604:	00c00284 	movi	r3,10
   47608:	1080068c 	andi	r2,r2,26
   4760c:	10ff541e 	bne	r2,r3,47360 <__alt_data_end+0xfffe7360>
   47610:	a080038f 	ldh	r2,14(r20)
   47614:	103f5216 	blt	r2,zero,47360 <__alt_data_end+0xfffe7360>
   47618:	d9c02217 	ldw	r7,136(sp)
   4761c:	d9002017 	ldw	r4,128(sp)
   47620:	e00d883a 	mov	r6,fp
   47624:	a00b883a 	mov	r5,r20
   47628:	00487500 	call	48750 <__sbprintf>
   4762c:	dfc03617 	ldw	ra,216(sp)
   47630:	df003517 	ldw	fp,212(sp)
   47634:	ddc03417 	ldw	r23,208(sp)
   47638:	dd803317 	ldw	r22,204(sp)
   4763c:	dd403217 	ldw	r21,200(sp)
   47640:	dd003117 	ldw	r20,196(sp)
   47644:	dcc03017 	ldw	r19,192(sp)
   47648:	dc802f17 	ldw	r18,188(sp)
   4764c:	dc402e17 	ldw	r17,184(sp)
   47650:	dc002d17 	ldw	r16,180(sp)
   47654:	dec03704 	addi	sp,sp,220
   47658:	f800283a 	ret
   4765c:	0044a4c0 	call	44a4c <__sinit>
   47660:	003f2f06 	br	47320 <__alt_data_end+0xfffe7320>
   47664:	0463c83a 	sub	r17,zero,r17
   47668:	d8802215 	stw	r2,136(sp)
   4766c:	a5000114 	ori	r20,r20,4
   47670:	80c00007 	ldb	r3,0(r16)
   47674:	003f7706 	br	47454 <__alt_data_end+0xfffe7454>
   47678:	00800c04 	movi	r2,48
   4767c:	da802217 	ldw	r10,136(sp)
   47680:	d8801d05 	stb	r2,116(sp)
   47684:	00801e04 	movi	r2,120
   47688:	d8801d45 	stb	r2,117(sp)
   4768c:	d8001d85 	stb	zero,118(sp)
   47690:	50c00104 	addi	r3,r10,4
   47694:	54800017 	ldw	r18,0(r10)
   47698:	0027883a 	mov	r19,zero
   4769c:	a0800094 	ori	r2,r20,2
   476a0:	48030b16 	blt	r9,zero,482d0 <___vfiprintf_internal_r+0xff8>
   476a4:	00bfdfc4 	movi	r2,-129
   476a8:	a096703a 	and	r11,r20,r2
   476ac:	d8c02215 	stw	r3,136(sp)
   476b0:	5d000094 	ori	r20,r11,2
   476b4:	90032b1e 	bne	r18,zero,48364 <___vfiprintf_internal_r+0x108c>
   476b8:	00800174 	movhi	r2,5
   476bc:	10bec504 	addi	r2,r2,-1260
   476c0:	d8802615 	stw	r2,152(sp)
   476c4:	0039883a 	mov	fp,zero
   476c8:	48017b1e 	bne	r9,zero,47cb8 <___vfiprintf_internal_r+0x9e0>
   476cc:	0013883a 	mov	r9,zero
   476d0:	0027883a 	mov	r19,zero
   476d4:	dd401a04 	addi	r21,sp,104
   476d8:	4825883a 	mov	r18,r9
   476dc:	4cc0010e 	bge	r9,r19,476e4 <___vfiprintf_internal_r+0x40c>
   476e0:	9825883a 	mov	r18,r19
   476e4:	e7003fcc 	andi	fp,fp,255
   476e8:	e700201c 	xori	fp,fp,128
   476ec:	e73fe004 	addi	fp,fp,-128
   476f0:	e0000126 	beq	fp,zero,476f8 <___vfiprintf_internal_r+0x420>
   476f4:	94800044 	addi	r18,r18,1
   476f8:	a380008c 	andi	r14,r20,2
   476fc:	70000126 	beq	r14,zero,47704 <___vfiprintf_internal_r+0x42c>
   47700:	94800084 	addi	r18,r18,2
   47704:	a700210c 	andi	fp,r20,132
   47708:	e001df1e 	bne	fp,zero,47e88 <___vfiprintf_internal_r+0xbb0>
   4770c:	8c87c83a 	sub	r3,r17,r18
   47710:	00c1dd0e 	bge	zero,r3,47e88 <___vfiprintf_internal_r+0xbb0>
   47714:	01c00404 	movi	r7,16
   47718:	d8801c17 	ldw	r2,112(sp)
   4771c:	38c3ad0e 	bge	r7,r3,485d4 <___vfiprintf_internal_r+0x12fc>
   47720:	02800174 	movhi	r10,5
   47724:	52bf2a04 	addi	r10,r10,-856
   47728:	dc002915 	stw	r16,164(sp)
   4772c:	d9801b17 	ldw	r6,108(sp)
   47730:	da802415 	stw	r10,144(sp)
   47734:	03c001c4 	movi	r15,7
   47738:	da402515 	stw	r9,148(sp)
   4773c:	db802815 	stw	r14,160(sp)
   47740:	1821883a 	mov	r16,r3
   47744:	00000506 	br	4775c <___vfiprintf_internal_r+0x484>
   47748:	31400084 	addi	r5,r6,2
   4774c:	42000204 	addi	r8,r8,8
   47750:	200d883a 	mov	r6,r4
   47754:	843ffc04 	addi	r16,r16,-16
   47758:	3c000d0e 	bge	r7,r16,47790 <___vfiprintf_internal_r+0x4b8>
   4775c:	10800404 	addi	r2,r2,16
   47760:	31000044 	addi	r4,r6,1
   47764:	45800015 	stw	r22,0(r8)
   47768:	41c00115 	stw	r7,4(r8)
   4776c:	d8801c15 	stw	r2,112(sp)
   47770:	d9001b15 	stw	r4,108(sp)
   47774:	793ff40e 	bge	r15,r4,47748 <__alt_data_end+0xfffe7748>
   47778:	1001b51e 	bne	r2,zero,47e50 <___vfiprintf_internal_r+0xb78>
   4777c:	843ffc04 	addi	r16,r16,-16
   47780:	000d883a 	mov	r6,zero
   47784:	01400044 	movi	r5,1
   47788:	d811883a 	mov	r8,sp
   4778c:	3c3ff316 	blt	r7,r16,4775c <__alt_data_end+0xfffe775c>
   47790:	8007883a 	mov	r3,r16
   47794:	da402517 	ldw	r9,148(sp)
   47798:	db802817 	ldw	r14,160(sp)
   4779c:	dc002917 	ldw	r16,164(sp)
   477a0:	da802417 	ldw	r10,144(sp)
   477a4:	1885883a 	add	r2,r3,r2
   477a8:	40c00115 	stw	r3,4(r8)
   477ac:	42800015 	stw	r10,0(r8)
   477b0:	d8801c15 	stw	r2,112(sp)
   477b4:	d9401b15 	stw	r5,108(sp)
   477b8:	00c001c4 	movi	r3,7
   477bc:	19426016 	blt	r3,r5,48140 <___vfiprintf_internal_r+0xe68>
   477c0:	d8c01d87 	ldb	r3,118(sp)
   477c4:	42000204 	addi	r8,r8,8
   477c8:	29000044 	addi	r4,r5,1
   477cc:	1801b31e 	bne	r3,zero,47e9c <___vfiprintf_internal_r+0xbc4>
   477d0:	7001c026 	beq	r14,zero,47ed4 <___vfiprintf_internal_r+0xbfc>
   477d4:	d8c01d04 	addi	r3,sp,116
   477d8:	10800084 	addi	r2,r2,2
   477dc:	40c00015 	stw	r3,0(r8)
   477e0:	00c00084 	movi	r3,2
   477e4:	40c00115 	stw	r3,4(r8)
   477e8:	d8801c15 	stw	r2,112(sp)
   477ec:	d9001b15 	stw	r4,108(sp)
   477f0:	00c001c4 	movi	r3,7
   477f4:	1902650e 	bge	r3,r4,4818c <___vfiprintf_internal_r+0xeb4>
   477f8:	10029a1e 	bne	r2,zero,48264 <___vfiprintf_internal_r+0xf8c>
   477fc:	00c02004 	movi	r3,128
   47800:	01000044 	movi	r4,1
   47804:	000b883a 	mov	r5,zero
   47808:	d811883a 	mov	r8,sp
   4780c:	e0c1b31e 	bne	fp,r3,47edc <___vfiprintf_internal_r+0xc04>
   47810:	8cb9c83a 	sub	fp,r17,r18
   47814:	0701b10e 	bge	zero,fp,47edc <___vfiprintf_internal_r+0xc04>
   47818:	01c00404 	movi	r7,16
   4781c:	3f03890e 	bge	r7,fp,48644 <___vfiprintf_internal_r+0x136c>
   47820:	00c00174 	movhi	r3,5
   47824:	18ff2604 	addi	r3,r3,-872
   47828:	d8c02415 	stw	r3,144(sp)
   4782c:	8007883a 	mov	r3,r16
   47830:	034001c4 	movi	r13,7
   47834:	e021883a 	mov	r16,fp
   47838:	da402515 	stw	r9,148(sp)
   4783c:	1839883a 	mov	fp,r3
   47840:	00000506 	br	47858 <___vfiprintf_internal_r+0x580>
   47844:	29800084 	addi	r6,r5,2
   47848:	42000204 	addi	r8,r8,8
   4784c:	180b883a 	mov	r5,r3
   47850:	843ffc04 	addi	r16,r16,-16
   47854:	3c000d0e 	bge	r7,r16,4788c <___vfiprintf_internal_r+0x5b4>
   47858:	10800404 	addi	r2,r2,16
   4785c:	28c00044 	addi	r3,r5,1
   47860:	45c00015 	stw	r23,0(r8)
   47864:	41c00115 	stw	r7,4(r8)
   47868:	d8801c15 	stw	r2,112(sp)
   4786c:	d8c01b15 	stw	r3,108(sp)
   47870:	68fff40e 	bge	r13,r3,47844 <__alt_data_end+0xfffe7844>
   47874:	1002241e 	bne	r2,zero,48108 <___vfiprintf_internal_r+0xe30>
   47878:	843ffc04 	addi	r16,r16,-16
   4787c:	01800044 	movi	r6,1
   47880:	000b883a 	mov	r5,zero
   47884:	d811883a 	mov	r8,sp
   47888:	3c3ff316 	blt	r7,r16,47858 <__alt_data_end+0xfffe7858>
   4788c:	da402517 	ldw	r9,148(sp)
   47890:	e007883a 	mov	r3,fp
   47894:	8039883a 	mov	fp,r16
   47898:	1821883a 	mov	r16,r3
   4789c:	d8c02417 	ldw	r3,144(sp)
   478a0:	1705883a 	add	r2,r2,fp
   478a4:	47000115 	stw	fp,4(r8)
   478a8:	40c00015 	stw	r3,0(r8)
   478ac:	d8801c15 	stw	r2,112(sp)
   478b0:	d9801b15 	stw	r6,108(sp)
   478b4:	00c001c4 	movi	r3,7
   478b8:	19827616 	blt	r3,r6,48294 <___vfiprintf_internal_r+0xfbc>
   478bc:	4cf9c83a 	sub	fp,r9,r19
   478c0:	42000204 	addi	r8,r8,8
   478c4:	31000044 	addi	r4,r6,1
   478c8:	300b883a 	mov	r5,r6
   478cc:	07018516 	blt	zero,fp,47ee4 <___vfiprintf_internal_r+0xc0c>
   478d0:	9885883a 	add	r2,r19,r2
   478d4:	45400015 	stw	r21,0(r8)
   478d8:	44c00115 	stw	r19,4(r8)
   478dc:	d8801c15 	stw	r2,112(sp)
   478e0:	d9001b15 	stw	r4,108(sp)
   478e4:	00c001c4 	movi	r3,7
   478e8:	1901dd0e 	bge	r3,r4,48060 <___vfiprintf_internal_r+0xd88>
   478ec:	1002401e 	bne	r2,zero,481f0 <___vfiprintf_internal_r+0xf18>
   478f0:	d8001b15 	stw	zero,108(sp)
   478f4:	a2c0010c 	andi	r11,r20,4
   478f8:	58000226 	beq	r11,zero,47904 <___vfiprintf_internal_r+0x62c>
   478fc:	8ca7c83a 	sub	r19,r17,r18
   47900:	04c2f216 	blt	zero,r19,484cc <___vfiprintf_internal_r+0x11f4>
   47904:	8c80010e 	bge	r17,r18,4790c <___vfiprintf_internal_r+0x634>
   47908:	9023883a 	mov	r17,r18
   4790c:	da802317 	ldw	r10,140(sp)
   47910:	5455883a 	add	r10,r10,r17
   47914:	da802315 	stw	r10,140(sp)
   47918:	d8001b15 	stw	zero,108(sp)
   4791c:	d811883a 	mov	r8,sp
   47920:	003ea206 	br	473ac <__alt_data_end+0xfffe73ac>
   47924:	a5000814 	ori	r20,r20,32
   47928:	80c00007 	ldb	r3,0(r16)
   4792c:	003ec906 	br	47454 <__alt_data_end+0xfffe7454>
   47930:	80c00007 	ldb	r3,0(r16)
   47934:	1b030926 	beq	r3,r12,4855c <___vfiprintf_internal_r+0x1284>
   47938:	a5000414 	ori	r20,r20,16
   4793c:	003ec506 	br	47454 <__alt_data_end+0xfffe7454>
   47940:	21003fcc 	andi	r4,r4,255
   47944:	20035e1e 	bne	r4,zero,486c0 <___vfiprintf_internal_r+0x13e8>
   47948:	a080080c 	andi	r2,r20,32
   4794c:	1002a526 	beq	r2,zero,483e4 <___vfiprintf_internal_r+0x110c>
   47950:	da802217 	ldw	r10,136(sp)
   47954:	50800017 	ldw	r2,0(r10)
   47958:	da802317 	ldw	r10,140(sp)
   4795c:	5007d7fa 	srai	r3,r10,31
   47960:	da802217 	ldw	r10,136(sp)
   47964:	10c00115 	stw	r3,4(r2)
   47968:	52800104 	addi	r10,r10,4
   4796c:	da802215 	stw	r10,136(sp)
   47970:	da802317 	ldw	r10,140(sp)
   47974:	12800015 	stw	r10,0(r2)
   47978:	003e8c06 	br	473ac <__alt_data_end+0xfffe73ac>
   4797c:	21003fcc 	andi	r4,r4,255
   47980:	2003511e 	bne	r4,zero,486c8 <___vfiprintf_internal_r+0x13f0>
   47984:	a080080c 	andi	r2,r20,32
   47988:	1000a126 	beq	r2,zero,47c10 <___vfiprintf_internal_r+0x938>
   4798c:	da802217 	ldw	r10,136(sp)
   47990:	d8001d85 	stb	zero,118(sp)
   47994:	50800204 	addi	r2,r10,8
   47998:	54800017 	ldw	r18,0(r10)
   4799c:	54c00117 	ldw	r19,4(r10)
   479a0:	4802b416 	blt	r9,zero,48474 <___vfiprintf_internal_r+0x119c>
   479a4:	013fdfc4 	movi	r4,-129
   479a8:	94c6b03a 	or	r3,r18,r19
   479ac:	d8802215 	stw	r2,136(sp)
   479b0:	a128703a 	and	r20,r20,r4
   479b4:	1800a226 	beq	r3,zero,47c40 <___vfiprintf_internal_r+0x968>
   479b8:	0039883a 	mov	fp,zero
   479bc:	dd401a04 	addi	r21,sp,104
   479c0:	9006d0fa 	srli	r3,r18,3
   479c4:	9808977a 	slli	r4,r19,29
   479c8:	9826d0fa 	srli	r19,r19,3
   479cc:	948001cc 	andi	r18,r18,7
   479d0:	90800c04 	addi	r2,r18,48
   479d4:	ad7fffc4 	addi	r21,r21,-1
   479d8:	20e4b03a 	or	r18,r4,r3
   479dc:	a8800005 	stb	r2,0(r21)
   479e0:	94c6b03a 	or	r3,r18,r19
   479e4:	183ff61e 	bne	r3,zero,479c0 <__alt_data_end+0xfffe79c0>
   479e8:	a0c0004c 	andi	r3,r20,1
   479ec:	18005926 	beq	r3,zero,47b54 <___vfiprintf_internal_r+0x87c>
   479f0:	10803fcc 	andi	r2,r2,255
   479f4:	1080201c 	xori	r2,r2,128
   479f8:	10bfe004 	addi	r2,r2,-128
   479fc:	00c00c04 	movi	r3,48
   47a00:	10c05426 	beq	r2,r3,47b54 <___vfiprintf_internal_r+0x87c>
   47a04:	da801e17 	ldw	r10,120(sp)
   47a08:	a8bfffc4 	addi	r2,r21,-1
   47a0c:	a8ffffc5 	stb	r3,-1(r21)
   47a10:	50a7c83a 	sub	r19,r10,r2
   47a14:	102b883a 	mov	r21,r2
   47a18:	003f2f06 	br	476d8 <__alt_data_end+0xfffe76d8>
   47a1c:	21003fcc 	andi	r4,r4,255
   47a20:	2003421e 	bne	r4,zero,4872c <___vfiprintf_internal_r+0x1454>
   47a24:	00800174 	movhi	r2,5
   47a28:	10bec504 	addi	r2,r2,-1260
   47a2c:	d8802615 	stw	r2,152(sp)
   47a30:	a080080c 	andi	r2,r20,32
   47a34:	1000aa26 	beq	r2,zero,47ce0 <___vfiprintf_internal_r+0xa08>
   47a38:	da802217 	ldw	r10,136(sp)
   47a3c:	54800017 	ldw	r18,0(r10)
   47a40:	54c00117 	ldw	r19,4(r10)
   47a44:	52800204 	addi	r10,r10,8
   47a48:	da802215 	stw	r10,136(sp)
   47a4c:	a080004c 	andi	r2,r20,1
   47a50:	1001d226 	beq	r2,zero,4819c <___vfiprintf_internal_r+0xec4>
   47a54:	94c4b03a 	or	r2,r18,r19
   47a58:	1002351e 	bne	r2,zero,48330 <___vfiprintf_internal_r+0x1058>
   47a5c:	d8001d85 	stb	zero,118(sp)
   47a60:	48022216 	blt	r9,zero,482ec <___vfiprintf_internal_r+0x1014>
   47a64:	00bfdfc4 	movi	r2,-129
   47a68:	a0a8703a 	and	r20,r20,r2
   47a6c:	003f1506 	br	476c4 <__alt_data_end+0xfffe76c4>
   47a70:	da802217 	ldw	r10,136(sp)
   47a74:	04800044 	movi	r18,1
   47a78:	d8001d85 	stb	zero,118(sp)
   47a7c:	50800017 	ldw	r2,0(r10)
   47a80:	52800104 	addi	r10,r10,4
   47a84:	da802215 	stw	r10,136(sp)
   47a88:	d8801005 	stb	r2,64(sp)
   47a8c:	9027883a 	mov	r19,r18
   47a90:	dd401004 	addi	r21,sp,64
   47a94:	0013883a 	mov	r9,zero
   47a98:	003f1706 	br	476f8 <__alt_data_end+0xfffe76f8>
   47a9c:	21003fcc 	andi	r4,r4,255
   47aa0:	2003201e 	bne	r4,zero,48724 <___vfiprintf_internal_r+0x144c>
   47aa4:	a080080c 	andi	r2,r20,32
   47aa8:	10004b26 	beq	r2,zero,47bd8 <___vfiprintf_internal_r+0x900>
   47aac:	da802217 	ldw	r10,136(sp)
   47ab0:	50800117 	ldw	r2,4(r10)
   47ab4:	54800017 	ldw	r18,0(r10)
   47ab8:	52800204 	addi	r10,r10,8
   47abc:	da802215 	stw	r10,136(sp)
   47ac0:	1027883a 	mov	r19,r2
   47ac4:	10022c16 	blt	r2,zero,48378 <___vfiprintf_internal_r+0x10a0>
   47ac8:	df001d83 	ldbu	fp,118(sp)
   47acc:	48007216 	blt	r9,zero,47c98 <___vfiprintf_internal_r+0x9c0>
   47ad0:	00ffdfc4 	movi	r3,-129
   47ad4:	94c4b03a 	or	r2,r18,r19
   47ad8:	a0e8703a 	and	r20,r20,r3
   47adc:	1000cc26 	beq	r2,zero,47e10 <___vfiprintf_internal_r+0xb38>
   47ae0:	98021026 	beq	r19,zero,48324 <___vfiprintf_internal_r+0x104c>
   47ae4:	dc402415 	stw	r17,144(sp)
   47ae8:	dc002515 	stw	r16,148(sp)
   47aec:	9823883a 	mov	r17,r19
   47af0:	9021883a 	mov	r16,r18
   47af4:	dd401a04 	addi	r21,sp,104
   47af8:	4825883a 	mov	r18,r9
   47afc:	4027883a 	mov	r19,r8
   47b00:	8009883a 	mov	r4,r16
   47b04:	880b883a 	mov	r5,r17
   47b08:	01800284 	movi	r6,10
   47b0c:	000f883a 	mov	r7,zero
   47b10:	004a2340 	call	4a234 <__umoddi3>
   47b14:	10800c04 	addi	r2,r2,48
   47b18:	ad7fffc4 	addi	r21,r21,-1
   47b1c:	8009883a 	mov	r4,r16
   47b20:	880b883a 	mov	r5,r17
   47b24:	a8800005 	stb	r2,0(r21)
   47b28:	01800284 	movi	r6,10
   47b2c:	000f883a 	mov	r7,zero
   47b30:	0049cbc0 	call	49cbc <__udivdi3>
   47b34:	1021883a 	mov	r16,r2
   47b38:	10c4b03a 	or	r2,r2,r3
   47b3c:	1823883a 	mov	r17,r3
   47b40:	103fef1e 	bne	r2,zero,47b00 <__alt_data_end+0xfffe7b00>
   47b44:	dc402417 	ldw	r17,144(sp)
   47b48:	dc002517 	ldw	r16,148(sp)
   47b4c:	9013883a 	mov	r9,r18
   47b50:	9811883a 	mov	r8,r19
   47b54:	da801e17 	ldw	r10,120(sp)
   47b58:	5567c83a 	sub	r19,r10,r21
   47b5c:	003ede06 	br	476d8 <__alt_data_end+0xfffe76d8>
   47b60:	38803fcc 	andi	r2,r7,255
   47b64:	1080201c 	xori	r2,r2,128
   47b68:	10bfe004 	addi	r2,r2,-128
   47b6c:	1002371e 	bne	r2,zero,4844c <___vfiprintf_internal_r+0x1174>
   47b70:	01000044 	movi	r4,1
   47b74:	01c00804 	movi	r7,32
   47b78:	80c00007 	ldb	r3,0(r16)
   47b7c:	003e3506 	br	47454 <__alt_data_end+0xfffe7454>
   47b80:	a5000054 	ori	r20,r20,1
   47b84:	80c00007 	ldb	r3,0(r16)
   47b88:	003e3206 	br	47454 <__alt_data_end+0xfffe7454>
   47b8c:	a5002014 	ori	r20,r20,128
   47b90:	80c00007 	ldb	r3,0(r16)
   47b94:	003e2f06 	br	47454 <__alt_data_end+0xfffe7454>
   47b98:	8015883a 	mov	r10,r16
   47b9c:	0023883a 	mov	r17,zero
   47ba0:	18bff404 	addi	r2,r3,-48
   47ba4:	50c00007 	ldb	r3,0(r10)
   47ba8:	8c4002a4 	muli	r17,r17,10
   47bac:	84000044 	addi	r16,r16,1
   47bb0:	8015883a 	mov	r10,r16
   47bb4:	1463883a 	add	r17,r2,r17
   47bb8:	18bff404 	addi	r2,r3,-48
   47bbc:	30bff92e 	bgeu	r6,r2,47ba4 <__alt_data_end+0xfffe7ba4>
   47bc0:	003e2506 	br	47458 <__alt_data_end+0xfffe7458>
   47bc4:	21003fcc 	andi	r4,r4,255
   47bc8:	2002d41e 	bne	r4,zero,4871c <___vfiprintf_internal_r+0x1444>
   47bcc:	a5000414 	ori	r20,r20,16
   47bd0:	a080080c 	andi	r2,r20,32
   47bd4:	103fb51e 	bne	r2,zero,47aac <__alt_data_end+0xfffe7aac>
   47bd8:	a080040c 	andi	r2,r20,16
   47bdc:	1001f826 	beq	r2,zero,483c0 <___vfiprintf_internal_r+0x10e8>
   47be0:	da802217 	ldw	r10,136(sp)
   47be4:	54800017 	ldw	r18,0(r10)
   47be8:	52800104 	addi	r10,r10,4
   47bec:	da802215 	stw	r10,136(sp)
   47bf0:	9027d7fa 	srai	r19,r18,31
   47bf4:	9805883a 	mov	r2,r19
   47bf8:	003fb206 	br	47ac4 <__alt_data_end+0xfffe7ac4>
   47bfc:	21003fcc 	andi	r4,r4,255
   47c00:	2002c41e 	bne	r4,zero,48714 <___vfiprintf_internal_r+0x143c>
   47c04:	a5000414 	ori	r20,r20,16
   47c08:	a080080c 	andi	r2,r20,32
   47c0c:	103f5f1e 	bne	r2,zero,4798c <__alt_data_end+0xfffe798c>
   47c10:	a080040c 	andi	r2,r20,16
   47c14:	10020f26 	beq	r2,zero,48454 <___vfiprintf_internal_r+0x117c>
   47c18:	da802217 	ldw	r10,136(sp)
   47c1c:	d8001d85 	stb	zero,118(sp)
   47c20:	0027883a 	mov	r19,zero
   47c24:	50800104 	addi	r2,r10,4
   47c28:	54800017 	ldw	r18,0(r10)
   47c2c:	48021116 	blt	r9,zero,48474 <___vfiprintf_internal_r+0x119c>
   47c30:	00ffdfc4 	movi	r3,-129
   47c34:	d8802215 	stw	r2,136(sp)
   47c38:	a0e8703a 	and	r20,r20,r3
   47c3c:	903f5e1e 	bne	r18,zero,479b8 <__alt_data_end+0xfffe79b8>
   47c40:	0039883a 	mov	fp,zero
   47c44:	4802a626 	beq	r9,zero,486e0 <___vfiprintf_internal_r+0x1408>
   47c48:	0025883a 	mov	r18,zero
   47c4c:	0027883a 	mov	r19,zero
   47c50:	003f5a06 	br	479bc <__alt_data_end+0xfffe79bc>
   47c54:	21003fcc 	andi	r4,r4,255
   47c58:	20029f1e 	bne	r4,zero,486d8 <___vfiprintf_internal_r+0x1400>
   47c5c:	a5000414 	ori	r20,r20,16
   47c60:	a080080c 	andi	r2,r20,32
   47c64:	10005e1e 	bne	r2,zero,47de0 <___vfiprintf_internal_r+0xb08>
   47c68:	a080040c 	andi	r2,r20,16
   47c6c:	1001a21e 	bne	r2,zero,482f8 <___vfiprintf_internal_r+0x1020>
   47c70:	a080100c 	andi	r2,r20,64
   47c74:	d8001d85 	stb	zero,118(sp)
   47c78:	da802217 	ldw	r10,136(sp)
   47c7c:	1002231e 	bne	r2,zero,4850c <___vfiprintf_internal_r+0x1234>
   47c80:	50800104 	addi	r2,r10,4
   47c84:	54800017 	ldw	r18,0(r10)
   47c88:	0027883a 	mov	r19,zero
   47c8c:	4801a00e 	bge	r9,zero,48310 <___vfiprintf_internal_r+0x1038>
   47c90:	d8802215 	stw	r2,136(sp)
   47c94:	0039883a 	mov	fp,zero
   47c98:	94c4b03a 	or	r2,r18,r19
   47c9c:	103f901e 	bne	r2,zero,47ae0 <__alt_data_end+0xfffe7ae0>
   47ca0:	00800044 	movi	r2,1
   47ca4:	10803fcc 	andi	r2,r2,255
   47ca8:	00c00044 	movi	r3,1
   47cac:	10c05926 	beq	r2,r3,47e14 <___vfiprintf_internal_r+0xb3c>
   47cb0:	00c00084 	movi	r3,2
   47cb4:	10ffe41e 	bne	r2,r3,47c48 <__alt_data_end+0xfffe7c48>
   47cb8:	0025883a 	mov	r18,zero
   47cbc:	0027883a 	mov	r19,zero
   47cc0:	00013d06 	br	481b8 <___vfiprintf_internal_r+0xee0>
   47cc4:	21003fcc 	andi	r4,r4,255
   47cc8:	2002811e 	bne	r4,zero,486d0 <___vfiprintf_internal_r+0x13f8>
   47ccc:	00800174 	movhi	r2,5
   47cd0:	10bec004 	addi	r2,r2,-1280
   47cd4:	d8802615 	stw	r2,152(sp)
   47cd8:	a080080c 	andi	r2,r20,32
   47cdc:	103f561e 	bne	r2,zero,47a38 <__alt_data_end+0xfffe7a38>
   47ce0:	a080040c 	andi	r2,r20,16
   47ce4:	1001d126 	beq	r2,zero,4842c <___vfiprintf_internal_r+0x1154>
   47ce8:	da802217 	ldw	r10,136(sp)
   47cec:	0027883a 	mov	r19,zero
   47cf0:	54800017 	ldw	r18,0(r10)
   47cf4:	52800104 	addi	r10,r10,4
   47cf8:	da802215 	stw	r10,136(sp)
   47cfc:	003f5306 	br	47a4c <__alt_data_end+0xfffe7a4c>
   47d00:	da802217 	ldw	r10,136(sp)
   47d04:	d8001d85 	stb	zero,118(sp)
   47d08:	55400017 	ldw	r21,0(r10)
   47d0c:	50c00104 	addi	r3,r10,4
   47d10:	a8024226 	beq	r21,zero,4861c <___vfiprintf_internal_r+0x1344>
   47d14:	48021816 	blt	r9,zero,48578 <___vfiprintf_internal_r+0x12a0>
   47d18:	480d883a 	mov	r6,r9
   47d1c:	000b883a 	mov	r5,zero
   47d20:	a809883a 	mov	r4,r21
   47d24:	d8c02a15 	stw	r3,168(sp)
   47d28:	da002b15 	stw	r8,172(sp)
   47d2c:	da402c15 	stw	r9,176(sp)
   47d30:	0045afc0 	call	45afc <memchr>
   47d34:	d8c02a17 	ldw	r3,168(sp)
   47d38:	da002b17 	ldw	r8,172(sp)
   47d3c:	da402c17 	ldw	r9,176(sp)
   47d40:	10024826 	beq	r2,zero,48664 <___vfiprintf_internal_r+0x138c>
   47d44:	1567c83a 	sub	r19,r2,r21
   47d48:	df001d83 	ldbu	fp,118(sp)
   47d4c:	d8c02215 	stw	r3,136(sp)
   47d50:	0013883a 	mov	r9,zero
   47d54:	003e6006 	br	476d8 <__alt_data_end+0xfffe76d8>
   47d58:	21003fcc 	andi	r4,r4,255
   47d5c:	203fc026 	beq	r4,zero,47c60 <__alt_data_end+0xfffe7c60>
   47d60:	d9c01d85 	stb	r7,118(sp)
   47d64:	003fbe06 	br	47c60 <__alt_data_end+0xfffe7c60>
   47d68:	da802217 	ldw	r10,136(sp)
   47d6c:	54400017 	ldw	r17,0(r10)
   47d70:	50800104 	addi	r2,r10,4
   47d74:	883e3b16 	blt	r17,zero,47664 <__alt_data_end+0xfffe7664>
   47d78:	d8802215 	stw	r2,136(sp)
   47d7c:	80c00007 	ldb	r3,0(r16)
   47d80:	003db406 	br	47454 <__alt_data_end+0xfffe7454>
   47d84:	01000044 	movi	r4,1
   47d88:	01c00ac4 	movi	r7,43
   47d8c:	80c00007 	ldb	r3,0(r16)
   47d90:	003db006 	br	47454 <__alt_data_end+0xfffe7454>
   47d94:	80c00007 	ldb	r3,0(r16)
   47d98:	82800044 	addi	r10,r16,1
   47d9c:	1b423c26 	beq	r3,r13,48690 <___vfiprintf_internal_r+0x13b8>
   47da0:	18bff404 	addi	r2,r3,-48
   47da4:	0013883a 	mov	r9,zero
   47da8:	30822b36 	bltu	r6,r2,48658 <___vfiprintf_internal_r+0x1380>
   47dac:	50c00007 	ldb	r3,0(r10)
   47db0:	4a4002a4 	muli	r9,r9,10
   47db4:	54000044 	addi	r16,r10,1
   47db8:	8015883a 	mov	r10,r16
   47dbc:	4893883a 	add	r9,r9,r2
   47dc0:	18bff404 	addi	r2,r3,-48
   47dc4:	30bff92e 	bgeu	r6,r2,47dac <__alt_data_end+0xfffe7dac>
   47dc8:	483da30e 	bge	r9,zero,47458 <__alt_data_end+0xfffe7458>
   47dcc:	027fffc4 	movi	r9,-1
   47dd0:	003da106 	br	47458 <__alt_data_end+0xfffe7458>
   47dd4:	a5001014 	ori	r20,r20,64
   47dd8:	80c00007 	ldb	r3,0(r16)
   47ddc:	003d9d06 	br	47454 <__alt_data_end+0xfffe7454>
   47de0:	da802217 	ldw	r10,136(sp)
   47de4:	d8001d85 	stb	zero,118(sp)
   47de8:	50c00204 	addi	r3,r10,8
   47dec:	54800017 	ldw	r18,0(r10)
   47df0:	54c00117 	ldw	r19,4(r10)
   47df4:	4801ca16 	blt	r9,zero,48520 <___vfiprintf_internal_r+0x1248>
   47df8:	013fdfc4 	movi	r4,-129
   47dfc:	94c4b03a 	or	r2,r18,r19
   47e00:	d8c02215 	stw	r3,136(sp)
   47e04:	a128703a 	and	r20,r20,r4
   47e08:	0039883a 	mov	fp,zero
   47e0c:	103f341e 	bne	r2,zero,47ae0 <__alt_data_end+0xfffe7ae0>
   47e10:	483e2e26 	beq	r9,zero,476cc <__alt_data_end+0xfffe76cc>
   47e14:	0025883a 	mov	r18,zero
   47e18:	94800c04 	addi	r18,r18,48
   47e1c:	dc8019c5 	stb	r18,103(sp)
   47e20:	dcc02717 	ldw	r19,156(sp)
   47e24:	dd4019c4 	addi	r21,sp,103
   47e28:	003e2b06 	br	476d8 <__alt_data_end+0xfffe76d8>
   47e2c:	21003fcc 	andi	r4,r4,255
   47e30:	2002361e 	bne	r4,zero,4870c <___vfiprintf_internal_r+0x1434>
   47e34:	1801c126 	beq	r3,zero,4853c <___vfiprintf_internal_r+0x1264>
   47e38:	04800044 	movi	r18,1
   47e3c:	d8c01005 	stb	r3,64(sp)
   47e40:	d8001d85 	stb	zero,118(sp)
   47e44:	9027883a 	mov	r19,r18
   47e48:	dd401004 	addi	r21,sp,64
   47e4c:	003f1106 	br	47a94 <__alt_data_end+0xfffe7a94>
   47e50:	d9402117 	ldw	r5,132(sp)
   47e54:	d9002017 	ldw	r4,128(sp)
   47e58:	d9801a04 	addi	r6,sp,104
   47e5c:	d9c02b15 	stw	r7,172(sp)
   47e60:	dbc02a15 	stw	r15,168(sp)
   47e64:	00471c40 	call	471c4 <__sprint_r.part.0>
   47e68:	d9c02b17 	ldw	r7,172(sp)
   47e6c:	dbc02a17 	ldw	r15,168(sp)
   47e70:	10006d1e 	bne	r2,zero,48028 <___vfiprintf_internal_r+0xd50>
   47e74:	d9801b17 	ldw	r6,108(sp)
   47e78:	d8801c17 	ldw	r2,112(sp)
   47e7c:	d811883a 	mov	r8,sp
   47e80:	31400044 	addi	r5,r6,1
   47e84:	003e3306 	br	47754 <__alt_data_end+0xfffe7754>
   47e88:	d9401b17 	ldw	r5,108(sp)
   47e8c:	d8801c17 	ldw	r2,112(sp)
   47e90:	29000044 	addi	r4,r5,1
   47e94:	d8c01d87 	ldb	r3,118(sp)
   47e98:	183e4d26 	beq	r3,zero,477d0 <__alt_data_end+0xfffe77d0>
   47e9c:	00c00044 	movi	r3,1
   47ea0:	d9401d84 	addi	r5,sp,118
   47ea4:	10c5883a 	add	r2,r2,r3
   47ea8:	41400015 	stw	r5,0(r8)
   47eac:	40c00115 	stw	r3,4(r8)
   47eb0:	d8801c15 	stw	r2,112(sp)
   47eb4:	d9001b15 	stw	r4,108(sp)
   47eb8:	014001c4 	movi	r5,7
   47ebc:	2900a90e 	bge	r5,r4,48164 <___vfiprintf_internal_r+0xe8c>
   47ec0:	1000da1e 	bne	r2,zero,4822c <___vfiprintf_internal_r+0xf54>
   47ec4:	7000ab1e 	bne	r14,zero,48174 <___vfiprintf_internal_r+0xe9c>
   47ec8:	000b883a 	mov	r5,zero
   47ecc:	1809883a 	mov	r4,r3
   47ed0:	d811883a 	mov	r8,sp
   47ed4:	00c02004 	movi	r3,128
   47ed8:	e0fe4d26 	beq	fp,r3,47810 <__alt_data_end+0xfffe7810>
   47edc:	4cf9c83a 	sub	fp,r9,r19
   47ee0:	073e7b0e 	bge	zero,fp,478d0 <__alt_data_end+0xfffe78d0>
   47ee4:	01c00404 	movi	r7,16
   47ee8:	3f01900e 	bge	r7,fp,4852c <___vfiprintf_internal_r+0x1254>
   47eec:	00c00174 	movhi	r3,5
   47ef0:	18ff2604 	addi	r3,r3,-872
   47ef4:	d8c02415 	stw	r3,144(sp)
   47ef8:	034001c4 	movi	r13,7
   47efc:	00000506 	br	47f14 <___vfiprintf_internal_r+0xc3c>
   47f00:	29000084 	addi	r4,r5,2
   47f04:	42000204 	addi	r8,r8,8
   47f08:	180b883a 	mov	r5,r3
   47f0c:	e73ffc04 	addi	fp,fp,-16
   47f10:	3f000d0e 	bge	r7,fp,47f48 <___vfiprintf_internal_r+0xc70>
   47f14:	10800404 	addi	r2,r2,16
   47f18:	28c00044 	addi	r3,r5,1
   47f1c:	45c00015 	stw	r23,0(r8)
   47f20:	41c00115 	stw	r7,4(r8)
   47f24:	d8801c15 	stw	r2,112(sp)
   47f28:	d8c01b15 	stw	r3,108(sp)
   47f2c:	68fff40e 	bge	r13,r3,47f00 <__alt_data_end+0xfffe7f00>
   47f30:	1000101e 	bne	r2,zero,47f74 <___vfiprintf_internal_r+0xc9c>
   47f34:	e73ffc04 	addi	fp,fp,-16
   47f38:	01000044 	movi	r4,1
   47f3c:	000b883a 	mov	r5,zero
   47f40:	d811883a 	mov	r8,sp
   47f44:	3f3ff316 	blt	r7,fp,47f14 <__alt_data_end+0xfffe7f14>
   47f48:	da802417 	ldw	r10,144(sp)
   47f4c:	1705883a 	add	r2,r2,fp
   47f50:	47000115 	stw	fp,4(r8)
   47f54:	42800015 	stw	r10,0(r8)
   47f58:	d8801c15 	stw	r2,112(sp)
   47f5c:	d9001b15 	stw	r4,108(sp)
   47f60:	00c001c4 	movi	r3,7
   47f64:	19003616 	blt	r3,r4,48040 <___vfiprintf_internal_r+0xd68>
   47f68:	42000204 	addi	r8,r8,8
   47f6c:	21000044 	addi	r4,r4,1
   47f70:	003e5706 	br	478d0 <__alt_data_end+0xfffe78d0>
   47f74:	d9402117 	ldw	r5,132(sp)
   47f78:	d9002017 	ldw	r4,128(sp)
   47f7c:	d9801a04 	addi	r6,sp,104
   47f80:	d9c02b15 	stw	r7,172(sp)
   47f84:	db402a15 	stw	r13,168(sp)
   47f88:	00471c40 	call	471c4 <__sprint_r.part.0>
   47f8c:	d9c02b17 	ldw	r7,172(sp)
   47f90:	db402a17 	ldw	r13,168(sp)
   47f94:	1000241e 	bne	r2,zero,48028 <___vfiprintf_internal_r+0xd50>
   47f98:	d9401b17 	ldw	r5,108(sp)
   47f9c:	d8801c17 	ldw	r2,112(sp)
   47fa0:	d811883a 	mov	r8,sp
   47fa4:	29000044 	addi	r4,r5,1
   47fa8:	003fd806 	br	47f0c <__alt_data_end+0xfffe7f0c>
   47fac:	d9401b17 	ldw	r5,108(sp)
   47fb0:	00c00174 	movhi	r3,5
   47fb4:	18ff2a04 	addi	r3,r3,-856
   47fb8:	d8c02415 	stw	r3,144(sp)
   47fbc:	29400044 	addi	r5,r5,1
   47fc0:	d8c02417 	ldw	r3,144(sp)
   47fc4:	14c5883a 	add	r2,r2,r19
   47fc8:	44c00115 	stw	r19,4(r8)
   47fcc:	40c00015 	stw	r3,0(r8)
   47fd0:	d8801c15 	stw	r2,112(sp)
   47fd4:	d9401b15 	stw	r5,108(sp)
   47fd8:	00c001c4 	movi	r3,7
   47fdc:	1940070e 	bge	r3,r5,47ffc <___vfiprintf_internal_r+0xd24>
   47fe0:	103e4826 	beq	r2,zero,47904 <__alt_data_end+0xfffe7904>
   47fe4:	d9402117 	ldw	r5,132(sp)
   47fe8:	d9002017 	ldw	r4,128(sp)
   47fec:	d9801a04 	addi	r6,sp,104
   47ff0:	00471c40 	call	471c4 <__sprint_r.part.0>
   47ff4:	10000c1e 	bne	r2,zero,48028 <___vfiprintf_internal_r+0xd50>
   47ff8:	d8801c17 	ldw	r2,112(sp)
   47ffc:	8c80010e 	bge	r17,r18,48004 <___vfiprintf_internal_r+0xd2c>
   48000:	9023883a 	mov	r17,r18
   48004:	da802317 	ldw	r10,140(sp)
   48008:	5455883a 	add	r10,r10,r17
   4800c:	da802315 	stw	r10,140(sp)
   48010:	103e4126 	beq	r2,zero,47918 <__alt_data_end+0xfffe7918>
   48014:	d9402117 	ldw	r5,132(sp)
   48018:	d9002017 	ldw	r4,128(sp)
   4801c:	d9801a04 	addi	r6,sp,104
   48020:	00471c40 	call	471c4 <__sprint_r.part.0>
   48024:	103e3c26 	beq	r2,zero,47918 <__alt_data_end+0xfffe7918>
   48028:	dd002117 	ldw	r20,132(sp)
   4802c:	a080030b 	ldhu	r2,12(r20)
   48030:	1080100c 	andi	r2,r2,64
   48034:	1001231e 	bne	r2,zero,484c4 <___vfiprintf_internal_r+0x11ec>
   48038:	d8802317 	ldw	r2,140(sp)
   4803c:	003d7b06 	br	4762c <__alt_data_end+0xfffe762c>
   48040:	1000991e 	bne	r2,zero,482a8 <___vfiprintf_internal_r+0xfd0>
   48044:	00c00044 	movi	r3,1
   48048:	9805883a 	mov	r2,r19
   4804c:	dd400015 	stw	r21,0(sp)
   48050:	dcc00115 	stw	r19,4(sp)
   48054:	dcc01c15 	stw	r19,112(sp)
   48058:	d8c01b15 	stw	r3,108(sp)
   4805c:	d811883a 	mov	r8,sp
   48060:	42000204 	addi	r8,r8,8
   48064:	a2c0010c 	andi	r11,r20,4
   48068:	583fe426 	beq	r11,zero,47ffc <__alt_data_end+0xfffe7ffc>
   4806c:	8ca7c83a 	sub	r19,r17,r18
   48070:	04ffe20e 	bge	zero,r19,47ffc <__alt_data_end+0xfffe7ffc>
   48074:	01c00404 	movi	r7,16
   48078:	3cffcc0e 	bge	r7,r19,47fac <__alt_data_end+0xfffe7fac>
   4807c:	02800174 	movhi	r10,5
   48080:	52bf2a04 	addi	r10,r10,-856
   48084:	d9001b17 	ldw	r4,108(sp)
   48088:	da802415 	stw	r10,144(sp)
   4808c:	382b883a 	mov	r21,r7
   48090:	050001c4 	movi	r20,7
   48094:	df002017 	ldw	fp,128(sp)
   48098:	00000506 	br	480b0 <___vfiprintf_internal_r+0xdd8>
   4809c:	21400084 	addi	r5,r4,2
   480a0:	42000204 	addi	r8,r8,8
   480a4:	1809883a 	mov	r4,r3
   480a8:	9cfffc04 	addi	r19,r19,-16
   480ac:	acffc40e 	bge	r21,r19,47fc0 <__alt_data_end+0xfffe7fc0>
   480b0:	10800404 	addi	r2,r2,16
   480b4:	20c00044 	addi	r3,r4,1
   480b8:	45800015 	stw	r22,0(r8)
   480bc:	45400115 	stw	r21,4(r8)
   480c0:	d8801c15 	stw	r2,112(sp)
   480c4:	d8c01b15 	stw	r3,108(sp)
   480c8:	a0fff40e 	bge	r20,r3,4809c <__alt_data_end+0xfffe809c>
   480cc:	1000041e 	bne	r2,zero,480e0 <___vfiprintf_internal_r+0xe08>
   480d0:	01400044 	movi	r5,1
   480d4:	0009883a 	mov	r4,zero
   480d8:	d811883a 	mov	r8,sp
   480dc:	003ff206 	br	480a8 <__alt_data_end+0xfffe80a8>
   480e0:	d9402117 	ldw	r5,132(sp)
   480e4:	d9801a04 	addi	r6,sp,104
   480e8:	e009883a 	mov	r4,fp
   480ec:	00471c40 	call	471c4 <__sprint_r.part.0>
   480f0:	103fcd1e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   480f4:	d9001b17 	ldw	r4,108(sp)
   480f8:	d8801c17 	ldw	r2,112(sp)
   480fc:	d811883a 	mov	r8,sp
   48100:	21400044 	addi	r5,r4,1
   48104:	003fe806 	br	480a8 <__alt_data_end+0xfffe80a8>
   48108:	d9402117 	ldw	r5,132(sp)
   4810c:	d9002017 	ldw	r4,128(sp)
   48110:	d9801a04 	addi	r6,sp,104
   48114:	d9c02b15 	stw	r7,172(sp)
   48118:	db402a15 	stw	r13,168(sp)
   4811c:	00471c40 	call	471c4 <__sprint_r.part.0>
   48120:	d9c02b17 	ldw	r7,172(sp)
   48124:	db402a17 	ldw	r13,168(sp)
   48128:	103fbf1e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   4812c:	d9401b17 	ldw	r5,108(sp)
   48130:	d8801c17 	ldw	r2,112(sp)
   48134:	d811883a 	mov	r8,sp
   48138:	29800044 	addi	r6,r5,1
   4813c:	003dc406 	br	47850 <__alt_data_end+0xfffe7850>
   48140:	1000d21e 	bne	r2,zero,4848c <___vfiprintf_internal_r+0x11b4>
   48144:	d8c01d87 	ldb	r3,118(sp)
   48148:	18009526 	beq	r3,zero,483a0 <___vfiprintf_internal_r+0x10c8>
   4814c:	00800044 	movi	r2,1
   48150:	d8c01d84 	addi	r3,sp,118
   48154:	1009883a 	mov	r4,r2
   48158:	d8c00015 	stw	r3,0(sp)
   4815c:	d8800115 	stw	r2,4(sp)
   48160:	d811883a 	mov	r8,sp
   48164:	200b883a 	mov	r5,r4
   48168:	42000204 	addi	r8,r8,8
   4816c:	21000044 	addi	r4,r4,1
   48170:	003d9706 	br	477d0 <__alt_data_end+0xfffe77d0>
   48174:	d9001d04 	addi	r4,sp,116
   48178:	00800084 	movi	r2,2
   4817c:	d9000015 	stw	r4,0(sp)
   48180:	d8800115 	stw	r2,4(sp)
   48184:	1809883a 	mov	r4,r3
   48188:	d811883a 	mov	r8,sp
   4818c:	200b883a 	mov	r5,r4
   48190:	42000204 	addi	r8,r8,8
   48194:	21000044 	addi	r4,r4,1
   48198:	003f4e06 	br	47ed4 <__alt_data_end+0xfffe7ed4>
   4819c:	d8001d85 	stb	zero,118(sp)
   481a0:	48005016 	blt	r9,zero,482e4 <___vfiprintf_internal_r+0x100c>
   481a4:	00ffdfc4 	movi	r3,-129
   481a8:	94c4b03a 	or	r2,r18,r19
   481ac:	a0e8703a 	and	r20,r20,r3
   481b0:	103d4426 	beq	r2,zero,476c4 <__alt_data_end+0xfffe76c4>
   481b4:	0039883a 	mov	fp,zero
   481b8:	d9002617 	ldw	r4,152(sp)
   481bc:	dd401a04 	addi	r21,sp,104
   481c0:	908003cc 	andi	r2,r18,15
   481c4:	9806973a 	slli	r3,r19,28
   481c8:	2085883a 	add	r2,r4,r2
   481cc:	9024d13a 	srli	r18,r18,4
   481d0:	10800003 	ldbu	r2,0(r2)
   481d4:	9826d13a 	srli	r19,r19,4
   481d8:	ad7fffc4 	addi	r21,r21,-1
   481dc:	1ca4b03a 	or	r18,r3,r18
   481e0:	a8800005 	stb	r2,0(r21)
   481e4:	94c4b03a 	or	r2,r18,r19
   481e8:	103ff51e 	bne	r2,zero,481c0 <__alt_data_end+0xfffe81c0>
   481ec:	003e5906 	br	47b54 <__alt_data_end+0xfffe7b54>
   481f0:	d9402117 	ldw	r5,132(sp)
   481f4:	d9002017 	ldw	r4,128(sp)
   481f8:	d9801a04 	addi	r6,sp,104
   481fc:	00471c40 	call	471c4 <__sprint_r.part.0>
   48200:	103f891e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   48204:	d8801c17 	ldw	r2,112(sp)
   48208:	d811883a 	mov	r8,sp
   4820c:	003f9506 	br	48064 <__alt_data_end+0xfffe8064>
   48210:	d9402117 	ldw	r5,132(sp)
   48214:	d9002017 	ldw	r4,128(sp)
   48218:	d9801a04 	addi	r6,sp,104
   4821c:	00471c40 	call	471c4 <__sprint_r.part.0>
   48220:	103f811e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   48224:	d811883a 	mov	r8,sp
   48228:	003ced06 	br	475e0 <__alt_data_end+0xfffe75e0>
   4822c:	d9402117 	ldw	r5,132(sp)
   48230:	d9002017 	ldw	r4,128(sp)
   48234:	d9801a04 	addi	r6,sp,104
   48238:	da402c15 	stw	r9,176(sp)
   4823c:	db802a15 	stw	r14,168(sp)
   48240:	00471c40 	call	471c4 <__sprint_r.part.0>
   48244:	da402c17 	ldw	r9,176(sp)
   48248:	db802a17 	ldw	r14,168(sp)
   4824c:	103f761e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   48250:	d9401b17 	ldw	r5,108(sp)
   48254:	d8801c17 	ldw	r2,112(sp)
   48258:	d811883a 	mov	r8,sp
   4825c:	29000044 	addi	r4,r5,1
   48260:	003d5b06 	br	477d0 <__alt_data_end+0xfffe77d0>
   48264:	d9402117 	ldw	r5,132(sp)
   48268:	d9002017 	ldw	r4,128(sp)
   4826c:	d9801a04 	addi	r6,sp,104
   48270:	da402c15 	stw	r9,176(sp)
   48274:	00471c40 	call	471c4 <__sprint_r.part.0>
   48278:	da402c17 	ldw	r9,176(sp)
   4827c:	103f6a1e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   48280:	d9401b17 	ldw	r5,108(sp)
   48284:	d8801c17 	ldw	r2,112(sp)
   48288:	d811883a 	mov	r8,sp
   4828c:	29000044 	addi	r4,r5,1
   48290:	003f1006 	br	47ed4 <__alt_data_end+0xfffe7ed4>
   48294:	1000c31e 	bne	r2,zero,485a4 <___vfiprintf_internal_r+0x12cc>
   48298:	01000044 	movi	r4,1
   4829c:	000b883a 	mov	r5,zero
   482a0:	d811883a 	mov	r8,sp
   482a4:	003f0d06 	br	47edc <__alt_data_end+0xfffe7edc>
   482a8:	d9402117 	ldw	r5,132(sp)
   482ac:	d9002017 	ldw	r4,128(sp)
   482b0:	d9801a04 	addi	r6,sp,104
   482b4:	00471c40 	call	471c4 <__sprint_r.part.0>
   482b8:	103f5b1e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   482bc:	d9001b17 	ldw	r4,108(sp)
   482c0:	d8801c17 	ldw	r2,112(sp)
   482c4:	d811883a 	mov	r8,sp
   482c8:	21000044 	addi	r4,r4,1
   482cc:	003d8006 	br	478d0 <__alt_data_end+0xfffe78d0>
   482d0:	01000174 	movhi	r4,5
   482d4:	213ec504 	addi	r4,r4,-1260
   482d8:	d9002615 	stw	r4,152(sp)
   482dc:	d8c02215 	stw	r3,136(sp)
   482e0:	1029883a 	mov	r20,r2
   482e4:	94c4b03a 	or	r2,r18,r19
   482e8:	103fb21e 	bne	r2,zero,481b4 <__alt_data_end+0xfffe81b4>
   482ec:	0039883a 	mov	fp,zero
   482f0:	00800084 	movi	r2,2
   482f4:	003e6b06 	br	47ca4 <__alt_data_end+0xfffe7ca4>
   482f8:	da802217 	ldw	r10,136(sp)
   482fc:	d8001d85 	stb	zero,118(sp)
   48300:	0027883a 	mov	r19,zero
   48304:	50800104 	addi	r2,r10,4
   48308:	54800017 	ldw	r18,0(r10)
   4830c:	483e6016 	blt	r9,zero,47c90 <__alt_data_end+0xfffe7c90>
   48310:	00ffdfc4 	movi	r3,-129
   48314:	d8802215 	stw	r2,136(sp)
   48318:	a0e8703a 	and	r20,r20,r3
   4831c:	0039883a 	mov	fp,zero
   48320:	903ebb26 	beq	r18,zero,47e10 <__alt_data_end+0xfffe7e10>
   48324:	00800244 	movi	r2,9
   48328:	14bdee36 	bltu	r2,r18,47ae4 <__alt_data_end+0xfffe7ae4>
   4832c:	003eba06 	br	47e18 <__alt_data_end+0xfffe7e18>
   48330:	00800c04 	movi	r2,48
   48334:	d8c01d45 	stb	r3,117(sp)
   48338:	d8801d05 	stb	r2,116(sp)
   4833c:	d8001d85 	stb	zero,118(sp)
   48340:	a0c00094 	ori	r3,r20,2
   48344:	4800a916 	blt	r9,zero,485ec <___vfiprintf_internal_r+0x1314>
   48348:	00bfdfc4 	movi	r2,-129
   4834c:	a096703a 	and	r11,r20,r2
   48350:	5d000094 	ori	r20,r11,2
   48354:	0039883a 	mov	fp,zero
   48358:	003f9706 	br	481b8 <__alt_data_end+0xfffe81b8>
   4835c:	8025883a 	mov	r18,r16
   48360:	003c2e06 	br	4741c <__alt_data_end+0xfffe741c>
   48364:	00800174 	movhi	r2,5
   48368:	10bec504 	addi	r2,r2,-1260
   4836c:	0039883a 	mov	fp,zero
   48370:	d8802615 	stw	r2,152(sp)
   48374:	003f9006 	br	481b8 <__alt_data_end+0xfffe81b8>
   48378:	04a5c83a 	sub	r18,zero,r18
   4837c:	07000b44 	movi	fp,45
   48380:	9004c03a 	cmpne	r2,r18,zero
   48384:	04e7c83a 	sub	r19,zero,r19
   48388:	df001d85 	stb	fp,118(sp)
   4838c:	98a7c83a 	sub	r19,r19,r2
   48390:	48009f16 	blt	r9,zero,48610 <___vfiprintf_internal_r+0x1338>
   48394:	00bfdfc4 	movi	r2,-129
   48398:	a0a8703a 	and	r20,r20,r2
   4839c:	003dd006 	br	47ae0 <__alt_data_end+0xfffe7ae0>
   483a0:	70004c26 	beq	r14,zero,484d4 <___vfiprintf_internal_r+0x11fc>
   483a4:	00800084 	movi	r2,2
   483a8:	d8c01d04 	addi	r3,sp,116
   483ac:	d8c00015 	stw	r3,0(sp)
   483b0:	d8800115 	stw	r2,4(sp)
   483b4:	01000044 	movi	r4,1
   483b8:	d811883a 	mov	r8,sp
   483bc:	003f7306 	br	4818c <__alt_data_end+0xfffe818c>
   483c0:	a080100c 	andi	r2,r20,64
   483c4:	da802217 	ldw	r10,136(sp)
   483c8:	103e0626 	beq	r2,zero,47be4 <__alt_data_end+0xfffe7be4>
   483cc:	5480000f 	ldh	r18,0(r10)
   483d0:	52800104 	addi	r10,r10,4
   483d4:	da802215 	stw	r10,136(sp)
   483d8:	9027d7fa 	srai	r19,r18,31
   483dc:	9805883a 	mov	r2,r19
   483e0:	003db806 	br	47ac4 <__alt_data_end+0xfffe7ac4>
   483e4:	a080040c 	andi	r2,r20,16
   483e8:	1000091e 	bne	r2,zero,48410 <___vfiprintf_internal_r+0x1138>
   483ec:	a2c0100c 	andi	r11,r20,64
   483f0:	58000726 	beq	r11,zero,48410 <___vfiprintf_internal_r+0x1138>
   483f4:	da802217 	ldw	r10,136(sp)
   483f8:	50800017 	ldw	r2,0(r10)
   483fc:	52800104 	addi	r10,r10,4
   48400:	da802215 	stw	r10,136(sp)
   48404:	da802317 	ldw	r10,140(sp)
   48408:	1280000d 	sth	r10,0(r2)
   4840c:	003be706 	br	473ac <__alt_data_end+0xfffe73ac>
   48410:	da802217 	ldw	r10,136(sp)
   48414:	50800017 	ldw	r2,0(r10)
   48418:	52800104 	addi	r10,r10,4
   4841c:	da802215 	stw	r10,136(sp)
   48420:	da802317 	ldw	r10,140(sp)
   48424:	12800015 	stw	r10,0(r2)
   48428:	003be006 	br	473ac <__alt_data_end+0xfffe73ac>
   4842c:	a080100c 	andi	r2,r20,64
   48430:	da802217 	ldw	r10,136(sp)
   48434:	10003026 	beq	r2,zero,484f8 <___vfiprintf_internal_r+0x1220>
   48438:	5480000b 	ldhu	r18,0(r10)
   4843c:	52800104 	addi	r10,r10,4
   48440:	0027883a 	mov	r19,zero
   48444:	da802215 	stw	r10,136(sp)
   48448:	003d8006 	br	47a4c <__alt_data_end+0xfffe7a4c>
   4844c:	80c00007 	ldb	r3,0(r16)
   48450:	003c0006 	br	47454 <__alt_data_end+0xfffe7454>
   48454:	a080100c 	andi	r2,r20,64
   48458:	d8001d85 	stb	zero,118(sp)
   4845c:	da802217 	ldw	r10,136(sp)
   48460:	1000201e 	bne	r2,zero,484e4 <___vfiprintf_internal_r+0x120c>
   48464:	50800104 	addi	r2,r10,4
   48468:	54800017 	ldw	r18,0(r10)
   4846c:	0027883a 	mov	r19,zero
   48470:	483def0e 	bge	r9,zero,47c30 <__alt_data_end+0xfffe7c30>
   48474:	94c6b03a 	or	r3,r18,r19
   48478:	d8802215 	stw	r2,136(sp)
   4847c:	183d4e1e 	bne	r3,zero,479b8 <__alt_data_end+0xfffe79b8>
   48480:	0039883a 	mov	fp,zero
   48484:	0005883a 	mov	r2,zero
   48488:	003e0606 	br	47ca4 <__alt_data_end+0xfffe7ca4>
   4848c:	d9402117 	ldw	r5,132(sp)
   48490:	d9002017 	ldw	r4,128(sp)
   48494:	d9801a04 	addi	r6,sp,104
   48498:	da402c15 	stw	r9,176(sp)
   4849c:	db802a15 	stw	r14,168(sp)
   484a0:	00471c40 	call	471c4 <__sprint_r.part.0>
   484a4:	da402c17 	ldw	r9,176(sp)
   484a8:	db802a17 	ldw	r14,168(sp)
   484ac:	103ede1e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   484b0:	d9401b17 	ldw	r5,108(sp)
   484b4:	d8801c17 	ldw	r2,112(sp)
   484b8:	d811883a 	mov	r8,sp
   484bc:	29000044 	addi	r4,r5,1
   484c0:	003e7406 	br	47e94 <__alt_data_end+0xfffe7e94>
   484c4:	00bfffc4 	movi	r2,-1
   484c8:	003c5806 	br	4762c <__alt_data_end+0xfffe762c>
   484cc:	d811883a 	mov	r8,sp
   484d0:	003ee806 	br	48074 <__alt_data_end+0xfffe8074>
   484d4:	000b883a 	mov	r5,zero
   484d8:	01000044 	movi	r4,1
   484dc:	d811883a 	mov	r8,sp
   484e0:	003e7c06 	br	47ed4 <__alt_data_end+0xfffe7ed4>
   484e4:	50800104 	addi	r2,r10,4
   484e8:	5480000b 	ldhu	r18,0(r10)
   484ec:	0027883a 	mov	r19,zero
   484f0:	483dcf0e 	bge	r9,zero,47c30 <__alt_data_end+0xfffe7c30>
   484f4:	003fdf06 	br	48474 <__alt_data_end+0xfffe8474>
   484f8:	54800017 	ldw	r18,0(r10)
   484fc:	52800104 	addi	r10,r10,4
   48500:	0027883a 	mov	r19,zero
   48504:	da802215 	stw	r10,136(sp)
   48508:	003d5006 	br	47a4c <__alt_data_end+0xfffe7a4c>
   4850c:	50800104 	addi	r2,r10,4
   48510:	5480000b 	ldhu	r18,0(r10)
   48514:	0027883a 	mov	r19,zero
   48518:	483f7d0e 	bge	r9,zero,48310 <__alt_data_end+0xfffe8310>
   4851c:	003ddc06 	br	47c90 <__alt_data_end+0xfffe7c90>
   48520:	d8c02215 	stw	r3,136(sp)
   48524:	0039883a 	mov	fp,zero
   48528:	003ddb06 	br	47c98 <__alt_data_end+0xfffe7c98>
   4852c:	02800174 	movhi	r10,5
   48530:	52bf2604 	addi	r10,r10,-872
   48534:	da802415 	stw	r10,144(sp)
   48538:	003e8306 	br	47f48 <__alt_data_end+0xfffe7f48>
   4853c:	d8801c17 	ldw	r2,112(sp)
   48540:	dd002117 	ldw	r20,132(sp)
   48544:	103eb926 	beq	r2,zero,4802c <__alt_data_end+0xfffe802c>
   48548:	d9002017 	ldw	r4,128(sp)
   4854c:	d9801a04 	addi	r6,sp,104
   48550:	a00b883a 	mov	r5,r20
   48554:	00471c40 	call	471c4 <__sprint_r.part.0>
   48558:	003eb406 	br	4802c <__alt_data_end+0xfffe802c>
   4855c:	80c00043 	ldbu	r3,1(r16)
   48560:	a5000814 	ori	r20,r20,32
   48564:	84000044 	addi	r16,r16,1
   48568:	18c03fcc 	andi	r3,r3,255
   4856c:	18c0201c 	xori	r3,r3,128
   48570:	18ffe004 	addi	r3,r3,-128
   48574:	003bb706 	br	47454 <__alt_data_end+0xfffe7454>
   48578:	a809883a 	mov	r4,r21
   4857c:	d8c02a15 	stw	r3,168(sp)
   48580:	da002b15 	stw	r8,172(sp)
   48584:	004712c0 	call	4712c <strlen>
   48588:	d8c02a17 	ldw	r3,168(sp)
   4858c:	1027883a 	mov	r19,r2
   48590:	df001d83 	ldbu	fp,118(sp)
   48594:	d8c02215 	stw	r3,136(sp)
   48598:	0013883a 	mov	r9,zero
   4859c:	da002b17 	ldw	r8,172(sp)
   485a0:	003c4d06 	br	476d8 <__alt_data_end+0xfffe76d8>
   485a4:	d9402117 	ldw	r5,132(sp)
   485a8:	d9002017 	ldw	r4,128(sp)
   485ac:	d9801a04 	addi	r6,sp,104
   485b0:	da402c15 	stw	r9,176(sp)
   485b4:	00471c40 	call	471c4 <__sprint_r.part.0>
   485b8:	da402c17 	ldw	r9,176(sp)
   485bc:	103e9a1e 	bne	r2,zero,48028 <__alt_data_end+0xfffe8028>
   485c0:	d9401b17 	ldw	r5,108(sp)
   485c4:	d8801c17 	ldw	r2,112(sp)
   485c8:	d811883a 	mov	r8,sp
   485cc:	29000044 	addi	r4,r5,1
   485d0:	003e4206 	br	47edc <__alt_data_end+0xfffe7edc>
   485d4:	d9401b17 	ldw	r5,108(sp)
   485d8:	01000174 	movhi	r4,5
   485dc:	213f2a04 	addi	r4,r4,-856
   485e0:	d9002415 	stw	r4,144(sp)
   485e4:	29400044 	addi	r5,r5,1
   485e8:	003c6d06 	br	477a0 <__alt_data_end+0xfffe77a0>
   485ec:	0039883a 	mov	fp,zero
   485f0:	00800084 	movi	r2,2
   485f4:	10803fcc 	andi	r2,r2,255
   485f8:	01000044 	movi	r4,1
   485fc:	11001e26 	beq	r2,r4,48678 <___vfiprintf_internal_r+0x13a0>
   48600:	01000084 	movi	r4,2
   48604:	11001e1e 	bne	r2,r4,48680 <___vfiprintf_internal_r+0x13a8>
   48608:	1829883a 	mov	r20,r3
   4860c:	003eea06 	br	481b8 <__alt_data_end+0xfffe81b8>
   48610:	a007883a 	mov	r3,r20
   48614:	00800044 	movi	r2,1
   48618:	003ff606 	br	485f4 <__alt_data_end+0xfffe85f4>
   4861c:	00800184 	movi	r2,6
   48620:	1240012e 	bgeu	r2,r9,48628 <___vfiprintf_internal_r+0x1350>
   48624:	1013883a 	mov	r9,r2
   48628:	4827883a 	mov	r19,r9
   4862c:	4825883a 	mov	r18,r9
   48630:	48001516 	blt	r9,zero,48688 <___vfiprintf_internal_r+0x13b0>
   48634:	05400174 	movhi	r21,5
   48638:	d8c02215 	stw	r3,136(sp)
   4863c:	ad7eca04 	addi	r21,r21,-1240
   48640:	003d1406 	br	47a94 <__alt_data_end+0xfffe7a94>
   48644:	02800174 	movhi	r10,5
   48648:	52bf2604 	addi	r10,r10,-872
   4864c:	da802415 	stw	r10,144(sp)
   48650:	200d883a 	mov	r6,r4
   48654:	003c9106 	br	4789c <__alt_data_end+0xfffe789c>
   48658:	5021883a 	mov	r16,r10
   4865c:	0013883a 	mov	r9,zero
   48660:	003b7d06 	br	47458 <__alt_data_end+0xfffe7458>
   48664:	4827883a 	mov	r19,r9
   48668:	df001d83 	ldbu	fp,118(sp)
   4866c:	d8c02215 	stw	r3,136(sp)
   48670:	0013883a 	mov	r9,zero
   48674:	003c1806 	br	476d8 <__alt_data_end+0xfffe76d8>
   48678:	1829883a 	mov	r20,r3
   4867c:	003d1806 	br	47ae0 <__alt_data_end+0xfffe7ae0>
   48680:	1829883a 	mov	r20,r3
   48684:	003ccd06 	br	479bc <__alt_data_end+0xfffe79bc>
   48688:	0025883a 	mov	r18,zero
   4868c:	003fe906 	br	48634 <__alt_data_end+0xfffe8634>
   48690:	d8802217 	ldw	r2,136(sp)
   48694:	80c00043 	ldbu	r3,1(r16)
   48698:	5021883a 	mov	r16,r10
   4869c:	12400017 	ldw	r9,0(r2)
   486a0:	10800104 	addi	r2,r2,4
   486a4:	d8802215 	stw	r2,136(sp)
   486a8:	483faf0e 	bge	r9,zero,48568 <__alt_data_end+0xfffe8568>
   486ac:	18c03fcc 	andi	r3,r3,255
   486b0:	18c0201c 	xori	r3,r3,128
   486b4:	027fffc4 	movi	r9,-1
   486b8:	18ffe004 	addi	r3,r3,-128
   486bc:	003b6506 	br	47454 <__alt_data_end+0xfffe7454>
   486c0:	d9c01d85 	stb	r7,118(sp)
   486c4:	003ca006 	br	47948 <__alt_data_end+0xfffe7948>
   486c8:	d9c01d85 	stb	r7,118(sp)
   486cc:	003cad06 	br	47984 <__alt_data_end+0xfffe7984>
   486d0:	d9c01d85 	stb	r7,118(sp)
   486d4:	003d7d06 	br	47ccc <__alt_data_end+0xfffe7ccc>
   486d8:	d9c01d85 	stb	r7,118(sp)
   486dc:	003d5f06 	br	47c5c <__alt_data_end+0xfffe7c5c>
   486e0:	a080004c 	andi	r2,r20,1
   486e4:	0039883a 	mov	fp,zero
   486e8:	10000526 	beq	r2,zero,48700 <___vfiprintf_internal_r+0x1428>
   486ec:	00800c04 	movi	r2,48
   486f0:	d88019c5 	stb	r2,103(sp)
   486f4:	dcc02717 	ldw	r19,156(sp)
   486f8:	dd4019c4 	addi	r21,sp,103
   486fc:	003bf606 	br	476d8 <__alt_data_end+0xfffe76d8>
   48700:	0027883a 	mov	r19,zero
   48704:	dd401a04 	addi	r21,sp,104
   48708:	003bf306 	br	476d8 <__alt_data_end+0xfffe76d8>
   4870c:	d9c01d85 	stb	r7,118(sp)
   48710:	003dc806 	br	47e34 <__alt_data_end+0xfffe7e34>
   48714:	d9c01d85 	stb	r7,118(sp)
   48718:	003d3a06 	br	47c04 <__alt_data_end+0xfffe7c04>
   4871c:	d9c01d85 	stb	r7,118(sp)
   48720:	003d2a06 	br	47bcc <__alt_data_end+0xfffe7bcc>
   48724:	d9c01d85 	stb	r7,118(sp)
   48728:	003cde06 	br	47aa4 <__alt_data_end+0xfffe7aa4>
   4872c:	d9c01d85 	stb	r7,118(sp)
   48730:	003cbc06 	br	47a24 <__alt_data_end+0xfffe7a24>

00048734 <__vfiprintf_internal>:
   48734:	00800174 	movhi	r2,5
   48738:	10862704 	addi	r2,r2,6300
   4873c:	300f883a 	mov	r7,r6
   48740:	280d883a 	mov	r6,r5
   48744:	200b883a 	mov	r5,r4
   48748:	11000017 	ldw	r4,0(r2)
   4874c:	00472d81 	jmpi	472d8 <___vfiprintf_internal_r>

00048750 <__sbprintf>:
   48750:	2880030b 	ldhu	r2,12(r5)
   48754:	2ac01917 	ldw	r11,100(r5)
   48758:	2a80038b 	ldhu	r10,14(r5)
   4875c:	2a400717 	ldw	r9,28(r5)
   48760:	2a000917 	ldw	r8,36(r5)
   48764:	defee204 	addi	sp,sp,-1144
   48768:	00c10004 	movi	r3,1024
   4876c:	dc011a15 	stw	r16,1128(sp)
   48770:	10bfff4c 	andi	r2,r2,65533
   48774:	2821883a 	mov	r16,r5
   48778:	d8cb883a 	add	r5,sp,r3
   4877c:	dc811c15 	stw	r18,1136(sp)
   48780:	dc411b15 	stw	r17,1132(sp)
   48784:	dfc11d15 	stw	ra,1140(sp)
   48788:	2025883a 	mov	r18,r4
   4878c:	d881030d 	sth	r2,1036(sp)
   48790:	dac11915 	stw	r11,1124(sp)
   48794:	da81038d 	sth	r10,1038(sp)
   48798:	da410715 	stw	r9,1052(sp)
   4879c:	da010915 	stw	r8,1060(sp)
   487a0:	dec10015 	stw	sp,1024(sp)
   487a4:	dec10415 	stw	sp,1040(sp)
   487a8:	d8c10215 	stw	r3,1032(sp)
   487ac:	d8c10515 	stw	r3,1044(sp)
   487b0:	d8010615 	stw	zero,1048(sp)
   487b4:	00472d80 	call	472d8 <___vfiprintf_internal_r>
   487b8:	1023883a 	mov	r17,r2
   487bc:	10000416 	blt	r2,zero,487d0 <__sbprintf+0x80>
   487c0:	d9410004 	addi	r5,sp,1024
   487c4:	9009883a 	mov	r4,r18
   487c8:	00446700 	call	44670 <_fflush_r>
   487cc:	10000d1e 	bne	r2,zero,48804 <__sbprintf+0xb4>
   487d0:	d881030b 	ldhu	r2,1036(sp)
   487d4:	1080100c 	andi	r2,r2,64
   487d8:	10000326 	beq	r2,zero,487e8 <__sbprintf+0x98>
   487dc:	8080030b 	ldhu	r2,12(r16)
   487e0:	10801014 	ori	r2,r2,64
   487e4:	8080030d 	sth	r2,12(r16)
   487e8:	8805883a 	mov	r2,r17
   487ec:	dfc11d17 	ldw	ra,1140(sp)
   487f0:	dc811c17 	ldw	r18,1136(sp)
   487f4:	dc411b17 	ldw	r17,1132(sp)
   487f8:	dc011a17 	ldw	r16,1128(sp)
   487fc:	dec11e04 	addi	sp,sp,1144
   48800:	f800283a 	ret
   48804:	047fffc4 	movi	r17,-1
   48808:	003ff106 	br	487d0 <__alt_data_end+0xfffe87d0>

0004880c <_write_r>:
   4880c:	defffd04 	addi	sp,sp,-12
   48810:	2805883a 	mov	r2,r5
   48814:	dc000015 	stw	r16,0(sp)
   48818:	04000174 	movhi	r16,5
   4881c:	dc400115 	stw	r17,4(sp)
   48820:	300b883a 	mov	r5,r6
   48824:	840cf904 	addi	r16,r16,13284
   48828:	2023883a 	mov	r17,r4
   4882c:	380d883a 	mov	r6,r7
   48830:	1009883a 	mov	r4,r2
   48834:	dfc00215 	stw	ra,8(sp)
   48838:	80000015 	stw	zero,0(r16)
   4883c:	004dcdc0 	call	4dcdc <write>
   48840:	00ffffc4 	movi	r3,-1
   48844:	10c00526 	beq	r2,r3,4885c <_write_r+0x50>
   48848:	dfc00217 	ldw	ra,8(sp)
   4884c:	dc400117 	ldw	r17,4(sp)
   48850:	dc000017 	ldw	r16,0(sp)
   48854:	dec00304 	addi	sp,sp,12
   48858:	f800283a 	ret
   4885c:	80c00017 	ldw	r3,0(r16)
   48860:	183ff926 	beq	r3,zero,48848 <__alt_data_end+0xfffe8848>
   48864:	88c00015 	stw	r3,0(r17)
   48868:	003ff706 	br	48848 <__alt_data_end+0xfffe8848>

0004886c <_close_r>:
   4886c:	defffd04 	addi	sp,sp,-12
   48870:	dc000015 	stw	r16,0(sp)
   48874:	04000174 	movhi	r16,5
   48878:	dc400115 	stw	r17,4(sp)
   4887c:	840cf904 	addi	r16,r16,13284
   48880:	2023883a 	mov	r17,r4
   48884:	2809883a 	mov	r4,r5
   48888:	dfc00215 	stw	ra,8(sp)
   4888c:	80000015 	stw	zero,0(r16)
   48890:	004cfc40 	call	4cfc4 <close>
   48894:	00ffffc4 	movi	r3,-1
   48898:	10c00526 	beq	r2,r3,488b0 <_close_r+0x44>
   4889c:	dfc00217 	ldw	ra,8(sp)
   488a0:	dc400117 	ldw	r17,4(sp)
   488a4:	dc000017 	ldw	r16,0(sp)
   488a8:	dec00304 	addi	sp,sp,12
   488ac:	f800283a 	ret
   488b0:	80c00017 	ldw	r3,0(r16)
   488b4:	183ff926 	beq	r3,zero,4889c <__alt_data_end+0xfffe889c>
   488b8:	88c00015 	stw	r3,0(r17)
   488bc:	003ff706 	br	4889c <__alt_data_end+0xfffe889c>

000488c0 <_calloc_r>:
   488c0:	298b383a 	mul	r5,r5,r6
   488c4:	defffe04 	addi	sp,sp,-8
   488c8:	dfc00115 	stw	ra,4(sp)
   488cc:	dc000015 	stw	r16,0(sp)
   488d0:	00452f00 	call	452f0 <_malloc_r>
   488d4:	10002926 	beq	r2,zero,4897c <_calloc_r+0xbc>
   488d8:	11bfff17 	ldw	r6,-4(r2)
   488dc:	1021883a 	mov	r16,r2
   488e0:	00bfff04 	movi	r2,-4
   488e4:	308c703a 	and	r6,r6,r2
   488e8:	00c00904 	movi	r3,36
   488ec:	308d883a 	add	r6,r6,r2
   488f0:	19801636 	bltu	r3,r6,4894c <_calloc_r+0x8c>
   488f4:	008004c4 	movi	r2,19
   488f8:	11800b2e 	bgeu	r2,r6,48928 <_calloc_r+0x68>
   488fc:	80000015 	stw	zero,0(r16)
   48900:	80000115 	stw	zero,4(r16)
   48904:	008006c4 	movi	r2,27
   48908:	11801a2e 	bgeu	r2,r6,48974 <_calloc_r+0xb4>
   4890c:	80000215 	stw	zero,8(r16)
   48910:	80000315 	stw	zero,12(r16)
   48914:	30c0151e 	bne	r6,r3,4896c <_calloc_r+0xac>
   48918:	80000415 	stw	zero,16(r16)
   4891c:	80800604 	addi	r2,r16,24
   48920:	80000515 	stw	zero,20(r16)
   48924:	00000106 	br	4892c <_calloc_r+0x6c>
   48928:	8005883a 	mov	r2,r16
   4892c:	10000015 	stw	zero,0(r2)
   48930:	10000115 	stw	zero,4(r2)
   48934:	10000215 	stw	zero,8(r2)
   48938:	8005883a 	mov	r2,r16
   4893c:	dfc00117 	ldw	ra,4(sp)
   48940:	dc000017 	ldw	r16,0(sp)
   48944:	dec00204 	addi	sp,sp,8
   48948:	f800283a 	ret
   4894c:	000b883a 	mov	r5,zero
   48950:	8009883a 	mov	r4,r16
   48954:	0045d280 	call	45d28 <memset>
   48958:	8005883a 	mov	r2,r16
   4895c:	dfc00117 	ldw	ra,4(sp)
   48960:	dc000017 	ldw	r16,0(sp)
   48964:	dec00204 	addi	sp,sp,8
   48968:	f800283a 	ret
   4896c:	80800404 	addi	r2,r16,16
   48970:	003fee06 	br	4892c <__alt_data_end+0xfffe892c>
   48974:	80800204 	addi	r2,r16,8
   48978:	003fec06 	br	4892c <__alt_data_end+0xfffe892c>
   4897c:	0005883a 	mov	r2,zero
   48980:	003fee06 	br	4893c <__alt_data_end+0xfffe893c>

00048984 <_fclose_r>:
   48984:	28003926 	beq	r5,zero,48a6c <_fclose_r+0xe8>
   48988:	defffc04 	addi	sp,sp,-16
   4898c:	dc400115 	stw	r17,4(sp)
   48990:	dc000015 	stw	r16,0(sp)
   48994:	dfc00315 	stw	ra,12(sp)
   48998:	dc800215 	stw	r18,8(sp)
   4899c:	2023883a 	mov	r17,r4
   489a0:	2821883a 	mov	r16,r5
   489a4:	20000226 	beq	r4,zero,489b0 <_fclose_r+0x2c>
   489a8:	20800e17 	ldw	r2,56(r4)
   489ac:	10002726 	beq	r2,zero,48a4c <_fclose_r+0xc8>
   489b0:	8080030f 	ldh	r2,12(r16)
   489b4:	1000071e 	bne	r2,zero,489d4 <_fclose_r+0x50>
   489b8:	0005883a 	mov	r2,zero
   489bc:	dfc00317 	ldw	ra,12(sp)
   489c0:	dc800217 	ldw	r18,8(sp)
   489c4:	dc400117 	ldw	r17,4(sp)
   489c8:	dc000017 	ldw	r16,0(sp)
   489cc:	dec00404 	addi	sp,sp,16
   489d0:	f800283a 	ret
   489d4:	800b883a 	mov	r5,r16
   489d8:	8809883a 	mov	r4,r17
   489dc:	00444540 	call	44454 <__sflush_r>
   489e0:	1025883a 	mov	r18,r2
   489e4:	80800b17 	ldw	r2,44(r16)
   489e8:	10000426 	beq	r2,zero,489fc <_fclose_r+0x78>
   489ec:	81400717 	ldw	r5,28(r16)
   489f0:	8809883a 	mov	r4,r17
   489f4:	103ee83a 	callr	r2
   489f8:	10001616 	blt	r2,zero,48a54 <_fclose_r+0xd0>
   489fc:	8080030b 	ldhu	r2,12(r16)
   48a00:	1080200c 	andi	r2,r2,128
   48a04:	1000151e 	bne	r2,zero,48a5c <_fclose_r+0xd8>
   48a08:	81400c17 	ldw	r5,48(r16)
   48a0c:	28000526 	beq	r5,zero,48a24 <_fclose_r+0xa0>
   48a10:	80801004 	addi	r2,r16,64
   48a14:	28800226 	beq	r5,r2,48a20 <_fclose_r+0x9c>
   48a18:	8809883a 	mov	r4,r17
   48a1c:	0044bc00 	call	44bc0 <_free_r>
   48a20:	80000c15 	stw	zero,48(r16)
   48a24:	81401117 	ldw	r5,68(r16)
   48a28:	28000326 	beq	r5,zero,48a38 <_fclose_r+0xb4>
   48a2c:	8809883a 	mov	r4,r17
   48a30:	0044bc00 	call	44bc0 <_free_r>
   48a34:	80001115 	stw	zero,68(r16)
   48a38:	0044a5c0 	call	44a5c <__sfp_lock_acquire>
   48a3c:	8000030d 	sth	zero,12(r16)
   48a40:	0044a600 	call	44a60 <__sfp_lock_release>
   48a44:	9005883a 	mov	r2,r18
   48a48:	003fdc06 	br	489bc <__alt_data_end+0xfffe89bc>
   48a4c:	0044a4c0 	call	44a4c <__sinit>
   48a50:	003fd706 	br	489b0 <__alt_data_end+0xfffe89b0>
   48a54:	04bfffc4 	movi	r18,-1
   48a58:	003fe806 	br	489fc <__alt_data_end+0xfffe89fc>
   48a5c:	81400417 	ldw	r5,16(r16)
   48a60:	8809883a 	mov	r4,r17
   48a64:	0044bc00 	call	44bc0 <_free_r>
   48a68:	003fe706 	br	48a08 <__alt_data_end+0xfffe8a08>
   48a6c:	0005883a 	mov	r2,zero
   48a70:	f800283a 	ret

00048a74 <fclose>:
   48a74:	00800174 	movhi	r2,5
   48a78:	10862704 	addi	r2,r2,6300
   48a7c:	200b883a 	mov	r5,r4
   48a80:	11000017 	ldw	r4,0(r2)
   48a84:	00489841 	jmpi	48984 <_fclose_r>

00048a88 <__fputwc>:
   48a88:	defff804 	addi	sp,sp,-32
   48a8c:	dcc00415 	stw	r19,16(sp)
   48a90:	dc800315 	stw	r18,12(sp)
   48a94:	dc000115 	stw	r16,4(sp)
   48a98:	dfc00715 	stw	ra,28(sp)
   48a9c:	dd400615 	stw	r21,24(sp)
   48aa0:	dd000515 	stw	r20,20(sp)
   48aa4:	dc400215 	stw	r17,8(sp)
   48aa8:	2027883a 	mov	r19,r4
   48aac:	2825883a 	mov	r18,r5
   48ab0:	3021883a 	mov	r16,r6
   48ab4:	00450e00 	call	450e0 <__locale_mb_cur_max>
   48ab8:	00c00044 	movi	r3,1
   48abc:	10c03e26 	beq	r2,r3,48bb8 <__fputwc+0x130>
   48ac0:	81c01704 	addi	r7,r16,92
   48ac4:	900d883a 	mov	r6,r18
   48ac8:	d80b883a 	mov	r5,sp
   48acc:	9809883a 	mov	r4,r19
   48ad0:	0049ad40 	call	49ad4 <_wcrtomb_r>
   48ad4:	1029883a 	mov	r20,r2
   48ad8:	00bfffc4 	movi	r2,-1
   48adc:	a0802026 	beq	r20,r2,48b60 <__fputwc+0xd8>
   48ae0:	d9400003 	ldbu	r5,0(sp)
   48ae4:	a0001c26 	beq	r20,zero,48b58 <__fputwc+0xd0>
   48ae8:	0023883a 	mov	r17,zero
   48aec:	05400284 	movi	r21,10
   48af0:	00000906 	br	48b18 <__fputwc+0x90>
   48af4:	80800017 	ldw	r2,0(r16)
   48af8:	11400005 	stb	r5,0(r2)
   48afc:	80c00017 	ldw	r3,0(r16)
   48b00:	18c00044 	addi	r3,r3,1
   48b04:	80c00015 	stw	r3,0(r16)
   48b08:	8c400044 	addi	r17,r17,1
   48b0c:	dc45883a 	add	r2,sp,r17
   48b10:	8d00112e 	bgeu	r17,r20,48b58 <__fputwc+0xd0>
   48b14:	11400003 	ldbu	r5,0(r2)
   48b18:	80c00217 	ldw	r3,8(r16)
   48b1c:	18ffffc4 	addi	r3,r3,-1
   48b20:	80c00215 	stw	r3,8(r16)
   48b24:	183ff30e 	bge	r3,zero,48af4 <__alt_data_end+0xfffe8af4>
   48b28:	80800617 	ldw	r2,24(r16)
   48b2c:	18801916 	blt	r3,r2,48b94 <__fputwc+0x10c>
   48b30:	80800017 	ldw	r2,0(r16)
   48b34:	11400005 	stb	r5,0(r2)
   48b38:	80800017 	ldw	r2,0(r16)
   48b3c:	10c00003 	ldbu	r3,0(r2)
   48b40:	10800044 	addi	r2,r2,1
   48b44:	1d402326 	beq	r3,r21,48bd4 <__fputwc+0x14c>
   48b48:	80800015 	stw	r2,0(r16)
   48b4c:	8c400044 	addi	r17,r17,1
   48b50:	dc45883a 	add	r2,sp,r17
   48b54:	8d3fef36 	bltu	r17,r20,48b14 <__alt_data_end+0xfffe8b14>
   48b58:	9005883a 	mov	r2,r18
   48b5c:	00000406 	br	48b70 <__fputwc+0xe8>
   48b60:	80c0030b 	ldhu	r3,12(r16)
   48b64:	a005883a 	mov	r2,r20
   48b68:	18c01014 	ori	r3,r3,64
   48b6c:	80c0030d 	sth	r3,12(r16)
   48b70:	dfc00717 	ldw	ra,28(sp)
   48b74:	dd400617 	ldw	r21,24(sp)
   48b78:	dd000517 	ldw	r20,20(sp)
   48b7c:	dcc00417 	ldw	r19,16(sp)
   48b80:	dc800317 	ldw	r18,12(sp)
   48b84:	dc400217 	ldw	r17,8(sp)
   48b88:	dc000117 	ldw	r16,4(sp)
   48b8c:	dec00804 	addi	sp,sp,32
   48b90:	f800283a 	ret
   48b94:	800d883a 	mov	r6,r16
   48b98:	29403fcc 	andi	r5,r5,255
   48b9c:	9809883a 	mov	r4,r19
   48ba0:	004997c0 	call	4997c <__swbuf_r>
   48ba4:	10bfffe0 	cmpeqi	r2,r2,-1
   48ba8:	10803fcc 	andi	r2,r2,255
   48bac:	103fd626 	beq	r2,zero,48b08 <__alt_data_end+0xfffe8b08>
   48bb0:	00bfffc4 	movi	r2,-1
   48bb4:	003fee06 	br	48b70 <__alt_data_end+0xfffe8b70>
   48bb8:	90ffffc4 	addi	r3,r18,-1
   48bbc:	01003f84 	movi	r4,254
   48bc0:	20ffbf36 	bltu	r4,r3,48ac0 <__alt_data_end+0xfffe8ac0>
   48bc4:	900b883a 	mov	r5,r18
   48bc8:	dc800005 	stb	r18,0(sp)
   48bcc:	1029883a 	mov	r20,r2
   48bd0:	003fc506 	br	48ae8 <__alt_data_end+0xfffe8ae8>
   48bd4:	800d883a 	mov	r6,r16
   48bd8:	a80b883a 	mov	r5,r21
   48bdc:	9809883a 	mov	r4,r19
   48be0:	004997c0 	call	4997c <__swbuf_r>
   48be4:	10bfffe0 	cmpeqi	r2,r2,-1
   48be8:	003fef06 	br	48ba8 <__alt_data_end+0xfffe8ba8>

00048bec <_fputwc_r>:
   48bec:	3080030b 	ldhu	r2,12(r6)
   48bf0:	10c8000c 	andi	r3,r2,8192
   48bf4:	1800051e 	bne	r3,zero,48c0c <_fputwc_r+0x20>
   48bf8:	30c01917 	ldw	r3,100(r6)
   48bfc:	10880014 	ori	r2,r2,8192
   48c00:	3080030d 	sth	r2,12(r6)
   48c04:	18880014 	ori	r2,r3,8192
   48c08:	30801915 	stw	r2,100(r6)
   48c0c:	0048a881 	jmpi	48a88 <__fputwc>

00048c10 <fputwc>:
   48c10:	00800174 	movhi	r2,5
   48c14:	defffc04 	addi	sp,sp,-16
   48c18:	10862704 	addi	r2,r2,6300
   48c1c:	dc000115 	stw	r16,4(sp)
   48c20:	14000017 	ldw	r16,0(r2)
   48c24:	dc400215 	stw	r17,8(sp)
   48c28:	dfc00315 	stw	ra,12(sp)
   48c2c:	2023883a 	mov	r17,r4
   48c30:	80000226 	beq	r16,zero,48c3c <fputwc+0x2c>
   48c34:	80800e17 	ldw	r2,56(r16)
   48c38:	10001026 	beq	r2,zero,48c7c <fputwc+0x6c>
   48c3c:	2880030b 	ldhu	r2,12(r5)
   48c40:	10c8000c 	andi	r3,r2,8192
   48c44:	1800051e 	bne	r3,zero,48c5c <fputwc+0x4c>
   48c48:	28c01917 	ldw	r3,100(r5)
   48c4c:	10880014 	ori	r2,r2,8192
   48c50:	2880030d 	sth	r2,12(r5)
   48c54:	18880014 	ori	r2,r3,8192
   48c58:	28801915 	stw	r2,100(r5)
   48c5c:	280d883a 	mov	r6,r5
   48c60:	8009883a 	mov	r4,r16
   48c64:	880b883a 	mov	r5,r17
   48c68:	dfc00317 	ldw	ra,12(sp)
   48c6c:	dc400217 	ldw	r17,8(sp)
   48c70:	dc000117 	ldw	r16,4(sp)
   48c74:	dec00404 	addi	sp,sp,16
   48c78:	0048a881 	jmpi	48a88 <__fputwc>
   48c7c:	8009883a 	mov	r4,r16
   48c80:	d9400015 	stw	r5,0(sp)
   48c84:	0044a4c0 	call	44a4c <__sinit>
   48c88:	d9400017 	ldw	r5,0(sp)
   48c8c:	003feb06 	br	48c3c <__alt_data_end+0xfffe8c3c>

00048c90 <_fstat_r>:
   48c90:	defffd04 	addi	sp,sp,-12
   48c94:	2805883a 	mov	r2,r5
   48c98:	dc000015 	stw	r16,0(sp)
   48c9c:	04000174 	movhi	r16,5
   48ca0:	dc400115 	stw	r17,4(sp)
   48ca4:	840cf904 	addi	r16,r16,13284
   48ca8:	2023883a 	mov	r17,r4
   48cac:	300b883a 	mov	r5,r6
   48cb0:	1009883a 	mov	r4,r2
   48cb4:	dfc00215 	stw	ra,8(sp)
   48cb8:	80000015 	stw	zero,0(r16)
   48cbc:	004d0fc0 	call	4d0fc <fstat>
   48cc0:	00ffffc4 	movi	r3,-1
   48cc4:	10c00526 	beq	r2,r3,48cdc <_fstat_r+0x4c>
   48cc8:	dfc00217 	ldw	ra,8(sp)
   48ccc:	dc400117 	ldw	r17,4(sp)
   48cd0:	dc000017 	ldw	r16,0(sp)
   48cd4:	dec00304 	addi	sp,sp,12
   48cd8:	f800283a 	ret
   48cdc:	80c00017 	ldw	r3,0(r16)
   48ce0:	183ff926 	beq	r3,zero,48cc8 <__alt_data_end+0xfffe8cc8>
   48ce4:	88c00015 	stw	r3,0(r17)
   48ce8:	003ff706 	br	48cc8 <__alt_data_end+0xfffe8cc8>

00048cec <__sfvwrite_r>:
   48cec:	30800217 	ldw	r2,8(r6)
   48cf0:	10006726 	beq	r2,zero,48e90 <__sfvwrite_r+0x1a4>
   48cf4:	28c0030b 	ldhu	r3,12(r5)
   48cf8:	defff404 	addi	sp,sp,-48
   48cfc:	dd400715 	stw	r21,28(sp)
   48d00:	dd000615 	stw	r20,24(sp)
   48d04:	dc000215 	stw	r16,8(sp)
   48d08:	dfc00b15 	stw	ra,44(sp)
   48d0c:	df000a15 	stw	fp,40(sp)
   48d10:	ddc00915 	stw	r23,36(sp)
   48d14:	dd800815 	stw	r22,32(sp)
   48d18:	dcc00515 	stw	r19,20(sp)
   48d1c:	dc800415 	stw	r18,16(sp)
   48d20:	dc400315 	stw	r17,12(sp)
   48d24:	1880020c 	andi	r2,r3,8
   48d28:	2821883a 	mov	r16,r5
   48d2c:	202b883a 	mov	r21,r4
   48d30:	3029883a 	mov	r20,r6
   48d34:	10002726 	beq	r2,zero,48dd4 <__sfvwrite_r+0xe8>
   48d38:	28800417 	ldw	r2,16(r5)
   48d3c:	10002526 	beq	r2,zero,48dd4 <__sfvwrite_r+0xe8>
   48d40:	1880008c 	andi	r2,r3,2
   48d44:	a4400017 	ldw	r17,0(r20)
   48d48:	10002a26 	beq	r2,zero,48df4 <__sfvwrite_r+0x108>
   48d4c:	05a00034 	movhi	r22,32768
   48d50:	0027883a 	mov	r19,zero
   48d54:	0025883a 	mov	r18,zero
   48d58:	b5bf0004 	addi	r22,r22,-1024
   48d5c:	980d883a 	mov	r6,r19
   48d60:	a809883a 	mov	r4,r21
   48d64:	90004626 	beq	r18,zero,48e80 <__sfvwrite_r+0x194>
   48d68:	900f883a 	mov	r7,r18
   48d6c:	b480022e 	bgeu	r22,r18,48d78 <__sfvwrite_r+0x8c>
   48d70:	01e00034 	movhi	r7,32768
   48d74:	39ff0004 	addi	r7,r7,-1024
   48d78:	80800917 	ldw	r2,36(r16)
   48d7c:	81400717 	ldw	r5,28(r16)
   48d80:	103ee83a 	callr	r2
   48d84:	0080570e 	bge	zero,r2,48ee4 <__sfvwrite_r+0x1f8>
   48d88:	a0c00217 	ldw	r3,8(r20)
   48d8c:	98a7883a 	add	r19,r19,r2
   48d90:	90a5c83a 	sub	r18,r18,r2
   48d94:	1885c83a 	sub	r2,r3,r2
   48d98:	a0800215 	stw	r2,8(r20)
   48d9c:	103fef1e 	bne	r2,zero,48d5c <__alt_data_end+0xfffe8d5c>
   48da0:	0005883a 	mov	r2,zero
   48da4:	dfc00b17 	ldw	ra,44(sp)
   48da8:	df000a17 	ldw	fp,40(sp)
   48dac:	ddc00917 	ldw	r23,36(sp)
   48db0:	dd800817 	ldw	r22,32(sp)
   48db4:	dd400717 	ldw	r21,28(sp)
   48db8:	dd000617 	ldw	r20,24(sp)
   48dbc:	dcc00517 	ldw	r19,20(sp)
   48dc0:	dc800417 	ldw	r18,16(sp)
   48dc4:	dc400317 	ldw	r17,12(sp)
   48dc8:	dc000217 	ldw	r16,8(sp)
   48dcc:	dec00c04 	addi	sp,sp,48
   48dd0:	f800283a 	ret
   48dd4:	800b883a 	mov	r5,r16
   48dd8:	a809883a 	mov	r4,r21
   48ddc:	0042a780 	call	42a78 <__swsetup_r>
   48de0:	1000eb1e 	bne	r2,zero,49190 <__sfvwrite_r+0x4a4>
   48de4:	80c0030b 	ldhu	r3,12(r16)
   48de8:	a4400017 	ldw	r17,0(r20)
   48dec:	1880008c 	andi	r2,r3,2
   48df0:	103fd61e 	bne	r2,zero,48d4c <__alt_data_end+0xfffe8d4c>
   48df4:	1880004c 	andi	r2,r3,1
   48df8:	10003f1e 	bne	r2,zero,48ef8 <__sfvwrite_r+0x20c>
   48dfc:	0039883a 	mov	fp,zero
   48e00:	0025883a 	mov	r18,zero
   48e04:	90001a26 	beq	r18,zero,48e70 <__sfvwrite_r+0x184>
   48e08:	1880800c 	andi	r2,r3,512
   48e0c:	84c00217 	ldw	r19,8(r16)
   48e10:	10002126 	beq	r2,zero,48e98 <__sfvwrite_r+0x1ac>
   48e14:	982f883a 	mov	r23,r19
   48e18:	94c09336 	bltu	r18,r19,49068 <__sfvwrite_r+0x37c>
   48e1c:	1881200c 	andi	r2,r3,1152
   48e20:	10009e1e 	bne	r2,zero,4909c <__sfvwrite_r+0x3b0>
   48e24:	81000017 	ldw	r4,0(r16)
   48e28:	b80d883a 	mov	r6,r23
   48e2c:	e00b883a 	mov	r5,fp
   48e30:	004925c0 	call	4925c <memmove>
   48e34:	80c00217 	ldw	r3,8(r16)
   48e38:	81000017 	ldw	r4,0(r16)
   48e3c:	9005883a 	mov	r2,r18
   48e40:	1ce7c83a 	sub	r19,r3,r19
   48e44:	25cf883a 	add	r7,r4,r23
   48e48:	84c00215 	stw	r19,8(r16)
   48e4c:	81c00015 	stw	r7,0(r16)
   48e50:	a0c00217 	ldw	r3,8(r20)
   48e54:	e0b9883a 	add	fp,fp,r2
   48e58:	90a5c83a 	sub	r18,r18,r2
   48e5c:	18a7c83a 	sub	r19,r3,r2
   48e60:	a4c00215 	stw	r19,8(r20)
   48e64:	983fce26 	beq	r19,zero,48da0 <__alt_data_end+0xfffe8da0>
   48e68:	80c0030b 	ldhu	r3,12(r16)
   48e6c:	903fe61e 	bne	r18,zero,48e08 <__alt_data_end+0xfffe8e08>
   48e70:	8f000017 	ldw	fp,0(r17)
   48e74:	8c800117 	ldw	r18,4(r17)
   48e78:	8c400204 	addi	r17,r17,8
   48e7c:	003fe106 	br	48e04 <__alt_data_end+0xfffe8e04>
   48e80:	8cc00017 	ldw	r19,0(r17)
   48e84:	8c800117 	ldw	r18,4(r17)
   48e88:	8c400204 	addi	r17,r17,8
   48e8c:	003fb306 	br	48d5c <__alt_data_end+0xfffe8d5c>
   48e90:	0005883a 	mov	r2,zero
   48e94:	f800283a 	ret
   48e98:	81000017 	ldw	r4,0(r16)
   48e9c:	80800417 	ldw	r2,16(r16)
   48ea0:	11005736 	bltu	r2,r4,49000 <__sfvwrite_r+0x314>
   48ea4:	85c00517 	ldw	r23,20(r16)
   48ea8:	95c05536 	bltu	r18,r23,49000 <__sfvwrite_r+0x314>
   48eac:	00a00034 	movhi	r2,32768
   48eb0:	10bfffc4 	addi	r2,r2,-1
   48eb4:	9009883a 	mov	r4,r18
   48eb8:	1480012e 	bgeu	r2,r18,48ec0 <__sfvwrite_r+0x1d4>
   48ebc:	1009883a 	mov	r4,r2
   48ec0:	b80b883a 	mov	r5,r23
   48ec4:	004a76c0 	call	4a76c <__divsi3>
   48ec8:	15cf383a 	mul	r7,r2,r23
   48ecc:	81400717 	ldw	r5,28(r16)
   48ed0:	80800917 	ldw	r2,36(r16)
   48ed4:	e00d883a 	mov	r6,fp
   48ed8:	a809883a 	mov	r4,r21
   48edc:	103ee83a 	callr	r2
   48ee0:	00bfdb16 	blt	zero,r2,48e50 <__alt_data_end+0xfffe8e50>
   48ee4:	8080030b 	ldhu	r2,12(r16)
   48ee8:	10801014 	ori	r2,r2,64
   48eec:	8080030d 	sth	r2,12(r16)
   48ef0:	00bfffc4 	movi	r2,-1
   48ef4:	003fab06 	br	48da4 <__alt_data_end+0xfffe8da4>
   48ef8:	0027883a 	mov	r19,zero
   48efc:	0011883a 	mov	r8,zero
   48f00:	0039883a 	mov	fp,zero
   48f04:	0025883a 	mov	r18,zero
   48f08:	90001f26 	beq	r18,zero,48f88 <__sfvwrite_r+0x29c>
   48f0c:	40005a26 	beq	r8,zero,49078 <__sfvwrite_r+0x38c>
   48f10:	982d883a 	mov	r22,r19
   48f14:	94c0012e 	bgeu	r18,r19,48f1c <__sfvwrite_r+0x230>
   48f18:	902d883a 	mov	r22,r18
   48f1c:	81000017 	ldw	r4,0(r16)
   48f20:	80800417 	ldw	r2,16(r16)
   48f24:	b02f883a 	mov	r23,r22
   48f28:	81c00517 	ldw	r7,20(r16)
   48f2c:	1100032e 	bgeu	r2,r4,48f3c <__sfvwrite_r+0x250>
   48f30:	80c00217 	ldw	r3,8(r16)
   48f34:	38c7883a 	add	r3,r7,r3
   48f38:	1d801816 	blt	r3,r22,48f9c <__sfvwrite_r+0x2b0>
   48f3c:	b1c03e16 	blt	r22,r7,49038 <__sfvwrite_r+0x34c>
   48f40:	80800917 	ldw	r2,36(r16)
   48f44:	81400717 	ldw	r5,28(r16)
   48f48:	e00d883a 	mov	r6,fp
   48f4c:	da000115 	stw	r8,4(sp)
   48f50:	a809883a 	mov	r4,r21
   48f54:	103ee83a 	callr	r2
   48f58:	102f883a 	mov	r23,r2
   48f5c:	da000117 	ldw	r8,4(sp)
   48f60:	00bfe00e 	bge	zero,r2,48ee4 <__alt_data_end+0xfffe8ee4>
   48f64:	9de7c83a 	sub	r19,r19,r23
   48f68:	98001f26 	beq	r19,zero,48fe8 <__sfvwrite_r+0x2fc>
   48f6c:	a0800217 	ldw	r2,8(r20)
   48f70:	e5f9883a 	add	fp,fp,r23
   48f74:	95e5c83a 	sub	r18,r18,r23
   48f78:	15efc83a 	sub	r23,r2,r23
   48f7c:	a5c00215 	stw	r23,8(r20)
   48f80:	b83f8726 	beq	r23,zero,48da0 <__alt_data_end+0xfffe8da0>
   48f84:	903fe11e 	bne	r18,zero,48f0c <__alt_data_end+0xfffe8f0c>
   48f88:	8f000017 	ldw	fp,0(r17)
   48f8c:	8c800117 	ldw	r18,4(r17)
   48f90:	0011883a 	mov	r8,zero
   48f94:	8c400204 	addi	r17,r17,8
   48f98:	003fdb06 	br	48f08 <__alt_data_end+0xfffe8f08>
   48f9c:	180d883a 	mov	r6,r3
   48fa0:	e00b883a 	mov	r5,fp
   48fa4:	da000115 	stw	r8,4(sp)
   48fa8:	d8c00015 	stw	r3,0(sp)
   48fac:	004925c0 	call	4925c <memmove>
   48fb0:	d8c00017 	ldw	r3,0(sp)
   48fb4:	80800017 	ldw	r2,0(r16)
   48fb8:	800b883a 	mov	r5,r16
   48fbc:	a809883a 	mov	r4,r21
   48fc0:	10c5883a 	add	r2,r2,r3
   48fc4:	80800015 	stw	r2,0(r16)
   48fc8:	d8c00015 	stw	r3,0(sp)
   48fcc:	00446700 	call	44670 <_fflush_r>
   48fd0:	d8c00017 	ldw	r3,0(sp)
   48fd4:	da000117 	ldw	r8,4(sp)
   48fd8:	103fc21e 	bne	r2,zero,48ee4 <__alt_data_end+0xfffe8ee4>
   48fdc:	182f883a 	mov	r23,r3
   48fe0:	9de7c83a 	sub	r19,r19,r23
   48fe4:	983fe11e 	bne	r19,zero,48f6c <__alt_data_end+0xfffe8f6c>
   48fe8:	800b883a 	mov	r5,r16
   48fec:	a809883a 	mov	r4,r21
   48ff0:	00446700 	call	44670 <_fflush_r>
   48ff4:	103fbb1e 	bne	r2,zero,48ee4 <__alt_data_end+0xfffe8ee4>
   48ff8:	0011883a 	mov	r8,zero
   48ffc:	003fdb06 	br	48f6c <__alt_data_end+0xfffe8f6c>
   49000:	94c0012e 	bgeu	r18,r19,49008 <__sfvwrite_r+0x31c>
   49004:	9027883a 	mov	r19,r18
   49008:	980d883a 	mov	r6,r19
   4900c:	e00b883a 	mov	r5,fp
   49010:	004925c0 	call	4925c <memmove>
   49014:	80800217 	ldw	r2,8(r16)
   49018:	80c00017 	ldw	r3,0(r16)
   4901c:	14c5c83a 	sub	r2,r2,r19
   49020:	1cc7883a 	add	r3,r3,r19
   49024:	80800215 	stw	r2,8(r16)
   49028:	80c00015 	stw	r3,0(r16)
   4902c:	10004326 	beq	r2,zero,4913c <__sfvwrite_r+0x450>
   49030:	9805883a 	mov	r2,r19
   49034:	003f8606 	br	48e50 <__alt_data_end+0xfffe8e50>
   49038:	b00d883a 	mov	r6,r22
   4903c:	e00b883a 	mov	r5,fp
   49040:	da000115 	stw	r8,4(sp)
   49044:	004925c0 	call	4925c <memmove>
   49048:	80800217 	ldw	r2,8(r16)
   4904c:	80c00017 	ldw	r3,0(r16)
   49050:	da000117 	ldw	r8,4(sp)
   49054:	1585c83a 	sub	r2,r2,r22
   49058:	1dad883a 	add	r22,r3,r22
   4905c:	80800215 	stw	r2,8(r16)
   49060:	85800015 	stw	r22,0(r16)
   49064:	003fbf06 	br	48f64 <__alt_data_end+0xfffe8f64>
   49068:	81000017 	ldw	r4,0(r16)
   4906c:	9027883a 	mov	r19,r18
   49070:	902f883a 	mov	r23,r18
   49074:	003f6c06 	br	48e28 <__alt_data_end+0xfffe8e28>
   49078:	900d883a 	mov	r6,r18
   4907c:	01400284 	movi	r5,10
   49080:	e009883a 	mov	r4,fp
   49084:	0045afc0 	call	45afc <memchr>
   49088:	10003e26 	beq	r2,zero,49184 <__sfvwrite_r+0x498>
   4908c:	10800044 	addi	r2,r2,1
   49090:	1727c83a 	sub	r19,r2,fp
   49094:	02000044 	movi	r8,1
   49098:	003f9d06 	br	48f10 <__alt_data_end+0xfffe8f10>
   4909c:	80800517 	ldw	r2,20(r16)
   490a0:	81400417 	ldw	r5,16(r16)
   490a4:	81c00017 	ldw	r7,0(r16)
   490a8:	10a7883a 	add	r19,r2,r2
   490ac:	9885883a 	add	r2,r19,r2
   490b0:	1026d7fa 	srli	r19,r2,31
   490b4:	396dc83a 	sub	r22,r7,r5
   490b8:	b1000044 	addi	r4,r22,1
   490bc:	9885883a 	add	r2,r19,r2
   490c0:	1027d07a 	srai	r19,r2,1
   490c4:	2485883a 	add	r2,r4,r18
   490c8:	980d883a 	mov	r6,r19
   490cc:	9880022e 	bgeu	r19,r2,490d8 <__sfvwrite_r+0x3ec>
   490d0:	1027883a 	mov	r19,r2
   490d4:	100d883a 	mov	r6,r2
   490d8:	18c1000c 	andi	r3,r3,1024
   490dc:	18001c26 	beq	r3,zero,49150 <__sfvwrite_r+0x464>
   490e0:	300b883a 	mov	r5,r6
   490e4:	a809883a 	mov	r4,r21
   490e8:	00452f00 	call	452f0 <_malloc_r>
   490ec:	102f883a 	mov	r23,r2
   490f0:	10002926 	beq	r2,zero,49198 <__sfvwrite_r+0x4ac>
   490f4:	81400417 	ldw	r5,16(r16)
   490f8:	b00d883a 	mov	r6,r22
   490fc:	1009883a 	mov	r4,r2
   49100:	0045be00 	call	45be0 <memcpy>
   49104:	8080030b 	ldhu	r2,12(r16)
   49108:	00fedfc4 	movi	r3,-1153
   4910c:	10c4703a 	and	r2,r2,r3
   49110:	10802014 	ori	r2,r2,128
   49114:	8080030d 	sth	r2,12(r16)
   49118:	bd89883a 	add	r4,r23,r22
   4911c:	9d8fc83a 	sub	r7,r19,r22
   49120:	85c00415 	stw	r23,16(r16)
   49124:	84c00515 	stw	r19,20(r16)
   49128:	81000015 	stw	r4,0(r16)
   4912c:	9027883a 	mov	r19,r18
   49130:	81c00215 	stw	r7,8(r16)
   49134:	902f883a 	mov	r23,r18
   49138:	003f3b06 	br	48e28 <__alt_data_end+0xfffe8e28>
   4913c:	800b883a 	mov	r5,r16
   49140:	a809883a 	mov	r4,r21
   49144:	00446700 	call	44670 <_fflush_r>
   49148:	103fb926 	beq	r2,zero,49030 <__alt_data_end+0xfffe9030>
   4914c:	003f6506 	br	48ee4 <__alt_data_end+0xfffe8ee4>
   49150:	a809883a 	mov	r4,r21
   49154:	00494180 	call	49418 <_realloc_r>
   49158:	102f883a 	mov	r23,r2
   4915c:	103fee1e 	bne	r2,zero,49118 <__alt_data_end+0xfffe9118>
   49160:	81400417 	ldw	r5,16(r16)
   49164:	a809883a 	mov	r4,r21
   49168:	0044bc00 	call	44bc0 <_free_r>
   4916c:	8080030b 	ldhu	r2,12(r16)
   49170:	00ffdfc4 	movi	r3,-129
   49174:	1884703a 	and	r2,r3,r2
   49178:	00c00304 	movi	r3,12
   4917c:	a8c00015 	stw	r3,0(r21)
   49180:	003f5906 	br	48ee8 <__alt_data_end+0xfffe8ee8>
   49184:	94c00044 	addi	r19,r18,1
   49188:	02000044 	movi	r8,1
   4918c:	003f6006 	br	48f10 <__alt_data_end+0xfffe8f10>
   49190:	00bfffc4 	movi	r2,-1
   49194:	003f0306 	br	48da4 <__alt_data_end+0xfffe8da4>
   49198:	00800304 	movi	r2,12
   4919c:	a8800015 	stw	r2,0(r21)
   491a0:	8080030b 	ldhu	r2,12(r16)
   491a4:	003f5006 	br	48ee8 <__alt_data_end+0xfffe8ee8>

000491a8 <_isatty_r>:
   491a8:	defffd04 	addi	sp,sp,-12
   491ac:	dc000015 	stw	r16,0(sp)
   491b0:	04000174 	movhi	r16,5
   491b4:	dc400115 	stw	r17,4(sp)
   491b8:	840cf904 	addi	r16,r16,13284
   491bc:	2023883a 	mov	r17,r4
   491c0:	2809883a 	mov	r4,r5
   491c4:	dfc00215 	stw	ra,8(sp)
   491c8:	80000015 	stw	zero,0(r16)
   491cc:	004d4880 	call	4d488 <isatty>
   491d0:	00ffffc4 	movi	r3,-1
   491d4:	10c00526 	beq	r2,r3,491ec <_isatty_r+0x44>
   491d8:	dfc00217 	ldw	ra,8(sp)
   491dc:	dc400117 	ldw	r17,4(sp)
   491e0:	dc000017 	ldw	r16,0(sp)
   491e4:	dec00304 	addi	sp,sp,12
   491e8:	f800283a 	ret
   491ec:	80c00017 	ldw	r3,0(r16)
   491f0:	183ff926 	beq	r3,zero,491d8 <__alt_data_end+0xfffe91d8>
   491f4:	88c00015 	stw	r3,0(r17)
   491f8:	003ff706 	br	491d8 <__alt_data_end+0xfffe91d8>

000491fc <_lseek_r>:
   491fc:	defffd04 	addi	sp,sp,-12
   49200:	2805883a 	mov	r2,r5
   49204:	dc000015 	stw	r16,0(sp)
   49208:	04000174 	movhi	r16,5
   4920c:	dc400115 	stw	r17,4(sp)
   49210:	300b883a 	mov	r5,r6
   49214:	840cf904 	addi	r16,r16,13284
   49218:	2023883a 	mov	r17,r4
   4921c:	380d883a 	mov	r6,r7
   49220:	1009883a 	mov	r4,r2
   49224:	dfc00215 	stw	ra,8(sp)
   49228:	80000015 	stw	zero,0(r16)
   4922c:	004d6540 	call	4d654 <lseek>
   49230:	00ffffc4 	movi	r3,-1
   49234:	10c00526 	beq	r2,r3,4924c <_lseek_r+0x50>
   49238:	dfc00217 	ldw	ra,8(sp)
   4923c:	dc400117 	ldw	r17,4(sp)
   49240:	dc000017 	ldw	r16,0(sp)
   49244:	dec00304 	addi	sp,sp,12
   49248:	f800283a 	ret
   4924c:	80c00017 	ldw	r3,0(r16)
   49250:	183ff926 	beq	r3,zero,49238 <__alt_data_end+0xfffe9238>
   49254:	88c00015 	stw	r3,0(r17)
   49258:	003ff706 	br	49238 <__alt_data_end+0xfffe9238>

0004925c <memmove>:
   4925c:	2005883a 	mov	r2,r4
   49260:	29000b2e 	bgeu	r5,r4,49290 <memmove+0x34>
   49264:	298f883a 	add	r7,r5,r6
   49268:	21c0092e 	bgeu	r4,r7,49290 <memmove+0x34>
   4926c:	2187883a 	add	r3,r4,r6
   49270:	198bc83a 	sub	r5,r3,r6
   49274:	30004826 	beq	r6,zero,49398 <memmove+0x13c>
   49278:	39ffffc4 	addi	r7,r7,-1
   4927c:	39000003 	ldbu	r4,0(r7)
   49280:	18ffffc4 	addi	r3,r3,-1
   49284:	19000005 	stb	r4,0(r3)
   49288:	28fffb1e 	bne	r5,r3,49278 <__alt_data_end+0xfffe9278>
   4928c:	f800283a 	ret
   49290:	00c003c4 	movi	r3,15
   49294:	1980412e 	bgeu	r3,r6,4939c <memmove+0x140>
   49298:	2886b03a 	or	r3,r5,r2
   4929c:	18c000cc 	andi	r3,r3,3
   492a0:	1800401e 	bne	r3,zero,493a4 <memmove+0x148>
   492a4:	33fffc04 	addi	r15,r6,-16
   492a8:	781ed13a 	srli	r15,r15,4
   492ac:	28c00104 	addi	r3,r5,4
   492b0:	13400104 	addi	r13,r2,4
   492b4:	781c913a 	slli	r14,r15,4
   492b8:	2b000204 	addi	r12,r5,8
   492bc:	12c00204 	addi	r11,r2,8
   492c0:	73800504 	addi	r14,r14,20
   492c4:	2a800304 	addi	r10,r5,12
   492c8:	12400304 	addi	r9,r2,12
   492cc:	2b9d883a 	add	r14,r5,r14
   492d0:	2811883a 	mov	r8,r5
   492d4:	100f883a 	mov	r7,r2
   492d8:	41000017 	ldw	r4,0(r8)
   492dc:	39c00404 	addi	r7,r7,16
   492e0:	18c00404 	addi	r3,r3,16
   492e4:	393ffc15 	stw	r4,-16(r7)
   492e8:	193ffc17 	ldw	r4,-16(r3)
   492ec:	6b400404 	addi	r13,r13,16
   492f0:	5ac00404 	addi	r11,r11,16
   492f4:	693ffc15 	stw	r4,-16(r13)
   492f8:	61000017 	ldw	r4,0(r12)
   492fc:	4a400404 	addi	r9,r9,16
   49300:	42000404 	addi	r8,r8,16
   49304:	593ffc15 	stw	r4,-16(r11)
   49308:	51000017 	ldw	r4,0(r10)
   4930c:	63000404 	addi	r12,r12,16
   49310:	52800404 	addi	r10,r10,16
   49314:	493ffc15 	stw	r4,-16(r9)
   49318:	1bbfef1e 	bne	r3,r14,492d8 <__alt_data_end+0xfffe92d8>
   4931c:	79000044 	addi	r4,r15,1
   49320:	2008913a 	slli	r4,r4,4
   49324:	328003cc 	andi	r10,r6,15
   49328:	02c000c4 	movi	r11,3
   4932c:	1107883a 	add	r3,r2,r4
   49330:	290b883a 	add	r5,r5,r4
   49334:	5a801e2e 	bgeu	r11,r10,493b0 <memmove+0x154>
   49338:	1813883a 	mov	r9,r3
   4933c:	2811883a 	mov	r8,r5
   49340:	500f883a 	mov	r7,r10
   49344:	41000017 	ldw	r4,0(r8)
   49348:	4a400104 	addi	r9,r9,4
   4934c:	39ffff04 	addi	r7,r7,-4
   49350:	493fff15 	stw	r4,-4(r9)
   49354:	42000104 	addi	r8,r8,4
   49358:	59fffa36 	bltu	r11,r7,49344 <__alt_data_end+0xfffe9344>
   4935c:	513fff04 	addi	r4,r10,-4
   49360:	2008d0ba 	srli	r4,r4,2
   49364:	318000cc 	andi	r6,r6,3
   49368:	21000044 	addi	r4,r4,1
   4936c:	2109883a 	add	r4,r4,r4
   49370:	2109883a 	add	r4,r4,r4
   49374:	1907883a 	add	r3,r3,r4
   49378:	290b883a 	add	r5,r5,r4
   4937c:	30000b26 	beq	r6,zero,493ac <memmove+0x150>
   49380:	198d883a 	add	r6,r3,r6
   49384:	29c00003 	ldbu	r7,0(r5)
   49388:	18c00044 	addi	r3,r3,1
   4938c:	29400044 	addi	r5,r5,1
   49390:	19ffffc5 	stb	r7,-1(r3)
   49394:	19bffb1e 	bne	r3,r6,49384 <__alt_data_end+0xfffe9384>
   49398:	f800283a 	ret
   4939c:	1007883a 	mov	r3,r2
   493a0:	003ff606 	br	4937c <__alt_data_end+0xfffe937c>
   493a4:	1007883a 	mov	r3,r2
   493a8:	003ff506 	br	49380 <__alt_data_end+0xfffe9380>
   493ac:	f800283a 	ret
   493b0:	500d883a 	mov	r6,r10
   493b4:	003ff106 	br	4937c <__alt_data_end+0xfffe937c>

000493b8 <_read_r>:
   493b8:	defffd04 	addi	sp,sp,-12
   493bc:	2805883a 	mov	r2,r5
   493c0:	dc000015 	stw	r16,0(sp)
   493c4:	04000174 	movhi	r16,5
   493c8:	dc400115 	stw	r17,4(sp)
   493cc:	300b883a 	mov	r5,r6
   493d0:	840cf904 	addi	r16,r16,13284
   493d4:	2023883a 	mov	r17,r4
   493d8:	380d883a 	mov	r6,r7
   493dc:	1009883a 	mov	r4,r2
   493e0:	dfc00215 	stw	ra,8(sp)
   493e4:	80000015 	stw	zero,0(r16)
   493e8:	004da900 	call	4da90 <read>
   493ec:	00ffffc4 	movi	r3,-1
   493f0:	10c00526 	beq	r2,r3,49408 <_read_r+0x50>
   493f4:	dfc00217 	ldw	ra,8(sp)
   493f8:	dc400117 	ldw	r17,4(sp)
   493fc:	dc000017 	ldw	r16,0(sp)
   49400:	dec00304 	addi	sp,sp,12
   49404:	f800283a 	ret
   49408:	80c00017 	ldw	r3,0(r16)
   4940c:	183ff926 	beq	r3,zero,493f4 <__alt_data_end+0xfffe93f4>
   49410:	88c00015 	stw	r3,0(r17)
   49414:	003ff706 	br	493f4 <__alt_data_end+0xfffe93f4>

00049418 <_realloc_r>:
   49418:	defff604 	addi	sp,sp,-40
   4941c:	dc800215 	stw	r18,8(sp)
   49420:	dfc00915 	stw	ra,36(sp)
   49424:	df000815 	stw	fp,32(sp)
   49428:	ddc00715 	stw	r23,28(sp)
   4942c:	dd800615 	stw	r22,24(sp)
   49430:	dd400515 	stw	r21,20(sp)
   49434:	dd000415 	stw	r20,16(sp)
   49438:	dcc00315 	stw	r19,12(sp)
   4943c:	dc400115 	stw	r17,4(sp)
   49440:	dc000015 	stw	r16,0(sp)
   49444:	3025883a 	mov	r18,r6
   49448:	2800b726 	beq	r5,zero,49728 <_realloc_r+0x310>
   4944c:	282b883a 	mov	r21,r5
   49450:	2029883a 	mov	r20,r4
   49454:	004d7a40 	call	4d7a4 <__malloc_lock>
   49458:	a8bfff17 	ldw	r2,-4(r21)
   4945c:	043fff04 	movi	r16,-4
   49460:	90c002c4 	addi	r3,r18,11
   49464:	01000584 	movi	r4,22
   49468:	acfffe04 	addi	r19,r21,-8
   4946c:	1420703a 	and	r16,r2,r16
   49470:	20c0332e 	bgeu	r4,r3,49540 <_realloc_r+0x128>
   49474:	047ffe04 	movi	r17,-8
   49478:	1c62703a 	and	r17,r3,r17
   4947c:	8807883a 	mov	r3,r17
   49480:	88005816 	blt	r17,zero,495e4 <_realloc_r+0x1cc>
   49484:	8c805736 	bltu	r17,r18,495e4 <_realloc_r+0x1cc>
   49488:	80c0300e 	bge	r16,r3,4954c <_realloc_r+0x134>
   4948c:	07000174 	movhi	fp,5
   49490:	e700a204 	addi	fp,fp,648
   49494:	e1c00217 	ldw	r7,8(fp)
   49498:	9c09883a 	add	r4,r19,r16
   4949c:	22000117 	ldw	r8,4(r4)
   494a0:	21c06326 	beq	r4,r7,49630 <_realloc_r+0x218>
   494a4:	017fff84 	movi	r5,-2
   494a8:	414a703a 	and	r5,r8,r5
   494ac:	214b883a 	add	r5,r4,r5
   494b0:	29800117 	ldw	r6,4(r5)
   494b4:	3180004c 	andi	r6,r6,1
   494b8:	30003f26 	beq	r6,zero,495b8 <_realloc_r+0x1a0>
   494bc:	1080004c 	andi	r2,r2,1
   494c0:	10008326 	beq	r2,zero,496d0 <_realloc_r+0x2b8>
   494c4:	900b883a 	mov	r5,r18
   494c8:	a009883a 	mov	r4,r20
   494cc:	00452f00 	call	452f0 <_malloc_r>
   494d0:	1025883a 	mov	r18,r2
   494d4:	10011e26 	beq	r2,zero,49950 <_realloc_r+0x538>
   494d8:	a93fff17 	ldw	r4,-4(r21)
   494dc:	10fffe04 	addi	r3,r2,-8
   494e0:	00bfff84 	movi	r2,-2
   494e4:	2084703a 	and	r2,r4,r2
   494e8:	9885883a 	add	r2,r19,r2
   494ec:	1880ee26 	beq	r3,r2,498a8 <_realloc_r+0x490>
   494f0:	81bfff04 	addi	r6,r16,-4
   494f4:	00800904 	movi	r2,36
   494f8:	1180b836 	bltu	r2,r6,497dc <_realloc_r+0x3c4>
   494fc:	00c004c4 	movi	r3,19
   49500:	19809636 	bltu	r3,r6,4975c <_realloc_r+0x344>
   49504:	9005883a 	mov	r2,r18
   49508:	a807883a 	mov	r3,r21
   4950c:	19000017 	ldw	r4,0(r3)
   49510:	11000015 	stw	r4,0(r2)
   49514:	19000117 	ldw	r4,4(r3)
   49518:	11000115 	stw	r4,4(r2)
   4951c:	18c00217 	ldw	r3,8(r3)
   49520:	10c00215 	stw	r3,8(r2)
   49524:	a80b883a 	mov	r5,r21
   49528:	a009883a 	mov	r4,r20
   4952c:	0044bc00 	call	44bc0 <_free_r>
   49530:	a009883a 	mov	r4,r20
   49534:	004d7c80 	call	4d7c8 <__malloc_unlock>
   49538:	9005883a 	mov	r2,r18
   4953c:	00001206 	br	49588 <_realloc_r+0x170>
   49540:	00c00404 	movi	r3,16
   49544:	1823883a 	mov	r17,r3
   49548:	003fce06 	br	49484 <__alt_data_end+0xfffe9484>
   4954c:	a825883a 	mov	r18,r21
   49550:	8445c83a 	sub	r2,r16,r17
   49554:	00c003c4 	movi	r3,15
   49558:	18802636 	bltu	r3,r2,495f4 <_realloc_r+0x1dc>
   4955c:	99800117 	ldw	r6,4(r19)
   49560:	9c07883a 	add	r3,r19,r16
   49564:	3180004c 	andi	r6,r6,1
   49568:	3420b03a 	or	r16,r6,r16
   4956c:	9c000115 	stw	r16,4(r19)
   49570:	18800117 	ldw	r2,4(r3)
   49574:	10800054 	ori	r2,r2,1
   49578:	18800115 	stw	r2,4(r3)
   4957c:	a009883a 	mov	r4,r20
   49580:	004d7c80 	call	4d7c8 <__malloc_unlock>
   49584:	9005883a 	mov	r2,r18
   49588:	dfc00917 	ldw	ra,36(sp)
   4958c:	df000817 	ldw	fp,32(sp)
   49590:	ddc00717 	ldw	r23,28(sp)
   49594:	dd800617 	ldw	r22,24(sp)
   49598:	dd400517 	ldw	r21,20(sp)
   4959c:	dd000417 	ldw	r20,16(sp)
   495a0:	dcc00317 	ldw	r19,12(sp)
   495a4:	dc800217 	ldw	r18,8(sp)
   495a8:	dc400117 	ldw	r17,4(sp)
   495ac:	dc000017 	ldw	r16,0(sp)
   495b0:	dec00a04 	addi	sp,sp,40
   495b4:	f800283a 	ret
   495b8:	017fff04 	movi	r5,-4
   495bc:	414a703a 	and	r5,r8,r5
   495c0:	814d883a 	add	r6,r16,r5
   495c4:	30c01f16 	blt	r6,r3,49644 <_realloc_r+0x22c>
   495c8:	20800317 	ldw	r2,12(r4)
   495cc:	20c00217 	ldw	r3,8(r4)
   495d0:	a825883a 	mov	r18,r21
   495d4:	3021883a 	mov	r16,r6
   495d8:	18800315 	stw	r2,12(r3)
   495dc:	10c00215 	stw	r3,8(r2)
   495e0:	003fdb06 	br	49550 <__alt_data_end+0xfffe9550>
   495e4:	00800304 	movi	r2,12
   495e8:	a0800015 	stw	r2,0(r20)
   495ec:	0005883a 	mov	r2,zero
   495f0:	003fe506 	br	49588 <__alt_data_end+0xfffe9588>
   495f4:	98c00117 	ldw	r3,4(r19)
   495f8:	9c4b883a 	add	r5,r19,r17
   495fc:	11000054 	ori	r4,r2,1
   49600:	18c0004c 	andi	r3,r3,1
   49604:	1c62b03a 	or	r17,r3,r17
   49608:	9c400115 	stw	r17,4(r19)
   4960c:	29000115 	stw	r4,4(r5)
   49610:	2885883a 	add	r2,r5,r2
   49614:	10c00117 	ldw	r3,4(r2)
   49618:	29400204 	addi	r5,r5,8
   4961c:	a009883a 	mov	r4,r20
   49620:	18c00054 	ori	r3,r3,1
   49624:	10c00115 	stw	r3,4(r2)
   49628:	0044bc00 	call	44bc0 <_free_r>
   4962c:	003fd306 	br	4957c <__alt_data_end+0xfffe957c>
   49630:	017fff04 	movi	r5,-4
   49634:	414a703a 	and	r5,r8,r5
   49638:	89800404 	addi	r6,r17,16
   4963c:	8151883a 	add	r8,r16,r5
   49640:	4180590e 	bge	r8,r6,497a8 <_realloc_r+0x390>
   49644:	1080004c 	andi	r2,r2,1
   49648:	103f9e1e 	bne	r2,zero,494c4 <__alt_data_end+0xfffe94c4>
   4964c:	adbffe17 	ldw	r22,-8(r21)
   49650:	00bfff04 	movi	r2,-4
   49654:	9dadc83a 	sub	r22,r19,r22
   49658:	b1800117 	ldw	r6,4(r22)
   4965c:	3084703a 	and	r2,r6,r2
   49660:	20002026 	beq	r4,zero,496e4 <_realloc_r+0x2cc>
   49664:	80af883a 	add	r23,r16,r2
   49668:	b96f883a 	add	r23,r23,r5
   4966c:	21c05f26 	beq	r4,r7,497ec <_realloc_r+0x3d4>
   49670:	b8c01c16 	blt	r23,r3,496e4 <_realloc_r+0x2cc>
   49674:	20800317 	ldw	r2,12(r4)
   49678:	20c00217 	ldw	r3,8(r4)
   4967c:	81bfff04 	addi	r6,r16,-4
   49680:	01000904 	movi	r4,36
   49684:	18800315 	stw	r2,12(r3)
   49688:	10c00215 	stw	r3,8(r2)
   4968c:	b0c00217 	ldw	r3,8(r22)
   49690:	b0800317 	ldw	r2,12(r22)
   49694:	b4800204 	addi	r18,r22,8
   49698:	18800315 	stw	r2,12(r3)
   4969c:	10c00215 	stw	r3,8(r2)
   496a0:	21801b36 	bltu	r4,r6,49710 <_realloc_r+0x2f8>
   496a4:	008004c4 	movi	r2,19
   496a8:	1180352e 	bgeu	r2,r6,49780 <_realloc_r+0x368>
   496ac:	a8800017 	ldw	r2,0(r21)
   496b0:	b0800215 	stw	r2,8(r22)
   496b4:	a8800117 	ldw	r2,4(r21)
   496b8:	b0800315 	stw	r2,12(r22)
   496bc:	008006c4 	movi	r2,27
   496c0:	11807f36 	bltu	r2,r6,498c0 <_realloc_r+0x4a8>
   496c4:	b0800404 	addi	r2,r22,16
   496c8:	ad400204 	addi	r21,r21,8
   496cc:	00002d06 	br	49784 <_realloc_r+0x36c>
   496d0:	adbffe17 	ldw	r22,-8(r21)
   496d4:	00bfff04 	movi	r2,-4
   496d8:	9dadc83a 	sub	r22,r19,r22
   496dc:	b1000117 	ldw	r4,4(r22)
   496e0:	2084703a 	and	r2,r4,r2
   496e4:	b03f7726 	beq	r22,zero,494c4 <__alt_data_end+0xfffe94c4>
   496e8:	80af883a 	add	r23,r16,r2
   496ec:	b8ff7516 	blt	r23,r3,494c4 <__alt_data_end+0xfffe94c4>
   496f0:	b0800317 	ldw	r2,12(r22)
   496f4:	b0c00217 	ldw	r3,8(r22)
   496f8:	81bfff04 	addi	r6,r16,-4
   496fc:	01000904 	movi	r4,36
   49700:	18800315 	stw	r2,12(r3)
   49704:	10c00215 	stw	r3,8(r2)
   49708:	b4800204 	addi	r18,r22,8
   4970c:	21bfe52e 	bgeu	r4,r6,496a4 <__alt_data_end+0xfffe96a4>
   49710:	a80b883a 	mov	r5,r21
   49714:	9009883a 	mov	r4,r18
   49718:	004925c0 	call	4925c <memmove>
   4971c:	b821883a 	mov	r16,r23
   49720:	b027883a 	mov	r19,r22
   49724:	003f8a06 	br	49550 <__alt_data_end+0xfffe9550>
   49728:	300b883a 	mov	r5,r6
   4972c:	dfc00917 	ldw	ra,36(sp)
   49730:	df000817 	ldw	fp,32(sp)
   49734:	ddc00717 	ldw	r23,28(sp)
   49738:	dd800617 	ldw	r22,24(sp)
   4973c:	dd400517 	ldw	r21,20(sp)
   49740:	dd000417 	ldw	r20,16(sp)
   49744:	dcc00317 	ldw	r19,12(sp)
   49748:	dc800217 	ldw	r18,8(sp)
   4974c:	dc400117 	ldw	r17,4(sp)
   49750:	dc000017 	ldw	r16,0(sp)
   49754:	dec00a04 	addi	sp,sp,40
   49758:	00452f01 	jmpi	452f0 <_malloc_r>
   4975c:	a8c00017 	ldw	r3,0(r21)
   49760:	90c00015 	stw	r3,0(r18)
   49764:	a8c00117 	ldw	r3,4(r21)
   49768:	90c00115 	stw	r3,4(r18)
   4976c:	00c006c4 	movi	r3,27
   49770:	19804536 	bltu	r3,r6,49888 <_realloc_r+0x470>
   49774:	90800204 	addi	r2,r18,8
   49778:	a8c00204 	addi	r3,r21,8
   4977c:	003f6306 	br	4950c <__alt_data_end+0xfffe950c>
   49780:	9005883a 	mov	r2,r18
   49784:	a8c00017 	ldw	r3,0(r21)
   49788:	b821883a 	mov	r16,r23
   4978c:	b027883a 	mov	r19,r22
   49790:	10c00015 	stw	r3,0(r2)
   49794:	a8c00117 	ldw	r3,4(r21)
   49798:	10c00115 	stw	r3,4(r2)
   4979c:	a8c00217 	ldw	r3,8(r21)
   497a0:	10c00215 	stw	r3,8(r2)
   497a4:	003f6a06 	br	49550 <__alt_data_end+0xfffe9550>
   497a8:	9c67883a 	add	r19,r19,r17
   497ac:	4445c83a 	sub	r2,r8,r17
   497b0:	e4c00215 	stw	r19,8(fp)
   497b4:	10800054 	ori	r2,r2,1
   497b8:	98800115 	stw	r2,4(r19)
   497bc:	a8bfff17 	ldw	r2,-4(r21)
   497c0:	a009883a 	mov	r4,r20
   497c4:	1080004c 	andi	r2,r2,1
   497c8:	1462b03a 	or	r17,r2,r17
   497cc:	ac7fff15 	stw	r17,-4(r21)
   497d0:	004d7c80 	call	4d7c8 <__malloc_unlock>
   497d4:	a805883a 	mov	r2,r21
   497d8:	003f6b06 	br	49588 <__alt_data_end+0xfffe9588>
   497dc:	a80b883a 	mov	r5,r21
   497e0:	9009883a 	mov	r4,r18
   497e4:	004925c0 	call	4925c <memmove>
   497e8:	003f4e06 	br	49524 <__alt_data_end+0xfffe9524>
   497ec:	89000404 	addi	r4,r17,16
   497f0:	b93fbc16 	blt	r23,r4,496e4 <__alt_data_end+0xfffe96e4>
   497f4:	b0800317 	ldw	r2,12(r22)
   497f8:	b0c00217 	ldw	r3,8(r22)
   497fc:	81bfff04 	addi	r6,r16,-4
   49800:	01000904 	movi	r4,36
   49804:	18800315 	stw	r2,12(r3)
   49808:	10c00215 	stw	r3,8(r2)
   4980c:	b4800204 	addi	r18,r22,8
   49810:	21804336 	bltu	r4,r6,49920 <_realloc_r+0x508>
   49814:	008004c4 	movi	r2,19
   49818:	11803f2e 	bgeu	r2,r6,49918 <_realloc_r+0x500>
   4981c:	a8800017 	ldw	r2,0(r21)
   49820:	b0800215 	stw	r2,8(r22)
   49824:	a8800117 	ldw	r2,4(r21)
   49828:	b0800315 	stw	r2,12(r22)
   4982c:	008006c4 	movi	r2,27
   49830:	11803f36 	bltu	r2,r6,49930 <_realloc_r+0x518>
   49834:	b0800404 	addi	r2,r22,16
   49838:	ad400204 	addi	r21,r21,8
   4983c:	a8c00017 	ldw	r3,0(r21)
   49840:	10c00015 	stw	r3,0(r2)
   49844:	a8c00117 	ldw	r3,4(r21)
   49848:	10c00115 	stw	r3,4(r2)
   4984c:	a8c00217 	ldw	r3,8(r21)
   49850:	10c00215 	stw	r3,8(r2)
   49854:	b447883a 	add	r3,r22,r17
   49858:	bc45c83a 	sub	r2,r23,r17
   4985c:	e0c00215 	stw	r3,8(fp)
   49860:	10800054 	ori	r2,r2,1
   49864:	18800115 	stw	r2,4(r3)
   49868:	b0800117 	ldw	r2,4(r22)
   4986c:	a009883a 	mov	r4,r20
   49870:	1080004c 	andi	r2,r2,1
   49874:	1462b03a 	or	r17,r2,r17
   49878:	b4400115 	stw	r17,4(r22)
   4987c:	004d7c80 	call	4d7c8 <__malloc_unlock>
   49880:	9005883a 	mov	r2,r18
   49884:	003f4006 	br	49588 <__alt_data_end+0xfffe9588>
   49888:	a8c00217 	ldw	r3,8(r21)
   4988c:	90c00215 	stw	r3,8(r18)
   49890:	a8c00317 	ldw	r3,12(r21)
   49894:	90c00315 	stw	r3,12(r18)
   49898:	30801126 	beq	r6,r2,498e0 <_realloc_r+0x4c8>
   4989c:	90800404 	addi	r2,r18,16
   498a0:	a8c00404 	addi	r3,r21,16
   498a4:	003f1906 	br	4950c <__alt_data_end+0xfffe950c>
   498a8:	90ffff17 	ldw	r3,-4(r18)
   498ac:	00bfff04 	movi	r2,-4
   498b0:	a825883a 	mov	r18,r21
   498b4:	1884703a 	and	r2,r3,r2
   498b8:	80a1883a 	add	r16,r16,r2
   498bc:	003f2406 	br	49550 <__alt_data_end+0xfffe9550>
   498c0:	a8800217 	ldw	r2,8(r21)
   498c4:	b0800415 	stw	r2,16(r22)
   498c8:	a8800317 	ldw	r2,12(r21)
   498cc:	b0800515 	stw	r2,20(r22)
   498d0:	31000a26 	beq	r6,r4,498fc <_realloc_r+0x4e4>
   498d4:	b0800604 	addi	r2,r22,24
   498d8:	ad400404 	addi	r21,r21,16
   498dc:	003fa906 	br	49784 <__alt_data_end+0xfffe9784>
   498e0:	a9000417 	ldw	r4,16(r21)
   498e4:	90800604 	addi	r2,r18,24
   498e8:	a8c00604 	addi	r3,r21,24
   498ec:	91000415 	stw	r4,16(r18)
   498f0:	a9000517 	ldw	r4,20(r21)
   498f4:	91000515 	stw	r4,20(r18)
   498f8:	003f0406 	br	4950c <__alt_data_end+0xfffe950c>
   498fc:	a8c00417 	ldw	r3,16(r21)
   49900:	ad400604 	addi	r21,r21,24
   49904:	b0800804 	addi	r2,r22,32
   49908:	b0c00615 	stw	r3,24(r22)
   4990c:	a8ffff17 	ldw	r3,-4(r21)
   49910:	b0c00715 	stw	r3,28(r22)
   49914:	003f9b06 	br	49784 <__alt_data_end+0xfffe9784>
   49918:	9005883a 	mov	r2,r18
   4991c:	003fc706 	br	4983c <__alt_data_end+0xfffe983c>
   49920:	a80b883a 	mov	r5,r21
   49924:	9009883a 	mov	r4,r18
   49928:	004925c0 	call	4925c <memmove>
   4992c:	003fc906 	br	49854 <__alt_data_end+0xfffe9854>
   49930:	a8800217 	ldw	r2,8(r21)
   49934:	b0800415 	stw	r2,16(r22)
   49938:	a8800317 	ldw	r2,12(r21)
   4993c:	b0800515 	stw	r2,20(r22)
   49940:	31000726 	beq	r6,r4,49960 <_realloc_r+0x548>
   49944:	b0800604 	addi	r2,r22,24
   49948:	ad400404 	addi	r21,r21,16
   4994c:	003fbb06 	br	4983c <__alt_data_end+0xfffe983c>
   49950:	a009883a 	mov	r4,r20
   49954:	004d7c80 	call	4d7c8 <__malloc_unlock>
   49958:	0005883a 	mov	r2,zero
   4995c:	003f0a06 	br	49588 <__alt_data_end+0xfffe9588>
   49960:	a8c00417 	ldw	r3,16(r21)
   49964:	ad400604 	addi	r21,r21,24
   49968:	b0800804 	addi	r2,r22,32
   4996c:	b0c00615 	stw	r3,24(r22)
   49970:	a8ffff17 	ldw	r3,-4(r21)
   49974:	b0c00715 	stw	r3,28(r22)
   49978:	003fb006 	br	4983c <__alt_data_end+0xfffe983c>

0004997c <__swbuf_r>:
   4997c:	defffb04 	addi	sp,sp,-20
   49980:	dcc00315 	stw	r19,12(sp)
   49984:	dc800215 	stw	r18,8(sp)
   49988:	dc000015 	stw	r16,0(sp)
   4998c:	dfc00415 	stw	ra,16(sp)
   49990:	dc400115 	stw	r17,4(sp)
   49994:	2025883a 	mov	r18,r4
   49998:	2827883a 	mov	r19,r5
   4999c:	3021883a 	mov	r16,r6
   499a0:	20000226 	beq	r4,zero,499ac <__swbuf_r+0x30>
   499a4:	20800e17 	ldw	r2,56(r4)
   499a8:	10004226 	beq	r2,zero,49ab4 <__swbuf_r+0x138>
   499ac:	80800617 	ldw	r2,24(r16)
   499b0:	8100030b 	ldhu	r4,12(r16)
   499b4:	80800215 	stw	r2,8(r16)
   499b8:	2080020c 	andi	r2,r4,8
   499bc:	10003626 	beq	r2,zero,49a98 <__swbuf_r+0x11c>
   499c0:	80c00417 	ldw	r3,16(r16)
   499c4:	18003426 	beq	r3,zero,49a98 <__swbuf_r+0x11c>
   499c8:	2088000c 	andi	r2,r4,8192
   499cc:	9c403fcc 	andi	r17,r19,255
   499d0:	10001a26 	beq	r2,zero,49a3c <__swbuf_r+0xc0>
   499d4:	80800017 	ldw	r2,0(r16)
   499d8:	81000517 	ldw	r4,20(r16)
   499dc:	10c7c83a 	sub	r3,r2,r3
   499e0:	1900200e 	bge	r3,r4,49a64 <__swbuf_r+0xe8>
   499e4:	18c00044 	addi	r3,r3,1
   499e8:	81000217 	ldw	r4,8(r16)
   499ec:	11400044 	addi	r5,r2,1
   499f0:	81400015 	stw	r5,0(r16)
   499f4:	213fffc4 	addi	r4,r4,-1
   499f8:	81000215 	stw	r4,8(r16)
   499fc:	14c00005 	stb	r19,0(r2)
   49a00:	80800517 	ldw	r2,20(r16)
   49a04:	10c01e26 	beq	r2,r3,49a80 <__swbuf_r+0x104>
   49a08:	8080030b 	ldhu	r2,12(r16)
   49a0c:	1080004c 	andi	r2,r2,1
   49a10:	10000226 	beq	r2,zero,49a1c <__swbuf_r+0xa0>
   49a14:	00800284 	movi	r2,10
   49a18:	88801926 	beq	r17,r2,49a80 <__swbuf_r+0x104>
   49a1c:	8805883a 	mov	r2,r17
   49a20:	dfc00417 	ldw	ra,16(sp)
   49a24:	dcc00317 	ldw	r19,12(sp)
   49a28:	dc800217 	ldw	r18,8(sp)
   49a2c:	dc400117 	ldw	r17,4(sp)
   49a30:	dc000017 	ldw	r16,0(sp)
   49a34:	dec00504 	addi	sp,sp,20
   49a38:	f800283a 	ret
   49a3c:	81401917 	ldw	r5,100(r16)
   49a40:	00b7ffc4 	movi	r2,-8193
   49a44:	21080014 	ori	r4,r4,8192
   49a48:	2884703a 	and	r2,r5,r2
   49a4c:	80801915 	stw	r2,100(r16)
   49a50:	80800017 	ldw	r2,0(r16)
   49a54:	8100030d 	sth	r4,12(r16)
   49a58:	81000517 	ldw	r4,20(r16)
   49a5c:	10c7c83a 	sub	r3,r2,r3
   49a60:	193fe016 	blt	r3,r4,499e4 <__alt_data_end+0xfffe99e4>
   49a64:	800b883a 	mov	r5,r16
   49a68:	9009883a 	mov	r4,r18
   49a6c:	00446700 	call	44670 <_fflush_r>
   49a70:	1000071e 	bne	r2,zero,49a90 <__swbuf_r+0x114>
   49a74:	80800017 	ldw	r2,0(r16)
   49a78:	00c00044 	movi	r3,1
   49a7c:	003fda06 	br	499e8 <__alt_data_end+0xfffe99e8>
   49a80:	800b883a 	mov	r5,r16
   49a84:	9009883a 	mov	r4,r18
   49a88:	00446700 	call	44670 <_fflush_r>
   49a8c:	103fe326 	beq	r2,zero,49a1c <__alt_data_end+0xfffe9a1c>
   49a90:	00bfffc4 	movi	r2,-1
   49a94:	003fe206 	br	49a20 <__alt_data_end+0xfffe9a20>
   49a98:	800b883a 	mov	r5,r16
   49a9c:	9009883a 	mov	r4,r18
   49aa0:	0042a780 	call	42a78 <__swsetup_r>
   49aa4:	103ffa1e 	bne	r2,zero,49a90 <__alt_data_end+0xfffe9a90>
   49aa8:	8100030b 	ldhu	r4,12(r16)
   49aac:	80c00417 	ldw	r3,16(r16)
   49ab0:	003fc506 	br	499c8 <__alt_data_end+0xfffe99c8>
   49ab4:	0044a4c0 	call	44a4c <__sinit>
   49ab8:	003fbc06 	br	499ac <__alt_data_end+0xfffe99ac>

00049abc <__swbuf>:
   49abc:	00800174 	movhi	r2,5
   49ac0:	10862704 	addi	r2,r2,6300
   49ac4:	280d883a 	mov	r6,r5
   49ac8:	200b883a 	mov	r5,r4
   49acc:	11000017 	ldw	r4,0(r2)
   49ad0:	004997c1 	jmpi	4997c <__swbuf_r>

00049ad4 <_wcrtomb_r>:
   49ad4:	defff604 	addi	sp,sp,-40
   49ad8:	00800174 	movhi	r2,5
   49adc:	dc800815 	stw	r18,32(sp)
   49ae0:	dc400715 	stw	r17,28(sp)
   49ae4:	dc000615 	stw	r16,24(sp)
   49ae8:	10862b04 	addi	r2,r2,6316
   49aec:	dfc00915 	stw	ra,36(sp)
   49af0:	2021883a 	mov	r16,r4
   49af4:	3823883a 	mov	r17,r7
   49af8:	14800017 	ldw	r18,0(r2)
   49afc:	28001426 	beq	r5,zero,49b50 <_wcrtomb_r+0x7c>
   49b00:	d9400415 	stw	r5,16(sp)
   49b04:	d9800515 	stw	r6,20(sp)
   49b08:	00450d40 	call	450d4 <__locale_charset>
   49b0c:	d9800517 	ldw	r6,20(sp)
   49b10:	d9400417 	ldw	r5,16(sp)
   49b14:	100f883a 	mov	r7,r2
   49b18:	dc400015 	stw	r17,0(sp)
   49b1c:	8009883a 	mov	r4,r16
   49b20:	903ee83a 	callr	r18
   49b24:	00ffffc4 	movi	r3,-1
   49b28:	10c0031e 	bne	r2,r3,49b38 <_wcrtomb_r+0x64>
   49b2c:	88000015 	stw	zero,0(r17)
   49b30:	00c02284 	movi	r3,138
   49b34:	80c00015 	stw	r3,0(r16)
   49b38:	dfc00917 	ldw	ra,36(sp)
   49b3c:	dc800817 	ldw	r18,32(sp)
   49b40:	dc400717 	ldw	r17,28(sp)
   49b44:	dc000617 	ldw	r16,24(sp)
   49b48:	dec00a04 	addi	sp,sp,40
   49b4c:	f800283a 	ret
   49b50:	00450d40 	call	450d4 <__locale_charset>
   49b54:	100f883a 	mov	r7,r2
   49b58:	dc400015 	stw	r17,0(sp)
   49b5c:	000d883a 	mov	r6,zero
   49b60:	d9400104 	addi	r5,sp,4
   49b64:	8009883a 	mov	r4,r16
   49b68:	903ee83a 	callr	r18
   49b6c:	003fed06 	br	49b24 <__alt_data_end+0xfffe9b24>

00049b70 <wcrtomb>:
   49b70:	defff604 	addi	sp,sp,-40
   49b74:	00800174 	movhi	r2,5
   49b78:	dc800615 	stw	r18,24(sp)
   49b7c:	dc400515 	stw	r17,20(sp)
   49b80:	10862704 	addi	r2,r2,6300
   49b84:	dfc00915 	stw	ra,36(sp)
   49b88:	dd000815 	stw	r20,32(sp)
   49b8c:	dcc00715 	stw	r19,28(sp)
   49b90:	dc000415 	stw	r16,16(sp)
   49b94:	3025883a 	mov	r18,r6
   49b98:	14400017 	ldw	r17,0(r2)
   49b9c:	20001926 	beq	r4,zero,49c04 <wcrtomb+0x94>
   49ba0:	00800174 	movhi	r2,5
   49ba4:	10862b04 	addi	r2,r2,6316
   49ba8:	15000017 	ldw	r20,0(r2)
   49bac:	2021883a 	mov	r16,r4
   49bb0:	2827883a 	mov	r19,r5
   49bb4:	00450d40 	call	450d4 <__locale_charset>
   49bb8:	100f883a 	mov	r7,r2
   49bbc:	dc800015 	stw	r18,0(sp)
   49bc0:	980d883a 	mov	r6,r19
   49bc4:	800b883a 	mov	r5,r16
   49bc8:	8809883a 	mov	r4,r17
   49bcc:	a03ee83a 	callr	r20
   49bd0:	00ffffc4 	movi	r3,-1
   49bd4:	10c0031e 	bne	r2,r3,49be4 <wcrtomb+0x74>
   49bd8:	90000015 	stw	zero,0(r18)
   49bdc:	00c02284 	movi	r3,138
   49be0:	88c00015 	stw	r3,0(r17)
   49be4:	dfc00917 	ldw	ra,36(sp)
   49be8:	dd000817 	ldw	r20,32(sp)
   49bec:	dcc00717 	ldw	r19,28(sp)
   49bf0:	dc800617 	ldw	r18,24(sp)
   49bf4:	dc400517 	ldw	r17,20(sp)
   49bf8:	dc000417 	ldw	r16,16(sp)
   49bfc:	dec00a04 	addi	sp,sp,40
   49c00:	f800283a 	ret
   49c04:	00800174 	movhi	r2,5
   49c08:	10862b04 	addi	r2,r2,6316
   49c0c:	14000017 	ldw	r16,0(r2)
   49c10:	00450d40 	call	450d4 <__locale_charset>
   49c14:	100f883a 	mov	r7,r2
   49c18:	dc800015 	stw	r18,0(sp)
   49c1c:	000d883a 	mov	r6,zero
   49c20:	d9400104 	addi	r5,sp,4
   49c24:	8809883a 	mov	r4,r17
   49c28:	803ee83a 	callr	r16
   49c2c:	003fe806 	br	49bd0 <__alt_data_end+0xfffe9bd0>

00049c30 <__ascii_wctomb>:
   49c30:	28000526 	beq	r5,zero,49c48 <__ascii_wctomb+0x18>
   49c34:	00803fc4 	movi	r2,255
   49c38:	11800536 	bltu	r2,r6,49c50 <__ascii_wctomb+0x20>
   49c3c:	29800005 	stb	r6,0(r5)
   49c40:	00800044 	movi	r2,1
   49c44:	f800283a 	ret
   49c48:	0005883a 	mov	r2,zero
   49c4c:	f800283a 	ret
   49c50:	00802284 	movi	r2,138
   49c54:	20800015 	stw	r2,0(r4)
   49c58:	00bfffc4 	movi	r2,-1
   49c5c:	f800283a 	ret

00049c60 <_wctomb_r>:
   49c60:	00800174 	movhi	r2,5
   49c64:	defff904 	addi	sp,sp,-28
   49c68:	10862b04 	addi	r2,r2,6316
   49c6c:	dfc00615 	stw	ra,24(sp)
   49c70:	dc400515 	stw	r17,20(sp)
   49c74:	dc000415 	stw	r16,16(sp)
   49c78:	3823883a 	mov	r17,r7
   49c7c:	14000017 	ldw	r16,0(r2)
   49c80:	d9000115 	stw	r4,4(sp)
   49c84:	d9400215 	stw	r5,8(sp)
   49c88:	d9800315 	stw	r6,12(sp)
   49c8c:	00450d40 	call	450d4 <__locale_charset>
   49c90:	d9800317 	ldw	r6,12(sp)
   49c94:	d9400217 	ldw	r5,8(sp)
   49c98:	d9000117 	ldw	r4,4(sp)
   49c9c:	100f883a 	mov	r7,r2
   49ca0:	dc400015 	stw	r17,0(sp)
   49ca4:	803ee83a 	callr	r16
   49ca8:	dfc00617 	ldw	ra,24(sp)
   49cac:	dc400517 	ldw	r17,20(sp)
   49cb0:	dc000417 	ldw	r16,16(sp)
   49cb4:	dec00704 	addi	sp,sp,28
   49cb8:	f800283a 	ret

00049cbc <__udivdi3>:
   49cbc:	defff504 	addi	sp,sp,-44
   49cc0:	dcc00415 	stw	r19,16(sp)
   49cc4:	dc000115 	stw	r16,4(sp)
   49cc8:	dfc00a15 	stw	ra,40(sp)
   49ccc:	df000915 	stw	fp,36(sp)
   49cd0:	ddc00815 	stw	r23,32(sp)
   49cd4:	dd800715 	stw	r22,28(sp)
   49cd8:	dd400615 	stw	r21,24(sp)
   49cdc:	dd000515 	stw	r20,20(sp)
   49ce0:	dc800315 	stw	r18,12(sp)
   49ce4:	dc400215 	stw	r17,8(sp)
   49ce8:	2027883a 	mov	r19,r4
   49cec:	2821883a 	mov	r16,r5
   49cf0:	3800411e 	bne	r7,zero,49df8 <__udivdi3+0x13c>
   49cf4:	3023883a 	mov	r17,r6
   49cf8:	2025883a 	mov	r18,r4
   49cfc:	2980522e 	bgeu	r5,r6,49e48 <__udivdi3+0x18c>
   49d00:	00bfffd4 	movui	r2,65535
   49d04:	282d883a 	mov	r22,r5
   49d08:	1180a836 	bltu	r2,r6,49fac <__udivdi3+0x2f0>
   49d0c:	00803fc4 	movi	r2,255
   49d10:	1185803a 	cmpltu	r2,r2,r6
   49d14:	100490fa 	slli	r2,r2,3
   49d18:	3086d83a 	srl	r3,r6,r2
   49d1c:	01000174 	movhi	r4,5
   49d20:	213f2e04 	addi	r4,r4,-840
   49d24:	20c7883a 	add	r3,r4,r3
   49d28:	18c00003 	ldbu	r3,0(r3)
   49d2c:	1885883a 	add	r2,r3,r2
   49d30:	00c00804 	movi	r3,32
   49d34:	1887c83a 	sub	r3,r3,r2
   49d38:	18000526 	beq	r3,zero,49d50 <__udivdi3+0x94>
   49d3c:	80e0983a 	sll	r16,r16,r3
   49d40:	9884d83a 	srl	r2,r19,r2
   49d44:	30e2983a 	sll	r17,r6,r3
   49d48:	98e4983a 	sll	r18,r19,r3
   49d4c:	142cb03a 	or	r22,r2,r16
   49d50:	882ad43a 	srli	r21,r17,16
   49d54:	b009883a 	mov	r4,r22
   49d58:	8d3fffcc 	andi	r20,r17,65535
   49d5c:	a80b883a 	mov	r5,r21
   49d60:	004a8c80 	call	4a8c8 <__umodsi3>
   49d64:	b009883a 	mov	r4,r22
   49d68:	a80b883a 	mov	r5,r21
   49d6c:	1027883a 	mov	r19,r2
   49d70:	004a8640 	call	4a864 <__udivsi3>
   49d74:	102d883a 	mov	r22,r2
   49d78:	9826943a 	slli	r19,r19,16
   49d7c:	9004d43a 	srli	r2,r18,16
   49d80:	a5a1383a 	mul	r16,r20,r22
   49d84:	14c4b03a 	or	r2,r2,r19
   49d88:	1400052e 	bgeu	r2,r16,49da0 <__udivdi3+0xe4>
   49d8c:	1445883a 	add	r2,r2,r17
   49d90:	b0ffffc4 	addi	r3,r22,-1
   49d94:	14400136 	bltu	r2,r17,49d9c <__udivdi3+0xe0>
   49d98:	14012336 	bltu	r2,r16,4a228 <__udivdi3+0x56c>
   49d9c:	182d883a 	mov	r22,r3
   49da0:	1421c83a 	sub	r16,r2,r16
   49da4:	a80b883a 	mov	r5,r21
   49da8:	8009883a 	mov	r4,r16
   49dac:	004a8c80 	call	4a8c8 <__umodsi3>
   49db0:	1027883a 	mov	r19,r2
   49db4:	a80b883a 	mov	r5,r21
   49db8:	8009883a 	mov	r4,r16
   49dbc:	004a8640 	call	4a864 <__udivsi3>
   49dc0:	9826943a 	slli	r19,r19,16
   49dc4:	a0a9383a 	mul	r20,r20,r2
   49dc8:	94bfffcc 	andi	r18,r18,65535
   49dcc:	94e4b03a 	or	r18,r18,r19
   49dd0:	9500052e 	bgeu	r18,r20,49de8 <__udivdi3+0x12c>
   49dd4:	8ca5883a 	add	r18,r17,r18
   49dd8:	10ffffc4 	addi	r3,r2,-1
   49ddc:	9440f136 	bltu	r18,r17,4a1a4 <__udivdi3+0x4e8>
   49de0:	9500f02e 	bgeu	r18,r20,4a1a4 <__udivdi3+0x4e8>
   49de4:	10bfff84 	addi	r2,r2,-2
   49de8:	b00c943a 	slli	r6,r22,16
   49dec:	0007883a 	mov	r3,zero
   49df0:	3084b03a 	or	r2,r6,r2
   49df4:	00005906 	br	49f5c <__udivdi3+0x2a0>
   49df8:	29c05636 	bltu	r5,r7,49f54 <__udivdi3+0x298>
   49dfc:	00bfffd4 	movui	r2,65535
   49e00:	11c0622e 	bgeu	r2,r7,49f8c <__udivdi3+0x2d0>
   49e04:	00804034 	movhi	r2,256
   49e08:	10bfffc4 	addi	r2,r2,-1
   49e0c:	11c0ee36 	bltu	r2,r7,4a1c8 <__udivdi3+0x50c>
   49e10:	00800404 	movi	r2,16
   49e14:	3886d83a 	srl	r3,r7,r2
   49e18:	01000174 	movhi	r4,5
   49e1c:	213f2e04 	addi	r4,r4,-840
   49e20:	20c7883a 	add	r3,r4,r3
   49e24:	18c00003 	ldbu	r3,0(r3)
   49e28:	05400804 	movi	r21,32
   49e2c:	1885883a 	add	r2,r3,r2
   49e30:	a8abc83a 	sub	r21,r21,r2
   49e34:	a800621e 	bne	r21,zero,49fc0 <__udivdi3+0x304>
   49e38:	3c00e936 	bltu	r7,r16,4a1e0 <__udivdi3+0x524>
   49e3c:	9985403a 	cmpgeu	r2,r19,r6
   49e40:	0007883a 	mov	r3,zero
   49e44:	00004506 	br	49f5c <__udivdi3+0x2a0>
   49e48:	3000041e 	bne	r6,zero,49e5c <__udivdi3+0x1a0>
   49e4c:	000b883a 	mov	r5,zero
   49e50:	01000044 	movi	r4,1
   49e54:	004a8640 	call	4a864 <__udivsi3>
   49e58:	1023883a 	mov	r17,r2
   49e5c:	00bfffd4 	movui	r2,65535
   49e60:	14404e2e 	bgeu	r2,r17,49f9c <__udivdi3+0x2e0>
   49e64:	00804034 	movhi	r2,256
   49e68:	10bfffc4 	addi	r2,r2,-1
   49e6c:	1440d836 	bltu	r2,r17,4a1d0 <__udivdi3+0x514>
   49e70:	00800404 	movi	r2,16
   49e74:	8886d83a 	srl	r3,r17,r2
   49e78:	01000174 	movhi	r4,5
   49e7c:	213f2e04 	addi	r4,r4,-840
   49e80:	20c7883a 	add	r3,r4,r3
   49e84:	18c00003 	ldbu	r3,0(r3)
   49e88:	1885883a 	add	r2,r3,r2
   49e8c:	00c00804 	movi	r3,32
   49e90:	1887c83a 	sub	r3,r3,r2
   49e94:	18008f1e 	bne	r3,zero,4a0d4 <__udivdi3+0x418>
   49e98:	882ad43a 	srli	r21,r17,16
   49e9c:	8461c83a 	sub	r16,r16,r17
   49ea0:	8d3fffcc 	andi	r20,r17,65535
   49ea4:	00c00044 	movi	r3,1
   49ea8:	8009883a 	mov	r4,r16
   49eac:	a80b883a 	mov	r5,r21
   49eb0:	d8c00015 	stw	r3,0(sp)
   49eb4:	004a8c80 	call	4a8c8 <__umodsi3>
   49eb8:	8009883a 	mov	r4,r16
   49ebc:	a80b883a 	mov	r5,r21
   49ec0:	1027883a 	mov	r19,r2
   49ec4:	004a8640 	call	4a864 <__udivsi3>
   49ec8:	9826943a 	slli	r19,r19,16
   49ecc:	9008d43a 	srli	r4,r18,16
   49ed0:	1521383a 	mul	r16,r2,r20
   49ed4:	102d883a 	mov	r22,r2
   49ed8:	24c8b03a 	or	r4,r4,r19
   49edc:	d8c00017 	ldw	r3,0(sp)
   49ee0:	2400052e 	bgeu	r4,r16,49ef8 <__udivdi3+0x23c>
   49ee4:	2449883a 	add	r4,r4,r17
   49ee8:	b0bfffc4 	addi	r2,r22,-1
   49eec:	24400136 	bltu	r4,r17,49ef4 <__udivdi3+0x238>
   49ef0:	2400ca36 	bltu	r4,r16,4a21c <__udivdi3+0x560>
   49ef4:	102d883a 	mov	r22,r2
   49ef8:	2421c83a 	sub	r16,r4,r16
   49efc:	a80b883a 	mov	r5,r21
   49f00:	8009883a 	mov	r4,r16
   49f04:	d8c00015 	stw	r3,0(sp)
   49f08:	004a8c80 	call	4a8c8 <__umodsi3>
   49f0c:	1027883a 	mov	r19,r2
   49f10:	a80b883a 	mov	r5,r21
   49f14:	8009883a 	mov	r4,r16
   49f18:	004a8640 	call	4a864 <__udivsi3>
   49f1c:	9826943a 	slli	r19,r19,16
   49f20:	1529383a 	mul	r20,r2,r20
   49f24:	94bfffcc 	andi	r18,r18,65535
   49f28:	94e4b03a 	or	r18,r18,r19
   49f2c:	d8c00017 	ldw	r3,0(sp)
   49f30:	9500052e 	bgeu	r18,r20,49f48 <__udivdi3+0x28c>
   49f34:	8ca5883a 	add	r18,r17,r18
   49f38:	113fffc4 	addi	r4,r2,-1
   49f3c:	94409736 	bltu	r18,r17,4a19c <__udivdi3+0x4e0>
   49f40:	9500962e 	bgeu	r18,r20,4a19c <__udivdi3+0x4e0>
   49f44:	10bfff84 	addi	r2,r2,-2
   49f48:	b00c943a 	slli	r6,r22,16
   49f4c:	3084b03a 	or	r2,r6,r2
   49f50:	00000206 	br	49f5c <__udivdi3+0x2a0>
   49f54:	0007883a 	mov	r3,zero
   49f58:	0005883a 	mov	r2,zero
   49f5c:	dfc00a17 	ldw	ra,40(sp)
   49f60:	df000917 	ldw	fp,36(sp)
   49f64:	ddc00817 	ldw	r23,32(sp)
   49f68:	dd800717 	ldw	r22,28(sp)
   49f6c:	dd400617 	ldw	r21,24(sp)
   49f70:	dd000517 	ldw	r20,20(sp)
   49f74:	dcc00417 	ldw	r19,16(sp)
   49f78:	dc800317 	ldw	r18,12(sp)
   49f7c:	dc400217 	ldw	r17,8(sp)
   49f80:	dc000117 	ldw	r16,4(sp)
   49f84:	dec00b04 	addi	sp,sp,44
   49f88:	f800283a 	ret
   49f8c:	00803fc4 	movi	r2,255
   49f90:	11c5803a 	cmpltu	r2,r2,r7
   49f94:	100490fa 	slli	r2,r2,3
   49f98:	003f9e06 	br	49e14 <__alt_data_end+0xfffe9e14>
   49f9c:	00803fc4 	movi	r2,255
   49fa0:	1445803a 	cmpltu	r2,r2,r17
   49fa4:	100490fa 	slli	r2,r2,3
   49fa8:	003fb206 	br	49e74 <__alt_data_end+0xfffe9e74>
   49fac:	00804034 	movhi	r2,256
   49fb0:	10bfffc4 	addi	r2,r2,-1
   49fb4:	11808836 	bltu	r2,r6,4a1d8 <__udivdi3+0x51c>
   49fb8:	00800404 	movi	r2,16
   49fbc:	003f5606 	br	49d18 <__alt_data_end+0xfffe9d18>
   49fc0:	30aed83a 	srl	r23,r6,r2
   49fc4:	3d4e983a 	sll	r7,r7,r21
   49fc8:	80acd83a 	srl	r22,r16,r2
   49fcc:	9884d83a 	srl	r2,r19,r2
   49fd0:	3deeb03a 	or	r23,r7,r23
   49fd4:	b824d43a 	srli	r18,r23,16
   49fd8:	8560983a 	sll	r16,r16,r21
   49fdc:	b009883a 	mov	r4,r22
   49fe0:	900b883a 	mov	r5,r18
   49fe4:	3568983a 	sll	r20,r6,r21
   49fe8:	1420b03a 	or	r16,r2,r16
   49fec:	004a8c80 	call	4a8c8 <__umodsi3>
   49ff0:	b009883a 	mov	r4,r22
   49ff4:	900b883a 	mov	r5,r18
   49ff8:	1023883a 	mov	r17,r2
   49ffc:	004a8640 	call	4a864 <__udivsi3>
   4a000:	8808943a 	slli	r4,r17,16
   4a004:	bf3fffcc 	andi	fp,r23,65535
   4a008:	8006d43a 	srli	r3,r16,16
   4a00c:	e0a3383a 	mul	r17,fp,r2
   4a010:	100d883a 	mov	r6,r2
   4a014:	1906b03a 	or	r3,r3,r4
   4a018:	1c40042e 	bgeu	r3,r17,4a02c <__udivdi3+0x370>
   4a01c:	1dc7883a 	add	r3,r3,r23
   4a020:	10bfffc4 	addi	r2,r2,-1
   4a024:	1dc0752e 	bgeu	r3,r23,4a1fc <__udivdi3+0x540>
   4a028:	100d883a 	mov	r6,r2
   4a02c:	1c63c83a 	sub	r17,r3,r17
   4a030:	900b883a 	mov	r5,r18
   4a034:	8809883a 	mov	r4,r17
   4a038:	d9800015 	stw	r6,0(sp)
   4a03c:	004a8c80 	call	4a8c8 <__umodsi3>
   4a040:	102d883a 	mov	r22,r2
   4a044:	8809883a 	mov	r4,r17
   4a048:	900b883a 	mov	r5,r18
   4a04c:	004a8640 	call	4a864 <__udivsi3>
   4a050:	b02c943a 	slli	r22,r22,16
   4a054:	e089383a 	mul	r4,fp,r2
   4a058:	843fffcc 	andi	r16,r16,65535
   4a05c:	85a0b03a 	or	r16,r16,r22
   4a060:	d9800017 	ldw	r6,0(sp)
   4a064:	8100042e 	bgeu	r16,r4,4a078 <__udivdi3+0x3bc>
   4a068:	85e1883a 	add	r16,r16,r23
   4a06c:	10ffffc4 	addi	r3,r2,-1
   4a070:	85c05e2e 	bgeu	r16,r23,4a1ec <__udivdi3+0x530>
   4a074:	1805883a 	mov	r2,r3
   4a078:	300c943a 	slli	r6,r6,16
   4a07c:	a17fffcc 	andi	r5,r20,65535
   4a080:	a028d43a 	srli	r20,r20,16
   4a084:	3084b03a 	or	r2,r6,r2
   4a088:	10ffffcc 	andi	r3,r2,65535
   4a08c:	100cd43a 	srli	r6,r2,16
   4a090:	194f383a 	mul	r7,r3,r5
   4a094:	1d07383a 	mul	r3,r3,r20
   4a098:	314b383a 	mul	r5,r6,r5
   4a09c:	3810d43a 	srli	r8,r7,16
   4a0a0:	8121c83a 	sub	r16,r16,r4
   4a0a4:	1947883a 	add	r3,r3,r5
   4a0a8:	40c7883a 	add	r3,r8,r3
   4a0ac:	350d383a 	mul	r6,r6,r20
   4a0b0:	1940022e 	bgeu	r3,r5,4a0bc <__udivdi3+0x400>
   4a0b4:	01000074 	movhi	r4,1
   4a0b8:	310d883a 	add	r6,r6,r4
   4a0bc:	1828d43a 	srli	r20,r3,16
   4a0c0:	a18d883a 	add	r6,r20,r6
   4a0c4:	81803e36 	bltu	r16,r6,4a1c0 <__udivdi3+0x504>
   4a0c8:	81803826 	beq	r16,r6,4a1ac <__udivdi3+0x4f0>
   4a0cc:	0007883a 	mov	r3,zero
   4a0d0:	003fa206 	br	49f5c <__alt_data_end+0xfffe9f5c>
   4a0d4:	88e2983a 	sll	r17,r17,r3
   4a0d8:	80a8d83a 	srl	r20,r16,r2
   4a0dc:	80e0983a 	sll	r16,r16,r3
   4a0e0:	882ad43a 	srli	r21,r17,16
   4a0e4:	9884d83a 	srl	r2,r19,r2
   4a0e8:	a009883a 	mov	r4,r20
   4a0ec:	a80b883a 	mov	r5,r21
   4a0f0:	142eb03a 	or	r23,r2,r16
   4a0f4:	98e4983a 	sll	r18,r19,r3
   4a0f8:	004a8c80 	call	4a8c8 <__umodsi3>
   4a0fc:	a009883a 	mov	r4,r20
   4a100:	a80b883a 	mov	r5,r21
   4a104:	1021883a 	mov	r16,r2
   4a108:	004a8640 	call	4a864 <__udivsi3>
   4a10c:	1039883a 	mov	fp,r2
   4a110:	8d3fffcc 	andi	r20,r17,65535
   4a114:	8020943a 	slli	r16,r16,16
   4a118:	b804d43a 	srli	r2,r23,16
   4a11c:	a72d383a 	mul	r22,r20,fp
   4a120:	1404b03a 	or	r2,r2,r16
   4a124:	1580062e 	bgeu	r2,r22,4a140 <__udivdi3+0x484>
   4a128:	1445883a 	add	r2,r2,r17
   4a12c:	e0ffffc4 	addi	r3,fp,-1
   4a130:	14403836 	bltu	r2,r17,4a214 <__udivdi3+0x558>
   4a134:	1580372e 	bgeu	r2,r22,4a214 <__udivdi3+0x558>
   4a138:	e73fff84 	addi	fp,fp,-2
   4a13c:	1445883a 	add	r2,r2,r17
   4a140:	15adc83a 	sub	r22,r2,r22
   4a144:	a80b883a 	mov	r5,r21
   4a148:	b009883a 	mov	r4,r22
   4a14c:	004a8c80 	call	4a8c8 <__umodsi3>
   4a150:	1027883a 	mov	r19,r2
   4a154:	b009883a 	mov	r4,r22
   4a158:	a80b883a 	mov	r5,r21
   4a15c:	004a8640 	call	4a864 <__udivsi3>
   4a160:	9826943a 	slli	r19,r19,16
   4a164:	a0a1383a 	mul	r16,r20,r2
   4a168:	b93fffcc 	andi	r4,r23,65535
   4a16c:	24c8b03a 	or	r4,r4,r19
   4a170:	2400062e 	bgeu	r4,r16,4a18c <__udivdi3+0x4d0>
   4a174:	2449883a 	add	r4,r4,r17
   4a178:	10ffffc4 	addi	r3,r2,-1
   4a17c:	24402336 	bltu	r4,r17,4a20c <__udivdi3+0x550>
   4a180:	2400222e 	bgeu	r4,r16,4a20c <__udivdi3+0x550>
   4a184:	10bfff84 	addi	r2,r2,-2
   4a188:	2449883a 	add	r4,r4,r17
   4a18c:	e038943a 	slli	fp,fp,16
   4a190:	2421c83a 	sub	r16,r4,r16
   4a194:	e086b03a 	or	r3,fp,r2
   4a198:	003f4306 	br	49ea8 <__alt_data_end+0xfffe9ea8>
   4a19c:	2005883a 	mov	r2,r4
   4a1a0:	003f6906 	br	49f48 <__alt_data_end+0xfffe9f48>
   4a1a4:	1805883a 	mov	r2,r3
   4a1a8:	003f0f06 	br	49de8 <__alt_data_end+0xfffe9de8>
   4a1ac:	1806943a 	slli	r3,r3,16
   4a1b0:	9d66983a 	sll	r19,r19,r21
   4a1b4:	39ffffcc 	andi	r7,r7,65535
   4a1b8:	19c7883a 	add	r3,r3,r7
   4a1bc:	98ffc32e 	bgeu	r19,r3,4a0cc <__alt_data_end+0xfffea0cc>
   4a1c0:	10bfffc4 	addi	r2,r2,-1
   4a1c4:	003fc106 	br	4a0cc <__alt_data_end+0xfffea0cc>
   4a1c8:	00800604 	movi	r2,24
   4a1cc:	003f1106 	br	49e14 <__alt_data_end+0xfffe9e14>
   4a1d0:	00800604 	movi	r2,24
   4a1d4:	003f2706 	br	49e74 <__alt_data_end+0xfffe9e74>
   4a1d8:	00800604 	movi	r2,24
   4a1dc:	003ece06 	br	49d18 <__alt_data_end+0xfffe9d18>
   4a1e0:	0007883a 	mov	r3,zero
   4a1e4:	00800044 	movi	r2,1
   4a1e8:	003f5c06 	br	49f5c <__alt_data_end+0xfffe9f5c>
   4a1ec:	813fa12e 	bgeu	r16,r4,4a074 <__alt_data_end+0xfffea074>
   4a1f0:	10bfff84 	addi	r2,r2,-2
   4a1f4:	85e1883a 	add	r16,r16,r23
   4a1f8:	003f9f06 	br	4a078 <__alt_data_end+0xfffea078>
   4a1fc:	1c7f8a2e 	bgeu	r3,r17,4a028 <__alt_data_end+0xfffea028>
   4a200:	31bfff84 	addi	r6,r6,-2
   4a204:	1dc7883a 	add	r3,r3,r23
   4a208:	003f8806 	br	4a02c <__alt_data_end+0xfffea02c>
   4a20c:	1805883a 	mov	r2,r3
   4a210:	003fde06 	br	4a18c <__alt_data_end+0xfffea18c>
   4a214:	1839883a 	mov	fp,r3
   4a218:	003fc906 	br	4a140 <__alt_data_end+0xfffea140>
   4a21c:	b5bfff84 	addi	r22,r22,-2
   4a220:	2449883a 	add	r4,r4,r17
   4a224:	003f3406 	br	49ef8 <__alt_data_end+0xfffe9ef8>
   4a228:	b5bfff84 	addi	r22,r22,-2
   4a22c:	1445883a 	add	r2,r2,r17
   4a230:	003edb06 	br	49da0 <__alt_data_end+0xfffe9da0>

0004a234 <__umoddi3>:
   4a234:	defff404 	addi	sp,sp,-48
   4a238:	df000a15 	stw	fp,40(sp)
   4a23c:	dc400315 	stw	r17,12(sp)
   4a240:	dc000215 	stw	r16,8(sp)
   4a244:	dfc00b15 	stw	ra,44(sp)
   4a248:	ddc00915 	stw	r23,36(sp)
   4a24c:	dd800815 	stw	r22,32(sp)
   4a250:	dd400715 	stw	r21,28(sp)
   4a254:	dd000615 	stw	r20,24(sp)
   4a258:	dcc00515 	stw	r19,20(sp)
   4a25c:	dc800415 	stw	r18,16(sp)
   4a260:	2021883a 	mov	r16,r4
   4a264:	2823883a 	mov	r17,r5
   4a268:	2839883a 	mov	fp,r5
   4a26c:	38003c1e 	bne	r7,zero,4a360 <__umoddi3+0x12c>
   4a270:	3027883a 	mov	r19,r6
   4a274:	2029883a 	mov	r20,r4
   4a278:	2980512e 	bgeu	r5,r6,4a3c0 <__umoddi3+0x18c>
   4a27c:	00bfffd4 	movui	r2,65535
   4a280:	11809a36 	bltu	r2,r6,4a4ec <__umoddi3+0x2b8>
   4a284:	01003fc4 	movi	r4,255
   4a288:	2189803a 	cmpltu	r4,r4,r6
   4a28c:	200890fa 	slli	r4,r4,3
   4a290:	3104d83a 	srl	r2,r6,r4
   4a294:	00c00174 	movhi	r3,5
   4a298:	18ff2e04 	addi	r3,r3,-840
   4a29c:	1885883a 	add	r2,r3,r2
   4a2a0:	10c00003 	ldbu	r3,0(r2)
   4a2a4:	00800804 	movi	r2,32
   4a2a8:	1909883a 	add	r4,r3,r4
   4a2ac:	1125c83a 	sub	r18,r2,r4
   4a2b0:	90000526 	beq	r18,zero,4a2c8 <__umoddi3+0x94>
   4a2b4:	8ca2983a 	sll	r17,r17,r18
   4a2b8:	8108d83a 	srl	r4,r16,r4
   4a2bc:	34a6983a 	sll	r19,r6,r18
   4a2c0:	84a8983a 	sll	r20,r16,r18
   4a2c4:	2478b03a 	or	fp,r4,r17
   4a2c8:	982ed43a 	srli	r23,r19,16
   4a2cc:	e009883a 	mov	r4,fp
   4a2d0:	9dbfffcc 	andi	r22,r19,65535
   4a2d4:	b80b883a 	mov	r5,r23
   4a2d8:	004a8c80 	call	4a8c8 <__umodsi3>
   4a2dc:	e009883a 	mov	r4,fp
   4a2e0:	b80b883a 	mov	r5,r23
   4a2e4:	102b883a 	mov	r21,r2
   4a2e8:	004a8640 	call	4a864 <__udivsi3>
   4a2ec:	a806943a 	slli	r3,r21,16
   4a2f0:	a008d43a 	srli	r4,r20,16
   4a2f4:	b085383a 	mul	r2,r22,r2
   4a2f8:	20c8b03a 	or	r4,r4,r3
   4a2fc:	2080032e 	bgeu	r4,r2,4a30c <__umoddi3+0xd8>
   4a300:	24c9883a 	add	r4,r4,r19
   4a304:	24c00136 	bltu	r4,r19,4a30c <__umoddi3+0xd8>
   4a308:	20811036 	bltu	r4,r2,4a74c <__umoddi3+0x518>
   4a30c:	20abc83a 	sub	r21,r4,r2
   4a310:	b80b883a 	mov	r5,r23
   4a314:	a809883a 	mov	r4,r21
   4a318:	004a8c80 	call	4a8c8 <__umodsi3>
   4a31c:	1023883a 	mov	r17,r2
   4a320:	b80b883a 	mov	r5,r23
   4a324:	a809883a 	mov	r4,r21
   4a328:	004a8640 	call	4a864 <__udivsi3>
   4a32c:	8822943a 	slli	r17,r17,16
   4a330:	b085383a 	mul	r2,r22,r2
   4a334:	a0ffffcc 	andi	r3,r20,65535
   4a338:	1c46b03a 	or	r3,r3,r17
   4a33c:	1880042e 	bgeu	r3,r2,4a350 <__umoddi3+0x11c>
   4a340:	1cc7883a 	add	r3,r3,r19
   4a344:	1cc00236 	bltu	r3,r19,4a350 <__umoddi3+0x11c>
   4a348:	1880012e 	bgeu	r3,r2,4a350 <__umoddi3+0x11c>
   4a34c:	1cc7883a 	add	r3,r3,r19
   4a350:	1885c83a 	sub	r2,r3,r2
   4a354:	1484d83a 	srl	r2,r2,r18
   4a358:	0007883a 	mov	r3,zero
   4a35c:	00004f06 	br	4a49c <__umoddi3+0x268>
   4a360:	29c04c36 	bltu	r5,r7,4a494 <__umoddi3+0x260>
   4a364:	00bfffd4 	movui	r2,65535
   4a368:	11c0582e 	bgeu	r2,r7,4a4cc <__umoddi3+0x298>
   4a36c:	00804034 	movhi	r2,256
   4a370:	10bfffc4 	addi	r2,r2,-1
   4a374:	11c0e736 	bltu	r2,r7,4a714 <__umoddi3+0x4e0>
   4a378:	01000404 	movi	r4,16
   4a37c:	3904d83a 	srl	r2,r7,r4
   4a380:	00c00174 	movhi	r3,5
   4a384:	18ff2e04 	addi	r3,r3,-840
   4a388:	1885883a 	add	r2,r3,r2
   4a38c:	14c00003 	ldbu	r19,0(r2)
   4a390:	00c00804 	movi	r3,32
   4a394:	9927883a 	add	r19,r19,r4
   4a398:	1ce9c83a 	sub	r20,r3,r19
   4a39c:	a000581e 	bne	r20,zero,4a500 <__umoddi3+0x2cc>
   4a3a0:	3c400136 	bltu	r7,r17,4a3a8 <__umoddi3+0x174>
   4a3a4:	8180eb36 	bltu	r16,r6,4a754 <__umoddi3+0x520>
   4a3a8:	8185c83a 	sub	r2,r16,r6
   4a3ac:	89e3c83a 	sub	r17,r17,r7
   4a3b0:	8089803a 	cmpltu	r4,r16,r2
   4a3b4:	8939c83a 	sub	fp,r17,r4
   4a3b8:	e007883a 	mov	r3,fp
   4a3bc:	00003706 	br	4a49c <__umoddi3+0x268>
   4a3c0:	3000041e 	bne	r6,zero,4a3d4 <__umoddi3+0x1a0>
   4a3c4:	000b883a 	mov	r5,zero
   4a3c8:	01000044 	movi	r4,1
   4a3cc:	004a8640 	call	4a864 <__udivsi3>
   4a3d0:	1027883a 	mov	r19,r2
   4a3d4:	00bfffd4 	movui	r2,65535
   4a3d8:	14c0402e 	bgeu	r2,r19,4a4dc <__umoddi3+0x2a8>
   4a3dc:	00804034 	movhi	r2,256
   4a3e0:	10bfffc4 	addi	r2,r2,-1
   4a3e4:	14c0cd36 	bltu	r2,r19,4a71c <__umoddi3+0x4e8>
   4a3e8:	00800404 	movi	r2,16
   4a3ec:	9886d83a 	srl	r3,r19,r2
   4a3f0:	01000174 	movhi	r4,5
   4a3f4:	213f2e04 	addi	r4,r4,-840
   4a3f8:	20c7883a 	add	r3,r4,r3
   4a3fc:	18c00003 	ldbu	r3,0(r3)
   4a400:	1887883a 	add	r3,r3,r2
   4a404:	00800804 	movi	r2,32
   4a408:	10e5c83a 	sub	r18,r2,r3
   4a40c:	9000901e 	bne	r18,zero,4a650 <__umoddi3+0x41c>
   4a410:	982cd43a 	srli	r22,r19,16
   4a414:	8ce3c83a 	sub	r17,r17,r19
   4a418:	9d7fffcc 	andi	r21,r19,65535
   4a41c:	b00b883a 	mov	r5,r22
   4a420:	8809883a 	mov	r4,r17
   4a424:	004a8c80 	call	4a8c8 <__umodsi3>
   4a428:	8809883a 	mov	r4,r17
   4a42c:	b00b883a 	mov	r5,r22
   4a430:	1021883a 	mov	r16,r2
   4a434:	004a8640 	call	4a864 <__udivsi3>
   4a438:	8006943a 	slli	r3,r16,16
   4a43c:	a008d43a 	srli	r4,r20,16
   4a440:	1545383a 	mul	r2,r2,r21
   4a444:	20c8b03a 	or	r4,r4,r3
   4a448:	2080042e 	bgeu	r4,r2,4a45c <__umoddi3+0x228>
   4a44c:	24c9883a 	add	r4,r4,r19
   4a450:	24c00236 	bltu	r4,r19,4a45c <__umoddi3+0x228>
   4a454:	2080012e 	bgeu	r4,r2,4a45c <__umoddi3+0x228>
   4a458:	24c9883a 	add	r4,r4,r19
   4a45c:	20a1c83a 	sub	r16,r4,r2
   4a460:	b00b883a 	mov	r5,r22
   4a464:	8009883a 	mov	r4,r16
   4a468:	004a8c80 	call	4a8c8 <__umodsi3>
   4a46c:	1023883a 	mov	r17,r2
   4a470:	b00b883a 	mov	r5,r22
   4a474:	8009883a 	mov	r4,r16
   4a478:	004a8640 	call	4a864 <__udivsi3>
   4a47c:	8822943a 	slli	r17,r17,16
   4a480:	1545383a 	mul	r2,r2,r21
   4a484:	a53fffcc 	andi	r20,r20,65535
   4a488:	a446b03a 	or	r3,r20,r17
   4a48c:	18bfb02e 	bgeu	r3,r2,4a350 <__alt_data_end+0xfffea350>
   4a490:	003fab06 	br	4a340 <__alt_data_end+0xfffea340>
   4a494:	2005883a 	mov	r2,r4
   4a498:	2807883a 	mov	r3,r5
   4a49c:	dfc00b17 	ldw	ra,44(sp)
   4a4a0:	df000a17 	ldw	fp,40(sp)
   4a4a4:	ddc00917 	ldw	r23,36(sp)
   4a4a8:	dd800817 	ldw	r22,32(sp)
   4a4ac:	dd400717 	ldw	r21,28(sp)
   4a4b0:	dd000617 	ldw	r20,24(sp)
   4a4b4:	dcc00517 	ldw	r19,20(sp)
   4a4b8:	dc800417 	ldw	r18,16(sp)
   4a4bc:	dc400317 	ldw	r17,12(sp)
   4a4c0:	dc000217 	ldw	r16,8(sp)
   4a4c4:	dec00c04 	addi	sp,sp,48
   4a4c8:	f800283a 	ret
   4a4cc:	04c03fc4 	movi	r19,255
   4a4d0:	99c9803a 	cmpltu	r4,r19,r7
   4a4d4:	200890fa 	slli	r4,r4,3
   4a4d8:	003fa806 	br	4a37c <__alt_data_end+0xfffea37c>
   4a4dc:	00803fc4 	movi	r2,255
   4a4e0:	14c5803a 	cmpltu	r2,r2,r19
   4a4e4:	100490fa 	slli	r2,r2,3
   4a4e8:	003fc006 	br	4a3ec <__alt_data_end+0xfffea3ec>
   4a4ec:	00804034 	movhi	r2,256
   4a4f0:	10bfffc4 	addi	r2,r2,-1
   4a4f4:	11808b36 	bltu	r2,r6,4a724 <__umoddi3+0x4f0>
   4a4f8:	01000404 	movi	r4,16
   4a4fc:	003f6406 	br	4a290 <__alt_data_end+0xfffea290>
   4a500:	34c4d83a 	srl	r2,r6,r19
   4a504:	3d0e983a 	sll	r7,r7,r20
   4a508:	8cf8d83a 	srl	fp,r17,r19
   4a50c:	8d10983a 	sll	r8,r17,r20
   4a510:	38aab03a 	or	r21,r7,r2
   4a514:	a82cd43a 	srli	r22,r21,16
   4a518:	84e2d83a 	srl	r17,r16,r19
   4a51c:	e009883a 	mov	r4,fp
   4a520:	b00b883a 	mov	r5,r22
   4a524:	8a22b03a 	or	r17,r17,r8
   4a528:	3524983a 	sll	r18,r6,r20
   4a52c:	004a8c80 	call	4a8c8 <__umodsi3>
   4a530:	e009883a 	mov	r4,fp
   4a534:	b00b883a 	mov	r5,r22
   4a538:	102f883a 	mov	r23,r2
   4a53c:	004a8640 	call	4a864 <__udivsi3>
   4a540:	100d883a 	mov	r6,r2
   4a544:	b808943a 	slli	r4,r23,16
   4a548:	aa3fffcc 	andi	r8,r21,65535
   4a54c:	8804d43a 	srli	r2,r17,16
   4a550:	41af383a 	mul	r23,r8,r6
   4a554:	8520983a 	sll	r16,r16,r20
   4a558:	1104b03a 	or	r2,r2,r4
   4a55c:	15c0042e 	bgeu	r2,r23,4a570 <__umoddi3+0x33c>
   4a560:	1545883a 	add	r2,r2,r21
   4a564:	30ffffc4 	addi	r3,r6,-1
   4a568:	1540742e 	bgeu	r2,r21,4a73c <__umoddi3+0x508>
   4a56c:	180d883a 	mov	r6,r3
   4a570:	15efc83a 	sub	r23,r2,r23
   4a574:	b00b883a 	mov	r5,r22
   4a578:	b809883a 	mov	r4,r23
   4a57c:	d9800115 	stw	r6,4(sp)
   4a580:	da000015 	stw	r8,0(sp)
   4a584:	004a8c80 	call	4a8c8 <__umodsi3>
   4a588:	b00b883a 	mov	r5,r22
   4a58c:	b809883a 	mov	r4,r23
   4a590:	1039883a 	mov	fp,r2
   4a594:	004a8640 	call	4a864 <__udivsi3>
   4a598:	da000017 	ldw	r8,0(sp)
   4a59c:	e038943a 	slli	fp,fp,16
   4a5a0:	100b883a 	mov	r5,r2
   4a5a4:	4089383a 	mul	r4,r8,r2
   4a5a8:	8a3fffcc 	andi	r8,r17,65535
   4a5ac:	4710b03a 	or	r8,r8,fp
   4a5b0:	d9800117 	ldw	r6,4(sp)
   4a5b4:	4100042e 	bgeu	r8,r4,4a5c8 <__umoddi3+0x394>
   4a5b8:	4551883a 	add	r8,r8,r21
   4a5bc:	10bfffc4 	addi	r2,r2,-1
   4a5c0:	45405a2e 	bgeu	r8,r21,4a72c <__umoddi3+0x4f8>
   4a5c4:	100b883a 	mov	r5,r2
   4a5c8:	300c943a 	slli	r6,r6,16
   4a5cc:	91ffffcc 	andi	r7,r18,65535
   4a5d0:	9004d43a 	srli	r2,r18,16
   4a5d4:	314cb03a 	or	r6,r6,r5
   4a5d8:	317fffcc 	andi	r5,r6,65535
   4a5dc:	300cd43a 	srli	r6,r6,16
   4a5e0:	29d3383a 	mul	r9,r5,r7
   4a5e4:	288b383a 	mul	r5,r5,r2
   4a5e8:	31cf383a 	mul	r7,r6,r7
   4a5ec:	4806d43a 	srli	r3,r9,16
   4a5f0:	4111c83a 	sub	r8,r8,r4
   4a5f4:	29cb883a 	add	r5,r5,r7
   4a5f8:	194b883a 	add	r5,r3,r5
   4a5fc:	3085383a 	mul	r2,r6,r2
   4a600:	29c0022e 	bgeu	r5,r7,4a60c <__umoddi3+0x3d8>
   4a604:	00c00074 	movhi	r3,1
   4a608:	10c5883a 	add	r2,r2,r3
   4a60c:	2808d43a 	srli	r4,r5,16
   4a610:	280a943a 	slli	r5,r5,16
   4a614:	4a7fffcc 	andi	r9,r9,65535
   4a618:	2085883a 	add	r2,r4,r2
   4a61c:	2a4b883a 	add	r5,r5,r9
   4a620:	40803636 	bltu	r8,r2,4a6fc <__umoddi3+0x4c8>
   4a624:	40804d26 	beq	r8,r2,4a75c <__umoddi3+0x528>
   4a628:	4089c83a 	sub	r4,r8,r2
   4a62c:	280f883a 	mov	r7,r5
   4a630:	81cfc83a 	sub	r7,r16,r7
   4a634:	81c7803a 	cmpltu	r3,r16,r7
   4a638:	20c7c83a 	sub	r3,r4,r3
   4a63c:	1cc4983a 	sll	r2,r3,r19
   4a640:	3d0ed83a 	srl	r7,r7,r20
   4a644:	1d06d83a 	srl	r3,r3,r20
   4a648:	11c4b03a 	or	r2,r2,r7
   4a64c:	003f9306 	br	4a49c <__alt_data_end+0xfffea49c>
   4a650:	9ca6983a 	sll	r19,r19,r18
   4a654:	88e8d83a 	srl	r20,r17,r3
   4a658:	80c4d83a 	srl	r2,r16,r3
   4a65c:	982cd43a 	srli	r22,r19,16
   4a660:	8ca2983a 	sll	r17,r17,r18
   4a664:	a009883a 	mov	r4,r20
   4a668:	b00b883a 	mov	r5,r22
   4a66c:	1478b03a 	or	fp,r2,r17
   4a670:	004a8c80 	call	4a8c8 <__umodsi3>
   4a674:	a009883a 	mov	r4,r20
   4a678:	b00b883a 	mov	r5,r22
   4a67c:	1023883a 	mov	r17,r2
   4a680:	004a8640 	call	4a864 <__udivsi3>
   4a684:	9d7fffcc 	andi	r21,r19,65535
   4a688:	880a943a 	slli	r5,r17,16
   4a68c:	e008d43a 	srli	r4,fp,16
   4a690:	a885383a 	mul	r2,r21,r2
   4a694:	84a8983a 	sll	r20,r16,r18
   4a698:	2148b03a 	or	r4,r4,r5
   4a69c:	2080042e 	bgeu	r4,r2,4a6b0 <__umoddi3+0x47c>
   4a6a0:	24c9883a 	add	r4,r4,r19
   4a6a4:	24c00236 	bltu	r4,r19,4a6b0 <__umoddi3+0x47c>
   4a6a8:	2080012e 	bgeu	r4,r2,4a6b0 <__umoddi3+0x47c>
   4a6ac:	24c9883a 	add	r4,r4,r19
   4a6b0:	20a3c83a 	sub	r17,r4,r2
   4a6b4:	b00b883a 	mov	r5,r22
   4a6b8:	8809883a 	mov	r4,r17
   4a6bc:	004a8c80 	call	4a8c8 <__umodsi3>
   4a6c0:	102f883a 	mov	r23,r2
   4a6c4:	8809883a 	mov	r4,r17
   4a6c8:	b00b883a 	mov	r5,r22
   4a6cc:	004a8640 	call	4a864 <__udivsi3>
   4a6d0:	b82e943a 	slli	r23,r23,16
   4a6d4:	a885383a 	mul	r2,r21,r2
   4a6d8:	e13fffcc 	andi	r4,fp,65535
   4a6dc:	25c8b03a 	or	r4,r4,r23
   4a6e0:	2080042e 	bgeu	r4,r2,4a6f4 <__umoddi3+0x4c0>
   4a6e4:	24c9883a 	add	r4,r4,r19
   4a6e8:	24c00236 	bltu	r4,r19,4a6f4 <__umoddi3+0x4c0>
   4a6ec:	2080012e 	bgeu	r4,r2,4a6f4 <__umoddi3+0x4c0>
   4a6f0:	24c9883a 	add	r4,r4,r19
   4a6f4:	20a3c83a 	sub	r17,r4,r2
   4a6f8:	003f4806 	br	4a41c <__alt_data_end+0xfffea41c>
   4a6fc:	2c8fc83a 	sub	r7,r5,r18
   4a700:	1545c83a 	sub	r2,r2,r21
   4a704:	29cb803a 	cmpltu	r5,r5,r7
   4a708:	1145c83a 	sub	r2,r2,r5
   4a70c:	4089c83a 	sub	r4,r8,r2
   4a710:	003fc706 	br	4a630 <__alt_data_end+0xfffea630>
   4a714:	01000604 	movi	r4,24
   4a718:	003f1806 	br	4a37c <__alt_data_end+0xfffea37c>
   4a71c:	00800604 	movi	r2,24
   4a720:	003f3206 	br	4a3ec <__alt_data_end+0xfffea3ec>
   4a724:	01000604 	movi	r4,24
   4a728:	003ed906 	br	4a290 <__alt_data_end+0xfffea290>
   4a72c:	413fa52e 	bgeu	r8,r4,4a5c4 <__alt_data_end+0xfffea5c4>
   4a730:	297fff84 	addi	r5,r5,-2
   4a734:	4551883a 	add	r8,r8,r21
   4a738:	003fa306 	br	4a5c8 <__alt_data_end+0xfffea5c8>
   4a73c:	15ff8b2e 	bgeu	r2,r23,4a56c <__alt_data_end+0xfffea56c>
   4a740:	31bfff84 	addi	r6,r6,-2
   4a744:	1545883a 	add	r2,r2,r21
   4a748:	003f8906 	br	4a570 <__alt_data_end+0xfffea570>
   4a74c:	24c9883a 	add	r4,r4,r19
   4a750:	003eee06 	br	4a30c <__alt_data_end+0xfffea30c>
   4a754:	8005883a 	mov	r2,r16
   4a758:	003f1706 	br	4a3b8 <__alt_data_end+0xfffea3b8>
   4a75c:	817fe736 	bltu	r16,r5,4a6fc <__alt_data_end+0xfffea6fc>
   4a760:	280f883a 	mov	r7,r5
   4a764:	0009883a 	mov	r4,zero
   4a768:	003fb106 	br	4a630 <__alt_data_end+0xfffea630>

0004a76c <__divsi3>:
   4a76c:	20001b16 	blt	r4,zero,4a7dc <__divsi3+0x70>
   4a770:	000f883a 	mov	r7,zero
   4a774:	28001616 	blt	r5,zero,4a7d0 <__divsi3+0x64>
   4a778:	200d883a 	mov	r6,r4
   4a77c:	29001a2e 	bgeu	r5,r4,4a7e8 <__divsi3+0x7c>
   4a780:	00800804 	movi	r2,32
   4a784:	00c00044 	movi	r3,1
   4a788:	00000106 	br	4a790 <__divsi3+0x24>
   4a78c:	10000d26 	beq	r2,zero,4a7c4 <__divsi3+0x58>
   4a790:	294b883a 	add	r5,r5,r5
   4a794:	10bfffc4 	addi	r2,r2,-1
   4a798:	18c7883a 	add	r3,r3,r3
   4a79c:	293ffb36 	bltu	r5,r4,4a78c <__alt_data_end+0xfffea78c>
   4a7a0:	0005883a 	mov	r2,zero
   4a7a4:	18000726 	beq	r3,zero,4a7c4 <__divsi3+0x58>
   4a7a8:	0005883a 	mov	r2,zero
   4a7ac:	31400236 	bltu	r6,r5,4a7b8 <__divsi3+0x4c>
   4a7b0:	314dc83a 	sub	r6,r6,r5
   4a7b4:	10c4b03a 	or	r2,r2,r3
   4a7b8:	1806d07a 	srli	r3,r3,1
   4a7bc:	280ad07a 	srli	r5,r5,1
   4a7c0:	183ffa1e 	bne	r3,zero,4a7ac <__alt_data_end+0xfffea7ac>
   4a7c4:	38000126 	beq	r7,zero,4a7cc <__divsi3+0x60>
   4a7c8:	0085c83a 	sub	r2,zero,r2
   4a7cc:	f800283a 	ret
   4a7d0:	014bc83a 	sub	r5,zero,r5
   4a7d4:	39c0005c 	xori	r7,r7,1
   4a7d8:	003fe706 	br	4a778 <__alt_data_end+0xfffea778>
   4a7dc:	0109c83a 	sub	r4,zero,r4
   4a7e0:	01c00044 	movi	r7,1
   4a7e4:	003fe306 	br	4a774 <__alt_data_end+0xfffea774>
   4a7e8:	00c00044 	movi	r3,1
   4a7ec:	003fee06 	br	4a7a8 <__alt_data_end+0xfffea7a8>

0004a7f0 <__modsi3>:
   4a7f0:	20001716 	blt	r4,zero,4a850 <__modsi3+0x60>
   4a7f4:	000f883a 	mov	r7,zero
   4a7f8:	2005883a 	mov	r2,r4
   4a7fc:	28001216 	blt	r5,zero,4a848 <__modsi3+0x58>
   4a800:	2900162e 	bgeu	r5,r4,4a85c <__modsi3+0x6c>
   4a804:	01800804 	movi	r6,32
   4a808:	00c00044 	movi	r3,1
   4a80c:	00000106 	br	4a814 <__modsi3+0x24>
   4a810:	30000a26 	beq	r6,zero,4a83c <__modsi3+0x4c>
   4a814:	294b883a 	add	r5,r5,r5
   4a818:	31bfffc4 	addi	r6,r6,-1
   4a81c:	18c7883a 	add	r3,r3,r3
   4a820:	293ffb36 	bltu	r5,r4,4a810 <__alt_data_end+0xfffea810>
   4a824:	18000526 	beq	r3,zero,4a83c <__modsi3+0x4c>
   4a828:	1806d07a 	srli	r3,r3,1
   4a82c:	11400136 	bltu	r2,r5,4a834 <__modsi3+0x44>
   4a830:	1145c83a 	sub	r2,r2,r5
   4a834:	280ad07a 	srli	r5,r5,1
   4a838:	183ffb1e 	bne	r3,zero,4a828 <__alt_data_end+0xfffea828>
   4a83c:	38000126 	beq	r7,zero,4a844 <__modsi3+0x54>
   4a840:	0085c83a 	sub	r2,zero,r2
   4a844:	f800283a 	ret
   4a848:	014bc83a 	sub	r5,zero,r5
   4a84c:	003fec06 	br	4a800 <__alt_data_end+0xfffea800>
   4a850:	0109c83a 	sub	r4,zero,r4
   4a854:	01c00044 	movi	r7,1
   4a858:	003fe706 	br	4a7f8 <__alt_data_end+0xfffea7f8>
   4a85c:	00c00044 	movi	r3,1
   4a860:	003ff106 	br	4a828 <__alt_data_end+0xfffea828>

0004a864 <__udivsi3>:
   4a864:	200d883a 	mov	r6,r4
   4a868:	2900152e 	bgeu	r5,r4,4a8c0 <__udivsi3+0x5c>
   4a86c:	28001416 	blt	r5,zero,4a8c0 <__udivsi3+0x5c>
   4a870:	00800804 	movi	r2,32
   4a874:	00c00044 	movi	r3,1
   4a878:	00000206 	br	4a884 <__udivsi3+0x20>
   4a87c:	10000e26 	beq	r2,zero,4a8b8 <__udivsi3+0x54>
   4a880:	28000516 	blt	r5,zero,4a898 <__udivsi3+0x34>
   4a884:	294b883a 	add	r5,r5,r5
   4a888:	10bfffc4 	addi	r2,r2,-1
   4a88c:	18c7883a 	add	r3,r3,r3
   4a890:	293ffa36 	bltu	r5,r4,4a87c <__alt_data_end+0xfffea87c>
   4a894:	18000826 	beq	r3,zero,4a8b8 <__udivsi3+0x54>
   4a898:	0005883a 	mov	r2,zero
   4a89c:	31400236 	bltu	r6,r5,4a8a8 <__udivsi3+0x44>
   4a8a0:	314dc83a 	sub	r6,r6,r5
   4a8a4:	10c4b03a 	or	r2,r2,r3
   4a8a8:	1806d07a 	srli	r3,r3,1
   4a8ac:	280ad07a 	srli	r5,r5,1
   4a8b0:	183ffa1e 	bne	r3,zero,4a89c <__alt_data_end+0xfffea89c>
   4a8b4:	f800283a 	ret
   4a8b8:	0005883a 	mov	r2,zero
   4a8bc:	f800283a 	ret
   4a8c0:	00c00044 	movi	r3,1
   4a8c4:	003ff406 	br	4a898 <__alt_data_end+0xfffea898>

0004a8c8 <__umodsi3>:
   4a8c8:	2005883a 	mov	r2,r4
   4a8cc:	2900122e 	bgeu	r5,r4,4a918 <__umodsi3+0x50>
   4a8d0:	28001116 	blt	r5,zero,4a918 <__umodsi3+0x50>
   4a8d4:	01800804 	movi	r6,32
   4a8d8:	00c00044 	movi	r3,1
   4a8dc:	00000206 	br	4a8e8 <__umodsi3+0x20>
   4a8e0:	30000c26 	beq	r6,zero,4a914 <__umodsi3+0x4c>
   4a8e4:	28000516 	blt	r5,zero,4a8fc <__umodsi3+0x34>
   4a8e8:	294b883a 	add	r5,r5,r5
   4a8ec:	31bfffc4 	addi	r6,r6,-1
   4a8f0:	18c7883a 	add	r3,r3,r3
   4a8f4:	293ffa36 	bltu	r5,r4,4a8e0 <__alt_data_end+0xfffea8e0>
   4a8f8:	18000626 	beq	r3,zero,4a914 <__umodsi3+0x4c>
   4a8fc:	1806d07a 	srli	r3,r3,1
   4a900:	11400136 	bltu	r2,r5,4a908 <__umodsi3+0x40>
   4a904:	1145c83a 	sub	r2,r2,r5
   4a908:	280ad07a 	srli	r5,r5,1
   4a90c:	183ffb1e 	bne	r3,zero,4a8fc <__alt_data_end+0xfffea8fc>
   4a910:	f800283a 	ret
   4a914:	f800283a 	ret
   4a918:	00c00044 	movi	r3,1
   4a91c:	003ff706 	br	4a8fc <__alt_data_end+0xfffea8fc>

0004a920 <__adddf3>:
   4a920:	02c00434 	movhi	r11,16
   4a924:	5affffc4 	addi	r11,r11,-1
   4a928:	2806d7fa 	srli	r3,r5,31
   4a92c:	2ad4703a 	and	r10,r5,r11
   4a930:	3ad2703a 	and	r9,r7,r11
   4a934:	3804d53a 	srli	r2,r7,20
   4a938:	3018d77a 	srli	r12,r6,29
   4a93c:	280ad53a 	srli	r5,r5,20
   4a940:	501490fa 	slli	r10,r10,3
   4a944:	2010d77a 	srli	r8,r4,29
   4a948:	481290fa 	slli	r9,r9,3
   4a94c:	380ed7fa 	srli	r7,r7,31
   4a950:	defffb04 	addi	sp,sp,-20
   4a954:	dc800215 	stw	r18,8(sp)
   4a958:	dc400115 	stw	r17,4(sp)
   4a95c:	dc000015 	stw	r16,0(sp)
   4a960:	dfc00415 	stw	ra,16(sp)
   4a964:	dcc00315 	stw	r19,12(sp)
   4a968:	1c803fcc 	andi	r18,r3,255
   4a96c:	2c01ffcc 	andi	r16,r5,2047
   4a970:	5210b03a 	or	r8,r10,r8
   4a974:	202290fa 	slli	r17,r4,3
   4a978:	1081ffcc 	andi	r2,r2,2047
   4a97c:	4b12b03a 	or	r9,r9,r12
   4a980:	300c90fa 	slli	r6,r6,3
   4a984:	91c07526 	beq	r18,r7,4ab5c <__adddf3+0x23c>
   4a988:	8087c83a 	sub	r3,r16,r2
   4a98c:	00c0ab0e 	bge	zero,r3,4ac3c <__adddf3+0x31c>
   4a990:	10002a1e 	bne	r2,zero,4aa3c <__adddf3+0x11c>
   4a994:	4984b03a 	or	r2,r9,r6
   4a998:	1000961e 	bne	r2,zero,4abf4 <__adddf3+0x2d4>
   4a99c:	888001cc 	andi	r2,r17,7
   4a9a0:	10000726 	beq	r2,zero,4a9c0 <__adddf3+0xa0>
   4a9a4:	888003cc 	andi	r2,r17,15
   4a9a8:	00c00104 	movi	r3,4
   4a9ac:	10c00426 	beq	r2,r3,4a9c0 <__adddf3+0xa0>
   4a9b0:	88c7883a 	add	r3,r17,r3
   4a9b4:	1c63803a 	cmpltu	r17,r3,r17
   4a9b8:	4451883a 	add	r8,r8,r17
   4a9bc:	1823883a 	mov	r17,r3
   4a9c0:	4080202c 	andhi	r2,r8,128
   4a9c4:	10005926 	beq	r2,zero,4ab2c <__adddf3+0x20c>
   4a9c8:	84000044 	addi	r16,r16,1
   4a9cc:	0081ffc4 	movi	r2,2047
   4a9d0:	8080ba26 	beq	r16,r2,4acbc <__adddf3+0x39c>
   4a9d4:	00bfe034 	movhi	r2,65408
   4a9d8:	10bfffc4 	addi	r2,r2,-1
   4a9dc:	4090703a 	and	r8,r8,r2
   4a9e0:	4004977a 	slli	r2,r8,29
   4a9e4:	4010927a 	slli	r8,r8,9
   4a9e8:	8822d0fa 	srli	r17,r17,3
   4a9ec:	8401ffcc 	andi	r16,r16,2047
   4a9f0:	4010d33a 	srli	r8,r8,12
   4a9f4:	9007883a 	mov	r3,r18
   4a9f8:	1444b03a 	or	r2,r2,r17
   4a9fc:	8401ffcc 	andi	r16,r16,2047
   4aa00:	8020953a 	slli	r16,r16,20
   4aa04:	18c03fcc 	andi	r3,r3,255
   4aa08:	01000434 	movhi	r4,16
   4aa0c:	213fffc4 	addi	r4,r4,-1
   4aa10:	180697fa 	slli	r3,r3,31
   4aa14:	4110703a 	and	r8,r8,r4
   4aa18:	4410b03a 	or	r8,r8,r16
   4aa1c:	40c6b03a 	or	r3,r8,r3
   4aa20:	dfc00417 	ldw	ra,16(sp)
   4aa24:	dcc00317 	ldw	r19,12(sp)
   4aa28:	dc800217 	ldw	r18,8(sp)
   4aa2c:	dc400117 	ldw	r17,4(sp)
   4aa30:	dc000017 	ldw	r16,0(sp)
   4aa34:	dec00504 	addi	sp,sp,20
   4aa38:	f800283a 	ret
   4aa3c:	0081ffc4 	movi	r2,2047
   4aa40:	80bfd626 	beq	r16,r2,4a99c <__alt_data_end+0xfffea99c>
   4aa44:	4a402034 	orhi	r9,r9,128
   4aa48:	00800e04 	movi	r2,56
   4aa4c:	10c09f16 	blt	r2,r3,4accc <__adddf3+0x3ac>
   4aa50:	008007c4 	movi	r2,31
   4aa54:	10c0c216 	blt	r2,r3,4ad60 <__adddf3+0x440>
   4aa58:	00800804 	movi	r2,32
   4aa5c:	10c5c83a 	sub	r2,r2,r3
   4aa60:	488a983a 	sll	r5,r9,r2
   4aa64:	30c8d83a 	srl	r4,r6,r3
   4aa68:	3084983a 	sll	r2,r6,r2
   4aa6c:	48c6d83a 	srl	r3,r9,r3
   4aa70:	290cb03a 	or	r6,r5,r4
   4aa74:	1004c03a 	cmpne	r2,r2,zero
   4aa78:	308cb03a 	or	r6,r6,r2
   4aa7c:	898dc83a 	sub	r6,r17,r6
   4aa80:	89a3803a 	cmpltu	r17,r17,r6
   4aa84:	40d1c83a 	sub	r8,r8,r3
   4aa88:	4451c83a 	sub	r8,r8,r17
   4aa8c:	3023883a 	mov	r17,r6
   4aa90:	4080202c 	andhi	r2,r8,128
   4aa94:	10002326 	beq	r2,zero,4ab24 <__adddf3+0x204>
   4aa98:	04c02034 	movhi	r19,128
   4aa9c:	9cffffc4 	addi	r19,r19,-1
   4aaa0:	44e6703a 	and	r19,r8,r19
   4aaa4:	98007626 	beq	r19,zero,4ac80 <__adddf3+0x360>
   4aaa8:	9809883a 	mov	r4,r19
   4aaac:	004cf240 	call	4cf24 <__clzsi2>
   4aab0:	10fffe04 	addi	r3,r2,-8
   4aab4:	010007c4 	movi	r4,31
   4aab8:	20c07716 	blt	r4,r3,4ac98 <__adddf3+0x378>
   4aabc:	00800804 	movi	r2,32
   4aac0:	10c5c83a 	sub	r2,r2,r3
   4aac4:	8884d83a 	srl	r2,r17,r2
   4aac8:	98d0983a 	sll	r8,r19,r3
   4aacc:	88e2983a 	sll	r17,r17,r3
   4aad0:	1204b03a 	or	r2,r2,r8
   4aad4:	1c007416 	blt	r3,r16,4aca8 <__adddf3+0x388>
   4aad8:	1c21c83a 	sub	r16,r3,r16
   4aadc:	82000044 	addi	r8,r16,1
   4aae0:	00c007c4 	movi	r3,31
   4aae4:	1a009116 	blt	r3,r8,4ad2c <__adddf3+0x40c>
   4aae8:	00c00804 	movi	r3,32
   4aaec:	1a07c83a 	sub	r3,r3,r8
   4aaf0:	8a08d83a 	srl	r4,r17,r8
   4aaf4:	88e2983a 	sll	r17,r17,r3
   4aaf8:	10c6983a 	sll	r3,r2,r3
   4aafc:	1210d83a 	srl	r8,r2,r8
   4ab00:	8804c03a 	cmpne	r2,r17,zero
   4ab04:	1906b03a 	or	r3,r3,r4
   4ab08:	18a2b03a 	or	r17,r3,r2
   4ab0c:	0021883a 	mov	r16,zero
   4ab10:	003fa206 	br	4a99c <__alt_data_end+0xfffea99c>
   4ab14:	1890b03a 	or	r8,r3,r2
   4ab18:	40017d26 	beq	r8,zero,4b110 <__adddf3+0x7f0>
   4ab1c:	1011883a 	mov	r8,r2
   4ab20:	1823883a 	mov	r17,r3
   4ab24:	888001cc 	andi	r2,r17,7
   4ab28:	103f9e1e 	bne	r2,zero,4a9a4 <__alt_data_end+0xfffea9a4>
   4ab2c:	4004977a 	slli	r2,r8,29
   4ab30:	8822d0fa 	srli	r17,r17,3
   4ab34:	4010d0fa 	srli	r8,r8,3
   4ab38:	9007883a 	mov	r3,r18
   4ab3c:	1444b03a 	or	r2,r2,r17
   4ab40:	0101ffc4 	movi	r4,2047
   4ab44:	81002426 	beq	r16,r4,4abd8 <__adddf3+0x2b8>
   4ab48:	8120703a 	and	r16,r16,r4
   4ab4c:	01000434 	movhi	r4,16
   4ab50:	213fffc4 	addi	r4,r4,-1
   4ab54:	4110703a 	and	r8,r8,r4
   4ab58:	003fa806 	br	4a9fc <__alt_data_end+0xfffea9fc>
   4ab5c:	8089c83a 	sub	r4,r16,r2
   4ab60:	01005e0e 	bge	zero,r4,4acdc <__adddf3+0x3bc>
   4ab64:	10002b26 	beq	r2,zero,4ac14 <__adddf3+0x2f4>
   4ab68:	0081ffc4 	movi	r2,2047
   4ab6c:	80bf8b26 	beq	r16,r2,4a99c <__alt_data_end+0xfffea99c>
   4ab70:	4a402034 	orhi	r9,r9,128
   4ab74:	00800e04 	movi	r2,56
   4ab78:	1100a40e 	bge	r2,r4,4ae0c <__adddf3+0x4ec>
   4ab7c:	498cb03a 	or	r6,r9,r6
   4ab80:	300ac03a 	cmpne	r5,r6,zero
   4ab84:	0013883a 	mov	r9,zero
   4ab88:	2c4b883a 	add	r5,r5,r17
   4ab8c:	2c63803a 	cmpltu	r17,r5,r17
   4ab90:	4a11883a 	add	r8,r9,r8
   4ab94:	8a11883a 	add	r8,r17,r8
   4ab98:	2823883a 	mov	r17,r5
   4ab9c:	4080202c 	andhi	r2,r8,128
   4aba0:	103fe026 	beq	r2,zero,4ab24 <__alt_data_end+0xfffeab24>
   4aba4:	84000044 	addi	r16,r16,1
   4aba8:	0081ffc4 	movi	r2,2047
   4abac:	8080d226 	beq	r16,r2,4aef8 <__adddf3+0x5d8>
   4abb0:	00bfe034 	movhi	r2,65408
   4abb4:	10bfffc4 	addi	r2,r2,-1
   4abb8:	4090703a 	and	r8,r8,r2
   4abbc:	880ad07a 	srli	r5,r17,1
   4abc0:	400897fa 	slli	r4,r8,31
   4abc4:	88c0004c 	andi	r3,r17,1
   4abc8:	28e2b03a 	or	r17,r5,r3
   4abcc:	4010d07a 	srli	r8,r8,1
   4abd0:	2462b03a 	or	r17,r4,r17
   4abd4:	003f7106 	br	4a99c <__alt_data_end+0xfffea99c>
   4abd8:	4088b03a 	or	r4,r8,r2
   4abdc:	20014526 	beq	r4,zero,4b0f4 <__adddf3+0x7d4>
   4abe0:	01000434 	movhi	r4,16
   4abe4:	42000234 	orhi	r8,r8,8
   4abe8:	213fffc4 	addi	r4,r4,-1
   4abec:	4110703a 	and	r8,r8,r4
   4abf0:	003f8206 	br	4a9fc <__alt_data_end+0xfffea9fc>
   4abf4:	18ffffc4 	addi	r3,r3,-1
   4abf8:	1800491e 	bne	r3,zero,4ad20 <__adddf3+0x400>
   4abfc:	898bc83a 	sub	r5,r17,r6
   4ac00:	8963803a 	cmpltu	r17,r17,r5
   4ac04:	4251c83a 	sub	r8,r8,r9
   4ac08:	4451c83a 	sub	r8,r8,r17
   4ac0c:	2823883a 	mov	r17,r5
   4ac10:	003f9f06 	br	4aa90 <__alt_data_end+0xfffeaa90>
   4ac14:	4984b03a 	or	r2,r9,r6
   4ac18:	103f6026 	beq	r2,zero,4a99c <__alt_data_end+0xfffea99c>
   4ac1c:	213fffc4 	addi	r4,r4,-1
   4ac20:	2000931e 	bne	r4,zero,4ae70 <__adddf3+0x550>
   4ac24:	898d883a 	add	r6,r17,r6
   4ac28:	3463803a 	cmpltu	r17,r6,r17
   4ac2c:	4251883a 	add	r8,r8,r9
   4ac30:	8a11883a 	add	r8,r17,r8
   4ac34:	3023883a 	mov	r17,r6
   4ac38:	003fd806 	br	4ab9c <__alt_data_end+0xfffeab9c>
   4ac3c:	1800541e 	bne	r3,zero,4ad90 <__adddf3+0x470>
   4ac40:	80800044 	addi	r2,r16,1
   4ac44:	1081ffcc 	andi	r2,r2,2047
   4ac48:	00c00044 	movi	r3,1
   4ac4c:	1880a00e 	bge	r3,r2,4aed0 <__adddf3+0x5b0>
   4ac50:	8989c83a 	sub	r4,r17,r6
   4ac54:	8905803a 	cmpltu	r2,r17,r4
   4ac58:	4267c83a 	sub	r19,r8,r9
   4ac5c:	98a7c83a 	sub	r19,r19,r2
   4ac60:	9880202c 	andhi	r2,r19,128
   4ac64:	10006326 	beq	r2,zero,4adf4 <__adddf3+0x4d4>
   4ac68:	3463c83a 	sub	r17,r6,r17
   4ac6c:	4a07c83a 	sub	r3,r9,r8
   4ac70:	344d803a 	cmpltu	r6,r6,r17
   4ac74:	19a7c83a 	sub	r19,r3,r6
   4ac78:	3825883a 	mov	r18,r7
   4ac7c:	983f8a1e 	bne	r19,zero,4aaa8 <__alt_data_end+0xfffeaaa8>
   4ac80:	8809883a 	mov	r4,r17
   4ac84:	004cf240 	call	4cf24 <__clzsi2>
   4ac88:	10800804 	addi	r2,r2,32
   4ac8c:	10fffe04 	addi	r3,r2,-8
   4ac90:	010007c4 	movi	r4,31
   4ac94:	20ff890e 	bge	r4,r3,4aabc <__alt_data_end+0xfffeaabc>
   4ac98:	10bff604 	addi	r2,r2,-40
   4ac9c:	8884983a 	sll	r2,r17,r2
   4aca0:	0023883a 	mov	r17,zero
   4aca4:	1c3f8c0e 	bge	r3,r16,4aad8 <__alt_data_end+0xfffeaad8>
   4aca8:	023fe034 	movhi	r8,65408
   4acac:	423fffc4 	addi	r8,r8,-1
   4acb0:	80e1c83a 	sub	r16,r16,r3
   4acb4:	1210703a 	and	r8,r2,r8
   4acb8:	003f3806 	br	4a99c <__alt_data_end+0xfffea99c>
   4acbc:	9007883a 	mov	r3,r18
   4acc0:	0011883a 	mov	r8,zero
   4acc4:	0005883a 	mov	r2,zero
   4acc8:	003f4c06 	br	4a9fc <__alt_data_end+0xfffea9fc>
   4accc:	498cb03a 	or	r6,r9,r6
   4acd0:	300cc03a 	cmpne	r6,r6,zero
   4acd4:	0007883a 	mov	r3,zero
   4acd8:	003f6806 	br	4aa7c <__alt_data_end+0xfffeaa7c>
   4acdc:	20009c1e 	bne	r4,zero,4af50 <__adddf3+0x630>
   4ace0:	80800044 	addi	r2,r16,1
   4ace4:	1141ffcc 	andi	r5,r2,2047
   4ace8:	01000044 	movi	r4,1
   4acec:	2140670e 	bge	r4,r5,4ae8c <__adddf3+0x56c>
   4acf0:	0101ffc4 	movi	r4,2047
   4acf4:	11007f26 	beq	r2,r4,4aef4 <__adddf3+0x5d4>
   4acf8:	898d883a 	add	r6,r17,r6
   4acfc:	4247883a 	add	r3,r8,r9
   4ad00:	3451803a 	cmpltu	r8,r6,r17
   4ad04:	40d1883a 	add	r8,r8,r3
   4ad08:	402297fa 	slli	r17,r8,31
   4ad0c:	300cd07a 	srli	r6,r6,1
   4ad10:	4010d07a 	srli	r8,r8,1
   4ad14:	1021883a 	mov	r16,r2
   4ad18:	89a2b03a 	or	r17,r17,r6
   4ad1c:	003f1f06 	br	4a99c <__alt_data_end+0xfffea99c>
   4ad20:	0081ffc4 	movi	r2,2047
   4ad24:	80bf481e 	bne	r16,r2,4aa48 <__alt_data_end+0xfffeaa48>
   4ad28:	003f1c06 	br	4a99c <__alt_data_end+0xfffea99c>
   4ad2c:	843ff844 	addi	r16,r16,-31
   4ad30:	01000804 	movi	r4,32
   4ad34:	1406d83a 	srl	r3,r2,r16
   4ad38:	41005026 	beq	r8,r4,4ae7c <__adddf3+0x55c>
   4ad3c:	01001004 	movi	r4,64
   4ad40:	2211c83a 	sub	r8,r4,r8
   4ad44:	1204983a 	sll	r2,r2,r8
   4ad48:	88a2b03a 	or	r17,r17,r2
   4ad4c:	8822c03a 	cmpne	r17,r17,zero
   4ad50:	1c62b03a 	or	r17,r3,r17
   4ad54:	0011883a 	mov	r8,zero
   4ad58:	0021883a 	mov	r16,zero
   4ad5c:	003f7106 	br	4ab24 <__alt_data_end+0xfffeab24>
   4ad60:	193ff804 	addi	r4,r3,-32
   4ad64:	00800804 	movi	r2,32
   4ad68:	4908d83a 	srl	r4,r9,r4
   4ad6c:	18804526 	beq	r3,r2,4ae84 <__adddf3+0x564>
   4ad70:	00801004 	movi	r2,64
   4ad74:	10c5c83a 	sub	r2,r2,r3
   4ad78:	4886983a 	sll	r3,r9,r2
   4ad7c:	198cb03a 	or	r6,r3,r6
   4ad80:	300cc03a 	cmpne	r6,r6,zero
   4ad84:	218cb03a 	or	r6,r4,r6
   4ad88:	0007883a 	mov	r3,zero
   4ad8c:	003f3b06 	br	4aa7c <__alt_data_end+0xfffeaa7c>
   4ad90:	80002a26 	beq	r16,zero,4ae3c <__adddf3+0x51c>
   4ad94:	0101ffc4 	movi	r4,2047
   4ad98:	11006826 	beq	r2,r4,4af3c <__adddf3+0x61c>
   4ad9c:	00c7c83a 	sub	r3,zero,r3
   4ada0:	42002034 	orhi	r8,r8,128
   4ada4:	01000e04 	movi	r4,56
   4ada8:	20c07c16 	blt	r4,r3,4af9c <__adddf3+0x67c>
   4adac:	010007c4 	movi	r4,31
   4adb0:	20c0da16 	blt	r4,r3,4b11c <__adddf3+0x7fc>
   4adb4:	01000804 	movi	r4,32
   4adb8:	20c9c83a 	sub	r4,r4,r3
   4adbc:	4114983a 	sll	r10,r8,r4
   4adc0:	88cad83a 	srl	r5,r17,r3
   4adc4:	8908983a 	sll	r4,r17,r4
   4adc8:	40c6d83a 	srl	r3,r8,r3
   4adcc:	5162b03a 	or	r17,r10,r5
   4add0:	2008c03a 	cmpne	r4,r4,zero
   4add4:	8922b03a 	or	r17,r17,r4
   4add8:	3463c83a 	sub	r17,r6,r17
   4addc:	48c7c83a 	sub	r3,r9,r3
   4ade0:	344d803a 	cmpltu	r6,r6,r17
   4ade4:	1991c83a 	sub	r8,r3,r6
   4ade8:	1021883a 	mov	r16,r2
   4adec:	3825883a 	mov	r18,r7
   4adf0:	003f2706 	br	4aa90 <__alt_data_end+0xfffeaa90>
   4adf4:	24d0b03a 	or	r8,r4,r19
   4adf8:	40001b1e 	bne	r8,zero,4ae68 <__adddf3+0x548>
   4adfc:	0005883a 	mov	r2,zero
   4ae00:	0007883a 	mov	r3,zero
   4ae04:	0021883a 	mov	r16,zero
   4ae08:	003f4d06 	br	4ab40 <__alt_data_end+0xfffeab40>
   4ae0c:	008007c4 	movi	r2,31
   4ae10:	11003c16 	blt	r2,r4,4af04 <__adddf3+0x5e4>
   4ae14:	00800804 	movi	r2,32
   4ae18:	1105c83a 	sub	r2,r2,r4
   4ae1c:	488e983a 	sll	r7,r9,r2
   4ae20:	310ad83a 	srl	r5,r6,r4
   4ae24:	3084983a 	sll	r2,r6,r2
   4ae28:	4912d83a 	srl	r9,r9,r4
   4ae2c:	394ab03a 	or	r5,r7,r5
   4ae30:	1004c03a 	cmpne	r2,r2,zero
   4ae34:	288ab03a 	or	r5,r5,r2
   4ae38:	003f5306 	br	4ab88 <__alt_data_end+0xfffeab88>
   4ae3c:	4448b03a 	or	r4,r8,r17
   4ae40:	20003e26 	beq	r4,zero,4af3c <__adddf3+0x61c>
   4ae44:	00c6303a 	nor	r3,zero,r3
   4ae48:	18003a1e 	bne	r3,zero,4af34 <__adddf3+0x614>
   4ae4c:	3463c83a 	sub	r17,r6,r17
   4ae50:	4a07c83a 	sub	r3,r9,r8
   4ae54:	344d803a 	cmpltu	r6,r6,r17
   4ae58:	1991c83a 	sub	r8,r3,r6
   4ae5c:	1021883a 	mov	r16,r2
   4ae60:	3825883a 	mov	r18,r7
   4ae64:	003f0a06 	br	4aa90 <__alt_data_end+0xfffeaa90>
   4ae68:	2023883a 	mov	r17,r4
   4ae6c:	003f0d06 	br	4aaa4 <__alt_data_end+0xfffeaaa4>
   4ae70:	0081ffc4 	movi	r2,2047
   4ae74:	80bf3f1e 	bne	r16,r2,4ab74 <__alt_data_end+0xfffeab74>
   4ae78:	003ec806 	br	4a99c <__alt_data_end+0xfffea99c>
   4ae7c:	0005883a 	mov	r2,zero
   4ae80:	003fb106 	br	4ad48 <__alt_data_end+0xfffead48>
   4ae84:	0007883a 	mov	r3,zero
   4ae88:	003fbc06 	br	4ad7c <__alt_data_end+0xfffead7c>
   4ae8c:	4444b03a 	or	r2,r8,r17
   4ae90:	8000871e 	bne	r16,zero,4b0b0 <__adddf3+0x790>
   4ae94:	1000ba26 	beq	r2,zero,4b180 <__adddf3+0x860>
   4ae98:	4984b03a 	or	r2,r9,r6
   4ae9c:	103ebf26 	beq	r2,zero,4a99c <__alt_data_end+0xfffea99c>
   4aea0:	8985883a 	add	r2,r17,r6
   4aea4:	4247883a 	add	r3,r8,r9
   4aea8:	1451803a 	cmpltu	r8,r2,r17
   4aeac:	40d1883a 	add	r8,r8,r3
   4aeb0:	40c0202c 	andhi	r3,r8,128
   4aeb4:	1023883a 	mov	r17,r2
   4aeb8:	183f1a26 	beq	r3,zero,4ab24 <__alt_data_end+0xfffeab24>
   4aebc:	00bfe034 	movhi	r2,65408
   4aec0:	10bfffc4 	addi	r2,r2,-1
   4aec4:	2021883a 	mov	r16,r4
   4aec8:	4090703a 	and	r8,r8,r2
   4aecc:	003eb306 	br	4a99c <__alt_data_end+0xfffea99c>
   4aed0:	4444b03a 	or	r2,r8,r17
   4aed4:	8000291e 	bne	r16,zero,4af7c <__adddf3+0x65c>
   4aed8:	10004b1e 	bne	r2,zero,4b008 <__adddf3+0x6e8>
   4aedc:	4990b03a 	or	r8,r9,r6
   4aee0:	40008b26 	beq	r8,zero,4b110 <__adddf3+0x7f0>
   4aee4:	4811883a 	mov	r8,r9
   4aee8:	3023883a 	mov	r17,r6
   4aeec:	3825883a 	mov	r18,r7
   4aef0:	003eaa06 	br	4a99c <__alt_data_end+0xfffea99c>
   4aef4:	1021883a 	mov	r16,r2
   4aef8:	0011883a 	mov	r8,zero
   4aefc:	0005883a 	mov	r2,zero
   4af00:	003f0f06 	br	4ab40 <__alt_data_end+0xfffeab40>
   4af04:	217ff804 	addi	r5,r4,-32
   4af08:	00800804 	movi	r2,32
   4af0c:	494ad83a 	srl	r5,r9,r5
   4af10:	20807d26 	beq	r4,r2,4b108 <__adddf3+0x7e8>
   4af14:	00801004 	movi	r2,64
   4af18:	1109c83a 	sub	r4,r2,r4
   4af1c:	4912983a 	sll	r9,r9,r4
   4af20:	498cb03a 	or	r6,r9,r6
   4af24:	300cc03a 	cmpne	r6,r6,zero
   4af28:	298ab03a 	or	r5,r5,r6
   4af2c:	0013883a 	mov	r9,zero
   4af30:	003f1506 	br	4ab88 <__alt_data_end+0xfffeab88>
   4af34:	0101ffc4 	movi	r4,2047
   4af38:	113f9a1e 	bne	r2,r4,4ada4 <__alt_data_end+0xfffeada4>
   4af3c:	4811883a 	mov	r8,r9
   4af40:	3023883a 	mov	r17,r6
   4af44:	1021883a 	mov	r16,r2
   4af48:	3825883a 	mov	r18,r7
   4af4c:	003e9306 	br	4a99c <__alt_data_end+0xfffea99c>
   4af50:	8000161e 	bne	r16,zero,4afac <__adddf3+0x68c>
   4af54:	444ab03a 	or	r5,r8,r17
   4af58:	28005126 	beq	r5,zero,4b0a0 <__adddf3+0x780>
   4af5c:	0108303a 	nor	r4,zero,r4
   4af60:	20004d1e 	bne	r4,zero,4b098 <__adddf3+0x778>
   4af64:	89a3883a 	add	r17,r17,r6
   4af68:	4253883a 	add	r9,r8,r9
   4af6c:	898d803a 	cmpltu	r6,r17,r6
   4af70:	3251883a 	add	r8,r6,r9
   4af74:	1021883a 	mov	r16,r2
   4af78:	003f0806 	br	4ab9c <__alt_data_end+0xfffeab9c>
   4af7c:	1000301e 	bne	r2,zero,4b040 <__adddf3+0x720>
   4af80:	4984b03a 	or	r2,r9,r6
   4af84:	10007126 	beq	r2,zero,4b14c <__adddf3+0x82c>
   4af88:	4811883a 	mov	r8,r9
   4af8c:	3023883a 	mov	r17,r6
   4af90:	3825883a 	mov	r18,r7
   4af94:	0401ffc4 	movi	r16,2047
   4af98:	003e8006 	br	4a99c <__alt_data_end+0xfffea99c>
   4af9c:	4462b03a 	or	r17,r8,r17
   4afa0:	8822c03a 	cmpne	r17,r17,zero
   4afa4:	0007883a 	mov	r3,zero
   4afa8:	003f8b06 	br	4add8 <__alt_data_end+0xfffeadd8>
   4afac:	0141ffc4 	movi	r5,2047
   4afb0:	11403b26 	beq	r2,r5,4b0a0 <__adddf3+0x780>
   4afb4:	0109c83a 	sub	r4,zero,r4
   4afb8:	42002034 	orhi	r8,r8,128
   4afbc:	01400e04 	movi	r5,56
   4afc0:	29006716 	blt	r5,r4,4b160 <__adddf3+0x840>
   4afc4:	014007c4 	movi	r5,31
   4afc8:	29007016 	blt	r5,r4,4b18c <__adddf3+0x86c>
   4afcc:	01400804 	movi	r5,32
   4afd0:	290bc83a 	sub	r5,r5,r4
   4afd4:	4154983a 	sll	r10,r8,r5
   4afd8:	890ed83a 	srl	r7,r17,r4
   4afdc:	894a983a 	sll	r5,r17,r5
   4afe0:	4108d83a 	srl	r4,r8,r4
   4afe4:	51e2b03a 	or	r17,r10,r7
   4afe8:	280ac03a 	cmpne	r5,r5,zero
   4afec:	8962b03a 	or	r17,r17,r5
   4aff0:	89a3883a 	add	r17,r17,r6
   4aff4:	2253883a 	add	r9,r4,r9
   4aff8:	898d803a 	cmpltu	r6,r17,r6
   4affc:	3251883a 	add	r8,r6,r9
   4b000:	1021883a 	mov	r16,r2
   4b004:	003ee506 	br	4ab9c <__alt_data_end+0xfffeab9c>
   4b008:	4984b03a 	or	r2,r9,r6
   4b00c:	103e6326 	beq	r2,zero,4a99c <__alt_data_end+0xfffea99c>
   4b010:	8987c83a 	sub	r3,r17,r6
   4b014:	88c9803a 	cmpltu	r4,r17,r3
   4b018:	4245c83a 	sub	r2,r8,r9
   4b01c:	1105c83a 	sub	r2,r2,r4
   4b020:	1100202c 	andhi	r4,r2,128
   4b024:	203ebb26 	beq	r4,zero,4ab14 <__alt_data_end+0xfffeab14>
   4b028:	3463c83a 	sub	r17,r6,r17
   4b02c:	4a07c83a 	sub	r3,r9,r8
   4b030:	344d803a 	cmpltu	r6,r6,r17
   4b034:	1991c83a 	sub	r8,r3,r6
   4b038:	3825883a 	mov	r18,r7
   4b03c:	003e5706 	br	4a99c <__alt_data_end+0xfffea99c>
   4b040:	4984b03a 	or	r2,r9,r6
   4b044:	10002e26 	beq	r2,zero,4b100 <__adddf3+0x7e0>
   4b048:	4004d0fa 	srli	r2,r8,3
   4b04c:	8822d0fa 	srli	r17,r17,3
   4b050:	4010977a 	slli	r8,r8,29
   4b054:	10c0022c 	andhi	r3,r2,8
   4b058:	4462b03a 	or	r17,r8,r17
   4b05c:	18000826 	beq	r3,zero,4b080 <__adddf3+0x760>
   4b060:	4808d0fa 	srli	r4,r9,3
   4b064:	20c0022c 	andhi	r3,r4,8
   4b068:	1800051e 	bne	r3,zero,4b080 <__adddf3+0x760>
   4b06c:	300cd0fa 	srli	r6,r6,3
   4b070:	4806977a 	slli	r3,r9,29
   4b074:	2005883a 	mov	r2,r4
   4b078:	3825883a 	mov	r18,r7
   4b07c:	19a2b03a 	or	r17,r3,r6
   4b080:	8810d77a 	srli	r8,r17,29
   4b084:	100490fa 	slli	r2,r2,3
   4b088:	882290fa 	slli	r17,r17,3
   4b08c:	0401ffc4 	movi	r16,2047
   4b090:	4090b03a 	or	r8,r8,r2
   4b094:	003e4106 	br	4a99c <__alt_data_end+0xfffea99c>
   4b098:	0141ffc4 	movi	r5,2047
   4b09c:	117fc71e 	bne	r2,r5,4afbc <__alt_data_end+0xfffeafbc>
   4b0a0:	4811883a 	mov	r8,r9
   4b0a4:	3023883a 	mov	r17,r6
   4b0a8:	1021883a 	mov	r16,r2
   4b0ac:	003e3b06 	br	4a99c <__alt_data_end+0xfffea99c>
   4b0b0:	10002f26 	beq	r2,zero,4b170 <__adddf3+0x850>
   4b0b4:	4984b03a 	or	r2,r9,r6
   4b0b8:	10001126 	beq	r2,zero,4b100 <__adddf3+0x7e0>
   4b0bc:	4004d0fa 	srli	r2,r8,3
   4b0c0:	8822d0fa 	srli	r17,r17,3
   4b0c4:	4010977a 	slli	r8,r8,29
   4b0c8:	10c0022c 	andhi	r3,r2,8
   4b0cc:	4462b03a 	or	r17,r8,r17
   4b0d0:	183feb26 	beq	r3,zero,4b080 <__alt_data_end+0xfffeb080>
   4b0d4:	4808d0fa 	srli	r4,r9,3
   4b0d8:	20c0022c 	andhi	r3,r4,8
   4b0dc:	183fe81e 	bne	r3,zero,4b080 <__alt_data_end+0xfffeb080>
   4b0e0:	300cd0fa 	srli	r6,r6,3
   4b0e4:	4806977a 	slli	r3,r9,29
   4b0e8:	2005883a 	mov	r2,r4
   4b0ec:	19a2b03a 	or	r17,r3,r6
   4b0f0:	003fe306 	br	4b080 <__alt_data_end+0xfffeb080>
   4b0f4:	0011883a 	mov	r8,zero
   4b0f8:	0005883a 	mov	r2,zero
   4b0fc:	003e3f06 	br	4a9fc <__alt_data_end+0xfffea9fc>
   4b100:	0401ffc4 	movi	r16,2047
   4b104:	003e2506 	br	4a99c <__alt_data_end+0xfffea99c>
   4b108:	0013883a 	mov	r9,zero
   4b10c:	003f8406 	br	4af20 <__alt_data_end+0xfffeaf20>
   4b110:	0005883a 	mov	r2,zero
   4b114:	0007883a 	mov	r3,zero
   4b118:	003e8906 	br	4ab40 <__alt_data_end+0xfffeab40>
   4b11c:	197ff804 	addi	r5,r3,-32
   4b120:	01000804 	movi	r4,32
   4b124:	414ad83a 	srl	r5,r8,r5
   4b128:	19002426 	beq	r3,r4,4b1bc <__adddf3+0x89c>
   4b12c:	01001004 	movi	r4,64
   4b130:	20c7c83a 	sub	r3,r4,r3
   4b134:	40c6983a 	sll	r3,r8,r3
   4b138:	1c46b03a 	or	r3,r3,r17
   4b13c:	1806c03a 	cmpne	r3,r3,zero
   4b140:	28e2b03a 	or	r17,r5,r3
   4b144:	0007883a 	mov	r3,zero
   4b148:	003f2306 	br	4add8 <__alt_data_end+0xfffeadd8>
   4b14c:	0007883a 	mov	r3,zero
   4b150:	5811883a 	mov	r8,r11
   4b154:	00bfffc4 	movi	r2,-1
   4b158:	0401ffc4 	movi	r16,2047
   4b15c:	003e7806 	br	4ab40 <__alt_data_end+0xfffeab40>
   4b160:	4462b03a 	or	r17,r8,r17
   4b164:	8822c03a 	cmpne	r17,r17,zero
   4b168:	0009883a 	mov	r4,zero
   4b16c:	003fa006 	br	4aff0 <__alt_data_end+0xfffeaff0>
   4b170:	4811883a 	mov	r8,r9
   4b174:	3023883a 	mov	r17,r6
   4b178:	0401ffc4 	movi	r16,2047
   4b17c:	003e0706 	br	4a99c <__alt_data_end+0xfffea99c>
   4b180:	4811883a 	mov	r8,r9
   4b184:	3023883a 	mov	r17,r6
   4b188:	003e0406 	br	4a99c <__alt_data_end+0xfffea99c>
   4b18c:	21fff804 	addi	r7,r4,-32
   4b190:	01400804 	movi	r5,32
   4b194:	41ced83a 	srl	r7,r8,r7
   4b198:	21400a26 	beq	r4,r5,4b1c4 <__adddf3+0x8a4>
   4b19c:	01401004 	movi	r5,64
   4b1a0:	2909c83a 	sub	r4,r5,r4
   4b1a4:	4108983a 	sll	r4,r8,r4
   4b1a8:	2448b03a 	or	r4,r4,r17
   4b1ac:	2008c03a 	cmpne	r4,r4,zero
   4b1b0:	3922b03a 	or	r17,r7,r4
   4b1b4:	0009883a 	mov	r4,zero
   4b1b8:	003f8d06 	br	4aff0 <__alt_data_end+0xfffeaff0>
   4b1bc:	0007883a 	mov	r3,zero
   4b1c0:	003fdd06 	br	4b138 <__alt_data_end+0xfffeb138>
   4b1c4:	0009883a 	mov	r4,zero
   4b1c8:	003ff706 	br	4b1a8 <__alt_data_end+0xfffeb1a8>

0004b1cc <__divdf3>:
   4b1cc:	defff204 	addi	sp,sp,-56
   4b1d0:	dd400915 	stw	r21,36(sp)
   4b1d4:	282ad53a 	srli	r21,r5,20
   4b1d8:	dd000815 	stw	r20,32(sp)
   4b1dc:	2828d7fa 	srli	r20,r5,31
   4b1e0:	dc000415 	stw	r16,16(sp)
   4b1e4:	04000434 	movhi	r16,16
   4b1e8:	df000c15 	stw	fp,48(sp)
   4b1ec:	843fffc4 	addi	r16,r16,-1
   4b1f0:	dfc00d15 	stw	ra,52(sp)
   4b1f4:	ddc00b15 	stw	r23,44(sp)
   4b1f8:	dd800a15 	stw	r22,40(sp)
   4b1fc:	dcc00715 	stw	r19,28(sp)
   4b200:	dc800615 	stw	r18,24(sp)
   4b204:	dc400515 	stw	r17,20(sp)
   4b208:	ad41ffcc 	andi	r21,r21,2047
   4b20c:	2c20703a 	and	r16,r5,r16
   4b210:	a7003fcc 	andi	fp,r20,255
   4b214:	a8006126 	beq	r21,zero,4b39c <__divdf3+0x1d0>
   4b218:	0081ffc4 	movi	r2,2047
   4b21c:	2025883a 	mov	r18,r4
   4b220:	a8803726 	beq	r21,r2,4b300 <__divdf3+0x134>
   4b224:	80800434 	orhi	r2,r16,16
   4b228:	100490fa 	slli	r2,r2,3
   4b22c:	2020d77a 	srli	r16,r4,29
   4b230:	202490fa 	slli	r18,r4,3
   4b234:	ad7f0044 	addi	r21,r21,-1023
   4b238:	80a0b03a 	or	r16,r16,r2
   4b23c:	0027883a 	mov	r19,zero
   4b240:	0013883a 	mov	r9,zero
   4b244:	3804d53a 	srli	r2,r7,20
   4b248:	382cd7fa 	srli	r22,r7,31
   4b24c:	04400434 	movhi	r17,16
   4b250:	8c7fffc4 	addi	r17,r17,-1
   4b254:	1081ffcc 	andi	r2,r2,2047
   4b258:	3011883a 	mov	r8,r6
   4b25c:	3c62703a 	and	r17,r7,r17
   4b260:	b5c03fcc 	andi	r23,r22,255
   4b264:	10006c26 	beq	r2,zero,4b418 <__divdf3+0x24c>
   4b268:	00c1ffc4 	movi	r3,2047
   4b26c:	10c06426 	beq	r2,r3,4b400 <__divdf3+0x234>
   4b270:	88c00434 	orhi	r3,r17,16
   4b274:	180690fa 	slli	r3,r3,3
   4b278:	3022d77a 	srli	r17,r6,29
   4b27c:	301090fa 	slli	r8,r6,3
   4b280:	10bf0044 	addi	r2,r2,-1023
   4b284:	88e2b03a 	or	r17,r17,r3
   4b288:	000f883a 	mov	r7,zero
   4b28c:	a58cf03a 	xor	r6,r20,r22
   4b290:	3cc8b03a 	or	r4,r7,r19
   4b294:	a8abc83a 	sub	r21,r21,r2
   4b298:	008003c4 	movi	r2,15
   4b29c:	3007883a 	mov	r3,r6
   4b2a0:	34c03fcc 	andi	r19,r6,255
   4b2a4:	11009036 	bltu	r2,r4,4b4e8 <__divdf3+0x31c>
   4b2a8:	200890ba 	slli	r4,r4,2
   4b2ac:	00800174 	movhi	r2,5
   4b2b0:	10acb004 	addi	r2,r2,-19776
   4b2b4:	2089883a 	add	r4,r4,r2
   4b2b8:	20800017 	ldw	r2,0(r4)
   4b2bc:	1000683a 	jmp	r2
   4b2c0:	0004b4e8 	cmpgeui	zero,zero,4819
   4b2c4:	0004b338 	rdprs	zero,zero,4812
   4b2c8:	0004b4d8 	cmpnei	zero,zero,4819
   4b2cc:	0004b32c 	andhi	zero,zero,4812
   4b2d0:	0004b4d8 	cmpnei	zero,zero,4819
   4b2d4:	0004b4ac 	andhi	zero,zero,4818
   4b2d8:	0004b4d8 	cmpnei	zero,zero,4819
   4b2dc:	0004b32c 	andhi	zero,zero,4812
   4b2e0:	0004b338 	rdprs	zero,zero,4812
   4b2e4:	0004b338 	rdprs	zero,zero,4812
   4b2e8:	0004b4ac 	andhi	zero,zero,4818
   4b2ec:	0004b32c 	andhi	zero,zero,4812
   4b2f0:	0004b31c 	xori	zero,zero,4812
   4b2f4:	0004b31c 	xori	zero,zero,4812
   4b2f8:	0004b31c 	xori	zero,zero,4812
   4b2fc:	0004b7cc 	andi	zero,zero,4831
   4b300:	2404b03a 	or	r2,r4,r16
   4b304:	1000661e 	bne	r2,zero,4b4a0 <__divdf3+0x2d4>
   4b308:	04c00204 	movi	r19,8
   4b30c:	0021883a 	mov	r16,zero
   4b310:	0025883a 	mov	r18,zero
   4b314:	02400084 	movi	r9,2
   4b318:	003fca06 	br	4b244 <__alt_data_end+0xfffeb244>
   4b31c:	8023883a 	mov	r17,r16
   4b320:	9011883a 	mov	r8,r18
   4b324:	e02f883a 	mov	r23,fp
   4b328:	480f883a 	mov	r7,r9
   4b32c:	00800084 	movi	r2,2
   4b330:	3881311e 	bne	r7,r2,4b7f8 <__divdf3+0x62c>
   4b334:	b827883a 	mov	r19,r23
   4b338:	98c0004c 	andi	r3,r19,1
   4b33c:	0081ffc4 	movi	r2,2047
   4b340:	000b883a 	mov	r5,zero
   4b344:	0025883a 	mov	r18,zero
   4b348:	1004953a 	slli	r2,r2,20
   4b34c:	18c03fcc 	andi	r3,r3,255
   4b350:	04400434 	movhi	r17,16
   4b354:	8c7fffc4 	addi	r17,r17,-1
   4b358:	180697fa 	slli	r3,r3,31
   4b35c:	2c4a703a 	and	r5,r5,r17
   4b360:	288ab03a 	or	r5,r5,r2
   4b364:	28c6b03a 	or	r3,r5,r3
   4b368:	9005883a 	mov	r2,r18
   4b36c:	dfc00d17 	ldw	ra,52(sp)
   4b370:	df000c17 	ldw	fp,48(sp)
   4b374:	ddc00b17 	ldw	r23,44(sp)
   4b378:	dd800a17 	ldw	r22,40(sp)
   4b37c:	dd400917 	ldw	r21,36(sp)
   4b380:	dd000817 	ldw	r20,32(sp)
   4b384:	dcc00717 	ldw	r19,28(sp)
   4b388:	dc800617 	ldw	r18,24(sp)
   4b38c:	dc400517 	ldw	r17,20(sp)
   4b390:	dc000417 	ldw	r16,16(sp)
   4b394:	dec00e04 	addi	sp,sp,56
   4b398:	f800283a 	ret
   4b39c:	2404b03a 	or	r2,r4,r16
   4b3a0:	2027883a 	mov	r19,r4
   4b3a4:	10003926 	beq	r2,zero,4b48c <__divdf3+0x2c0>
   4b3a8:	80012e26 	beq	r16,zero,4b864 <__divdf3+0x698>
   4b3ac:	8009883a 	mov	r4,r16
   4b3b0:	d9800315 	stw	r6,12(sp)
   4b3b4:	d9c00215 	stw	r7,8(sp)
   4b3b8:	004cf240 	call	4cf24 <__clzsi2>
   4b3bc:	d9800317 	ldw	r6,12(sp)
   4b3c0:	d9c00217 	ldw	r7,8(sp)
   4b3c4:	113ffd44 	addi	r4,r2,-11
   4b3c8:	00c00704 	movi	r3,28
   4b3cc:	19012116 	blt	r3,r4,4b854 <__divdf3+0x688>
   4b3d0:	00c00744 	movi	r3,29
   4b3d4:	147ffe04 	addi	r17,r2,-8
   4b3d8:	1907c83a 	sub	r3,r3,r4
   4b3dc:	8460983a 	sll	r16,r16,r17
   4b3e0:	98c6d83a 	srl	r3,r19,r3
   4b3e4:	9c64983a 	sll	r18,r19,r17
   4b3e8:	1c20b03a 	or	r16,r3,r16
   4b3ec:	1080fcc4 	addi	r2,r2,1011
   4b3f0:	00abc83a 	sub	r21,zero,r2
   4b3f4:	0027883a 	mov	r19,zero
   4b3f8:	0013883a 	mov	r9,zero
   4b3fc:	003f9106 	br	4b244 <__alt_data_end+0xfffeb244>
   4b400:	3446b03a 	or	r3,r6,r17
   4b404:	18001f1e 	bne	r3,zero,4b484 <__divdf3+0x2b8>
   4b408:	0023883a 	mov	r17,zero
   4b40c:	0011883a 	mov	r8,zero
   4b410:	01c00084 	movi	r7,2
   4b414:	003f9d06 	br	4b28c <__alt_data_end+0xfffeb28c>
   4b418:	3446b03a 	or	r3,r6,r17
   4b41c:	18001526 	beq	r3,zero,4b474 <__divdf3+0x2a8>
   4b420:	88011b26 	beq	r17,zero,4b890 <__divdf3+0x6c4>
   4b424:	8809883a 	mov	r4,r17
   4b428:	d9800315 	stw	r6,12(sp)
   4b42c:	da400115 	stw	r9,4(sp)
   4b430:	004cf240 	call	4cf24 <__clzsi2>
   4b434:	d9800317 	ldw	r6,12(sp)
   4b438:	da400117 	ldw	r9,4(sp)
   4b43c:	113ffd44 	addi	r4,r2,-11
   4b440:	00c00704 	movi	r3,28
   4b444:	19010e16 	blt	r3,r4,4b880 <__divdf3+0x6b4>
   4b448:	00c00744 	movi	r3,29
   4b44c:	123ffe04 	addi	r8,r2,-8
   4b450:	1907c83a 	sub	r3,r3,r4
   4b454:	8a22983a 	sll	r17,r17,r8
   4b458:	30c6d83a 	srl	r3,r6,r3
   4b45c:	3210983a 	sll	r8,r6,r8
   4b460:	1c62b03a 	or	r17,r3,r17
   4b464:	1080fcc4 	addi	r2,r2,1011
   4b468:	0085c83a 	sub	r2,zero,r2
   4b46c:	000f883a 	mov	r7,zero
   4b470:	003f8606 	br	4b28c <__alt_data_end+0xfffeb28c>
   4b474:	0023883a 	mov	r17,zero
   4b478:	0011883a 	mov	r8,zero
   4b47c:	01c00044 	movi	r7,1
   4b480:	003f8206 	br	4b28c <__alt_data_end+0xfffeb28c>
   4b484:	01c000c4 	movi	r7,3
   4b488:	003f8006 	br	4b28c <__alt_data_end+0xfffeb28c>
   4b48c:	04c00104 	movi	r19,4
   4b490:	0021883a 	mov	r16,zero
   4b494:	0025883a 	mov	r18,zero
   4b498:	02400044 	movi	r9,1
   4b49c:	003f6906 	br	4b244 <__alt_data_end+0xfffeb244>
   4b4a0:	04c00304 	movi	r19,12
   4b4a4:	024000c4 	movi	r9,3
   4b4a8:	003f6606 	br	4b244 <__alt_data_end+0xfffeb244>
   4b4ac:	01400434 	movhi	r5,16
   4b4b0:	0007883a 	mov	r3,zero
   4b4b4:	297fffc4 	addi	r5,r5,-1
   4b4b8:	04bfffc4 	movi	r18,-1
   4b4bc:	0081ffc4 	movi	r2,2047
   4b4c0:	003fa106 	br	4b348 <__alt_data_end+0xfffeb348>
   4b4c4:	00c00044 	movi	r3,1
   4b4c8:	1887c83a 	sub	r3,r3,r2
   4b4cc:	01000e04 	movi	r4,56
   4b4d0:	20c1210e 	bge	r4,r3,4b958 <__divdf3+0x78c>
   4b4d4:	98c0004c 	andi	r3,r19,1
   4b4d8:	0005883a 	mov	r2,zero
   4b4dc:	000b883a 	mov	r5,zero
   4b4e0:	0025883a 	mov	r18,zero
   4b4e4:	003f9806 	br	4b348 <__alt_data_end+0xfffeb348>
   4b4e8:	8c00fd36 	bltu	r17,r16,4b8e0 <__divdf3+0x714>
   4b4ec:	8440fb26 	beq	r16,r17,4b8dc <__divdf3+0x710>
   4b4f0:	8007883a 	mov	r3,r16
   4b4f4:	ad7fffc4 	addi	r21,r21,-1
   4b4f8:	0021883a 	mov	r16,zero
   4b4fc:	4004d63a 	srli	r2,r8,24
   4b500:	8822923a 	slli	r17,r17,8
   4b504:	1809883a 	mov	r4,r3
   4b508:	402c923a 	slli	r22,r8,8
   4b50c:	88b8b03a 	or	fp,r17,r2
   4b510:	e028d43a 	srli	r20,fp,16
   4b514:	d8c00015 	stw	r3,0(sp)
   4b518:	e5ffffcc 	andi	r23,fp,65535
   4b51c:	a00b883a 	mov	r5,r20
   4b520:	004a8640 	call	4a864 <__udivsi3>
   4b524:	d8c00017 	ldw	r3,0(sp)
   4b528:	a00b883a 	mov	r5,r20
   4b52c:	d8800315 	stw	r2,12(sp)
   4b530:	1809883a 	mov	r4,r3
   4b534:	004a8c80 	call	4a8c8 <__umodsi3>
   4b538:	d9800317 	ldw	r6,12(sp)
   4b53c:	1006943a 	slli	r3,r2,16
   4b540:	9004d43a 	srli	r2,r18,16
   4b544:	b9a3383a 	mul	r17,r23,r6
   4b548:	10c4b03a 	or	r2,r2,r3
   4b54c:	1440062e 	bgeu	r2,r17,4b568 <__divdf3+0x39c>
   4b550:	1705883a 	add	r2,r2,fp
   4b554:	30ffffc4 	addi	r3,r6,-1
   4b558:	1700ee36 	bltu	r2,fp,4b914 <__divdf3+0x748>
   4b55c:	1440ed2e 	bgeu	r2,r17,4b914 <__divdf3+0x748>
   4b560:	31bfff84 	addi	r6,r6,-2
   4b564:	1705883a 	add	r2,r2,fp
   4b568:	1463c83a 	sub	r17,r2,r17
   4b56c:	a00b883a 	mov	r5,r20
   4b570:	8809883a 	mov	r4,r17
   4b574:	d9800315 	stw	r6,12(sp)
   4b578:	004a8640 	call	4a864 <__udivsi3>
   4b57c:	a00b883a 	mov	r5,r20
   4b580:	8809883a 	mov	r4,r17
   4b584:	d8800215 	stw	r2,8(sp)
   4b588:	004a8c80 	call	4a8c8 <__umodsi3>
   4b58c:	d9c00217 	ldw	r7,8(sp)
   4b590:	1004943a 	slli	r2,r2,16
   4b594:	94bfffcc 	andi	r18,r18,65535
   4b598:	b9d1383a 	mul	r8,r23,r7
   4b59c:	90a4b03a 	or	r18,r18,r2
   4b5a0:	d9800317 	ldw	r6,12(sp)
   4b5a4:	9200062e 	bgeu	r18,r8,4b5c0 <__divdf3+0x3f4>
   4b5a8:	9725883a 	add	r18,r18,fp
   4b5ac:	38bfffc4 	addi	r2,r7,-1
   4b5b0:	9700d636 	bltu	r18,fp,4b90c <__divdf3+0x740>
   4b5b4:	9200d52e 	bgeu	r18,r8,4b90c <__divdf3+0x740>
   4b5b8:	39ffff84 	addi	r7,r7,-2
   4b5bc:	9725883a 	add	r18,r18,fp
   4b5c0:	3004943a 	slli	r2,r6,16
   4b5c4:	b012d43a 	srli	r9,r22,16
   4b5c8:	b1bfffcc 	andi	r6,r22,65535
   4b5cc:	11e2b03a 	or	r17,r2,r7
   4b5d0:	8806d43a 	srli	r3,r17,16
   4b5d4:	893fffcc 	andi	r4,r17,65535
   4b5d8:	218b383a 	mul	r5,r4,r6
   4b5dc:	30c5383a 	mul	r2,r6,r3
   4b5e0:	2249383a 	mul	r4,r4,r9
   4b5e4:	280ed43a 	srli	r7,r5,16
   4b5e8:	9225c83a 	sub	r18,r18,r8
   4b5ec:	2089883a 	add	r4,r4,r2
   4b5f0:	3909883a 	add	r4,r7,r4
   4b5f4:	1a47383a 	mul	r3,r3,r9
   4b5f8:	2080022e 	bgeu	r4,r2,4b604 <__divdf3+0x438>
   4b5fc:	00800074 	movhi	r2,1
   4b600:	1887883a 	add	r3,r3,r2
   4b604:	2004d43a 	srli	r2,r4,16
   4b608:	2008943a 	slli	r4,r4,16
   4b60c:	297fffcc 	andi	r5,r5,65535
   4b610:	10c7883a 	add	r3,r2,r3
   4b614:	2149883a 	add	r4,r4,r5
   4b618:	90c0a536 	bltu	r18,r3,4b8b0 <__divdf3+0x6e4>
   4b61c:	90c0bf26 	beq	r18,r3,4b91c <__divdf3+0x750>
   4b620:	90c7c83a 	sub	r3,r18,r3
   4b624:	810fc83a 	sub	r7,r16,r4
   4b628:	81e5803a 	cmpltu	r18,r16,r7
   4b62c:	1ca5c83a 	sub	r18,r3,r18
   4b630:	e480c126 	beq	fp,r18,4b938 <__divdf3+0x76c>
   4b634:	a00b883a 	mov	r5,r20
   4b638:	9009883a 	mov	r4,r18
   4b63c:	d9800315 	stw	r6,12(sp)
   4b640:	d9c00215 	stw	r7,8(sp)
   4b644:	da400115 	stw	r9,4(sp)
   4b648:	004a8640 	call	4a864 <__udivsi3>
   4b64c:	a00b883a 	mov	r5,r20
   4b650:	9009883a 	mov	r4,r18
   4b654:	d8800015 	stw	r2,0(sp)
   4b658:	004a8c80 	call	4a8c8 <__umodsi3>
   4b65c:	d9c00217 	ldw	r7,8(sp)
   4b660:	da000017 	ldw	r8,0(sp)
   4b664:	1006943a 	slli	r3,r2,16
   4b668:	3804d43a 	srli	r2,r7,16
   4b66c:	ba21383a 	mul	r16,r23,r8
   4b670:	d9800317 	ldw	r6,12(sp)
   4b674:	10c4b03a 	or	r2,r2,r3
   4b678:	da400117 	ldw	r9,4(sp)
   4b67c:	1400062e 	bgeu	r2,r16,4b698 <__divdf3+0x4cc>
   4b680:	1705883a 	add	r2,r2,fp
   4b684:	40ffffc4 	addi	r3,r8,-1
   4b688:	1700ad36 	bltu	r2,fp,4b940 <__divdf3+0x774>
   4b68c:	1400ac2e 	bgeu	r2,r16,4b940 <__divdf3+0x774>
   4b690:	423fff84 	addi	r8,r8,-2
   4b694:	1705883a 	add	r2,r2,fp
   4b698:	1421c83a 	sub	r16,r2,r16
   4b69c:	a00b883a 	mov	r5,r20
   4b6a0:	8009883a 	mov	r4,r16
   4b6a4:	d9800315 	stw	r6,12(sp)
   4b6a8:	d9c00215 	stw	r7,8(sp)
   4b6ac:	da000015 	stw	r8,0(sp)
   4b6b0:	da400115 	stw	r9,4(sp)
   4b6b4:	004a8640 	call	4a864 <__udivsi3>
   4b6b8:	8009883a 	mov	r4,r16
   4b6bc:	a00b883a 	mov	r5,r20
   4b6c0:	1025883a 	mov	r18,r2
   4b6c4:	004a8c80 	call	4a8c8 <__umodsi3>
   4b6c8:	d9c00217 	ldw	r7,8(sp)
   4b6cc:	1004943a 	slli	r2,r2,16
   4b6d0:	bcaf383a 	mul	r23,r23,r18
   4b6d4:	393fffcc 	andi	r4,r7,65535
   4b6d8:	2088b03a 	or	r4,r4,r2
   4b6dc:	d9800317 	ldw	r6,12(sp)
   4b6e0:	da000017 	ldw	r8,0(sp)
   4b6e4:	da400117 	ldw	r9,4(sp)
   4b6e8:	25c0062e 	bgeu	r4,r23,4b704 <__divdf3+0x538>
   4b6ec:	2709883a 	add	r4,r4,fp
   4b6f0:	90bfffc4 	addi	r2,r18,-1
   4b6f4:	27009436 	bltu	r4,fp,4b948 <__divdf3+0x77c>
   4b6f8:	25c0932e 	bgeu	r4,r23,4b948 <__divdf3+0x77c>
   4b6fc:	94bfff84 	addi	r18,r18,-2
   4b700:	2709883a 	add	r4,r4,fp
   4b704:	4004943a 	slli	r2,r8,16
   4b708:	25efc83a 	sub	r23,r4,r23
   4b70c:	1490b03a 	or	r8,r2,r18
   4b710:	4008d43a 	srli	r4,r8,16
   4b714:	40ffffcc 	andi	r3,r8,65535
   4b718:	30c5383a 	mul	r2,r6,r3
   4b71c:	1a47383a 	mul	r3,r3,r9
   4b720:	310d383a 	mul	r6,r6,r4
   4b724:	100ad43a 	srli	r5,r2,16
   4b728:	4913383a 	mul	r9,r9,r4
   4b72c:	1987883a 	add	r3,r3,r6
   4b730:	28c7883a 	add	r3,r5,r3
   4b734:	1980022e 	bgeu	r3,r6,4b740 <__divdf3+0x574>
   4b738:	01000074 	movhi	r4,1
   4b73c:	4913883a 	add	r9,r9,r4
   4b740:	1808d43a 	srli	r4,r3,16
   4b744:	1806943a 	slli	r3,r3,16
   4b748:	10bfffcc 	andi	r2,r2,65535
   4b74c:	2253883a 	add	r9,r4,r9
   4b750:	1887883a 	add	r3,r3,r2
   4b754:	ba403836 	bltu	r23,r9,4b838 <__divdf3+0x66c>
   4b758:	ba403626 	beq	r23,r9,4b834 <__divdf3+0x668>
   4b75c:	42000054 	ori	r8,r8,1
   4b760:	a880ffc4 	addi	r2,r21,1023
   4b764:	00bf570e 	bge	zero,r2,4b4c4 <__alt_data_end+0xfffeb4c4>
   4b768:	40c001cc 	andi	r3,r8,7
   4b76c:	18000726 	beq	r3,zero,4b78c <__divdf3+0x5c0>
   4b770:	40c003cc 	andi	r3,r8,15
   4b774:	01000104 	movi	r4,4
   4b778:	19000426 	beq	r3,r4,4b78c <__divdf3+0x5c0>
   4b77c:	4107883a 	add	r3,r8,r4
   4b780:	1a11803a 	cmpltu	r8,r3,r8
   4b784:	8a23883a 	add	r17,r17,r8
   4b788:	1811883a 	mov	r8,r3
   4b78c:	88c0402c 	andhi	r3,r17,256
   4b790:	18000426 	beq	r3,zero,4b7a4 <__divdf3+0x5d8>
   4b794:	00ffc034 	movhi	r3,65280
   4b798:	18ffffc4 	addi	r3,r3,-1
   4b79c:	a8810004 	addi	r2,r21,1024
   4b7a0:	88e2703a 	and	r17,r17,r3
   4b7a4:	00c1ff84 	movi	r3,2046
   4b7a8:	18bee316 	blt	r3,r2,4b338 <__alt_data_end+0xfffeb338>
   4b7ac:	8824977a 	slli	r18,r17,29
   4b7b0:	4010d0fa 	srli	r8,r8,3
   4b7b4:	8822927a 	slli	r17,r17,9
   4b7b8:	1081ffcc 	andi	r2,r2,2047
   4b7bc:	9224b03a 	or	r18,r18,r8
   4b7c0:	880ad33a 	srli	r5,r17,12
   4b7c4:	98c0004c 	andi	r3,r19,1
   4b7c8:	003edf06 	br	4b348 <__alt_data_end+0xfffeb348>
   4b7cc:	8080022c 	andhi	r2,r16,8
   4b7d0:	10001226 	beq	r2,zero,4b81c <__divdf3+0x650>
   4b7d4:	8880022c 	andhi	r2,r17,8
   4b7d8:	1000101e 	bne	r2,zero,4b81c <__divdf3+0x650>
   4b7dc:	00800434 	movhi	r2,16
   4b7e0:	89400234 	orhi	r5,r17,8
   4b7e4:	10bfffc4 	addi	r2,r2,-1
   4b7e8:	b007883a 	mov	r3,r22
   4b7ec:	288a703a 	and	r5,r5,r2
   4b7f0:	4025883a 	mov	r18,r8
   4b7f4:	003f3106 	br	4b4bc <__alt_data_end+0xfffeb4bc>
   4b7f8:	008000c4 	movi	r2,3
   4b7fc:	3880a626 	beq	r7,r2,4ba98 <__divdf3+0x8cc>
   4b800:	00800044 	movi	r2,1
   4b804:	3880521e 	bne	r7,r2,4b950 <__divdf3+0x784>
   4b808:	b807883a 	mov	r3,r23
   4b80c:	0005883a 	mov	r2,zero
   4b810:	000b883a 	mov	r5,zero
   4b814:	0025883a 	mov	r18,zero
   4b818:	003ecb06 	br	4b348 <__alt_data_end+0xfffeb348>
   4b81c:	00800434 	movhi	r2,16
   4b820:	81400234 	orhi	r5,r16,8
   4b824:	10bfffc4 	addi	r2,r2,-1
   4b828:	a007883a 	mov	r3,r20
   4b82c:	288a703a 	and	r5,r5,r2
   4b830:	003f2206 	br	4b4bc <__alt_data_end+0xfffeb4bc>
   4b834:	183fca26 	beq	r3,zero,4b760 <__alt_data_end+0xfffeb760>
   4b838:	e5ef883a 	add	r23,fp,r23
   4b83c:	40bfffc4 	addi	r2,r8,-1
   4b840:	bf00392e 	bgeu	r23,fp,4b928 <__divdf3+0x75c>
   4b844:	1011883a 	mov	r8,r2
   4b848:	ba7fc41e 	bne	r23,r9,4b75c <__alt_data_end+0xfffeb75c>
   4b84c:	b0ffc31e 	bne	r22,r3,4b75c <__alt_data_end+0xfffeb75c>
   4b850:	003fc306 	br	4b760 <__alt_data_end+0xfffeb760>
   4b854:	143ff604 	addi	r16,r2,-40
   4b858:	9c20983a 	sll	r16,r19,r16
   4b85c:	0025883a 	mov	r18,zero
   4b860:	003ee206 	br	4b3ec <__alt_data_end+0xfffeb3ec>
   4b864:	d9800315 	stw	r6,12(sp)
   4b868:	d9c00215 	stw	r7,8(sp)
   4b86c:	004cf240 	call	4cf24 <__clzsi2>
   4b870:	10800804 	addi	r2,r2,32
   4b874:	d9c00217 	ldw	r7,8(sp)
   4b878:	d9800317 	ldw	r6,12(sp)
   4b87c:	003ed106 	br	4b3c4 <__alt_data_end+0xfffeb3c4>
   4b880:	147ff604 	addi	r17,r2,-40
   4b884:	3462983a 	sll	r17,r6,r17
   4b888:	0011883a 	mov	r8,zero
   4b88c:	003ef506 	br	4b464 <__alt_data_end+0xfffeb464>
   4b890:	3009883a 	mov	r4,r6
   4b894:	d9800315 	stw	r6,12(sp)
   4b898:	da400115 	stw	r9,4(sp)
   4b89c:	004cf240 	call	4cf24 <__clzsi2>
   4b8a0:	10800804 	addi	r2,r2,32
   4b8a4:	da400117 	ldw	r9,4(sp)
   4b8a8:	d9800317 	ldw	r6,12(sp)
   4b8ac:	003ee306 	br	4b43c <__alt_data_end+0xfffeb43c>
   4b8b0:	85a1883a 	add	r16,r16,r22
   4b8b4:	8585803a 	cmpltu	r2,r16,r22
   4b8b8:	1705883a 	add	r2,r2,fp
   4b8bc:	14a5883a 	add	r18,r2,r18
   4b8c0:	88bfffc4 	addi	r2,r17,-1
   4b8c4:	e4800c2e 	bgeu	fp,r18,4b8f8 <__divdf3+0x72c>
   4b8c8:	90c03e36 	bltu	r18,r3,4b9c4 <__divdf3+0x7f8>
   4b8cc:	1c806926 	beq	r3,r18,4ba74 <__divdf3+0x8a8>
   4b8d0:	90c7c83a 	sub	r3,r18,r3
   4b8d4:	1023883a 	mov	r17,r2
   4b8d8:	003f5206 	br	4b624 <__alt_data_end+0xfffeb624>
   4b8dc:	923f0436 	bltu	r18,r8,4b4f0 <__alt_data_end+0xfffeb4f0>
   4b8e0:	800897fa 	slli	r4,r16,31
   4b8e4:	9004d07a 	srli	r2,r18,1
   4b8e8:	8006d07a 	srli	r3,r16,1
   4b8ec:	902097fa 	slli	r16,r18,31
   4b8f0:	20a4b03a 	or	r18,r4,r2
   4b8f4:	003f0106 	br	4b4fc <__alt_data_end+0xfffeb4fc>
   4b8f8:	e4bff51e 	bne	fp,r18,4b8d0 <__alt_data_end+0xfffeb8d0>
   4b8fc:	85bff22e 	bgeu	r16,r22,4b8c8 <__alt_data_end+0xfffeb8c8>
   4b900:	e0c7c83a 	sub	r3,fp,r3
   4b904:	1023883a 	mov	r17,r2
   4b908:	003f4606 	br	4b624 <__alt_data_end+0xfffeb624>
   4b90c:	100f883a 	mov	r7,r2
   4b910:	003f2b06 	br	4b5c0 <__alt_data_end+0xfffeb5c0>
   4b914:	180d883a 	mov	r6,r3
   4b918:	003f1306 	br	4b568 <__alt_data_end+0xfffeb568>
   4b91c:	813fe436 	bltu	r16,r4,4b8b0 <__alt_data_end+0xfffeb8b0>
   4b920:	0007883a 	mov	r3,zero
   4b924:	003f3f06 	br	4b624 <__alt_data_end+0xfffeb624>
   4b928:	ba402c36 	bltu	r23,r9,4b9dc <__divdf3+0x810>
   4b92c:	4dc05426 	beq	r9,r23,4ba80 <__divdf3+0x8b4>
   4b930:	1011883a 	mov	r8,r2
   4b934:	003f8906 	br	4b75c <__alt_data_end+0xfffeb75c>
   4b938:	023fffc4 	movi	r8,-1
   4b93c:	003f8806 	br	4b760 <__alt_data_end+0xfffeb760>
   4b940:	1811883a 	mov	r8,r3
   4b944:	003f5406 	br	4b698 <__alt_data_end+0xfffeb698>
   4b948:	1025883a 	mov	r18,r2
   4b94c:	003f6d06 	br	4b704 <__alt_data_end+0xfffeb704>
   4b950:	b827883a 	mov	r19,r23
   4b954:	003f8206 	br	4b760 <__alt_data_end+0xfffeb760>
   4b958:	010007c4 	movi	r4,31
   4b95c:	20c02616 	blt	r4,r3,4b9f8 <__divdf3+0x82c>
   4b960:	00800804 	movi	r2,32
   4b964:	10c5c83a 	sub	r2,r2,r3
   4b968:	888a983a 	sll	r5,r17,r2
   4b96c:	40c8d83a 	srl	r4,r8,r3
   4b970:	4084983a 	sll	r2,r8,r2
   4b974:	88e2d83a 	srl	r17,r17,r3
   4b978:	2906b03a 	or	r3,r5,r4
   4b97c:	1004c03a 	cmpne	r2,r2,zero
   4b980:	1886b03a 	or	r3,r3,r2
   4b984:	188001cc 	andi	r2,r3,7
   4b988:	10000726 	beq	r2,zero,4b9a8 <__divdf3+0x7dc>
   4b98c:	188003cc 	andi	r2,r3,15
   4b990:	01000104 	movi	r4,4
   4b994:	11000426 	beq	r2,r4,4b9a8 <__divdf3+0x7dc>
   4b998:	1805883a 	mov	r2,r3
   4b99c:	10c00104 	addi	r3,r2,4
   4b9a0:	1885803a 	cmpltu	r2,r3,r2
   4b9a4:	88a3883a 	add	r17,r17,r2
   4b9a8:	8880202c 	andhi	r2,r17,128
   4b9ac:	10002726 	beq	r2,zero,4ba4c <__divdf3+0x880>
   4b9b0:	98c0004c 	andi	r3,r19,1
   4b9b4:	00800044 	movi	r2,1
   4b9b8:	000b883a 	mov	r5,zero
   4b9bc:	0025883a 	mov	r18,zero
   4b9c0:	003e6106 	br	4b348 <__alt_data_end+0xfffeb348>
   4b9c4:	85a1883a 	add	r16,r16,r22
   4b9c8:	8585803a 	cmpltu	r2,r16,r22
   4b9cc:	1705883a 	add	r2,r2,fp
   4b9d0:	14a5883a 	add	r18,r2,r18
   4b9d4:	8c7fff84 	addi	r17,r17,-2
   4b9d8:	003f1106 	br	4b620 <__alt_data_end+0xfffeb620>
   4b9dc:	b589883a 	add	r4,r22,r22
   4b9e0:	25ad803a 	cmpltu	r22,r4,r22
   4b9e4:	b739883a 	add	fp,r22,fp
   4b9e8:	40bfff84 	addi	r2,r8,-2
   4b9ec:	bf2f883a 	add	r23,r23,fp
   4b9f0:	202d883a 	mov	r22,r4
   4b9f4:	003f9306 	br	4b844 <__alt_data_end+0xfffeb844>
   4b9f8:	013ff844 	movi	r4,-31
   4b9fc:	2085c83a 	sub	r2,r4,r2
   4ba00:	8888d83a 	srl	r4,r17,r2
   4ba04:	00800804 	movi	r2,32
   4ba08:	18802126 	beq	r3,r2,4ba90 <__divdf3+0x8c4>
   4ba0c:	00801004 	movi	r2,64
   4ba10:	10c5c83a 	sub	r2,r2,r3
   4ba14:	8884983a 	sll	r2,r17,r2
   4ba18:	1204b03a 	or	r2,r2,r8
   4ba1c:	1004c03a 	cmpne	r2,r2,zero
   4ba20:	2084b03a 	or	r2,r4,r2
   4ba24:	144001cc 	andi	r17,r2,7
   4ba28:	88000d1e 	bne	r17,zero,4ba60 <__divdf3+0x894>
   4ba2c:	000b883a 	mov	r5,zero
   4ba30:	1024d0fa 	srli	r18,r2,3
   4ba34:	98c0004c 	andi	r3,r19,1
   4ba38:	0005883a 	mov	r2,zero
   4ba3c:	9464b03a 	or	r18,r18,r17
   4ba40:	003e4106 	br	4b348 <__alt_data_end+0xfffeb348>
   4ba44:	1007883a 	mov	r3,r2
   4ba48:	0023883a 	mov	r17,zero
   4ba4c:	880a927a 	slli	r5,r17,9
   4ba50:	1805883a 	mov	r2,r3
   4ba54:	8822977a 	slli	r17,r17,29
   4ba58:	280ad33a 	srli	r5,r5,12
   4ba5c:	003ff406 	br	4ba30 <__alt_data_end+0xfffeba30>
   4ba60:	10c003cc 	andi	r3,r2,15
   4ba64:	01000104 	movi	r4,4
   4ba68:	193ff626 	beq	r3,r4,4ba44 <__alt_data_end+0xfffeba44>
   4ba6c:	0023883a 	mov	r17,zero
   4ba70:	003fca06 	br	4b99c <__alt_data_end+0xfffeb99c>
   4ba74:	813fd336 	bltu	r16,r4,4b9c4 <__alt_data_end+0xfffeb9c4>
   4ba78:	1023883a 	mov	r17,r2
   4ba7c:	003fa806 	br	4b920 <__alt_data_end+0xfffeb920>
   4ba80:	b0ffd636 	bltu	r22,r3,4b9dc <__alt_data_end+0xfffeb9dc>
   4ba84:	1011883a 	mov	r8,r2
   4ba88:	b0ff341e 	bne	r22,r3,4b75c <__alt_data_end+0xfffeb75c>
   4ba8c:	003f3406 	br	4b760 <__alt_data_end+0xfffeb760>
   4ba90:	0005883a 	mov	r2,zero
   4ba94:	003fe006 	br	4ba18 <__alt_data_end+0xfffeba18>
   4ba98:	00800434 	movhi	r2,16
   4ba9c:	89400234 	orhi	r5,r17,8
   4baa0:	10bfffc4 	addi	r2,r2,-1
   4baa4:	b807883a 	mov	r3,r23
   4baa8:	288a703a 	and	r5,r5,r2
   4baac:	4025883a 	mov	r18,r8
   4bab0:	003e8206 	br	4b4bc <__alt_data_end+0xfffeb4bc>

0004bab4 <__eqdf2>:
   4bab4:	2804d53a 	srli	r2,r5,20
   4bab8:	3806d53a 	srli	r3,r7,20
   4babc:	02000434 	movhi	r8,16
   4bac0:	423fffc4 	addi	r8,r8,-1
   4bac4:	1081ffcc 	andi	r2,r2,2047
   4bac8:	0281ffc4 	movi	r10,2047
   4bacc:	2a12703a 	and	r9,r5,r8
   4bad0:	18c1ffcc 	andi	r3,r3,2047
   4bad4:	3a10703a 	and	r8,r7,r8
   4bad8:	280ad7fa 	srli	r5,r5,31
   4badc:	380ed7fa 	srli	r7,r7,31
   4bae0:	12801026 	beq	r2,r10,4bb24 <__eqdf2+0x70>
   4bae4:	0281ffc4 	movi	r10,2047
   4bae8:	1a800a26 	beq	r3,r10,4bb14 <__eqdf2+0x60>
   4baec:	10c00226 	beq	r2,r3,4baf8 <__eqdf2+0x44>
   4baf0:	00800044 	movi	r2,1
   4baf4:	f800283a 	ret
   4baf8:	4a3ffd1e 	bne	r9,r8,4baf0 <__alt_data_end+0xfffebaf0>
   4bafc:	21bffc1e 	bne	r4,r6,4baf0 <__alt_data_end+0xfffebaf0>
   4bb00:	29c00c26 	beq	r5,r7,4bb34 <__eqdf2+0x80>
   4bb04:	103ffa1e 	bne	r2,zero,4baf0 <__alt_data_end+0xfffebaf0>
   4bb08:	2244b03a 	or	r2,r4,r9
   4bb0c:	1004c03a 	cmpne	r2,r2,zero
   4bb10:	f800283a 	ret
   4bb14:	3214b03a 	or	r10,r6,r8
   4bb18:	503ff426 	beq	r10,zero,4baec <__alt_data_end+0xfffebaec>
   4bb1c:	00800044 	movi	r2,1
   4bb20:	f800283a 	ret
   4bb24:	2254b03a 	or	r10,r4,r9
   4bb28:	503fee26 	beq	r10,zero,4bae4 <__alt_data_end+0xfffebae4>
   4bb2c:	00800044 	movi	r2,1
   4bb30:	f800283a 	ret
   4bb34:	0005883a 	mov	r2,zero
   4bb38:	f800283a 	ret

0004bb3c <__gedf2>:
   4bb3c:	2804d53a 	srli	r2,r5,20
   4bb40:	3806d53a 	srli	r3,r7,20
   4bb44:	02000434 	movhi	r8,16
   4bb48:	423fffc4 	addi	r8,r8,-1
   4bb4c:	1081ffcc 	andi	r2,r2,2047
   4bb50:	0241ffc4 	movi	r9,2047
   4bb54:	2a14703a 	and	r10,r5,r8
   4bb58:	18c1ffcc 	andi	r3,r3,2047
   4bb5c:	3a10703a 	and	r8,r7,r8
   4bb60:	280ad7fa 	srli	r5,r5,31
   4bb64:	380ed7fa 	srli	r7,r7,31
   4bb68:	12401d26 	beq	r2,r9,4bbe0 <__gedf2+0xa4>
   4bb6c:	0241ffc4 	movi	r9,2047
   4bb70:	1a401226 	beq	r3,r9,4bbbc <__gedf2+0x80>
   4bb74:	1000081e 	bne	r2,zero,4bb98 <__gedf2+0x5c>
   4bb78:	2296b03a 	or	r11,r4,r10
   4bb7c:	5813003a 	cmpeq	r9,r11,zero
   4bb80:	1800091e 	bne	r3,zero,4bba8 <__gedf2+0x6c>
   4bb84:	3218b03a 	or	r12,r6,r8
   4bb88:	6000071e 	bne	r12,zero,4bba8 <__gedf2+0x6c>
   4bb8c:	0005883a 	mov	r2,zero
   4bb90:	5800101e 	bne	r11,zero,4bbd4 <__gedf2+0x98>
   4bb94:	f800283a 	ret
   4bb98:	18000c1e 	bne	r3,zero,4bbcc <__gedf2+0x90>
   4bb9c:	3212b03a 	or	r9,r6,r8
   4bba0:	48000c26 	beq	r9,zero,4bbd4 <__gedf2+0x98>
   4bba4:	0013883a 	mov	r9,zero
   4bba8:	39c03fcc 	andi	r7,r7,255
   4bbac:	48000826 	beq	r9,zero,4bbd0 <__gedf2+0x94>
   4bbb0:	38000926 	beq	r7,zero,4bbd8 <__gedf2+0x9c>
   4bbb4:	00800044 	movi	r2,1
   4bbb8:	f800283a 	ret
   4bbbc:	3212b03a 	or	r9,r6,r8
   4bbc0:	483fec26 	beq	r9,zero,4bb74 <__alt_data_end+0xfffebb74>
   4bbc4:	00bfff84 	movi	r2,-2
   4bbc8:	f800283a 	ret
   4bbcc:	39c03fcc 	andi	r7,r7,255
   4bbd0:	29c00626 	beq	r5,r7,4bbec <__gedf2+0xb0>
   4bbd4:	283ff726 	beq	r5,zero,4bbb4 <__alt_data_end+0xfffebbb4>
   4bbd8:	00bfffc4 	movi	r2,-1
   4bbdc:	f800283a 	ret
   4bbe0:	2292b03a 	or	r9,r4,r10
   4bbe4:	483fe126 	beq	r9,zero,4bb6c <__alt_data_end+0xfffebb6c>
   4bbe8:	003ff606 	br	4bbc4 <__alt_data_end+0xfffebbc4>
   4bbec:	18bff916 	blt	r3,r2,4bbd4 <__alt_data_end+0xfffebbd4>
   4bbf0:	10c00316 	blt	r2,r3,4bc00 <__gedf2+0xc4>
   4bbf4:	42bff736 	bltu	r8,r10,4bbd4 <__alt_data_end+0xfffebbd4>
   4bbf8:	52000326 	beq	r10,r8,4bc08 <__gedf2+0xcc>
   4bbfc:	5200042e 	bgeu	r10,r8,4bc10 <__gedf2+0xd4>
   4bc00:	283fec1e 	bne	r5,zero,4bbb4 <__alt_data_end+0xfffebbb4>
   4bc04:	003ff406 	br	4bbd8 <__alt_data_end+0xfffebbd8>
   4bc08:	313ff236 	bltu	r6,r4,4bbd4 <__alt_data_end+0xfffebbd4>
   4bc0c:	21bffc36 	bltu	r4,r6,4bc00 <__alt_data_end+0xfffebc00>
   4bc10:	0005883a 	mov	r2,zero
   4bc14:	f800283a 	ret

0004bc18 <__ledf2>:
   4bc18:	2804d53a 	srli	r2,r5,20
   4bc1c:	3810d53a 	srli	r8,r7,20
   4bc20:	00c00434 	movhi	r3,16
   4bc24:	18ffffc4 	addi	r3,r3,-1
   4bc28:	1081ffcc 	andi	r2,r2,2047
   4bc2c:	0241ffc4 	movi	r9,2047
   4bc30:	28d4703a 	and	r10,r5,r3
   4bc34:	4201ffcc 	andi	r8,r8,2047
   4bc38:	38c6703a 	and	r3,r7,r3
   4bc3c:	280ad7fa 	srli	r5,r5,31
   4bc40:	380ed7fa 	srli	r7,r7,31
   4bc44:	12401f26 	beq	r2,r9,4bcc4 <__ledf2+0xac>
   4bc48:	0241ffc4 	movi	r9,2047
   4bc4c:	42401426 	beq	r8,r9,4bca0 <__ledf2+0x88>
   4bc50:	1000091e 	bne	r2,zero,4bc78 <__ledf2+0x60>
   4bc54:	2296b03a 	or	r11,r4,r10
   4bc58:	5813003a 	cmpeq	r9,r11,zero
   4bc5c:	29403fcc 	andi	r5,r5,255
   4bc60:	40000a1e 	bne	r8,zero,4bc8c <__ledf2+0x74>
   4bc64:	30d8b03a 	or	r12,r6,r3
   4bc68:	6000081e 	bne	r12,zero,4bc8c <__ledf2+0x74>
   4bc6c:	0005883a 	mov	r2,zero
   4bc70:	5800111e 	bne	r11,zero,4bcb8 <__ledf2+0xa0>
   4bc74:	f800283a 	ret
   4bc78:	29403fcc 	andi	r5,r5,255
   4bc7c:	40000c1e 	bne	r8,zero,4bcb0 <__ledf2+0x98>
   4bc80:	30d2b03a 	or	r9,r6,r3
   4bc84:	48000c26 	beq	r9,zero,4bcb8 <__ledf2+0xa0>
   4bc88:	0013883a 	mov	r9,zero
   4bc8c:	39c03fcc 	andi	r7,r7,255
   4bc90:	48000826 	beq	r9,zero,4bcb4 <__ledf2+0x9c>
   4bc94:	38001126 	beq	r7,zero,4bcdc <__ledf2+0xc4>
   4bc98:	00800044 	movi	r2,1
   4bc9c:	f800283a 	ret
   4bca0:	30d2b03a 	or	r9,r6,r3
   4bca4:	483fea26 	beq	r9,zero,4bc50 <__alt_data_end+0xfffebc50>
   4bca8:	00800084 	movi	r2,2
   4bcac:	f800283a 	ret
   4bcb0:	39c03fcc 	andi	r7,r7,255
   4bcb4:	39400726 	beq	r7,r5,4bcd4 <__ledf2+0xbc>
   4bcb8:	2800081e 	bne	r5,zero,4bcdc <__ledf2+0xc4>
   4bcbc:	00800044 	movi	r2,1
   4bcc0:	f800283a 	ret
   4bcc4:	2292b03a 	or	r9,r4,r10
   4bcc8:	483fdf26 	beq	r9,zero,4bc48 <__alt_data_end+0xfffebc48>
   4bccc:	00800084 	movi	r2,2
   4bcd0:	f800283a 	ret
   4bcd4:	4080030e 	bge	r8,r2,4bce4 <__ledf2+0xcc>
   4bcd8:	383fef26 	beq	r7,zero,4bc98 <__alt_data_end+0xfffebc98>
   4bcdc:	00bfffc4 	movi	r2,-1
   4bce0:	f800283a 	ret
   4bce4:	123feb16 	blt	r2,r8,4bc94 <__alt_data_end+0xfffebc94>
   4bce8:	1abff336 	bltu	r3,r10,4bcb8 <__alt_data_end+0xfffebcb8>
   4bcec:	50c00326 	beq	r10,r3,4bcfc <__ledf2+0xe4>
   4bcf0:	50c0042e 	bgeu	r10,r3,4bd04 <__ledf2+0xec>
   4bcf4:	283fe81e 	bne	r5,zero,4bc98 <__alt_data_end+0xfffebc98>
   4bcf8:	003ff806 	br	4bcdc <__alt_data_end+0xfffebcdc>
   4bcfc:	313fee36 	bltu	r6,r4,4bcb8 <__alt_data_end+0xfffebcb8>
   4bd00:	21bffc36 	bltu	r4,r6,4bcf4 <__alt_data_end+0xfffebcf4>
   4bd04:	0005883a 	mov	r2,zero
   4bd08:	f800283a 	ret

0004bd0c <__muldf3>:
   4bd0c:	defff304 	addi	sp,sp,-52
   4bd10:	2804d53a 	srli	r2,r5,20
   4bd14:	dd800915 	stw	r22,36(sp)
   4bd18:	282cd7fa 	srli	r22,r5,31
   4bd1c:	dc000315 	stw	r16,12(sp)
   4bd20:	04000434 	movhi	r16,16
   4bd24:	dd400815 	stw	r21,32(sp)
   4bd28:	dc800515 	stw	r18,20(sp)
   4bd2c:	843fffc4 	addi	r16,r16,-1
   4bd30:	dfc00c15 	stw	ra,48(sp)
   4bd34:	df000b15 	stw	fp,44(sp)
   4bd38:	ddc00a15 	stw	r23,40(sp)
   4bd3c:	dd000715 	stw	r20,28(sp)
   4bd40:	dcc00615 	stw	r19,24(sp)
   4bd44:	dc400415 	stw	r17,16(sp)
   4bd48:	1481ffcc 	andi	r18,r2,2047
   4bd4c:	2c20703a 	and	r16,r5,r16
   4bd50:	b02b883a 	mov	r21,r22
   4bd54:	b2403fcc 	andi	r9,r22,255
   4bd58:	90006026 	beq	r18,zero,4bedc <__muldf3+0x1d0>
   4bd5c:	0081ffc4 	movi	r2,2047
   4bd60:	2029883a 	mov	r20,r4
   4bd64:	90803626 	beq	r18,r2,4be40 <__muldf3+0x134>
   4bd68:	80800434 	orhi	r2,r16,16
   4bd6c:	100490fa 	slli	r2,r2,3
   4bd70:	2020d77a 	srli	r16,r4,29
   4bd74:	202890fa 	slli	r20,r4,3
   4bd78:	94bf0044 	addi	r18,r18,-1023
   4bd7c:	80a0b03a 	or	r16,r16,r2
   4bd80:	0027883a 	mov	r19,zero
   4bd84:	0039883a 	mov	fp,zero
   4bd88:	3804d53a 	srli	r2,r7,20
   4bd8c:	382ed7fa 	srli	r23,r7,31
   4bd90:	04400434 	movhi	r17,16
   4bd94:	8c7fffc4 	addi	r17,r17,-1
   4bd98:	1081ffcc 	andi	r2,r2,2047
   4bd9c:	3011883a 	mov	r8,r6
   4bda0:	3c62703a 	and	r17,r7,r17
   4bda4:	ba803fcc 	andi	r10,r23,255
   4bda8:	10006d26 	beq	r2,zero,4bf60 <__muldf3+0x254>
   4bdac:	00c1ffc4 	movi	r3,2047
   4bdb0:	10c06526 	beq	r2,r3,4bf48 <__muldf3+0x23c>
   4bdb4:	88c00434 	orhi	r3,r17,16
   4bdb8:	180690fa 	slli	r3,r3,3
   4bdbc:	3022d77a 	srli	r17,r6,29
   4bdc0:	301090fa 	slli	r8,r6,3
   4bdc4:	10bf0044 	addi	r2,r2,-1023
   4bdc8:	88e2b03a 	or	r17,r17,r3
   4bdcc:	000b883a 	mov	r5,zero
   4bdd0:	9085883a 	add	r2,r18,r2
   4bdd4:	2cc8b03a 	or	r4,r5,r19
   4bdd8:	00c003c4 	movi	r3,15
   4bddc:	bdacf03a 	xor	r22,r23,r22
   4bde0:	12c00044 	addi	r11,r2,1
   4bde4:	19009936 	bltu	r3,r4,4c04c <__muldf3+0x340>
   4bde8:	200890ba 	slli	r4,r4,2
   4bdec:	00c00174 	movhi	r3,5
   4bdf0:	18ef8004 	addi	r3,r3,-16896
   4bdf4:	20c9883a 	add	r4,r4,r3
   4bdf8:	20c00017 	ldw	r3,0(r4)
   4bdfc:	1800683a 	jmp	r3
   4be00:	0004c04c 	andi	zero,zero,4865
   4be04:	0004be60 	cmpeqi	zero,zero,4857
   4be08:	0004be60 	cmpeqi	zero,zero,4857
   4be0c:	0004be5c 	xori	zero,zero,4857
   4be10:	0004c028 	cmpgeui	zero,zero,4864
   4be14:	0004c028 	cmpgeui	zero,zero,4864
   4be18:	0004c010 	cmplti	zero,zero,4864
   4be1c:	0004be5c 	xori	zero,zero,4857
   4be20:	0004c028 	cmpgeui	zero,zero,4864
   4be24:	0004c010 	cmplti	zero,zero,4864
   4be28:	0004c028 	cmpgeui	zero,zero,4864
   4be2c:	0004be5c 	xori	zero,zero,4857
   4be30:	0004c038 	rdprs	zero,zero,4864
   4be34:	0004c038 	rdprs	zero,zero,4864
   4be38:	0004c038 	rdprs	zero,zero,4864
   4be3c:	0004c254 	movui	zero,4873
   4be40:	2404b03a 	or	r2,r4,r16
   4be44:	10006f1e 	bne	r2,zero,4c004 <__muldf3+0x2f8>
   4be48:	04c00204 	movi	r19,8
   4be4c:	0021883a 	mov	r16,zero
   4be50:	0029883a 	mov	r20,zero
   4be54:	07000084 	movi	fp,2
   4be58:	003fcb06 	br	4bd88 <__alt_data_end+0xfffebd88>
   4be5c:	502d883a 	mov	r22,r10
   4be60:	00800084 	movi	r2,2
   4be64:	28805726 	beq	r5,r2,4bfc4 <__muldf3+0x2b8>
   4be68:	008000c4 	movi	r2,3
   4be6c:	28816626 	beq	r5,r2,4c408 <__muldf3+0x6fc>
   4be70:	00800044 	movi	r2,1
   4be74:	2881411e 	bne	r5,r2,4c37c <__muldf3+0x670>
   4be78:	b02b883a 	mov	r21,r22
   4be7c:	0005883a 	mov	r2,zero
   4be80:	000b883a 	mov	r5,zero
   4be84:	0029883a 	mov	r20,zero
   4be88:	1004953a 	slli	r2,r2,20
   4be8c:	a8c03fcc 	andi	r3,r21,255
   4be90:	04400434 	movhi	r17,16
   4be94:	8c7fffc4 	addi	r17,r17,-1
   4be98:	180697fa 	slli	r3,r3,31
   4be9c:	2c4a703a 	and	r5,r5,r17
   4bea0:	288ab03a 	or	r5,r5,r2
   4bea4:	28c6b03a 	or	r3,r5,r3
   4bea8:	a005883a 	mov	r2,r20
   4beac:	dfc00c17 	ldw	ra,48(sp)
   4beb0:	df000b17 	ldw	fp,44(sp)
   4beb4:	ddc00a17 	ldw	r23,40(sp)
   4beb8:	dd800917 	ldw	r22,36(sp)
   4bebc:	dd400817 	ldw	r21,32(sp)
   4bec0:	dd000717 	ldw	r20,28(sp)
   4bec4:	dcc00617 	ldw	r19,24(sp)
   4bec8:	dc800517 	ldw	r18,20(sp)
   4becc:	dc400417 	ldw	r17,16(sp)
   4bed0:	dc000317 	ldw	r16,12(sp)
   4bed4:	dec00d04 	addi	sp,sp,52
   4bed8:	f800283a 	ret
   4bedc:	2404b03a 	or	r2,r4,r16
   4bee0:	2027883a 	mov	r19,r4
   4bee4:	10004226 	beq	r2,zero,4bff0 <__muldf3+0x2e4>
   4bee8:	8000fc26 	beq	r16,zero,4c2dc <__muldf3+0x5d0>
   4beec:	8009883a 	mov	r4,r16
   4bef0:	d9800215 	stw	r6,8(sp)
   4bef4:	d9c00015 	stw	r7,0(sp)
   4bef8:	da400115 	stw	r9,4(sp)
   4befc:	004cf240 	call	4cf24 <__clzsi2>
   4bf00:	d9800217 	ldw	r6,8(sp)
   4bf04:	d9c00017 	ldw	r7,0(sp)
   4bf08:	da400117 	ldw	r9,4(sp)
   4bf0c:	113ffd44 	addi	r4,r2,-11
   4bf10:	00c00704 	movi	r3,28
   4bf14:	1900ed16 	blt	r3,r4,4c2cc <__muldf3+0x5c0>
   4bf18:	00c00744 	movi	r3,29
   4bf1c:	147ffe04 	addi	r17,r2,-8
   4bf20:	1907c83a 	sub	r3,r3,r4
   4bf24:	8460983a 	sll	r16,r16,r17
   4bf28:	98c6d83a 	srl	r3,r19,r3
   4bf2c:	9c68983a 	sll	r20,r19,r17
   4bf30:	1c20b03a 	or	r16,r3,r16
   4bf34:	1080fcc4 	addi	r2,r2,1011
   4bf38:	00a5c83a 	sub	r18,zero,r2
   4bf3c:	0027883a 	mov	r19,zero
   4bf40:	0039883a 	mov	fp,zero
   4bf44:	003f9006 	br	4bd88 <__alt_data_end+0xfffebd88>
   4bf48:	3446b03a 	or	r3,r6,r17
   4bf4c:	1800261e 	bne	r3,zero,4bfe8 <__muldf3+0x2dc>
   4bf50:	0023883a 	mov	r17,zero
   4bf54:	0011883a 	mov	r8,zero
   4bf58:	01400084 	movi	r5,2
   4bf5c:	003f9c06 	br	4bdd0 <__alt_data_end+0xfffebdd0>
   4bf60:	3446b03a 	or	r3,r6,r17
   4bf64:	18001c26 	beq	r3,zero,4bfd8 <__muldf3+0x2cc>
   4bf68:	8800ce26 	beq	r17,zero,4c2a4 <__muldf3+0x598>
   4bf6c:	8809883a 	mov	r4,r17
   4bf70:	d9800215 	stw	r6,8(sp)
   4bf74:	da400115 	stw	r9,4(sp)
   4bf78:	da800015 	stw	r10,0(sp)
   4bf7c:	004cf240 	call	4cf24 <__clzsi2>
   4bf80:	d9800217 	ldw	r6,8(sp)
   4bf84:	da400117 	ldw	r9,4(sp)
   4bf88:	da800017 	ldw	r10,0(sp)
   4bf8c:	113ffd44 	addi	r4,r2,-11
   4bf90:	00c00704 	movi	r3,28
   4bf94:	1900bf16 	blt	r3,r4,4c294 <__muldf3+0x588>
   4bf98:	00c00744 	movi	r3,29
   4bf9c:	123ffe04 	addi	r8,r2,-8
   4bfa0:	1907c83a 	sub	r3,r3,r4
   4bfa4:	8a22983a 	sll	r17,r17,r8
   4bfa8:	30c6d83a 	srl	r3,r6,r3
   4bfac:	3210983a 	sll	r8,r6,r8
   4bfb0:	1c62b03a 	or	r17,r3,r17
   4bfb4:	1080fcc4 	addi	r2,r2,1011
   4bfb8:	0085c83a 	sub	r2,zero,r2
   4bfbc:	000b883a 	mov	r5,zero
   4bfc0:	003f8306 	br	4bdd0 <__alt_data_end+0xfffebdd0>
   4bfc4:	b02b883a 	mov	r21,r22
   4bfc8:	0081ffc4 	movi	r2,2047
   4bfcc:	000b883a 	mov	r5,zero
   4bfd0:	0029883a 	mov	r20,zero
   4bfd4:	003fac06 	br	4be88 <__alt_data_end+0xfffebe88>
   4bfd8:	0023883a 	mov	r17,zero
   4bfdc:	0011883a 	mov	r8,zero
   4bfe0:	01400044 	movi	r5,1
   4bfe4:	003f7a06 	br	4bdd0 <__alt_data_end+0xfffebdd0>
   4bfe8:	014000c4 	movi	r5,3
   4bfec:	003f7806 	br	4bdd0 <__alt_data_end+0xfffebdd0>
   4bff0:	04c00104 	movi	r19,4
   4bff4:	0021883a 	mov	r16,zero
   4bff8:	0029883a 	mov	r20,zero
   4bffc:	07000044 	movi	fp,1
   4c000:	003f6106 	br	4bd88 <__alt_data_end+0xfffebd88>
   4c004:	04c00304 	movi	r19,12
   4c008:	070000c4 	movi	fp,3
   4c00c:	003f5e06 	br	4bd88 <__alt_data_end+0xfffebd88>
   4c010:	01400434 	movhi	r5,16
   4c014:	002b883a 	mov	r21,zero
   4c018:	297fffc4 	addi	r5,r5,-1
   4c01c:	053fffc4 	movi	r20,-1
   4c020:	0081ffc4 	movi	r2,2047
   4c024:	003f9806 	br	4be88 <__alt_data_end+0xfffebe88>
   4c028:	8023883a 	mov	r17,r16
   4c02c:	a011883a 	mov	r8,r20
   4c030:	e00b883a 	mov	r5,fp
   4c034:	003f8a06 	br	4be60 <__alt_data_end+0xfffebe60>
   4c038:	8023883a 	mov	r17,r16
   4c03c:	a011883a 	mov	r8,r20
   4c040:	482d883a 	mov	r22,r9
   4c044:	e00b883a 	mov	r5,fp
   4c048:	003f8506 	br	4be60 <__alt_data_end+0xfffebe60>
   4c04c:	a00ad43a 	srli	r5,r20,16
   4c050:	401ad43a 	srli	r13,r8,16
   4c054:	a53fffcc 	andi	r20,r20,65535
   4c058:	423fffcc 	andi	r8,r8,65535
   4c05c:	4519383a 	mul	r12,r8,r20
   4c060:	4147383a 	mul	r3,r8,r5
   4c064:	6d09383a 	mul	r4,r13,r20
   4c068:	600cd43a 	srli	r6,r12,16
   4c06c:	2b5d383a 	mul	r14,r5,r13
   4c070:	20c9883a 	add	r4,r4,r3
   4c074:	310d883a 	add	r6,r6,r4
   4c078:	30c0022e 	bgeu	r6,r3,4c084 <__muldf3+0x378>
   4c07c:	00c00074 	movhi	r3,1
   4c080:	70dd883a 	add	r14,r14,r3
   4c084:	8826d43a 	srli	r19,r17,16
   4c088:	8bffffcc 	andi	r15,r17,65535
   4c08c:	7d23383a 	mul	r17,r15,r20
   4c090:	7949383a 	mul	r4,r15,r5
   4c094:	9d29383a 	mul	r20,r19,r20
   4c098:	8814d43a 	srli	r10,r17,16
   4c09c:	3012943a 	slli	r9,r6,16
   4c0a0:	a129883a 	add	r20,r20,r4
   4c0a4:	633fffcc 	andi	r12,r12,65535
   4c0a8:	5515883a 	add	r10,r10,r20
   4c0ac:	3006d43a 	srli	r3,r6,16
   4c0b0:	4b13883a 	add	r9,r9,r12
   4c0b4:	2ccb383a 	mul	r5,r5,r19
   4c0b8:	5100022e 	bgeu	r10,r4,4c0c4 <__muldf3+0x3b8>
   4c0bc:	01000074 	movhi	r4,1
   4c0c0:	290b883a 	add	r5,r5,r4
   4c0c4:	802ad43a 	srli	r21,r16,16
   4c0c8:	843fffcc 	andi	r16,r16,65535
   4c0cc:	440d383a 	mul	r6,r8,r16
   4c0d0:	4565383a 	mul	r18,r8,r21
   4c0d4:	8349383a 	mul	r4,r16,r13
   4c0d8:	500e943a 	slli	r7,r10,16
   4c0dc:	3010d43a 	srli	r8,r6,16
   4c0e0:	5028d43a 	srli	r20,r10,16
   4c0e4:	2489883a 	add	r4,r4,r18
   4c0e8:	8abfffcc 	andi	r10,r17,65535
   4c0ec:	3a95883a 	add	r10,r7,r10
   4c0f0:	4119883a 	add	r12,r8,r4
   4c0f4:	a169883a 	add	r20,r20,r5
   4c0f8:	1a87883a 	add	r3,r3,r10
   4c0fc:	6d5b383a 	mul	r13,r13,r21
   4c100:	6480022e 	bgeu	r12,r18,4c10c <__muldf3+0x400>
   4c104:	01000074 	movhi	r4,1
   4c108:	691b883a 	add	r13,r13,r4
   4c10c:	7c25383a 	mul	r18,r15,r16
   4c110:	7d4b383a 	mul	r5,r15,r21
   4c114:	84cf383a 	mul	r7,r16,r19
   4c118:	901ed43a 	srli	r15,r18,16
   4c11c:	6008d43a 	srli	r4,r12,16
   4c120:	6010943a 	slli	r8,r12,16
   4c124:	394f883a 	add	r7,r7,r5
   4c128:	333fffcc 	andi	r12,r6,65535
   4c12c:	79df883a 	add	r15,r15,r7
   4c130:	235b883a 	add	r13,r4,r13
   4c134:	9d63383a 	mul	r17,r19,r21
   4c138:	4309883a 	add	r4,r8,r12
   4c13c:	7940022e 	bgeu	r15,r5,4c148 <__muldf3+0x43c>
   4c140:	01400074 	movhi	r5,1
   4c144:	8963883a 	add	r17,r17,r5
   4c148:	780a943a 	slli	r5,r15,16
   4c14c:	91bfffcc 	andi	r6,r18,65535
   4c150:	70c7883a 	add	r3,r14,r3
   4c154:	298d883a 	add	r6,r5,r6
   4c158:	1a8f803a 	cmpltu	r7,r3,r10
   4c15c:	350b883a 	add	r5,r6,r20
   4c160:	20c7883a 	add	r3,r4,r3
   4c164:	3955883a 	add	r10,r7,r5
   4c168:	1909803a 	cmpltu	r4,r3,r4
   4c16c:	6a91883a 	add	r8,r13,r10
   4c170:	780cd43a 	srli	r6,r15,16
   4c174:	2219883a 	add	r12,r4,r8
   4c178:	2d0b803a 	cmpltu	r5,r5,r20
   4c17c:	51cf803a 	cmpltu	r7,r10,r7
   4c180:	29ceb03a 	or	r7,r5,r7
   4c184:	4351803a 	cmpltu	r8,r8,r13
   4c188:	610b803a 	cmpltu	r5,r12,r4
   4c18c:	4148b03a 	or	r4,r8,r5
   4c190:	398f883a 	add	r7,r7,r6
   4c194:	3909883a 	add	r4,r7,r4
   4c198:	1810927a 	slli	r8,r3,9
   4c19c:	2449883a 	add	r4,r4,r17
   4c1a0:	2008927a 	slli	r4,r4,9
   4c1a4:	6022d5fa 	srli	r17,r12,23
   4c1a8:	1806d5fa 	srli	r3,r3,23
   4c1ac:	4252b03a 	or	r9,r8,r9
   4c1b0:	600a927a 	slli	r5,r12,9
   4c1b4:	4810c03a 	cmpne	r8,r9,zero
   4c1b8:	2462b03a 	or	r17,r4,r17
   4c1bc:	40c6b03a 	or	r3,r8,r3
   4c1c0:	8900402c 	andhi	r4,r17,256
   4c1c4:	1950b03a 	or	r8,r3,r5
   4c1c8:	20000726 	beq	r4,zero,4c1e8 <__muldf3+0x4dc>
   4c1cc:	4006d07a 	srli	r3,r8,1
   4c1d0:	880497fa 	slli	r2,r17,31
   4c1d4:	4200004c 	andi	r8,r8,1
   4c1d8:	8822d07a 	srli	r17,r17,1
   4c1dc:	1a10b03a 	or	r8,r3,r8
   4c1e0:	1210b03a 	or	r8,r2,r8
   4c1e4:	5805883a 	mov	r2,r11
   4c1e8:	1140ffc4 	addi	r5,r2,1023
   4c1ec:	0140440e 	bge	zero,r5,4c300 <__muldf3+0x5f4>
   4c1f0:	40c001cc 	andi	r3,r8,7
   4c1f4:	18000726 	beq	r3,zero,4c214 <__muldf3+0x508>
   4c1f8:	40c003cc 	andi	r3,r8,15
   4c1fc:	01000104 	movi	r4,4
   4c200:	19000426 	beq	r3,r4,4c214 <__muldf3+0x508>
   4c204:	4107883a 	add	r3,r8,r4
   4c208:	1a11803a 	cmpltu	r8,r3,r8
   4c20c:	8a23883a 	add	r17,r17,r8
   4c210:	1811883a 	mov	r8,r3
   4c214:	88c0402c 	andhi	r3,r17,256
   4c218:	18000426 	beq	r3,zero,4c22c <__muldf3+0x520>
   4c21c:	11410004 	addi	r5,r2,1024
   4c220:	00bfc034 	movhi	r2,65280
   4c224:	10bfffc4 	addi	r2,r2,-1
   4c228:	88a2703a 	and	r17,r17,r2
   4c22c:	0081ff84 	movi	r2,2046
   4c230:	117f6416 	blt	r2,r5,4bfc4 <__alt_data_end+0xfffebfc4>
   4c234:	8828977a 	slli	r20,r17,29
   4c238:	4010d0fa 	srli	r8,r8,3
   4c23c:	8822927a 	slli	r17,r17,9
   4c240:	2881ffcc 	andi	r2,r5,2047
   4c244:	a228b03a 	or	r20,r20,r8
   4c248:	880ad33a 	srli	r5,r17,12
   4c24c:	b02b883a 	mov	r21,r22
   4c250:	003f0d06 	br	4be88 <__alt_data_end+0xfffebe88>
   4c254:	8080022c 	andhi	r2,r16,8
   4c258:	10000926 	beq	r2,zero,4c280 <__muldf3+0x574>
   4c25c:	8880022c 	andhi	r2,r17,8
   4c260:	1000071e 	bne	r2,zero,4c280 <__muldf3+0x574>
   4c264:	00800434 	movhi	r2,16
   4c268:	89400234 	orhi	r5,r17,8
   4c26c:	10bfffc4 	addi	r2,r2,-1
   4c270:	b82b883a 	mov	r21,r23
   4c274:	288a703a 	and	r5,r5,r2
   4c278:	4029883a 	mov	r20,r8
   4c27c:	003f6806 	br	4c020 <__alt_data_end+0xfffec020>
   4c280:	00800434 	movhi	r2,16
   4c284:	81400234 	orhi	r5,r16,8
   4c288:	10bfffc4 	addi	r2,r2,-1
   4c28c:	288a703a 	and	r5,r5,r2
   4c290:	003f6306 	br	4c020 <__alt_data_end+0xfffec020>
   4c294:	147ff604 	addi	r17,r2,-40
   4c298:	3462983a 	sll	r17,r6,r17
   4c29c:	0011883a 	mov	r8,zero
   4c2a0:	003f4406 	br	4bfb4 <__alt_data_end+0xfffebfb4>
   4c2a4:	3009883a 	mov	r4,r6
   4c2a8:	d9800215 	stw	r6,8(sp)
   4c2ac:	da400115 	stw	r9,4(sp)
   4c2b0:	da800015 	stw	r10,0(sp)
   4c2b4:	004cf240 	call	4cf24 <__clzsi2>
   4c2b8:	10800804 	addi	r2,r2,32
   4c2bc:	da800017 	ldw	r10,0(sp)
   4c2c0:	da400117 	ldw	r9,4(sp)
   4c2c4:	d9800217 	ldw	r6,8(sp)
   4c2c8:	003f3006 	br	4bf8c <__alt_data_end+0xfffebf8c>
   4c2cc:	143ff604 	addi	r16,r2,-40
   4c2d0:	9c20983a 	sll	r16,r19,r16
   4c2d4:	0029883a 	mov	r20,zero
   4c2d8:	003f1606 	br	4bf34 <__alt_data_end+0xfffebf34>
   4c2dc:	d9800215 	stw	r6,8(sp)
   4c2e0:	d9c00015 	stw	r7,0(sp)
   4c2e4:	da400115 	stw	r9,4(sp)
   4c2e8:	004cf240 	call	4cf24 <__clzsi2>
   4c2ec:	10800804 	addi	r2,r2,32
   4c2f0:	da400117 	ldw	r9,4(sp)
   4c2f4:	d9c00017 	ldw	r7,0(sp)
   4c2f8:	d9800217 	ldw	r6,8(sp)
   4c2fc:	003f0306 	br	4bf0c <__alt_data_end+0xfffebf0c>
   4c300:	00c00044 	movi	r3,1
   4c304:	1947c83a 	sub	r3,r3,r5
   4c308:	00800e04 	movi	r2,56
   4c30c:	10feda16 	blt	r2,r3,4be78 <__alt_data_end+0xfffebe78>
   4c310:	008007c4 	movi	r2,31
   4c314:	10c01b16 	blt	r2,r3,4c384 <__muldf3+0x678>
   4c318:	00800804 	movi	r2,32
   4c31c:	10c5c83a 	sub	r2,r2,r3
   4c320:	888a983a 	sll	r5,r17,r2
   4c324:	40c8d83a 	srl	r4,r8,r3
   4c328:	4084983a 	sll	r2,r8,r2
   4c32c:	88e2d83a 	srl	r17,r17,r3
   4c330:	2906b03a 	or	r3,r5,r4
   4c334:	1004c03a 	cmpne	r2,r2,zero
   4c338:	1886b03a 	or	r3,r3,r2
   4c33c:	188001cc 	andi	r2,r3,7
   4c340:	10000726 	beq	r2,zero,4c360 <__muldf3+0x654>
   4c344:	188003cc 	andi	r2,r3,15
   4c348:	01000104 	movi	r4,4
   4c34c:	11000426 	beq	r2,r4,4c360 <__muldf3+0x654>
   4c350:	1805883a 	mov	r2,r3
   4c354:	10c00104 	addi	r3,r2,4
   4c358:	1885803a 	cmpltu	r2,r3,r2
   4c35c:	88a3883a 	add	r17,r17,r2
   4c360:	8880202c 	andhi	r2,r17,128
   4c364:	10001c26 	beq	r2,zero,4c3d8 <__muldf3+0x6cc>
   4c368:	b02b883a 	mov	r21,r22
   4c36c:	00800044 	movi	r2,1
   4c370:	000b883a 	mov	r5,zero
   4c374:	0029883a 	mov	r20,zero
   4c378:	003ec306 	br	4be88 <__alt_data_end+0xfffebe88>
   4c37c:	5805883a 	mov	r2,r11
   4c380:	003f9906 	br	4c1e8 <__alt_data_end+0xfffec1e8>
   4c384:	00bff844 	movi	r2,-31
   4c388:	1145c83a 	sub	r2,r2,r5
   4c38c:	8888d83a 	srl	r4,r17,r2
   4c390:	00800804 	movi	r2,32
   4c394:	18801a26 	beq	r3,r2,4c400 <__muldf3+0x6f4>
   4c398:	00801004 	movi	r2,64
   4c39c:	10c5c83a 	sub	r2,r2,r3
   4c3a0:	8884983a 	sll	r2,r17,r2
   4c3a4:	1204b03a 	or	r2,r2,r8
   4c3a8:	1004c03a 	cmpne	r2,r2,zero
   4c3ac:	2084b03a 	or	r2,r4,r2
   4c3b0:	144001cc 	andi	r17,r2,7
   4c3b4:	88000d1e 	bne	r17,zero,4c3ec <__muldf3+0x6e0>
   4c3b8:	000b883a 	mov	r5,zero
   4c3bc:	1028d0fa 	srli	r20,r2,3
   4c3c0:	b02b883a 	mov	r21,r22
   4c3c4:	0005883a 	mov	r2,zero
   4c3c8:	a468b03a 	or	r20,r20,r17
   4c3cc:	003eae06 	br	4be88 <__alt_data_end+0xfffebe88>
   4c3d0:	1007883a 	mov	r3,r2
   4c3d4:	0023883a 	mov	r17,zero
   4c3d8:	880a927a 	slli	r5,r17,9
   4c3dc:	1805883a 	mov	r2,r3
   4c3e0:	8822977a 	slli	r17,r17,29
   4c3e4:	280ad33a 	srli	r5,r5,12
   4c3e8:	003ff406 	br	4c3bc <__alt_data_end+0xfffec3bc>
   4c3ec:	10c003cc 	andi	r3,r2,15
   4c3f0:	01000104 	movi	r4,4
   4c3f4:	193ff626 	beq	r3,r4,4c3d0 <__alt_data_end+0xfffec3d0>
   4c3f8:	0023883a 	mov	r17,zero
   4c3fc:	003fd506 	br	4c354 <__alt_data_end+0xfffec354>
   4c400:	0005883a 	mov	r2,zero
   4c404:	003fe706 	br	4c3a4 <__alt_data_end+0xfffec3a4>
   4c408:	00800434 	movhi	r2,16
   4c40c:	89400234 	orhi	r5,r17,8
   4c410:	10bfffc4 	addi	r2,r2,-1
   4c414:	b02b883a 	mov	r21,r22
   4c418:	288a703a 	and	r5,r5,r2
   4c41c:	4029883a 	mov	r20,r8
   4c420:	003eff06 	br	4c020 <__alt_data_end+0xfffec020>

0004c424 <__subdf3>:
   4c424:	02000434 	movhi	r8,16
   4c428:	423fffc4 	addi	r8,r8,-1
   4c42c:	defffb04 	addi	sp,sp,-20
   4c430:	2a14703a 	and	r10,r5,r8
   4c434:	3812d53a 	srli	r9,r7,20
   4c438:	3a10703a 	and	r8,r7,r8
   4c43c:	2006d77a 	srli	r3,r4,29
   4c440:	3004d77a 	srli	r2,r6,29
   4c444:	dc000015 	stw	r16,0(sp)
   4c448:	501490fa 	slli	r10,r10,3
   4c44c:	2820d53a 	srli	r16,r5,20
   4c450:	401090fa 	slli	r8,r8,3
   4c454:	dc800215 	stw	r18,8(sp)
   4c458:	dc400115 	stw	r17,4(sp)
   4c45c:	dfc00415 	stw	ra,16(sp)
   4c460:	202290fa 	slli	r17,r4,3
   4c464:	dcc00315 	stw	r19,12(sp)
   4c468:	4a41ffcc 	andi	r9,r9,2047
   4c46c:	0101ffc4 	movi	r4,2047
   4c470:	2824d7fa 	srli	r18,r5,31
   4c474:	8401ffcc 	andi	r16,r16,2047
   4c478:	50c6b03a 	or	r3,r10,r3
   4c47c:	380ed7fa 	srli	r7,r7,31
   4c480:	408ab03a 	or	r5,r8,r2
   4c484:	300c90fa 	slli	r6,r6,3
   4c488:	49009626 	beq	r9,r4,4c6e4 <__subdf3+0x2c0>
   4c48c:	39c0005c 	xori	r7,r7,1
   4c490:	8245c83a 	sub	r2,r16,r9
   4c494:	3c807426 	beq	r7,r18,4c668 <__subdf3+0x244>
   4c498:	0080af0e 	bge	zero,r2,4c758 <__subdf3+0x334>
   4c49c:	48002a1e 	bne	r9,zero,4c548 <__subdf3+0x124>
   4c4a0:	2988b03a 	or	r4,r5,r6
   4c4a4:	20009a1e 	bne	r4,zero,4c710 <__subdf3+0x2ec>
   4c4a8:	888001cc 	andi	r2,r17,7
   4c4ac:	10000726 	beq	r2,zero,4c4cc <__subdf3+0xa8>
   4c4b0:	888003cc 	andi	r2,r17,15
   4c4b4:	01000104 	movi	r4,4
   4c4b8:	11000426 	beq	r2,r4,4c4cc <__subdf3+0xa8>
   4c4bc:	890b883a 	add	r5,r17,r4
   4c4c0:	2c63803a 	cmpltu	r17,r5,r17
   4c4c4:	1c47883a 	add	r3,r3,r17
   4c4c8:	2823883a 	mov	r17,r5
   4c4cc:	1880202c 	andhi	r2,r3,128
   4c4d0:	10005926 	beq	r2,zero,4c638 <__subdf3+0x214>
   4c4d4:	84000044 	addi	r16,r16,1
   4c4d8:	0081ffc4 	movi	r2,2047
   4c4dc:	8080be26 	beq	r16,r2,4c7d8 <__subdf3+0x3b4>
   4c4e0:	017fe034 	movhi	r5,65408
   4c4e4:	297fffc4 	addi	r5,r5,-1
   4c4e8:	1946703a 	and	r3,r3,r5
   4c4ec:	1804977a 	slli	r2,r3,29
   4c4f0:	1806927a 	slli	r3,r3,9
   4c4f4:	8822d0fa 	srli	r17,r17,3
   4c4f8:	8401ffcc 	andi	r16,r16,2047
   4c4fc:	180ad33a 	srli	r5,r3,12
   4c500:	9100004c 	andi	r4,r18,1
   4c504:	1444b03a 	or	r2,r2,r17
   4c508:	80c1ffcc 	andi	r3,r16,2047
   4c50c:	1820953a 	slli	r16,r3,20
   4c510:	20c03fcc 	andi	r3,r4,255
   4c514:	180897fa 	slli	r4,r3,31
   4c518:	00c00434 	movhi	r3,16
   4c51c:	18ffffc4 	addi	r3,r3,-1
   4c520:	28c6703a 	and	r3,r5,r3
   4c524:	1c06b03a 	or	r3,r3,r16
   4c528:	1906b03a 	or	r3,r3,r4
   4c52c:	dfc00417 	ldw	ra,16(sp)
   4c530:	dcc00317 	ldw	r19,12(sp)
   4c534:	dc800217 	ldw	r18,8(sp)
   4c538:	dc400117 	ldw	r17,4(sp)
   4c53c:	dc000017 	ldw	r16,0(sp)
   4c540:	dec00504 	addi	sp,sp,20
   4c544:	f800283a 	ret
   4c548:	0101ffc4 	movi	r4,2047
   4c54c:	813fd626 	beq	r16,r4,4c4a8 <__alt_data_end+0xfffec4a8>
   4c550:	29402034 	orhi	r5,r5,128
   4c554:	01000e04 	movi	r4,56
   4c558:	2080a316 	blt	r4,r2,4c7e8 <__subdf3+0x3c4>
   4c55c:	010007c4 	movi	r4,31
   4c560:	2080c616 	blt	r4,r2,4c87c <__subdf3+0x458>
   4c564:	01000804 	movi	r4,32
   4c568:	2089c83a 	sub	r4,r4,r2
   4c56c:	2910983a 	sll	r8,r5,r4
   4c570:	308ed83a 	srl	r7,r6,r2
   4c574:	3108983a 	sll	r4,r6,r4
   4c578:	2884d83a 	srl	r2,r5,r2
   4c57c:	41ccb03a 	or	r6,r8,r7
   4c580:	2008c03a 	cmpne	r4,r4,zero
   4c584:	310cb03a 	or	r6,r6,r4
   4c588:	898dc83a 	sub	r6,r17,r6
   4c58c:	89a3803a 	cmpltu	r17,r17,r6
   4c590:	1887c83a 	sub	r3,r3,r2
   4c594:	1c47c83a 	sub	r3,r3,r17
   4c598:	3023883a 	mov	r17,r6
   4c59c:	1880202c 	andhi	r2,r3,128
   4c5a0:	10002326 	beq	r2,zero,4c630 <__subdf3+0x20c>
   4c5a4:	04c02034 	movhi	r19,128
   4c5a8:	9cffffc4 	addi	r19,r19,-1
   4c5ac:	1ce6703a 	and	r19,r3,r19
   4c5b0:	98007a26 	beq	r19,zero,4c79c <__subdf3+0x378>
   4c5b4:	9809883a 	mov	r4,r19
   4c5b8:	004cf240 	call	4cf24 <__clzsi2>
   4c5bc:	113ffe04 	addi	r4,r2,-8
   4c5c0:	00c007c4 	movi	r3,31
   4c5c4:	19007b16 	blt	r3,r4,4c7b4 <__subdf3+0x390>
   4c5c8:	00800804 	movi	r2,32
   4c5cc:	1105c83a 	sub	r2,r2,r4
   4c5d0:	8884d83a 	srl	r2,r17,r2
   4c5d4:	9906983a 	sll	r3,r19,r4
   4c5d8:	8922983a 	sll	r17,r17,r4
   4c5dc:	10c4b03a 	or	r2,r2,r3
   4c5e0:	24007816 	blt	r4,r16,4c7c4 <__subdf3+0x3a0>
   4c5e4:	2421c83a 	sub	r16,r4,r16
   4c5e8:	80c00044 	addi	r3,r16,1
   4c5ec:	010007c4 	movi	r4,31
   4c5f0:	20c09516 	blt	r4,r3,4c848 <__subdf3+0x424>
   4c5f4:	01400804 	movi	r5,32
   4c5f8:	28cbc83a 	sub	r5,r5,r3
   4c5fc:	88c8d83a 	srl	r4,r17,r3
   4c600:	8962983a 	sll	r17,r17,r5
   4c604:	114a983a 	sll	r5,r2,r5
   4c608:	10c6d83a 	srl	r3,r2,r3
   4c60c:	8804c03a 	cmpne	r2,r17,zero
   4c610:	290ab03a 	or	r5,r5,r4
   4c614:	28a2b03a 	or	r17,r5,r2
   4c618:	0021883a 	mov	r16,zero
   4c61c:	003fa206 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c620:	2090b03a 	or	r8,r4,r2
   4c624:	40018e26 	beq	r8,zero,4cc60 <__subdf3+0x83c>
   4c628:	1007883a 	mov	r3,r2
   4c62c:	2023883a 	mov	r17,r4
   4c630:	888001cc 	andi	r2,r17,7
   4c634:	103f9e1e 	bne	r2,zero,4c4b0 <__alt_data_end+0xfffec4b0>
   4c638:	1804977a 	slli	r2,r3,29
   4c63c:	8822d0fa 	srli	r17,r17,3
   4c640:	1810d0fa 	srli	r8,r3,3
   4c644:	9100004c 	andi	r4,r18,1
   4c648:	1444b03a 	or	r2,r2,r17
   4c64c:	00c1ffc4 	movi	r3,2047
   4c650:	80c02826 	beq	r16,r3,4c6f4 <__subdf3+0x2d0>
   4c654:	01400434 	movhi	r5,16
   4c658:	297fffc4 	addi	r5,r5,-1
   4c65c:	80e0703a 	and	r16,r16,r3
   4c660:	414a703a 	and	r5,r8,r5
   4c664:	003fa806 	br	4c508 <__alt_data_end+0xfffec508>
   4c668:	0080630e 	bge	zero,r2,4c7f8 <__subdf3+0x3d4>
   4c66c:	48003026 	beq	r9,zero,4c730 <__subdf3+0x30c>
   4c670:	0101ffc4 	movi	r4,2047
   4c674:	813f8c26 	beq	r16,r4,4c4a8 <__alt_data_end+0xfffec4a8>
   4c678:	29402034 	orhi	r5,r5,128
   4c67c:	01000e04 	movi	r4,56
   4c680:	2080a90e 	bge	r4,r2,4c928 <__subdf3+0x504>
   4c684:	298cb03a 	or	r6,r5,r6
   4c688:	3012c03a 	cmpne	r9,r6,zero
   4c68c:	0005883a 	mov	r2,zero
   4c690:	4c53883a 	add	r9,r9,r17
   4c694:	4c63803a 	cmpltu	r17,r9,r17
   4c698:	10c7883a 	add	r3,r2,r3
   4c69c:	88c7883a 	add	r3,r17,r3
   4c6a0:	4823883a 	mov	r17,r9
   4c6a4:	1880202c 	andhi	r2,r3,128
   4c6a8:	1000d026 	beq	r2,zero,4c9ec <__subdf3+0x5c8>
   4c6ac:	84000044 	addi	r16,r16,1
   4c6b0:	0081ffc4 	movi	r2,2047
   4c6b4:	8080fe26 	beq	r16,r2,4cab0 <__subdf3+0x68c>
   4c6b8:	00bfe034 	movhi	r2,65408
   4c6bc:	10bfffc4 	addi	r2,r2,-1
   4c6c0:	1886703a 	and	r3,r3,r2
   4c6c4:	880ad07a 	srli	r5,r17,1
   4c6c8:	180497fa 	slli	r2,r3,31
   4c6cc:	8900004c 	andi	r4,r17,1
   4c6d0:	2922b03a 	or	r17,r5,r4
   4c6d4:	1806d07a 	srli	r3,r3,1
   4c6d8:	1462b03a 	or	r17,r2,r17
   4c6dc:	3825883a 	mov	r18,r7
   4c6e0:	003f7106 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c6e4:	2984b03a 	or	r2,r5,r6
   4c6e8:	103f6826 	beq	r2,zero,4c48c <__alt_data_end+0xfffec48c>
   4c6ec:	39c03fcc 	andi	r7,r7,255
   4c6f0:	003f6706 	br	4c490 <__alt_data_end+0xfffec490>
   4c6f4:	4086b03a 	or	r3,r8,r2
   4c6f8:	18015226 	beq	r3,zero,4cc44 <__subdf3+0x820>
   4c6fc:	00c00434 	movhi	r3,16
   4c700:	41400234 	orhi	r5,r8,8
   4c704:	18ffffc4 	addi	r3,r3,-1
   4c708:	28ca703a 	and	r5,r5,r3
   4c70c:	003f7e06 	br	4c508 <__alt_data_end+0xfffec508>
   4c710:	10bfffc4 	addi	r2,r2,-1
   4c714:	1000491e 	bne	r2,zero,4c83c <__subdf3+0x418>
   4c718:	898fc83a 	sub	r7,r17,r6
   4c71c:	89e3803a 	cmpltu	r17,r17,r7
   4c720:	1947c83a 	sub	r3,r3,r5
   4c724:	1c47c83a 	sub	r3,r3,r17
   4c728:	3823883a 	mov	r17,r7
   4c72c:	003f9b06 	br	4c59c <__alt_data_end+0xfffec59c>
   4c730:	2988b03a 	or	r4,r5,r6
   4c734:	203f5c26 	beq	r4,zero,4c4a8 <__alt_data_end+0xfffec4a8>
   4c738:	10bfffc4 	addi	r2,r2,-1
   4c73c:	1000931e 	bne	r2,zero,4c98c <__subdf3+0x568>
   4c740:	898d883a 	add	r6,r17,r6
   4c744:	3463803a 	cmpltu	r17,r6,r17
   4c748:	1947883a 	add	r3,r3,r5
   4c74c:	88c7883a 	add	r3,r17,r3
   4c750:	3023883a 	mov	r17,r6
   4c754:	003fd306 	br	4c6a4 <__alt_data_end+0xfffec6a4>
   4c758:	1000541e 	bne	r2,zero,4c8ac <__subdf3+0x488>
   4c75c:	80800044 	addi	r2,r16,1
   4c760:	1081ffcc 	andi	r2,r2,2047
   4c764:	01000044 	movi	r4,1
   4c768:	2080a20e 	bge	r4,r2,4c9f4 <__subdf3+0x5d0>
   4c76c:	8989c83a 	sub	r4,r17,r6
   4c770:	8905803a 	cmpltu	r2,r17,r4
   4c774:	1967c83a 	sub	r19,r3,r5
   4c778:	98a7c83a 	sub	r19,r19,r2
   4c77c:	9880202c 	andhi	r2,r19,128
   4c780:	10006326 	beq	r2,zero,4c910 <__subdf3+0x4ec>
   4c784:	3463c83a 	sub	r17,r6,r17
   4c788:	28c7c83a 	sub	r3,r5,r3
   4c78c:	344d803a 	cmpltu	r6,r6,r17
   4c790:	19a7c83a 	sub	r19,r3,r6
   4c794:	3825883a 	mov	r18,r7
   4c798:	983f861e 	bne	r19,zero,4c5b4 <__alt_data_end+0xfffec5b4>
   4c79c:	8809883a 	mov	r4,r17
   4c7a0:	004cf240 	call	4cf24 <__clzsi2>
   4c7a4:	10800804 	addi	r2,r2,32
   4c7a8:	113ffe04 	addi	r4,r2,-8
   4c7ac:	00c007c4 	movi	r3,31
   4c7b0:	193f850e 	bge	r3,r4,4c5c8 <__alt_data_end+0xfffec5c8>
   4c7b4:	10bff604 	addi	r2,r2,-40
   4c7b8:	8884983a 	sll	r2,r17,r2
   4c7bc:	0023883a 	mov	r17,zero
   4c7c0:	243f880e 	bge	r4,r16,4c5e4 <__alt_data_end+0xfffec5e4>
   4c7c4:	00ffe034 	movhi	r3,65408
   4c7c8:	18ffffc4 	addi	r3,r3,-1
   4c7cc:	8121c83a 	sub	r16,r16,r4
   4c7d0:	10c6703a 	and	r3,r2,r3
   4c7d4:	003f3406 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c7d8:	9100004c 	andi	r4,r18,1
   4c7dc:	000b883a 	mov	r5,zero
   4c7e0:	0005883a 	mov	r2,zero
   4c7e4:	003f4806 	br	4c508 <__alt_data_end+0xfffec508>
   4c7e8:	298cb03a 	or	r6,r5,r6
   4c7ec:	300cc03a 	cmpne	r6,r6,zero
   4c7f0:	0005883a 	mov	r2,zero
   4c7f4:	003f6406 	br	4c588 <__alt_data_end+0xfffec588>
   4c7f8:	10009a1e 	bne	r2,zero,4ca64 <__subdf3+0x640>
   4c7fc:	82400044 	addi	r9,r16,1
   4c800:	4881ffcc 	andi	r2,r9,2047
   4c804:	02800044 	movi	r10,1
   4c808:	5080670e 	bge	r10,r2,4c9a8 <__subdf3+0x584>
   4c80c:	0081ffc4 	movi	r2,2047
   4c810:	4880af26 	beq	r9,r2,4cad0 <__subdf3+0x6ac>
   4c814:	898d883a 	add	r6,r17,r6
   4c818:	1945883a 	add	r2,r3,r5
   4c81c:	3447803a 	cmpltu	r3,r6,r17
   4c820:	1887883a 	add	r3,r3,r2
   4c824:	182297fa 	slli	r17,r3,31
   4c828:	300cd07a 	srli	r6,r6,1
   4c82c:	1806d07a 	srli	r3,r3,1
   4c830:	4821883a 	mov	r16,r9
   4c834:	89a2b03a 	or	r17,r17,r6
   4c838:	003f1b06 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c83c:	0101ffc4 	movi	r4,2047
   4c840:	813f441e 	bne	r16,r4,4c554 <__alt_data_end+0xfffec554>
   4c844:	003f1806 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c848:	843ff844 	addi	r16,r16,-31
   4c84c:	01400804 	movi	r5,32
   4c850:	1408d83a 	srl	r4,r2,r16
   4c854:	19405026 	beq	r3,r5,4c998 <__subdf3+0x574>
   4c858:	01401004 	movi	r5,64
   4c85c:	28c7c83a 	sub	r3,r5,r3
   4c860:	10c4983a 	sll	r2,r2,r3
   4c864:	88a2b03a 	or	r17,r17,r2
   4c868:	8822c03a 	cmpne	r17,r17,zero
   4c86c:	2462b03a 	or	r17,r4,r17
   4c870:	0007883a 	mov	r3,zero
   4c874:	0021883a 	mov	r16,zero
   4c878:	003f6d06 	br	4c630 <__alt_data_end+0xfffec630>
   4c87c:	11fff804 	addi	r7,r2,-32
   4c880:	01000804 	movi	r4,32
   4c884:	29ced83a 	srl	r7,r5,r7
   4c888:	11004526 	beq	r2,r4,4c9a0 <__subdf3+0x57c>
   4c88c:	01001004 	movi	r4,64
   4c890:	2089c83a 	sub	r4,r4,r2
   4c894:	2904983a 	sll	r2,r5,r4
   4c898:	118cb03a 	or	r6,r2,r6
   4c89c:	300cc03a 	cmpne	r6,r6,zero
   4c8a0:	398cb03a 	or	r6,r7,r6
   4c8a4:	0005883a 	mov	r2,zero
   4c8a8:	003f3706 	br	4c588 <__alt_data_end+0xfffec588>
   4c8ac:	80002a26 	beq	r16,zero,4c958 <__subdf3+0x534>
   4c8b0:	0101ffc4 	movi	r4,2047
   4c8b4:	49006626 	beq	r9,r4,4ca50 <__subdf3+0x62c>
   4c8b8:	0085c83a 	sub	r2,zero,r2
   4c8bc:	18c02034 	orhi	r3,r3,128
   4c8c0:	01000e04 	movi	r4,56
   4c8c4:	20807e16 	blt	r4,r2,4cac0 <__subdf3+0x69c>
   4c8c8:	010007c4 	movi	r4,31
   4c8cc:	2080e716 	blt	r4,r2,4cc6c <__subdf3+0x848>
   4c8d0:	01000804 	movi	r4,32
   4c8d4:	2089c83a 	sub	r4,r4,r2
   4c8d8:	1914983a 	sll	r10,r3,r4
   4c8dc:	8890d83a 	srl	r8,r17,r2
   4c8e0:	8908983a 	sll	r4,r17,r4
   4c8e4:	1884d83a 	srl	r2,r3,r2
   4c8e8:	5222b03a 	or	r17,r10,r8
   4c8ec:	2006c03a 	cmpne	r3,r4,zero
   4c8f0:	88e2b03a 	or	r17,r17,r3
   4c8f4:	3463c83a 	sub	r17,r6,r17
   4c8f8:	2885c83a 	sub	r2,r5,r2
   4c8fc:	344d803a 	cmpltu	r6,r6,r17
   4c900:	1187c83a 	sub	r3,r2,r6
   4c904:	4821883a 	mov	r16,r9
   4c908:	3825883a 	mov	r18,r7
   4c90c:	003f2306 	br	4c59c <__alt_data_end+0xfffec59c>
   4c910:	24d0b03a 	or	r8,r4,r19
   4c914:	40001b1e 	bne	r8,zero,4c984 <__subdf3+0x560>
   4c918:	0005883a 	mov	r2,zero
   4c91c:	0009883a 	mov	r4,zero
   4c920:	0021883a 	mov	r16,zero
   4c924:	003f4906 	br	4c64c <__alt_data_end+0xfffec64c>
   4c928:	010007c4 	movi	r4,31
   4c92c:	20803a16 	blt	r4,r2,4ca18 <__subdf3+0x5f4>
   4c930:	01000804 	movi	r4,32
   4c934:	2089c83a 	sub	r4,r4,r2
   4c938:	2912983a 	sll	r9,r5,r4
   4c93c:	3090d83a 	srl	r8,r6,r2
   4c940:	3108983a 	sll	r4,r6,r4
   4c944:	2884d83a 	srl	r2,r5,r2
   4c948:	4a12b03a 	or	r9,r9,r8
   4c94c:	2008c03a 	cmpne	r4,r4,zero
   4c950:	4912b03a 	or	r9,r9,r4
   4c954:	003f4e06 	br	4c690 <__alt_data_end+0xfffec690>
   4c958:	1c48b03a 	or	r4,r3,r17
   4c95c:	20003c26 	beq	r4,zero,4ca50 <__subdf3+0x62c>
   4c960:	0084303a 	nor	r2,zero,r2
   4c964:	1000381e 	bne	r2,zero,4ca48 <__subdf3+0x624>
   4c968:	3463c83a 	sub	r17,r6,r17
   4c96c:	28c5c83a 	sub	r2,r5,r3
   4c970:	344d803a 	cmpltu	r6,r6,r17
   4c974:	1187c83a 	sub	r3,r2,r6
   4c978:	4821883a 	mov	r16,r9
   4c97c:	3825883a 	mov	r18,r7
   4c980:	003f0606 	br	4c59c <__alt_data_end+0xfffec59c>
   4c984:	2023883a 	mov	r17,r4
   4c988:	003f0906 	br	4c5b0 <__alt_data_end+0xfffec5b0>
   4c98c:	0101ffc4 	movi	r4,2047
   4c990:	813f3a1e 	bne	r16,r4,4c67c <__alt_data_end+0xfffec67c>
   4c994:	003ec406 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c998:	0005883a 	mov	r2,zero
   4c99c:	003fb106 	br	4c864 <__alt_data_end+0xfffec864>
   4c9a0:	0005883a 	mov	r2,zero
   4c9a4:	003fbc06 	br	4c898 <__alt_data_end+0xfffec898>
   4c9a8:	1c44b03a 	or	r2,r3,r17
   4c9ac:	80008e1e 	bne	r16,zero,4cbe8 <__subdf3+0x7c4>
   4c9b0:	1000c826 	beq	r2,zero,4ccd4 <__subdf3+0x8b0>
   4c9b4:	2984b03a 	or	r2,r5,r6
   4c9b8:	103ebb26 	beq	r2,zero,4c4a8 <__alt_data_end+0xfffec4a8>
   4c9bc:	8989883a 	add	r4,r17,r6
   4c9c0:	1945883a 	add	r2,r3,r5
   4c9c4:	2447803a 	cmpltu	r3,r4,r17
   4c9c8:	1887883a 	add	r3,r3,r2
   4c9cc:	1880202c 	andhi	r2,r3,128
   4c9d0:	2023883a 	mov	r17,r4
   4c9d4:	103f1626 	beq	r2,zero,4c630 <__alt_data_end+0xfffec630>
   4c9d8:	00bfe034 	movhi	r2,65408
   4c9dc:	10bfffc4 	addi	r2,r2,-1
   4c9e0:	5021883a 	mov	r16,r10
   4c9e4:	1886703a 	and	r3,r3,r2
   4c9e8:	003eaf06 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4c9ec:	3825883a 	mov	r18,r7
   4c9f0:	003f0f06 	br	4c630 <__alt_data_end+0xfffec630>
   4c9f4:	1c44b03a 	or	r2,r3,r17
   4c9f8:	8000251e 	bne	r16,zero,4ca90 <__subdf3+0x66c>
   4c9fc:	1000661e 	bne	r2,zero,4cb98 <__subdf3+0x774>
   4ca00:	2990b03a 	or	r8,r5,r6
   4ca04:	40009626 	beq	r8,zero,4cc60 <__subdf3+0x83c>
   4ca08:	2807883a 	mov	r3,r5
   4ca0c:	3023883a 	mov	r17,r6
   4ca10:	3825883a 	mov	r18,r7
   4ca14:	003ea406 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4ca18:	127ff804 	addi	r9,r2,-32
   4ca1c:	01000804 	movi	r4,32
   4ca20:	2a52d83a 	srl	r9,r5,r9
   4ca24:	11008c26 	beq	r2,r4,4cc58 <__subdf3+0x834>
   4ca28:	01001004 	movi	r4,64
   4ca2c:	2085c83a 	sub	r2,r4,r2
   4ca30:	2884983a 	sll	r2,r5,r2
   4ca34:	118cb03a 	or	r6,r2,r6
   4ca38:	300cc03a 	cmpne	r6,r6,zero
   4ca3c:	4992b03a 	or	r9,r9,r6
   4ca40:	0005883a 	mov	r2,zero
   4ca44:	003f1206 	br	4c690 <__alt_data_end+0xfffec690>
   4ca48:	0101ffc4 	movi	r4,2047
   4ca4c:	493f9c1e 	bne	r9,r4,4c8c0 <__alt_data_end+0xfffec8c0>
   4ca50:	2807883a 	mov	r3,r5
   4ca54:	3023883a 	mov	r17,r6
   4ca58:	4821883a 	mov	r16,r9
   4ca5c:	3825883a 	mov	r18,r7
   4ca60:	003e9106 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4ca64:	80001f1e 	bne	r16,zero,4cae4 <__subdf3+0x6c0>
   4ca68:	1c48b03a 	or	r4,r3,r17
   4ca6c:	20005a26 	beq	r4,zero,4cbd8 <__subdf3+0x7b4>
   4ca70:	0084303a 	nor	r2,zero,r2
   4ca74:	1000561e 	bne	r2,zero,4cbd0 <__subdf3+0x7ac>
   4ca78:	89a3883a 	add	r17,r17,r6
   4ca7c:	1945883a 	add	r2,r3,r5
   4ca80:	898d803a 	cmpltu	r6,r17,r6
   4ca84:	3087883a 	add	r3,r6,r2
   4ca88:	4821883a 	mov	r16,r9
   4ca8c:	003f0506 	br	4c6a4 <__alt_data_end+0xfffec6a4>
   4ca90:	10002b1e 	bne	r2,zero,4cb40 <__subdf3+0x71c>
   4ca94:	2984b03a 	or	r2,r5,r6
   4ca98:	10008026 	beq	r2,zero,4cc9c <__subdf3+0x878>
   4ca9c:	2807883a 	mov	r3,r5
   4caa0:	3023883a 	mov	r17,r6
   4caa4:	3825883a 	mov	r18,r7
   4caa8:	0401ffc4 	movi	r16,2047
   4caac:	003e7e06 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cab0:	3809883a 	mov	r4,r7
   4cab4:	0011883a 	mov	r8,zero
   4cab8:	0005883a 	mov	r2,zero
   4cabc:	003ee306 	br	4c64c <__alt_data_end+0xfffec64c>
   4cac0:	1c62b03a 	or	r17,r3,r17
   4cac4:	8822c03a 	cmpne	r17,r17,zero
   4cac8:	0005883a 	mov	r2,zero
   4cacc:	003f8906 	br	4c8f4 <__alt_data_end+0xfffec8f4>
   4cad0:	3809883a 	mov	r4,r7
   4cad4:	4821883a 	mov	r16,r9
   4cad8:	0011883a 	mov	r8,zero
   4cadc:	0005883a 	mov	r2,zero
   4cae0:	003eda06 	br	4c64c <__alt_data_end+0xfffec64c>
   4cae4:	0101ffc4 	movi	r4,2047
   4cae8:	49003b26 	beq	r9,r4,4cbd8 <__subdf3+0x7b4>
   4caec:	0085c83a 	sub	r2,zero,r2
   4caf0:	18c02034 	orhi	r3,r3,128
   4caf4:	01000e04 	movi	r4,56
   4caf8:	20806e16 	blt	r4,r2,4ccb4 <__subdf3+0x890>
   4cafc:	010007c4 	movi	r4,31
   4cb00:	20807716 	blt	r4,r2,4cce0 <__subdf3+0x8bc>
   4cb04:	01000804 	movi	r4,32
   4cb08:	2089c83a 	sub	r4,r4,r2
   4cb0c:	1914983a 	sll	r10,r3,r4
   4cb10:	8890d83a 	srl	r8,r17,r2
   4cb14:	8908983a 	sll	r4,r17,r4
   4cb18:	1884d83a 	srl	r2,r3,r2
   4cb1c:	5222b03a 	or	r17,r10,r8
   4cb20:	2006c03a 	cmpne	r3,r4,zero
   4cb24:	88e2b03a 	or	r17,r17,r3
   4cb28:	89a3883a 	add	r17,r17,r6
   4cb2c:	1145883a 	add	r2,r2,r5
   4cb30:	898d803a 	cmpltu	r6,r17,r6
   4cb34:	3087883a 	add	r3,r6,r2
   4cb38:	4821883a 	mov	r16,r9
   4cb3c:	003ed906 	br	4c6a4 <__alt_data_end+0xfffec6a4>
   4cb40:	2984b03a 	or	r2,r5,r6
   4cb44:	10004226 	beq	r2,zero,4cc50 <__subdf3+0x82c>
   4cb48:	1808d0fa 	srli	r4,r3,3
   4cb4c:	8822d0fa 	srli	r17,r17,3
   4cb50:	1806977a 	slli	r3,r3,29
   4cb54:	2080022c 	andhi	r2,r4,8
   4cb58:	1c62b03a 	or	r17,r3,r17
   4cb5c:	10000826 	beq	r2,zero,4cb80 <__subdf3+0x75c>
   4cb60:	2812d0fa 	srli	r9,r5,3
   4cb64:	4880022c 	andhi	r2,r9,8
   4cb68:	1000051e 	bne	r2,zero,4cb80 <__subdf3+0x75c>
   4cb6c:	300cd0fa 	srli	r6,r6,3
   4cb70:	2804977a 	slli	r2,r5,29
   4cb74:	4809883a 	mov	r4,r9
   4cb78:	3825883a 	mov	r18,r7
   4cb7c:	11a2b03a 	or	r17,r2,r6
   4cb80:	8806d77a 	srli	r3,r17,29
   4cb84:	200890fa 	slli	r4,r4,3
   4cb88:	882290fa 	slli	r17,r17,3
   4cb8c:	0401ffc4 	movi	r16,2047
   4cb90:	1906b03a 	or	r3,r3,r4
   4cb94:	003e4406 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cb98:	2984b03a 	or	r2,r5,r6
   4cb9c:	103e4226 	beq	r2,zero,4c4a8 <__alt_data_end+0xfffec4a8>
   4cba0:	8989c83a 	sub	r4,r17,r6
   4cba4:	8911803a 	cmpltu	r8,r17,r4
   4cba8:	1945c83a 	sub	r2,r3,r5
   4cbac:	1205c83a 	sub	r2,r2,r8
   4cbb0:	1200202c 	andhi	r8,r2,128
   4cbb4:	403e9a26 	beq	r8,zero,4c620 <__alt_data_end+0xfffec620>
   4cbb8:	3463c83a 	sub	r17,r6,r17
   4cbbc:	28c5c83a 	sub	r2,r5,r3
   4cbc0:	344d803a 	cmpltu	r6,r6,r17
   4cbc4:	1187c83a 	sub	r3,r2,r6
   4cbc8:	3825883a 	mov	r18,r7
   4cbcc:	003e3606 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cbd0:	0101ffc4 	movi	r4,2047
   4cbd4:	493fc71e 	bne	r9,r4,4caf4 <__alt_data_end+0xfffecaf4>
   4cbd8:	2807883a 	mov	r3,r5
   4cbdc:	3023883a 	mov	r17,r6
   4cbe0:	4821883a 	mov	r16,r9
   4cbe4:	003e3006 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cbe8:	10003626 	beq	r2,zero,4ccc4 <__subdf3+0x8a0>
   4cbec:	2984b03a 	or	r2,r5,r6
   4cbf0:	10001726 	beq	r2,zero,4cc50 <__subdf3+0x82c>
   4cbf4:	1808d0fa 	srli	r4,r3,3
   4cbf8:	8822d0fa 	srli	r17,r17,3
   4cbfc:	1806977a 	slli	r3,r3,29
   4cc00:	2080022c 	andhi	r2,r4,8
   4cc04:	1c62b03a 	or	r17,r3,r17
   4cc08:	10000726 	beq	r2,zero,4cc28 <__subdf3+0x804>
   4cc0c:	2812d0fa 	srli	r9,r5,3
   4cc10:	4880022c 	andhi	r2,r9,8
   4cc14:	1000041e 	bne	r2,zero,4cc28 <__subdf3+0x804>
   4cc18:	300cd0fa 	srli	r6,r6,3
   4cc1c:	2804977a 	slli	r2,r5,29
   4cc20:	4809883a 	mov	r4,r9
   4cc24:	11a2b03a 	or	r17,r2,r6
   4cc28:	8806d77a 	srli	r3,r17,29
   4cc2c:	200890fa 	slli	r4,r4,3
   4cc30:	882290fa 	slli	r17,r17,3
   4cc34:	3825883a 	mov	r18,r7
   4cc38:	1906b03a 	or	r3,r3,r4
   4cc3c:	0401ffc4 	movi	r16,2047
   4cc40:	003e1906 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cc44:	000b883a 	mov	r5,zero
   4cc48:	0005883a 	mov	r2,zero
   4cc4c:	003e2e06 	br	4c508 <__alt_data_end+0xfffec508>
   4cc50:	0401ffc4 	movi	r16,2047
   4cc54:	003e1406 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cc58:	0005883a 	mov	r2,zero
   4cc5c:	003f7506 	br	4ca34 <__alt_data_end+0xfffeca34>
   4cc60:	0005883a 	mov	r2,zero
   4cc64:	0009883a 	mov	r4,zero
   4cc68:	003e7806 	br	4c64c <__alt_data_end+0xfffec64c>
   4cc6c:	123ff804 	addi	r8,r2,-32
   4cc70:	01000804 	movi	r4,32
   4cc74:	1a10d83a 	srl	r8,r3,r8
   4cc78:	11002526 	beq	r2,r4,4cd10 <__subdf3+0x8ec>
   4cc7c:	01001004 	movi	r4,64
   4cc80:	2085c83a 	sub	r2,r4,r2
   4cc84:	1884983a 	sll	r2,r3,r2
   4cc88:	1444b03a 	or	r2,r2,r17
   4cc8c:	1004c03a 	cmpne	r2,r2,zero
   4cc90:	40a2b03a 	or	r17,r8,r2
   4cc94:	0005883a 	mov	r2,zero
   4cc98:	003f1606 	br	4c8f4 <__alt_data_end+0xfffec8f4>
   4cc9c:	02000434 	movhi	r8,16
   4cca0:	0009883a 	mov	r4,zero
   4cca4:	423fffc4 	addi	r8,r8,-1
   4cca8:	00bfffc4 	movi	r2,-1
   4ccac:	0401ffc4 	movi	r16,2047
   4ccb0:	003e6606 	br	4c64c <__alt_data_end+0xfffec64c>
   4ccb4:	1c62b03a 	or	r17,r3,r17
   4ccb8:	8822c03a 	cmpne	r17,r17,zero
   4ccbc:	0005883a 	mov	r2,zero
   4ccc0:	003f9906 	br	4cb28 <__alt_data_end+0xfffecb28>
   4ccc4:	2807883a 	mov	r3,r5
   4ccc8:	3023883a 	mov	r17,r6
   4cccc:	0401ffc4 	movi	r16,2047
   4ccd0:	003df506 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4ccd4:	2807883a 	mov	r3,r5
   4ccd8:	3023883a 	mov	r17,r6
   4ccdc:	003df206 	br	4c4a8 <__alt_data_end+0xfffec4a8>
   4cce0:	123ff804 	addi	r8,r2,-32
   4cce4:	01000804 	movi	r4,32
   4cce8:	1a10d83a 	srl	r8,r3,r8
   4ccec:	11000a26 	beq	r2,r4,4cd18 <__subdf3+0x8f4>
   4ccf0:	01001004 	movi	r4,64
   4ccf4:	2085c83a 	sub	r2,r4,r2
   4ccf8:	1884983a 	sll	r2,r3,r2
   4ccfc:	1444b03a 	or	r2,r2,r17
   4cd00:	1004c03a 	cmpne	r2,r2,zero
   4cd04:	40a2b03a 	or	r17,r8,r2
   4cd08:	0005883a 	mov	r2,zero
   4cd0c:	003f8606 	br	4cb28 <__alt_data_end+0xfffecb28>
   4cd10:	0005883a 	mov	r2,zero
   4cd14:	003fdc06 	br	4cc88 <__alt_data_end+0xfffecc88>
   4cd18:	0005883a 	mov	r2,zero
   4cd1c:	003ff706 	br	4ccfc <__alt_data_end+0xfffeccfc>

0004cd20 <__fixdfsi>:
   4cd20:	280cd53a 	srli	r6,r5,20
   4cd24:	00c00434 	movhi	r3,16
   4cd28:	18ffffc4 	addi	r3,r3,-1
   4cd2c:	3181ffcc 	andi	r6,r6,2047
   4cd30:	01c0ff84 	movi	r7,1022
   4cd34:	28c6703a 	and	r3,r5,r3
   4cd38:	280ad7fa 	srli	r5,r5,31
   4cd3c:	3980120e 	bge	r7,r6,4cd88 <__fixdfsi+0x68>
   4cd40:	00810744 	movi	r2,1053
   4cd44:	11800c16 	blt	r2,r6,4cd78 <__fixdfsi+0x58>
   4cd48:	00810cc4 	movi	r2,1075
   4cd4c:	1185c83a 	sub	r2,r2,r6
   4cd50:	01c007c4 	movi	r7,31
   4cd54:	18c00434 	orhi	r3,r3,16
   4cd58:	38800d16 	blt	r7,r2,4cd90 <__fixdfsi+0x70>
   4cd5c:	31befb44 	addi	r6,r6,-1043
   4cd60:	2084d83a 	srl	r2,r4,r2
   4cd64:	1986983a 	sll	r3,r3,r6
   4cd68:	1884b03a 	or	r2,r3,r2
   4cd6c:	28000726 	beq	r5,zero,4cd8c <__fixdfsi+0x6c>
   4cd70:	0085c83a 	sub	r2,zero,r2
   4cd74:	f800283a 	ret
   4cd78:	00a00034 	movhi	r2,32768
   4cd7c:	10bfffc4 	addi	r2,r2,-1
   4cd80:	2885883a 	add	r2,r5,r2
   4cd84:	f800283a 	ret
   4cd88:	0005883a 	mov	r2,zero
   4cd8c:	f800283a 	ret
   4cd90:	008104c4 	movi	r2,1043
   4cd94:	1185c83a 	sub	r2,r2,r6
   4cd98:	1884d83a 	srl	r2,r3,r2
   4cd9c:	003ff306 	br	4cd6c <__alt_data_end+0xfffecd6c>

0004cda0 <__floatsidf>:
   4cda0:	defffd04 	addi	sp,sp,-12
   4cda4:	dfc00215 	stw	ra,8(sp)
   4cda8:	dc400115 	stw	r17,4(sp)
   4cdac:	dc000015 	stw	r16,0(sp)
   4cdb0:	20002b26 	beq	r4,zero,4ce60 <__floatsidf+0xc0>
   4cdb4:	2023883a 	mov	r17,r4
   4cdb8:	2020d7fa 	srli	r16,r4,31
   4cdbc:	20002d16 	blt	r4,zero,4ce74 <__floatsidf+0xd4>
   4cdc0:	8809883a 	mov	r4,r17
   4cdc4:	004cf240 	call	4cf24 <__clzsi2>
   4cdc8:	01410784 	movi	r5,1054
   4cdcc:	288bc83a 	sub	r5,r5,r2
   4cdd0:	01010cc4 	movi	r4,1075
   4cdd4:	2149c83a 	sub	r4,r4,r5
   4cdd8:	00c007c4 	movi	r3,31
   4cddc:	1900160e 	bge	r3,r4,4ce38 <__floatsidf+0x98>
   4cde0:	00c104c4 	movi	r3,1043
   4cde4:	1947c83a 	sub	r3,r3,r5
   4cde8:	88c6983a 	sll	r3,r17,r3
   4cdec:	00800434 	movhi	r2,16
   4cdf0:	10bfffc4 	addi	r2,r2,-1
   4cdf4:	1886703a 	and	r3,r3,r2
   4cdf8:	2941ffcc 	andi	r5,r5,2047
   4cdfc:	800d883a 	mov	r6,r16
   4ce00:	0005883a 	mov	r2,zero
   4ce04:	280a953a 	slli	r5,r5,20
   4ce08:	31803fcc 	andi	r6,r6,255
   4ce0c:	01000434 	movhi	r4,16
   4ce10:	300c97fa 	slli	r6,r6,31
   4ce14:	213fffc4 	addi	r4,r4,-1
   4ce18:	1906703a 	and	r3,r3,r4
   4ce1c:	1946b03a 	or	r3,r3,r5
   4ce20:	1986b03a 	or	r3,r3,r6
   4ce24:	dfc00217 	ldw	ra,8(sp)
   4ce28:	dc400117 	ldw	r17,4(sp)
   4ce2c:	dc000017 	ldw	r16,0(sp)
   4ce30:	dec00304 	addi	sp,sp,12
   4ce34:	f800283a 	ret
   4ce38:	00c002c4 	movi	r3,11
   4ce3c:	1887c83a 	sub	r3,r3,r2
   4ce40:	88c6d83a 	srl	r3,r17,r3
   4ce44:	8904983a 	sll	r2,r17,r4
   4ce48:	01000434 	movhi	r4,16
   4ce4c:	213fffc4 	addi	r4,r4,-1
   4ce50:	2941ffcc 	andi	r5,r5,2047
   4ce54:	1906703a 	and	r3,r3,r4
   4ce58:	800d883a 	mov	r6,r16
   4ce5c:	003fe906 	br	4ce04 <__alt_data_end+0xfffece04>
   4ce60:	000d883a 	mov	r6,zero
   4ce64:	000b883a 	mov	r5,zero
   4ce68:	0007883a 	mov	r3,zero
   4ce6c:	0005883a 	mov	r2,zero
   4ce70:	003fe406 	br	4ce04 <__alt_data_end+0xfffece04>
   4ce74:	0123c83a 	sub	r17,zero,r4
   4ce78:	003fd106 	br	4cdc0 <__alt_data_end+0xfffecdc0>

0004ce7c <__floatunsidf>:
   4ce7c:	defffe04 	addi	sp,sp,-8
   4ce80:	dc000015 	stw	r16,0(sp)
   4ce84:	dfc00115 	stw	ra,4(sp)
   4ce88:	2021883a 	mov	r16,r4
   4ce8c:	20002226 	beq	r4,zero,4cf18 <__floatunsidf+0x9c>
   4ce90:	004cf240 	call	4cf24 <__clzsi2>
   4ce94:	01010784 	movi	r4,1054
   4ce98:	2089c83a 	sub	r4,r4,r2
   4ce9c:	01810cc4 	movi	r6,1075
   4cea0:	310dc83a 	sub	r6,r6,r4
   4cea4:	00c007c4 	movi	r3,31
   4cea8:	1980120e 	bge	r3,r6,4cef4 <__floatunsidf+0x78>
   4ceac:	00c104c4 	movi	r3,1043
   4ceb0:	1907c83a 	sub	r3,r3,r4
   4ceb4:	80ca983a 	sll	r5,r16,r3
   4ceb8:	00800434 	movhi	r2,16
   4cebc:	10bfffc4 	addi	r2,r2,-1
   4cec0:	2101ffcc 	andi	r4,r4,2047
   4cec4:	0021883a 	mov	r16,zero
   4cec8:	288a703a 	and	r5,r5,r2
   4cecc:	2008953a 	slli	r4,r4,20
   4ced0:	00c00434 	movhi	r3,16
   4ced4:	18ffffc4 	addi	r3,r3,-1
   4ced8:	28c6703a 	and	r3,r5,r3
   4cedc:	8005883a 	mov	r2,r16
   4cee0:	1906b03a 	or	r3,r3,r4
   4cee4:	dfc00117 	ldw	ra,4(sp)
   4cee8:	dc000017 	ldw	r16,0(sp)
   4ceec:	dec00204 	addi	sp,sp,8
   4cef0:	f800283a 	ret
   4cef4:	00c002c4 	movi	r3,11
   4cef8:	188bc83a 	sub	r5,r3,r2
   4cefc:	814ad83a 	srl	r5,r16,r5
   4cf00:	00c00434 	movhi	r3,16
   4cf04:	18ffffc4 	addi	r3,r3,-1
   4cf08:	81a0983a 	sll	r16,r16,r6
   4cf0c:	2101ffcc 	andi	r4,r4,2047
   4cf10:	28ca703a 	and	r5,r5,r3
   4cf14:	003fed06 	br	4cecc <__alt_data_end+0xfffececc>
   4cf18:	0009883a 	mov	r4,zero
   4cf1c:	000b883a 	mov	r5,zero
   4cf20:	003fea06 	br	4cecc <__alt_data_end+0xfffececc>

0004cf24 <__clzsi2>:
   4cf24:	00bfffd4 	movui	r2,65535
   4cf28:	11000536 	bltu	r2,r4,4cf40 <__clzsi2+0x1c>
   4cf2c:	00803fc4 	movi	r2,255
   4cf30:	11000f36 	bltu	r2,r4,4cf70 <__clzsi2+0x4c>
   4cf34:	00800804 	movi	r2,32
   4cf38:	0007883a 	mov	r3,zero
   4cf3c:	00000506 	br	4cf54 <__clzsi2+0x30>
   4cf40:	00804034 	movhi	r2,256
   4cf44:	10bfffc4 	addi	r2,r2,-1
   4cf48:	11000c2e 	bgeu	r2,r4,4cf7c <__clzsi2+0x58>
   4cf4c:	00800204 	movi	r2,8
   4cf50:	00c00604 	movi	r3,24
   4cf54:	20c8d83a 	srl	r4,r4,r3
   4cf58:	00c00174 	movhi	r3,5
   4cf5c:	18ff2e04 	addi	r3,r3,-840
   4cf60:	1909883a 	add	r4,r3,r4
   4cf64:	20c00003 	ldbu	r3,0(r4)
   4cf68:	10c5c83a 	sub	r2,r2,r3
   4cf6c:	f800283a 	ret
   4cf70:	00800604 	movi	r2,24
   4cf74:	00c00204 	movi	r3,8
   4cf78:	003ff606 	br	4cf54 <__alt_data_end+0xfffecf54>
   4cf7c:	00800404 	movi	r2,16
   4cf80:	1007883a 	mov	r3,r2
   4cf84:	003ff306 	br	4cf54 <__alt_data_end+0xfffecf54>

0004cf88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cf88:	defffe04 	addi	sp,sp,-8
   4cf8c:	dfc00115 	stw	ra,4(sp)
   4cf90:	df000015 	stw	fp,0(sp)
   4cf94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cf98:	d0a00b17 	ldw	r2,-32724(gp)
   4cf9c:	10000326 	beq	r2,zero,4cfac <alt_get_errno+0x24>
   4cfa0:	d0a00b17 	ldw	r2,-32724(gp)
   4cfa4:	103ee83a 	callr	r2
   4cfa8:	00000106 	br	4cfb0 <alt_get_errno+0x28>
   4cfac:	d0a6d304 	addi	r2,gp,-25780
}
   4cfb0:	e037883a 	mov	sp,fp
   4cfb4:	dfc00117 	ldw	ra,4(sp)
   4cfb8:	df000017 	ldw	fp,0(sp)
   4cfbc:	dec00204 	addi	sp,sp,8
   4cfc0:	f800283a 	ret

0004cfc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4cfc4:	defffb04 	addi	sp,sp,-20
   4cfc8:	dfc00415 	stw	ra,16(sp)
   4cfcc:	df000315 	stw	fp,12(sp)
   4cfd0:	df000304 	addi	fp,sp,12
   4cfd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4cfd8:	e0bfff17 	ldw	r2,-4(fp)
   4cfdc:	10000616 	blt	r2,zero,4cff8 <close+0x34>
   4cfe0:	e0bfff17 	ldw	r2,-4(fp)
   4cfe4:	10c00324 	muli	r3,r2,12
   4cfe8:	00800174 	movhi	r2,5
   4cfec:	1081ae04 	addi	r2,r2,1720
   4cff0:	1885883a 	add	r2,r3,r2
   4cff4:	00000106 	br	4cffc <close+0x38>
   4cff8:	0005883a 	mov	r2,zero
   4cffc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4d000:	e0bffd17 	ldw	r2,-12(fp)
   4d004:	10001926 	beq	r2,zero,4d06c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4d008:	e0bffd17 	ldw	r2,-12(fp)
   4d00c:	10800017 	ldw	r2,0(r2)
   4d010:	10800417 	ldw	r2,16(r2)
   4d014:	10000626 	beq	r2,zero,4d030 <close+0x6c>
   4d018:	e0bffd17 	ldw	r2,-12(fp)
   4d01c:	10800017 	ldw	r2,0(r2)
   4d020:	10800417 	ldw	r2,16(r2)
   4d024:	e13ffd17 	ldw	r4,-12(fp)
   4d028:	103ee83a 	callr	r2
   4d02c:	00000106 	br	4d034 <close+0x70>
   4d030:	0005883a 	mov	r2,zero
   4d034:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4d038:	e13fff17 	ldw	r4,-4(fp)
   4d03c:	004db8c0 	call	4db8c <alt_release_fd>
    if (rval < 0)
   4d040:	e0bffe17 	ldw	r2,-8(fp)
   4d044:	1000070e 	bge	r2,zero,4d064 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4d048:	004cf880 	call	4cf88 <alt_get_errno>
   4d04c:	1007883a 	mov	r3,r2
   4d050:	e0bffe17 	ldw	r2,-8(fp)
   4d054:	0085c83a 	sub	r2,zero,r2
   4d058:	18800015 	stw	r2,0(r3)
      return -1;
   4d05c:	00bfffc4 	movi	r2,-1
   4d060:	00000706 	br	4d080 <close+0xbc>
    }
    return 0;
   4d064:	0005883a 	mov	r2,zero
   4d068:	00000506 	br	4d080 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d06c:	004cf880 	call	4cf88 <alt_get_errno>
   4d070:	1007883a 	mov	r3,r2
   4d074:	00801444 	movi	r2,81
   4d078:	18800015 	stw	r2,0(r3)
    return -1;
   4d07c:	00bfffc4 	movi	r2,-1
  }
}
   4d080:	e037883a 	mov	sp,fp
   4d084:	dfc00117 	ldw	ra,4(sp)
   4d088:	df000017 	ldw	fp,0(sp)
   4d08c:	dec00204 	addi	sp,sp,8
   4d090:	f800283a 	ret

0004d094 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4d094:	defffc04 	addi	sp,sp,-16
   4d098:	df000315 	stw	fp,12(sp)
   4d09c:	df000304 	addi	fp,sp,12
   4d0a0:	e13ffd15 	stw	r4,-12(fp)
   4d0a4:	e17ffe15 	stw	r5,-8(fp)
   4d0a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4d0ac:	e0bfff17 	ldw	r2,-4(fp)
}
   4d0b0:	e037883a 	mov	sp,fp
   4d0b4:	df000017 	ldw	fp,0(sp)
   4d0b8:	dec00104 	addi	sp,sp,4
   4d0bc:	f800283a 	ret

0004d0c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d0c0:	defffe04 	addi	sp,sp,-8
   4d0c4:	dfc00115 	stw	ra,4(sp)
   4d0c8:	df000015 	stw	fp,0(sp)
   4d0cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d0d0:	d0a00b17 	ldw	r2,-32724(gp)
   4d0d4:	10000326 	beq	r2,zero,4d0e4 <alt_get_errno+0x24>
   4d0d8:	d0a00b17 	ldw	r2,-32724(gp)
   4d0dc:	103ee83a 	callr	r2
   4d0e0:	00000106 	br	4d0e8 <alt_get_errno+0x28>
   4d0e4:	d0a6d304 	addi	r2,gp,-25780
}
   4d0e8:	e037883a 	mov	sp,fp
   4d0ec:	dfc00117 	ldw	ra,4(sp)
   4d0f0:	df000017 	ldw	fp,0(sp)
   4d0f4:	dec00204 	addi	sp,sp,8
   4d0f8:	f800283a 	ret

0004d0fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4d0fc:	defffb04 	addi	sp,sp,-20
   4d100:	dfc00415 	stw	ra,16(sp)
   4d104:	df000315 	stw	fp,12(sp)
   4d108:	df000304 	addi	fp,sp,12
   4d10c:	e13ffe15 	stw	r4,-8(fp)
   4d110:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d114:	e0bffe17 	ldw	r2,-8(fp)
   4d118:	10000616 	blt	r2,zero,4d134 <fstat+0x38>
   4d11c:	e0bffe17 	ldw	r2,-8(fp)
   4d120:	10c00324 	muli	r3,r2,12
   4d124:	00800174 	movhi	r2,5
   4d128:	1081ae04 	addi	r2,r2,1720
   4d12c:	1885883a 	add	r2,r3,r2
   4d130:	00000106 	br	4d138 <fstat+0x3c>
   4d134:	0005883a 	mov	r2,zero
   4d138:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4d13c:	e0bffd17 	ldw	r2,-12(fp)
   4d140:	10001026 	beq	r2,zero,4d184 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4d144:	e0bffd17 	ldw	r2,-12(fp)
   4d148:	10800017 	ldw	r2,0(r2)
   4d14c:	10800817 	ldw	r2,32(r2)
   4d150:	10000726 	beq	r2,zero,4d170 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4d154:	e0bffd17 	ldw	r2,-12(fp)
   4d158:	10800017 	ldw	r2,0(r2)
   4d15c:	10800817 	ldw	r2,32(r2)
   4d160:	e17fff17 	ldw	r5,-4(fp)
   4d164:	e13ffd17 	ldw	r4,-12(fp)
   4d168:	103ee83a 	callr	r2
   4d16c:	00000a06 	br	4d198 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4d170:	e0bfff17 	ldw	r2,-4(fp)
   4d174:	00c80004 	movi	r3,8192
   4d178:	10c00115 	stw	r3,4(r2)
      return 0;
   4d17c:	0005883a 	mov	r2,zero
   4d180:	00000506 	br	4d198 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d184:	004d0c00 	call	4d0c0 <alt_get_errno>
   4d188:	1007883a 	mov	r3,r2
   4d18c:	00801444 	movi	r2,81
   4d190:	18800015 	stw	r2,0(r3)
    return -1;
   4d194:	00bfffc4 	movi	r2,-1
  }
}
   4d198:	e037883a 	mov	sp,fp
   4d19c:	dfc00117 	ldw	ra,4(sp)
   4d1a0:	df000017 	ldw	fp,0(sp)
   4d1a4:	dec00204 	addi	sp,sp,8
   4d1a8:	f800283a 	ret

0004d1ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4d1ac:	defff904 	addi	sp,sp,-28
   4d1b0:	dfc00615 	stw	ra,24(sp)
   4d1b4:	df000515 	stw	fp,20(sp)
   4d1b8:	df000504 	addi	fp,sp,20
   4d1bc:	e13ffc15 	stw	r4,-16(fp)
   4d1c0:	e17ffd15 	stw	r5,-12(fp)
   4d1c4:	e1bffe15 	stw	r6,-8(fp)
   4d1c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4d1cc:	e0800217 	ldw	r2,8(fp)
   4d1d0:	d8800015 	stw	r2,0(sp)
   4d1d4:	e1ffff17 	ldw	r7,-4(fp)
   4d1d8:	e1bffe17 	ldw	r6,-8(fp)
   4d1dc:	e17ffd17 	ldw	r5,-12(fp)
   4d1e0:	e13ffc17 	ldw	r4,-16(fp)
   4d1e4:	004d35c0 	call	4d35c <alt_iic_isr_register>
}  
   4d1e8:	e037883a 	mov	sp,fp
   4d1ec:	dfc00117 	ldw	ra,4(sp)
   4d1f0:	df000017 	ldw	fp,0(sp)
   4d1f4:	dec00204 	addi	sp,sp,8
   4d1f8:	f800283a 	ret

0004d1fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4d1fc:	defff904 	addi	sp,sp,-28
   4d200:	df000615 	stw	fp,24(sp)
   4d204:	df000604 	addi	fp,sp,24
   4d208:	e13ffe15 	stw	r4,-8(fp)
   4d20c:	e17fff15 	stw	r5,-4(fp)
   4d210:	e0bfff17 	ldw	r2,-4(fp)
   4d214:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d218:	0005303a 	rdctl	r2,status
   4d21c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d220:	e0fffb17 	ldw	r3,-20(fp)
   4d224:	00bfff84 	movi	r2,-2
   4d228:	1884703a 	and	r2,r3,r2
   4d22c:	1001703a 	wrctl	status,r2
  
  return context;
   4d230:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4d234:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4d238:	00c00044 	movi	r3,1
   4d23c:	e0bffa17 	ldw	r2,-24(fp)
   4d240:	1884983a 	sll	r2,r3,r2
   4d244:	1007883a 	mov	r3,r2
   4d248:	d0a6d417 	ldw	r2,-25776(gp)
   4d24c:	1884b03a 	or	r2,r3,r2
   4d250:	d0a6d415 	stw	r2,-25776(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4d254:	d0a6d417 	ldw	r2,-25776(gp)
   4d258:	100170fa 	wrctl	ienable,r2
   4d25c:	e0bffc17 	ldw	r2,-16(fp)
   4d260:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d264:	e0bffd17 	ldw	r2,-12(fp)
   4d268:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4d26c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4d270:	0001883a 	nop
}
   4d274:	e037883a 	mov	sp,fp
   4d278:	df000017 	ldw	fp,0(sp)
   4d27c:	dec00104 	addi	sp,sp,4
   4d280:	f800283a 	ret

0004d284 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4d284:	defff904 	addi	sp,sp,-28
   4d288:	df000615 	stw	fp,24(sp)
   4d28c:	df000604 	addi	fp,sp,24
   4d290:	e13ffe15 	stw	r4,-8(fp)
   4d294:	e17fff15 	stw	r5,-4(fp)
   4d298:	e0bfff17 	ldw	r2,-4(fp)
   4d29c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d2a0:	0005303a 	rdctl	r2,status
   4d2a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d2a8:	e0fffb17 	ldw	r3,-20(fp)
   4d2ac:	00bfff84 	movi	r2,-2
   4d2b0:	1884703a 	and	r2,r3,r2
   4d2b4:	1001703a 	wrctl	status,r2
  
  return context;
   4d2b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4d2bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4d2c0:	00c00044 	movi	r3,1
   4d2c4:	e0bffa17 	ldw	r2,-24(fp)
   4d2c8:	1884983a 	sll	r2,r3,r2
   4d2cc:	0084303a 	nor	r2,zero,r2
   4d2d0:	1007883a 	mov	r3,r2
   4d2d4:	d0a6d417 	ldw	r2,-25776(gp)
   4d2d8:	1884703a 	and	r2,r3,r2
   4d2dc:	d0a6d415 	stw	r2,-25776(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4d2e0:	d0a6d417 	ldw	r2,-25776(gp)
   4d2e4:	100170fa 	wrctl	ienable,r2
   4d2e8:	e0bffc17 	ldw	r2,-16(fp)
   4d2ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d2f0:	e0bffd17 	ldw	r2,-12(fp)
   4d2f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4d2f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4d2fc:	0001883a 	nop
}
   4d300:	e037883a 	mov	sp,fp
   4d304:	df000017 	ldw	fp,0(sp)
   4d308:	dec00104 	addi	sp,sp,4
   4d30c:	f800283a 	ret

0004d310 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4d310:	defffc04 	addi	sp,sp,-16
   4d314:	df000315 	stw	fp,12(sp)
   4d318:	df000304 	addi	fp,sp,12
   4d31c:	e13ffe15 	stw	r4,-8(fp)
   4d320:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4d324:	000530fa 	rdctl	r2,ienable
   4d328:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4d32c:	00c00044 	movi	r3,1
   4d330:	e0bfff17 	ldw	r2,-4(fp)
   4d334:	1884983a 	sll	r2,r3,r2
   4d338:	1007883a 	mov	r3,r2
   4d33c:	e0bffd17 	ldw	r2,-12(fp)
   4d340:	1884703a 	and	r2,r3,r2
   4d344:	1004c03a 	cmpne	r2,r2,zero
   4d348:	10803fcc 	andi	r2,r2,255
}
   4d34c:	e037883a 	mov	sp,fp
   4d350:	df000017 	ldw	fp,0(sp)
   4d354:	dec00104 	addi	sp,sp,4
   4d358:	f800283a 	ret

0004d35c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4d35c:	defff504 	addi	sp,sp,-44
   4d360:	dfc00a15 	stw	ra,40(sp)
   4d364:	df000915 	stw	fp,36(sp)
   4d368:	df000904 	addi	fp,sp,36
   4d36c:	e13ffc15 	stw	r4,-16(fp)
   4d370:	e17ffd15 	stw	r5,-12(fp)
   4d374:	e1bffe15 	stw	r6,-8(fp)
   4d378:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4d37c:	00bffa84 	movi	r2,-22
   4d380:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4d384:	e0bffd17 	ldw	r2,-12(fp)
   4d388:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4d38c:	e0bff817 	ldw	r2,-32(fp)
   4d390:	10800808 	cmpgei	r2,r2,32
   4d394:	1000271e 	bne	r2,zero,4d434 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d398:	0005303a 	rdctl	r2,status
   4d39c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d3a0:	e0fffb17 	ldw	r3,-20(fp)
   4d3a4:	00bfff84 	movi	r2,-2
   4d3a8:	1884703a 	and	r2,r3,r2
   4d3ac:	1001703a 	wrctl	status,r2
  
  return context;
   4d3b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4d3b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4d3b8:	00800174 	movhi	r2,5
   4d3bc:	108d0b04 	addi	r2,r2,13356
   4d3c0:	e0fff817 	ldw	r3,-32(fp)
   4d3c4:	180690fa 	slli	r3,r3,3
   4d3c8:	10c5883a 	add	r2,r2,r3
   4d3cc:	e0fffe17 	ldw	r3,-8(fp)
   4d3d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4d3d4:	00800174 	movhi	r2,5
   4d3d8:	108d0b04 	addi	r2,r2,13356
   4d3dc:	e0fff817 	ldw	r3,-32(fp)
   4d3e0:	180690fa 	slli	r3,r3,3
   4d3e4:	10c5883a 	add	r2,r2,r3
   4d3e8:	10800104 	addi	r2,r2,4
   4d3ec:	e0ffff17 	ldw	r3,-4(fp)
   4d3f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4d3f4:	e0bffe17 	ldw	r2,-8(fp)
   4d3f8:	10000526 	beq	r2,zero,4d410 <alt_iic_isr_register+0xb4>
   4d3fc:	e0bff817 	ldw	r2,-32(fp)
   4d400:	100b883a 	mov	r5,r2
   4d404:	e13ffc17 	ldw	r4,-16(fp)
   4d408:	004d1fc0 	call	4d1fc <alt_ic_irq_enable>
   4d40c:	00000406 	br	4d420 <alt_iic_isr_register+0xc4>
   4d410:	e0bff817 	ldw	r2,-32(fp)
   4d414:	100b883a 	mov	r5,r2
   4d418:	e13ffc17 	ldw	r4,-16(fp)
   4d41c:	004d2840 	call	4d284 <alt_ic_irq_disable>
   4d420:	e0bff715 	stw	r2,-36(fp)
   4d424:	e0bffa17 	ldw	r2,-24(fp)
   4d428:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d42c:	e0bff917 	ldw	r2,-28(fp)
   4d430:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4d434:	e0bff717 	ldw	r2,-36(fp)
}
   4d438:	e037883a 	mov	sp,fp
   4d43c:	dfc00117 	ldw	ra,4(sp)
   4d440:	df000017 	ldw	fp,0(sp)
   4d444:	dec00204 	addi	sp,sp,8
   4d448:	f800283a 	ret

0004d44c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d44c:	defffe04 	addi	sp,sp,-8
   4d450:	dfc00115 	stw	ra,4(sp)
   4d454:	df000015 	stw	fp,0(sp)
   4d458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d45c:	d0a00b17 	ldw	r2,-32724(gp)
   4d460:	10000326 	beq	r2,zero,4d470 <alt_get_errno+0x24>
   4d464:	d0a00b17 	ldw	r2,-32724(gp)
   4d468:	103ee83a 	callr	r2
   4d46c:	00000106 	br	4d474 <alt_get_errno+0x28>
   4d470:	d0a6d304 	addi	r2,gp,-25780
}
   4d474:	e037883a 	mov	sp,fp
   4d478:	dfc00117 	ldw	ra,4(sp)
   4d47c:	df000017 	ldw	fp,0(sp)
   4d480:	dec00204 	addi	sp,sp,8
   4d484:	f800283a 	ret

0004d488 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4d488:	deffed04 	addi	sp,sp,-76
   4d48c:	dfc01215 	stw	ra,72(sp)
   4d490:	df001115 	stw	fp,68(sp)
   4d494:	df001104 	addi	fp,sp,68
   4d498:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d49c:	e0bfff17 	ldw	r2,-4(fp)
   4d4a0:	10000616 	blt	r2,zero,4d4bc <isatty+0x34>
   4d4a4:	e0bfff17 	ldw	r2,-4(fp)
   4d4a8:	10c00324 	muli	r3,r2,12
   4d4ac:	00800174 	movhi	r2,5
   4d4b0:	1081ae04 	addi	r2,r2,1720
   4d4b4:	1885883a 	add	r2,r3,r2
   4d4b8:	00000106 	br	4d4c0 <isatty+0x38>
   4d4bc:	0005883a 	mov	r2,zero
   4d4c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4d4c4:	e0bfef17 	ldw	r2,-68(fp)
   4d4c8:	10000e26 	beq	r2,zero,4d504 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4d4cc:	e0bfef17 	ldw	r2,-68(fp)
   4d4d0:	10800017 	ldw	r2,0(r2)
   4d4d4:	10800817 	ldw	r2,32(r2)
   4d4d8:	1000021e 	bne	r2,zero,4d4e4 <isatty+0x5c>
    {
      return 1;
   4d4dc:	00800044 	movi	r2,1
   4d4e0:	00000d06 	br	4d518 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4d4e4:	e0bff004 	addi	r2,fp,-64
   4d4e8:	100b883a 	mov	r5,r2
   4d4ec:	e13fff17 	ldw	r4,-4(fp)
   4d4f0:	004d0fc0 	call	4d0fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4d4f4:	e0bff117 	ldw	r2,-60(fp)
   4d4f8:	10880020 	cmpeqi	r2,r2,8192
   4d4fc:	10803fcc 	andi	r2,r2,255
   4d500:	00000506 	br	4d518 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d504:	004d44c0 	call	4d44c <alt_get_errno>
   4d508:	1007883a 	mov	r3,r2
   4d50c:	00801444 	movi	r2,81
   4d510:	18800015 	stw	r2,0(r3)
    return 0;
   4d514:	0005883a 	mov	r2,zero
  }
}
   4d518:	e037883a 	mov	sp,fp
   4d51c:	dfc00117 	ldw	ra,4(sp)
   4d520:	df000017 	ldw	fp,0(sp)
   4d524:	dec00204 	addi	sp,sp,8
   4d528:	f800283a 	ret

0004d52c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4d52c:	defffc04 	addi	sp,sp,-16
   4d530:	df000315 	stw	fp,12(sp)
   4d534:	df000304 	addi	fp,sp,12
   4d538:	e13ffd15 	stw	r4,-12(fp)
   4d53c:	e17ffe15 	stw	r5,-8(fp)
   4d540:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4d544:	e0fffe17 	ldw	r3,-8(fp)
   4d548:	e0bffd17 	ldw	r2,-12(fp)
   4d54c:	18800c26 	beq	r3,r2,4d580 <alt_load_section+0x54>
  {
    while( to != end )
   4d550:	00000806 	br	4d574 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4d554:	e0bffe17 	ldw	r2,-8(fp)
   4d558:	10c00104 	addi	r3,r2,4
   4d55c:	e0fffe15 	stw	r3,-8(fp)
   4d560:	e0fffd17 	ldw	r3,-12(fp)
   4d564:	19000104 	addi	r4,r3,4
   4d568:	e13ffd15 	stw	r4,-12(fp)
   4d56c:	18c00017 	ldw	r3,0(r3)
   4d570:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4d574:	e0fffe17 	ldw	r3,-8(fp)
   4d578:	e0bfff17 	ldw	r2,-4(fp)
   4d57c:	18bff51e 	bne	r3,r2,4d554 <__alt_data_end+0xfffed554>
    {
      *to++ = *from++;
    }
  }
}
   4d580:	0001883a 	nop
   4d584:	e037883a 	mov	sp,fp
   4d588:	df000017 	ldw	fp,0(sp)
   4d58c:	dec00104 	addi	sp,sp,4
   4d590:	f800283a 	ret

0004d594 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4d594:	defffe04 	addi	sp,sp,-8
   4d598:	dfc00115 	stw	ra,4(sp)
   4d59c:	df000015 	stw	fp,0(sp)
   4d5a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4d5a4:	01800174 	movhi	r6,5
   4d5a8:	31863604 	addi	r6,r6,6360
   4d5ac:	01400174 	movhi	r5,5
   4d5b0:	297f7b04 	addi	r5,r5,-532
   4d5b4:	01000174 	movhi	r4,5
   4d5b8:	21063604 	addi	r4,r4,6360
   4d5bc:	004d52c0 	call	4d52c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4d5c0:	01800134 	movhi	r6,4
   4d5c4:	31809404 	addi	r6,r6,592
   4d5c8:	01400134 	movhi	r5,4
   4d5cc:	29400804 	addi	r5,r5,32
   4d5d0:	01000134 	movhi	r4,4
   4d5d4:	21000804 	addi	r4,r4,32
   4d5d8:	004d52c0 	call	4d52c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4d5dc:	01800174 	movhi	r6,5
   4d5e0:	31bf7b04 	addi	r6,r6,-532
   4d5e4:	01400174 	movhi	r5,5
   4d5e8:	297e9004 	addi	r5,r5,-1472
   4d5ec:	01000174 	movhi	r4,5
   4d5f0:	213e9004 	addi	r4,r4,-1472
   4d5f4:	004d52c0 	call	4d52c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4d5f8:	004eb300 	call	4eb30 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4d5fc:	004ecf00 	call	4ecf0 <alt_icache_flush_all>
}
   4d600:	0001883a 	nop
   4d604:	e037883a 	mov	sp,fp
   4d608:	dfc00117 	ldw	ra,4(sp)
   4d60c:	df000017 	ldw	fp,0(sp)
   4d610:	dec00204 	addi	sp,sp,8
   4d614:	f800283a 	ret

0004d618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d618:	defffe04 	addi	sp,sp,-8
   4d61c:	dfc00115 	stw	ra,4(sp)
   4d620:	df000015 	stw	fp,0(sp)
   4d624:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d628:	d0a00b17 	ldw	r2,-32724(gp)
   4d62c:	10000326 	beq	r2,zero,4d63c <alt_get_errno+0x24>
   4d630:	d0a00b17 	ldw	r2,-32724(gp)
   4d634:	103ee83a 	callr	r2
   4d638:	00000106 	br	4d640 <alt_get_errno+0x28>
   4d63c:	d0a6d304 	addi	r2,gp,-25780
}
   4d640:	e037883a 	mov	sp,fp
   4d644:	dfc00117 	ldw	ra,4(sp)
   4d648:	df000017 	ldw	fp,0(sp)
   4d64c:	dec00204 	addi	sp,sp,8
   4d650:	f800283a 	ret

0004d654 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4d654:	defff904 	addi	sp,sp,-28
   4d658:	dfc00615 	stw	ra,24(sp)
   4d65c:	df000515 	stw	fp,20(sp)
   4d660:	df000504 	addi	fp,sp,20
   4d664:	e13ffd15 	stw	r4,-12(fp)
   4d668:	e17ffe15 	stw	r5,-8(fp)
   4d66c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4d670:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d674:	e0bffd17 	ldw	r2,-12(fp)
   4d678:	10000616 	blt	r2,zero,4d694 <lseek+0x40>
   4d67c:	e0bffd17 	ldw	r2,-12(fp)
   4d680:	10c00324 	muli	r3,r2,12
   4d684:	00800174 	movhi	r2,5
   4d688:	1081ae04 	addi	r2,r2,1720
   4d68c:	1885883a 	add	r2,r3,r2
   4d690:	00000106 	br	4d698 <lseek+0x44>
   4d694:	0005883a 	mov	r2,zero
   4d698:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4d69c:	e0bffc17 	ldw	r2,-16(fp)
   4d6a0:	10001026 	beq	r2,zero,4d6e4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4d6a4:	e0bffc17 	ldw	r2,-16(fp)
   4d6a8:	10800017 	ldw	r2,0(r2)
   4d6ac:	10800717 	ldw	r2,28(r2)
   4d6b0:	10000926 	beq	r2,zero,4d6d8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4d6b4:	e0bffc17 	ldw	r2,-16(fp)
   4d6b8:	10800017 	ldw	r2,0(r2)
   4d6bc:	10800717 	ldw	r2,28(r2)
   4d6c0:	e1bfff17 	ldw	r6,-4(fp)
   4d6c4:	e17ffe17 	ldw	r5,-8(fp)
   4d6c8:	e13ffc17 	ldw	r4,-16(fp)
   4d6cc:	103ee83a 	callr	r2
   4d6d0:	e0bffb15 	stw	r2,-20(fp)
   4d6d4:	00000506 	br	4d6ec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4d6d8:	00bfde84 	movi	r2,-134
   4d6dc:	e0bffb15 	stw	r2,-20(fp)
   4d6e0:	00000206 	br	4d6ec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4d6e4:	00bfebc4 	movi	r2,-81
   4d6e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4d6ec:	e0bffb17 	ldw	r2,-20(fp)
   4d6f0:	1000070e 	bge	r2,zero,4d710 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4d6f4:	004d6180 	call	4d618 <alt_get_errno>
   4d6f8:	1007883a 	mov	r3,r2
   4d6fc:	e0bffb17 	ldw	r2,-20(fp)
   4d700:	0085c83a 	sub	r2,zero,r2
   4d704:	18800015 	stw	r2,0(r3)
    rc = -1;
   4d708:	00bfffc4 	movi	r2,-1
   4d70c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4d710:	e0bffb17 	ldw	r2,-20(fp)
}
   4d714:	e037883a 	mov	sp,fp
   4d718:	dfc00117 	ldw	ra,4(sp)
   4d71c:	df000017 	ldw	fp,0(sp)
   4d720:	dec00204 	addi	sp,sp,8
   4d724:	f800283a 	ret

0004d728 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4d728:	defffd04 	addi	sp,sp,-12
   4d72c:	dfc00215 	stw	ra,8(sp)
   4d730:	df000115 	stw	fp,4(sp)
   4d734:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4d738:	0009883a 	mov	r4,zero
   4d73c:	004de080 	call	4de08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4d740:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4d744:	004de400 	call	4de40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4d748:	01800174 	movhi	r6,5
   4d74c:	31bf7104 	addi	r6,r6,-572
   4d750:	01400174 	movhi	r5,5
   4d754:	297f7104 	addi	r5,r5,-572
   4d758:	01000174 	movhi	r4,5
   4d75c:	213f7104 	addi	r4,r4,-572
   4d760:	004ee700 	call	4ee70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4d764:	004ec300 	call	4ec30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4d768:	01000174 	movhi	r4,5
   4d76c:	213b2404 	addi	r4,r4,-4976
   4d770:	004f5440 	call	4f544 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4d774:	d0a6d517 	ldw	r2,-25772(gp)
   4d778:	d0e6d617 	ldw	r3,-25768(gp)
   4d77c:	d126d717 	ldw	r4,-25764(gp)
   4d780:	200d883a 	mov	r6,r4
   4d784:	180b883a 	mov	r5,r3
   4d788:	1009883a 	mov	r4,r2
   4d78c:	00407100 	call	40710 <main>
   4d790:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4d794:	01000044 	movi	r4,1
   4d798:	004cfc40 	call	4cfc4 <close>
  exit (result);
   4d79c:	e13fff17 	ldw	r4,-4(fp)
   4d7a0:	004f5580 	call	4f558 <exit>

0004d7a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4d7a4:	defffe04 	addi	sp,sp,-8
   4d7a8:	df000115 	stw	fp,4(sp)
   4d7ac:	df000104 	addi	fp,sp,4
   4d7b0:	e13fff15 	stw	r4,-4(fp)
}
   4d7b4:	0001883a 	nop
   4d7b8:	e037883a 	mov	sp,fp
   4d7bc:	df000017 	ldw	fp,0(sp)
   4d7c0:	dec00104 	addi	sp,sp,4
   4d7c4:	f800283a 	ret

0004d7c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4d7c8:	defffe04 	addi	sp,sp,-8
   4d7cc:	df000115 	stw	fp,4(sp)
   4d7d0:	df000104 	addi	fp,sp,4
   4d7d4:	e13fff15 	stw	r4,-4(fp)
}
   4d7d8:	0001883a 	nop
   4d7dc:	e037883a 	mov	sp,fp
   4d7e0:	df000017 	ldw	fp,0(sp)
   4d7e4:	dec00104 	addi	sp,sp,4
   4d7e8:	f800283a 	ret

0004d7ec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   4d7ec:	defff204 	addi	sp,sp,-56
   4d7f0:	dfc00a15 	stw	ra,40(sp)
   4d7f4:	df000915 	stw	fp,36(sp)
   4d7f8:	df000904 	addi	fp,sp,36
   4d7fc:	e13fff15 	stw	r4,-4(fp)
   4d800:	e1400215 	stw	r5,8(fp)
   4d804:	e1800315 	stw	r6,12(fp)
   4d808:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   4d80c:	e0800204 	addi	r2,fp,8
   4d810:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   4d814:	e0bfff17 	ldw	r2,-4(fp)
   4d818:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   4d81c:	00006f06 	br	4d9dc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   4d820:	e0bff807 	ldb	r2,-32(fp)
   4d824:	10800960 	cmpeqi	r2,r2,37
   4d828:	1000041e 	bne	r2,zero,4d83c <alt_printf+0x50>
        {
            alt_putchar(c);
   4d82c:	e0bff807 	ldb	r2,-32(fp)
   4d830:	1009883a 	mov	r4,r2
   4d834:	004da180 	call	4da18 <alt_putchar>
   4d838:	00006806 	br	4d9dc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   4d83c:	e0bff717 	ldw	r2,-36(fp)
   4d840:	10c00044 	addi	r3,r2,1
   4d844:	e0fff715 	stw	r3,-36(fp)
   4d848:	10800003 	ldbu	r2,0(r2)
   4d84c:	e0bff805 	stb	r2,-32(fp)
   4d850:	e0bff807 	ldb	r2,-32(fp)
   4d854:	10006926 	beq	r2,zero,4d9fc <alt_printf+0x210>
            {
                if (c == '%')
   4d858:	e0bff807 	ldb	r2,-32(fp)
   4d85c:	10800958 	cmpnei	r2,r2,37
   4d860:	1000041e 	bne	r2,zero,4d874 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   4d864:	e0bff807 	ldb	r2,-32(fp)
   4d868:	1009883a 	mov	r4,r2
   4d86c:	004da180 	call	4da18 <alt_putchar>
   4d870:	00005a06 	br	4d9dc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   4d874:	e0bff807 	ldb	r2,-32(fp)
   4d878:	108018d8 	cmpnei	r2,r2,99
   4d87c:	1000081e 	bne	r2,zero,4d8a0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   4d880:	e0bffe17 	ldw	r2,-8(fp)
   4d884:	10c00104 	addi	r3,r2,4
   4d888:	e0fffe15 	stw	r3,-8(fp)
   4d88c:	10800017 	ldw	r2,0(r2)
   4d890:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   4d894:	e13ffd17 	ldw	r4,-12(fp)
   4d898:	004da180 	call	4da18 <alt_putchar>
   4d89c:	00004f06 	br	4d9dc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   4d8a0:	e0bff807 	ldb	r2,-32(fp)
   4d8a4:	10801e18 	cmpnei	r2,r2,120
   4d8a8:	1000341e 	bne	r2,zero,4d97c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   4d8ac:	e0bffe17 	ldw	r2,-8(fp)
   4d8b0:	10c00104 	addi	r3,r2,4
   4d8b4:	e0fffe15 	stw	r3,-8(fp)
   4d8b8:	10800017 	ldw	r2,0(r2)
   4d8bc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   4d8c0:	e0bffb17 	ldw	r2,-20(fp)
   4d8c4:	1000031e 	bne	r2,zero,4d8d4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   4d8c8:	01000c04 	movi	r4,48
   4d8cc:	004da180 	call	4da18 <alt_putchar>
                        continue;
   4d8d0:	00004206 	br	4d9dc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   4d8d4:	00800704 	movi	r2,28
   4d8d8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   4d8dc:	00000306 	br	4d8ec <alt_printf+0x100>
                        digit_shift -= 4;
   4d8e0:	e0bff917 	ldw	r2,-28(fp)
   4d8e4:	10bfff04 	addi	r2,r2,-4
   4d8e8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   4d8ec:	00c003c4 	movi	r3,15
   4d8f0:	e0bff917 	ldw	r2,-28(fp)
   4d8f4:	1884983a 	sll	r2,r3,r2
   4d8f8:	1007883a 	mov	r3,r2
   4d8fc:	e0bffb17 	ldw	r2,-20(fp)
   4d900:	1884703a 	and	r2,r3,r2
   4d904:	103ff626 	beq	r2,zero,4d8e0 <__alt_data_end+0xfffed8e0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4d908:	00001906 	br	4d970 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   4d90c:	00c003c4 	movi	r3,15
   4d910:	e0bff917 	ldw	r2,-28(fp)
   4d914:	1884983a 	sll	r2,r3,r2
   4d918:	1007883a 	mov	r3,r2
   4d91c:	e0bffb17 	ldw	r2,-20(fp)
   4d920:	1886703a 	and	r3,r3,r2
   4d924:	e0bff917 	ldw	r2,-28(fp)
   4d928:	1884d83a 	srl	r2,r3,r2
   4d92c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   4d930:	e0bffc17 	ldw	r2,-16(fp)
   4d934:	108002a8 	cmpgeui	r2,r2,10
   4d938:	1000041e 	bne	r2,zero,4d94c <alt_printf+0x160>
                            c = '0' + digit;
   4d93c:	e0bffc17 	ldw	r2,-16(fp)
   4d940:	10800c04 	addi	r2,r2,48
   4d944:	e0bff805 	stb	r2,-32(fp)
   4d948:	00000306 	br	4d958 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   4d94c:	e0bffc17 	ldw	r2,-16(fp)
   4d950:	108015c4 	addi	r2,r2,87
   4d954:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   4d958:	e0bff807 	ldb	r2,-32(fp)
   4d95c:	1009883a 	mov	r4,r2
   4d960:	004da180 	call	4da18 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4d964:	e0bff917 	ldw	r2,-28(fp)
   4d968:	10bfff04 	addi	r2,r2,-4
   4d96c:	e0bff915 	stw	r2,-28(fp)
   4d970:	e0bff917 	ldw	r2,-28(fp)
   4d974:	103fe50e 	bge	r2,zero,4d90c <__alt_data_end+0xfffed90c>
   4d978:	00001806 	br	4d9dc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   4d97c:	e0bff807 	ldb	r2,-32(fp)
   4d980:	10801cd8 	cmpnei	r2,r2,115
   4d984:	1000151e 	bne	r2,zero,4d9dc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   4d988:	e0bffe17 	ldw	r2,-8(fp)
   4d98c:	10c00104 	addi	r3,r2,4
   4d990:	e0fffe15 	stw	r3,-8(fp)
   4d994:	10800017 	ldw	r2,0(r2)
   4d998:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   4d99c:	00000906 	br	4d9c4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   4d9a0:	e0bffa17 	ldw	r2,-24(fp)
   4d9a4:	10c00044 	addi	r3,r2,1
   4d9a8:	e0fffa15 	stw	r3,-24(fp)
   4d9ac:	10800003 	ldbu	r2,0(r2)
   4d9b0:	10803fcc 	andi	r2,r2,255
   4d9b4:	1080201c 	xori	r2,r2,128
   4d9b8:	10bfe004 	addi	r2,r2,-128
   4d9bc:	1009883a 	mov	r4,r2
   4d9c0:	004da180 	call	4da18 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   4d9c4:	e0bffa17 	ldw	r2,-24(fp)
   4d9c8:	10800003 	ldbu	r2,0(r2)
   4d9cc:	10803fcc 	andi	r2,r2,255
   4d9d0:	1080201c 	xori	r2,r2,128
   4d9d4:	10bfe004 	addi	r2,r2,-128
   4d9d8:	103ff11e 	bne	r2,zero,4d9a0 <__alt_data_end+0xfffed9a0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   4d9dc:	e0bff717 	ldw	r2,-36(fp)
   4d9e0:	10c00044 	addi	r3,r2,1
   4d9e4:	e0fff715 	stw	r3,-36(fp)
   4d9e8:	10800003 	ldbu	r2,0(r2)
   4d9ec:	e0bff805 	stb	r2,-32(fp)
   4d9f0:	e0bff807 	ldb	r2,-32(fp)
   4d9f4:	103f8a1e 	bne	r2,zero,4d820 <__alt_data_end+0xfffed820>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   4d9f8:	00000106 	br	4da00 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   4d9fc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   4da00:	0001883a 	nop
   4da04:	e037883a 	mov	sp,fp
   4da08:	dfc00117 	ldw	ra,4(sp)
   4da0c:	df000017 	ldw	fp,0(sp)
   4da10:	dec00504 	addi	sp,sp,20
   4da14:	f800283a 	ret

0004da18 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   4da18:	defffd04 	addi	sp,sp,-12
   4da1c:	dfc00215 	stw	ra,8(sp)
   4da20:	df000115 	stw	fp,4(sp)
   4da24:	df000104 	addi	fp,sp,4
   4da28:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   4da2c:	d0a00117 	ldw	r2,-32764(gp)
   4da30:	10800217 	ldw	r2,8(r2)
   4da34:	100b883a 	mov	r5,r2
   4da38:	e13fff17 	ldw	r4,-4(fp)
   4da3c:	004f6ac0 	call	4f6ac <putc>
#endif
#endif
}
   4da40:	e037883a 	mov	sp,fp
   4da44:	dfc00117 	ldw	ra,4(sp)
   4da48:	df000017 	ldw	fp,0(sp)
   4da4c:	dec00204 	addi	sp,sp,8
   4da50:	f800283a 	ret

0004da54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4da54:	defffe04 	addi	sp,sp,-8
   4da58:	dfc00115 	stw	ra,4(sp)
   4da5c:	df000015 	stw	fp,0(sp)
   4da60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4da64:	d0a00b17 	ldw	r2,-32724(gp)
   4da68:	10000326 	beq	r2,zero,4da78 <alt_get_errno+0x24>
   4da6c:	d0a00b17 	ldw	r2,-32724(gp)
   4da70:	103ee83a 	callr	r2
   4da74:	00000106 	br	4da7c <alt_get_errno+0x28>
   4da78:	d0a6d304 	addi	r2,gp,-25780
}
   4da7c:	e037883a 	mov	sp,fp
   4da80:	dfc00117 	ldw	ra,4(sp)
   4da84:	df000017 	ldw	fp,0(sp)
   4da88:	dec00204 	addi	sp,sp,8
   4da8c:	f800283a 	ret

0004da90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4da90:	defff904 	addi	sp,sp,-28
   4da94:	dfc00615 	stw	ra,24(sp)
   4da98:	df000515 	stw	fp,20(sp)
   4da9c:	df000504 	addi	fp,sp,20
   4daa0:	e13ffd15 	stw	r4,-12(fp)
   4daa4:	e17ffe15 	stw	r5,-8(fp)
   4daa8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4daac:	e0bffd17 	ldw	r2,-12(fp)
   4dab0:	10000616 	blt	r2,zero,4dacc <read+0x3c>
   4dab4:	e0bffd17 	ldw	r2,-12(fp)
   4dab8:	10c00324 	muli	r3,r2,12
   4dabc:	00800174 	movhi	r2,5
   4dac0:	1081ae04 	addi	r2,r2,1720
   4dac4:	1885883a 	add	r2,r3,r2
   4dac8:	00000106 	br	4dad0 <read+0x40>
   4dacc:	0005883a 	mov	r2,zero
   4dad0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4dad4:	e0bffb17 	ldw	r2,-20(fp)
   4dad8:	10002226 	beq	r2,zero,4db64 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4dadc:	e0bffb17 	ldw	r2,-20(fp)
   4dae0:	10800217 	ldw	r2,8(r2)
   4dae4:	108000cc 	andi	r2,r2,3
   4dae8:	10800060 	cmpeqi	r2,r2,1
   4daec:	1000181e 	bne	r2,zero,4db50 <read+0xc0>
        (fd->dev->read))
   4daf0:	e0bffb17 	ldw	r2,-20(fp)
   4daf4:	10800017 	ldw	r2,0(r2)
   4daf8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4dafc:	10001426 	beq	r2,zero,4db50 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4db00:	e0bffb17 	ldw	r2,-20(fp)
   4db04:	10800017 	ldw	r2,0(r2)
   4db08:	10800517 	ldw	r2,20(r2)
   4db0c:	e0ffff17 	ldw	r3,-4(fp)
   4db10:	180d883a 	mov	r6,r3
   4db14:	e17ffe17 	ldw	r5,-8(fp)
   4db18:	e13ffb17 	ldw	r4,-20(fp)
   4db1c:	103ee83a 	callr	r2
   4db20:	e0bffc15 	stw	r2,-16(fp)
   4db24:	e0bffc17 	ldw	r2,-16(fp)
   4db28:	1000070e 	bge	r2,zero,4db48 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4db2c:	004da540 	call	4da54 <alt_get_errno>
   4db30:	1007883a 	mov	r3,r2
   4db34:	e0bffc17 	ldw	r2,-16(fp)
   4db38:	0085c83a 	sub	r2,zero,r2
   4db3c:	18800015 	stw	r2,0(r3)
          return -1;
   4db40:	00bfffc4 	movi	r2,-1
   4db44:	00000c06 	br	4db78 <read+0xe8>
        }
        return rval;
   4db48:	e0bffc17 	ldw	r2,-16(fp)
   4db4c:	00000a06 	br	4db78 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4db50:	004da540 	call	4da54 <alt_get_errno>
   4db54:	1007883a 	mov	r3,r2
   4db58:	00800344 	movi	r2,13
   4db5c:	18800015 	stw	r2,0(r3)
   4db60:	00000406 	br	4db74 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4db64:	004da540 	call	4da54 <alt_get_errno>
   4db68:	1007883a 	mov	r3,r2
   4db6c:	00801444 	movi	r2,81
   4db70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4db74:	00bfffc4 	movi	r2,-1
}
   4db78:	e037883a 	mov	sp,fp
   4db7c:	dfc00117 	ldw	ra,4(sp)
   4db80:	df000017 	ldw	fp,0(sp)
   4db84:	dec00204 	addi	sp,sp,8
   4db88:	f800283a 	ret

0004db8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4db8c:	defffe04 	addi	sp,sp,-8
   4db90:	df000115 	stw	fp,4(sp)
   4db94:	df000104 	addi	fp,sp,4
   4db98:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4db9c:	e0bfff17 	ldw	r2,-4(fp)
   4dba0:	108000d0 	cmplti	r2,r2,3
   4dba4:	10000d1e 	bne	r2,zero,4dbdc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4dba8:	00800174 	movhi	r2,5
   4dbac:	1081ae04 	addi	r2,r2,1720
   4dbb0:	e0ffff17 	ldw	r3,-4(fp)
   4dbb4:	18c00324 	muli	r3,r3,12
   4dbb8:	10c5883a 	add	r2,r2,r3
   4dbbc:	10800204 	addi	r2,r2,8
   4dbc0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4dbc4:	00800174 	movhi	r2,5
   4dbc8:	1081ae04 	addi	r2,r2,1720
   4dbcc:	e0ffff17 	ldw	r3,-4(fp)
   4dbd0:	18c00324 	muli	r3,r3,12
   4dbd4:	10c5883a 	add	r2,r2,r3
   4dbd8:	10000015 	stw	zero,0(r2)
  }
}
   4dbdc:	0001883a 	nop
   4dbe0:	e037883a 	mov	sp,fp
   4dbe4:	df000017 	ldw	fp,0(sp)
   4dbe8:	dec00104 	addi	sp,sp,4
   4dbec:	f800283a 	ret

0004dbf0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4dbf0:	defff904 	addi	sp,sp,-28
   4dbf4:	df000615 	stw	fp,24(sp)
   4dbf8:	df000604 	addi	fp,sp,24
   4dbfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dc00:	0005303a 	rdctl	r2,status
   4dc04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dc08:	e0fffe17 	ldw	r3,-8(fp)
   4dc0c:	00bfff84 	movi	r2,-2
   4dc10:	1884703a 	and	r2,r3,r2
   4dc14:	1001703a 	wrctl	status,r2
  
  return context;
   4dc18:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4dc1c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4dc20:	d0a00d17 	ldw	r2,-32716(gp)
   4dc24:	10c000c4 	addi	r3,r2,3
   4dc28:	00bfff04 	movi	r2,-4
   4dc2c:	1884703a 	and	r2,r3,r2
   4dc30:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4dc34:	d0e00d17 	ldw	r3,-32716(gp)
   4dc38:	e0bfff17 	ldw	r2,-4(fp)
   4dc3c:	1887883a 	add	r3,r3,r2
   4dc40:	008001b4 	movhi	r2,6
   4dc44:	10800004 	addi	r2,r2,0
   4dc48:	10c0062e 	bgeu	r2,r3,4dc64 <sbrk+0x74>
   4dc4c:	e0bffb17 	ldw	r2,-20(fp)
   4dc50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dc54:	e0bffa17 	ldw	r2,-24(fp)
   4dc58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4dc5c:	00bfffc4 	movi	r2,-1
   4dc60:	00000b06 	br	4dc90 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4dc64:	d0a00d17 	ldw	r2,-32716(gp)
   4dc68:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4dc6c:	d0e00d17 	ldw	r3,-32716(gp)
   4dc70:	e0bfff17 	ldw	r2,-4(fp)
   4dc74:	1885883a 	add	r2,r3,r2
   4dc78:	d0a00d15 	stw	r2,-32716(gp)
   4dc7c:	e0bffb17 	ldw	r2,-20(fp)
   4dc80:	e0bffc15 	stw	r2,-16(fp)
   4dc84:	e0bffc17 	ldw	r2,-16(fp)
   4dc88:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4dc8c:	e0bffd17 	ldw	r2,-12(fp)
} 
   4dc90:	e037883a 	mov	sp,fp
   4dc94:	df000017 	ldw	fp,0(sp)
   4dc98:	dec00104 	addi	sp,sp,4
   4dc9c:	f800283a 	ret

0004dca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dca0:	defffe04 	addi	sp,sp,-8
   4dca4:	dfc00115 	stw	ra,4(sp)
   4dca8:	df000015 	stw	fp,0(sp)
   4dcac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dcb0:	d0a00b17 	ldw	r2,-32724(gp)
   4dcb4:	10000326 	beq	r2,zero,4dcc4 <alt_get_errno+0x24>
   4dcb8:	d0a00b17 	ldw	r2,-32724(gp)
   4dcbc:	103ee83a 	callr	r2
   4dcc0:	00000106 	br	4dcc8 <alt_get_errno+0x28>
   4dcc4:	d0a6d304 	addi	r2,gp,-25780
}
   4dcc8:	e037883a 	mov	sp,fp
   4dccc:	dfc00117 	ldw	ra,4(sp)
   4dcd0:	df000017 	ldw	fp,0(sp)
   4dcd4:	dec00204 	addi	sp,sp,8
   4dcd8:	f800283a 	ret

0004dcdc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4dcdc:	defff904 	addi	sp,sp,-28
   4dce0:	dfc00615 	stw	ra,24(sp)
   4dce4:	df000515 	stw	fp,20(sp)
   4dce8:	df000504 	addi	fp,sp,20
   4dcec:	e13ffd15 	stw	r4,-12(fp)
   4dcf0:	e17ffe15 	stw	r5,-8(fp)
   4dcf4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4dcf8:	e0bffd17 	ldw	r2,-12(fp)
   4dcfc:	10000616 	blt	r2,zero,4dd18 <write+0x3c>
   4dd00:	e0bffd17 	ldw	r2,-12(fp)
   4dd04:	10c00324 	muli	r3,r2,12
   4dd08:	00800174 	movhi	r2,5
   4dd0c:	1081ae04 	addi	r2,r2,1720
   4dd10:	1885883a 	add	r2,r3,r2
   4dd14:	00000106 	br	4dd1c <write+0x40>
   4dd18:	0005883a 	mov	r2,zero
   4dd1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4dd20:	e0bffb17 	ldw	r2,-20(fp)
   4dd24:	10002126 	beq	r2,zero,4ddac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4dd28:	e0bffb17 	ldw	r2,-20(fp)
   4dd2c:	10800217 	ldw	r2,8(r2)
   4dd30:	108000cc 	andi	r2,r2,3
   4dd34:	10001826 	beq	r2,zero,4dd98 <write+0xbc>
   4dd38:	e0bffb17 	ldw	r2,-20(fp)
   4dd3c:	10800017 	ldw	r2,0(r2)
   4dd40:	10800617 	ldw	r2,24(r2)
   4dd44:	10001426 	beq	r2,zero,4dd98 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4dd48:	e0bffb17 	ldw	r2,-20(fp)
   4dd4c:	10800017 	ldw	r2,0(r2)
   4dd50:	10800617 	ldw	r2,24(r2)
   4dd54:	e0ffff17 	ldw	r3,-4(fp)
   4dd58:	180d883a 	mov	r6,r3
   4dd5c:	e17ffe17 	ldw	r5,-8(fp)
   4dd60:	e13ffb17 	ldw	r4,-20(fp)
   4dd64:	103ee83a 	callr	r2
   4dd68:	e0bffc15 	stw	r2,-16(fp)
   4dd6c:	e0bffc17 	ldw	r2,-16(fp)
   4dd70:	1000070e 	bge	r2,zero,4dd90 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4dd74:	004dca00 	call	4dca0 <alt_get_errno>
   4dd78:	1007883a 	mov	r3,r2
   4dd7c:	e0bffc17 	ldw	r2,-16(fp)
   4dd80:	0085c83a 	sub	r2,zero,r2
   4dd84:	18800015 	stw	r2,0(r3)
        return -1;
   4dd88:	00bfffc4 	movi	r2,-1
   4dd8c:	00000c06 	br	4ddc0 <write+0xe4>
      }
      return rval;
   4dd90:	e0bffc17 	ldw	r2,-16(fp)
   4dd94:	00000a06 	br	4ddc0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4dd98:	004dca00 	call	4dca0 <alt_get_errno>
   4dd9c:	1007883a 	mov	r3,r2
   4dda0:	00800344 	movi	r2,13
   4dda4:	18800015 	stw	r2,0(r3)
   4dda8:	00000406 	br	4ddbc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4ddac:	004dca00 	call	4dca0 <alt_get_errno>
   4ddb0:	1007883a 	mov	r3,r2
   4ddb4:	00801444 	movi	r2,81
   4ddb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4ddbc:	00bfffc4 	movi	r2,-1
}
   4ddc0:	e037883a 	mov	sp,fp
   4ddc4:	dfc00117 	ldw	ra,4(sp)
   4ddc8:	df000017 	ldw	fp,0(sp)
   4ddcc:	dec00204 	addi	sp,sp,8
   4ddd0:	f800283a 	ret

0004ddd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4ddd4:	defffd04 	addi	sp,sp,-12
   4ddd8:	dfc00215 	stw	ra,8(sp)
   4dddc:	df000115 	stw	fp,4(sp)
   4dde0:	df000104 	addi	fp,sp,4
   4dde4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4dde8:	d1600804 	addi	r5,gp,-32736
   4ddec:	e13fff17 	ldw	r4,-4(fp)
   4ddf0:	004eb8c0 	call	4eb8c <alt_dev_llist_insert>
}
   4ddf4:	e037883a 	mov	sp,fp
   4ddf8:	dfc00117 	ldw	ra,4(sp)
   4ddfc:	df000017 	ldw	fp,0(sp)
   4de00:	dec00204 	addi	sp,sp,8
   4de04:	f800283a 	ret

0004de08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4de08:	defffd04 	addi	sp,sp,-12
   4de0c:	dfc00215 	stw	ra,8(sp)
   4de10:	df000115 	stw	fp,4(sp)
   4de14:	df000104 	addi	fp,sp,4
   4de18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   4de1c:	004f2e40 	call	4f2e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4de20:	00800044 	movi	r2,1
   4de24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4de28:	0001883a 	nop
   4de2c:	e037883a 	mov	sp,fp
   4de30:	dfc00117 	ldw	ra,4(sp)
   4de34:	df000017 	ldw	fp,0(sp)
   4de38:	dec00204 	addi	sp,sp,8
   4de3c:	f800283a 	ret

0004de40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4de40:	defffe04 	addi	sp,sp,-8
   4de44:	dfc00115 	stw	ra,4(sp)
   4de48:	df000015 	stw	fp,0(sp)
   4de4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   4de50:	01c0fa04 	movi	r7,1000
   4de54:	01800084 	movi	r6,2
   4de58:	000b883a 	mov	r5,zero
   4de5c:	01000804 	movi	r4,32
   4de60:	004e9880 	call	4e988 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   4de64:	01800044 	movi	r6,1
   4de68:	000b883a 	mov	r5,zero
   4de6c:	01000174 	movhi	r4,5
   4de70:	21021804 	addi	r4,r4,2144
   4de74:	004e00c0 	call	4e00c <altera_avalon_jtag_uart_init>
   4de78:	01000174 	movhi	r4,5
   4de7c:	21020e04 	addi	r4,r4,2104
   4de80:	004ddd40 	call	4ddd4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   4de84:	00c00044 	movi	r3,1
   4de88:	00801004 	movi	r2,64
   4de8c:	10c00035 	stwio	r3,0(r2)
}
   4de90:	0001883a 	nop
   4de94:	e037883a 	mov	sp,fp
   4de98:	dfc00117 	ldw	ra,4(sp)
   4de9c:	df000017 	ldw	fp,0(sp)
   4dea0:	dec00204 	addi	sp,sp,8
   4dea4:	f800283a 	ret

0004dea8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4dea8:	defffa04 	addi	sp,sp,-24
   4deac:	dfc00515 	stw	ra,20(sp)
   4deb0:	df000415 	stw	fp,16(sp)
   4deb4:	df000404 	addi	fp,sp,16
   4deb8:	e13ffd15 	stw	r4,-12(fp)
   4debc:	e17ffe15 	stw	r5,-8(fp)
   4dec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4dec4:	e0bffd17 	ldw	r2,-12(fp)
   4dec8:	10800017 	ldw	r2,0(r2)
   4decc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4ded0:	e0bffc17 	ldw	r2,-16(fp)
   4ded4:	10c00a04 	addi	r3,r2,40
   4ded8:	e0bffd17 	ldw	r2,-12(fp)
   4dedc:	10800217 	ldw	r2,8(r2)
   4dee0:	100f883a 	mov	r7,r2
   4dee4:	e1bfff17 	ldw	r6,-4(fp)
   4dee8:	e17ffe17 	ldw	r5,-8(fp)
   4deec:	1809883a 	mov	r4,r3
   4def0:	004e4d00 	call	4e4d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4def4:	e037883a 	mov	sp,fp
   4def8:	dfc00117 	ldw	ra,4(sp)
   4defc:	df000017 	ldw	fp,0(sp)
   4df00:	dec00204 	addi	sp,sp,8
   4df04:	f800283a 	ret

0004df08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4df08:	defffa04 	addi	sp,sp,-24
   4df0c:	dfc00515 	stw	ra,20(sp)
   4df10:	df000415 	stw	fp,16(sp)
   4df14:	df000404 	addi	fp,sp,16
   4df18:	e13ffd15 	stw	r4,-12(fp)
   4df1c:	e17ffe15 	stw	r5,-8(fp)
   4df20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4df24:	e0bffd17 	ldw	r2,-12(fp)
   4df28:	10800017 	ldw	r2,0(r2)
   4df2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4df30:	e0bffc17 	ldw	r2,-16(fp)
   4df34:	10c00a04 	addi	r3,r2,40
   4df38:	e0bffd17 	ldw	r2,-12(fp)
   4df3c:	10800217 	ldw	r2,8(r2)
   4df40:	100f883a 	mov	r7,r2
   4df44:	e1bfff17 	ldw	r6,-4(fp)
   4df48:	e17ffe17 	ldw	r5,-8(fp)
   4df4c:	1809883a 	mov	r4,r3
   4df50:	004e6ec0 	call	4e6ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4df54:	e037883a 	mov	sp,fp
   4df58:	dfc00117 	ldw	ra,4(sp)
   4df5c:	df000017 	ldw	fp,0(sp)
   4df60:	dec00204 	addi	sp,sp,8
   4df64:	f800283a 	ret

0004df68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4df68:	defffc04 	addi	sp,sp,-16
   4df6c:	dfc00315 	stw	ra,12(sp)
   4df70:	df000215 	stw	fp,8(sp)
   4df74:	df000204 	addi	fp,sp,8
   4df78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4df7c:	e0bfff17 	ldw	r2,-4(fp)
   4df80:	10800017 	ldw	r2,0(r2)
   4df84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4df88:	e0bffe17 	ldw	r2,-8(fp)
   4df8c:	10c00a04 	addi	r3,r2,40
   4df90:	e0bfff17 	ldw	r2,-4(fp)
   4df94:	10800217 	ldw	r2,8(r2)
   4df98:	100b883a 	mov	r5,r2
   4df9c:	1809883a 	mov	r4,r3
   4dfa0:	004e3780 	call	4e378 <altera_avalon_jtag_uart_close>
}
   4dfa4:	e037883a 	mov	sp,fp
   4dfa8:	dfc00117 	ldw	ra,4(sp)
   4dfac:	df000017 	ldw	fp,0(sp)
   4dfb0:	dec00204 	addi	sp,sp,8
   4dfb4:	f800283a 	ret

0004dfb8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4dfb8:	defffa04 	addi	sp,sp,-24
   4dfbc:	dfc00515 	stw	ra,20(sp)
   4dfc0:	df000415 	stw	fp,16(sp)
   4dfc4:	df000404 	addi	fp,sp,16
   4dfc8:	e13ffd15 	stw	r4,-12(fp)
   4dfcc:	e17ffe15 	stw	r5,-8(fp)
   4dfd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4dfd4:	e0bffd17 	ldw	r2,-12(fp)
   4dfd8:	10800017 	ldw	r2,0(r2)
   4dfdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4dfe0:	e0bffc17 	ldw	r2,-16(fp)
   4dfe4:	10800a04 	addi	r2,r2,40
   4dfe8:	e1bfff17 	ldw	r6,-4(fp)
   4dfec:	e17ffe17 	ldw	r5,-8(fp)
   4dff0:	1009883a 	mov	r4,r2
   4dff4:	004e3e00 	call	4e3e0 <altera_avalon_jtag_uart_ioctl>
}
   4dff8:	e037883a 	mov	sp,fp
   4dffc:	dfc00117 	ldw	ra,4(sp)
   4e000:	df000017 	ldw	fp,0(sp)
   4e004:	dec00204 	addi	sp,sp,8
   4e008:	f800283a 	ret

0004e00c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4e00c:	defffa04 	addi	sp,sp,-24
   4e010:	dfc00515 	stw	ra,20(sp)
   4e014:	df000415 	stw	fp,16(sp)
   4e018:	df000404 	addi	fp,sp,16
   4e01c:	e13ffd15 	stw	r4,-12(fp)
   4e020:	e17ffe15 	stw	r5,-8(fp)
   4e024:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e028:	e0bffd17 	ldw	r2,-12(fp)
   4e02c:	00c00044 	movi	r3,1
   4e030:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4e034:	e0bffd17 	ldw	r2,-12(fp)
   4e038:	10800017 	ldw	r2,0(r2)
   4e03c:	10800104 	addi	r2,r2,4
   4e040:	1007883a 	mov	r3,r2
   4e044:	e0bffd17 	ldw	r2,-12(fp)
   4e048:	10800817 	ldw	r2,32(r2)
   4e04c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4e050:	e0bffe17 	ldw	r2,-8(fp)
   4e054:	e0ffff17 	ldw	r3,-4(fp)
   4e058:	d8000015 	stw	zero,0(sp)
   4e05c:	e1fffd17 	ldw	r7,-12(fp)
   4e060:	01800174 	movhi	r6,5
   4e064:	31b83304 	addi	r6,r6,-7988
   4e068:	180b883a 	mov	r5,r3
   4e06c:	1009883a 	mov	r4,r2
   4e070:	004d1ac0 	call	4d1ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4e074:	e0bffd17 	ldw	r2,-12(fp)
   4e078:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4e07c:	e0bffd17 	ldw	r2,-12(fp)
   4e080:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4e084:	d0e6d917 	ldw	r3,-25756(gp)
   4e088:	e1fffd17 	ldw	r7,-12(fp)
   4e08c:	01800174 	movhi	r6,5
   4e090:	31b8b604 	addi	r6,r6,-7464
   4e094:	180b883a 	mov	r5,r3
   4e098:	1009883a 	mov	r4,r2
   4e09c:	004ea040 	call	4ea04 <alt_alarm_start>
   4e0a0:	1000040e 	bge	r2,zero,4e0b4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4e0a4:	e0fffd17 	ldw	r3,-12(fp)
   4e0a8:	00a00034 	movhi	r2,32768
   4e0ac:	10bfffc4 	addi	r2,r2,-1
   4e0b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4e0b4:	0001883a 	nop
   4e0b8:	e037883a 	mov	sp,fp
   4e0bc:	dfc00117 	ldw	ra,4(sp)
   4e0c0:	df000017 	ldw	fp,0(sp)
   4e0c4:	dec00204 	addi	sp,sp,8
   4e0c8:	f800283a 	ret

0004e0cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4e0cc:	defff804 	addi	sp,sp,-32
   4e0d0:	df000715 	stw	fp,28(sp)
   4e0d4:	df000704 	addi	fp,sp,28
   4e0d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4e0dc:	e0bfff17 	ldw	r2,-4(fp)
   4e0e0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4e0e4:	e0bffb17 	ldw	r2,-20(fp)
   4e0e8:	10800017 	ldw	r2,0(r2)
   4e0ec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e0f0:	e0bffc17 	ldw	r2,-16(fp)
   4e0f4:	10800104 	addi	r2,r2,4
   4e0f8:	10800037 	ldwio	r2,0(r2)
   4e0fc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4e100:	e0bffd17 	ldw	r2,-12(fp)
   4e104:	1080c00c 	andi	r2,r2,768
   4e108:	10006d26 	beq	r2,zero,4e2c0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4e10c:	e0bffd17 	ldw	r2,-12(fp)
   4e110:	1080400c 	andi	r2,r2,256
   4e114:	10003526 	beq	r2,zero,4e1ec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4e118:	00800074 	movhi	r2,1
   4e11c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e120:	e0bffb17 	ldw	r2,-20(fp)
   4e124:	10800a17 	ldw	r2,40(r2)
   4e128:	10800044 	addi	r2,r2,1
   4e12c:	1081ffcc 	andi	r2,r2,2047
   4e130:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4e134:	e0bffb17 	ldw	r2,-20(fp)
   4e138:	10c00b17 	ldw	r3,44(r2)
   4e13c:	e0bffe17 	ldw	r2,-8(fp)
   4e140:	18801526 	beq	r3,r2,4e198 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4e144:	e0bffc17 	ldw	r2,-16(fp)
   4e148:	10800037 	ldwio	r2,0(r2)
   4e14c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4e150:	e0bff917 	ldw	r2,-28(fp)
   4e154:	10a0000c 	andi	r2,r2,32768
   4e158:	10001126 	beq	r2,zero,4e1a0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4e15c:	e0bffb17 	ldw	r2,-20(fp)
   4e160:	10800a17 	ldw	r2,40(r2)
   4e164:	e0fff917 	ldw	r3,-28(fp)
   4e168:	1809883a 	mov	r4,r3
   4e16c:	e0fffb17 	ldw	r3,-20(fp)
   4e170:	1885883a 	add	r2,r3,r2
   4e174:	10800e04 	addi	r2,r2,56
   4e178:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e17c:	e0bffb17 	ldw	r2,-20(fp)
   4e180:	10800a17 	ldw	r2,40(r2)
   4e184:	10800044 	addi	r2,r2,1
   4e188:	10c1ffcc 	andi	r3,r2,2047
   4e18c:	e0bffb17 	ldw	r2,-20(fp)
   4e190:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4e194:	003fe206 	br	4e120 <__alt_data_end+0xfffee120>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4e198:	0001883a 	nop
   4e19c:	00000106 	br	4e1a4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4e1a0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4e1a4:	e0bff917 	ldw	r2,-28(fp)
   4e1a8:	10bfffec 	andhi	r2,r2,65535
   4e1ac:	10000f26 	beq	r2,zero,4e1ec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e1b0:	e0bffb17 	ldw	r2,-20(fp)
   4e1b4:	10c00817 	ldw	r3,32(r2)
   4e1b8:	00bfff84 	movi	r2,-2
   4e1bc:	1886703a 	and	r3,r3,r2
   4e1c0:	e0bffb17 	ldw	r2,-20(fp)
   4e1c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4e1c8:	e0bffc17 	ldw	r2,-16(fp)
   4e1cc:	10800104 	addi	r2,r2,4
   4e1d0:	1007883a 	mov	r3,r2
   4e1d4:	e0bffb17 	ldw	r2,-20(fp)
   4e1d8:	10800817 	ldw	r2,32(r2)
   4e1dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e1e0:	e0bffc17 	ldw	r2,-16(fp)
   4e1e4:	10800104 	addi	r2,r2,4
   4e1e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4e1ec:	e0bffd17 	ldw	r2,-12(fp)
   4e1f0:	1080800c 	andi	r2,r2,512
   4e1f4:	103fbe26 	beq	r2,zero,4e0f0 <__alt_data_end+0xfffee0f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4e1f8:	e0bffd17 	ldw	r2,-12(fp)
   4e1fc:	1004d43a 	srli	r2,r2,16
   4e200:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4e204:	00001406 	br	4e258 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4e208:	e0bffc17 	ldw	r2,-16(fp)
   4e20c:	e0fffb17 	ldw	r3,-20(fp)
   4e210:	18c00d17 	ldw	r3,52(r3)
   4e214:	e13ffb17 	ldw	r4,-20(fp)
   4e218:	20c7883a 	add	r3,r4,r3
   4e21c:	18c20e04 	addi	r3,r3,2104
   4e220:	18c00003 	ldbu	r3,0(r3)
   4e224:	18c03fcc 	andi	r3,r3,255
   4e228:	18c0201c 	xori	r3,r3,128
   4e22c:	18ffe004 	addi	r3,r3,-128
   4e230:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e234:	e0bffb17 	ldw	r2,-20(fp)
   4e238:	10800d17 	ldw	r2,52(r2)
   4e23c:	10800044 	addi	r2,r2,1
   4e240:	10c1ffcc 	andi	r3,r2,2047
   4e244:	e0bffb17 	ldw	r2,-20(fp)
   4e248:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4e24c:	e0bffa17 	ldw	r2,-24(fp)
   4e250:	10bfffc4 	addi	r2,r2,-1
   4e254:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4e258:	e0bffa17 	ldw	r2,-24(fp)
   4e25c:	10000526 	beq	r2,zero,4e274 <altera_avalon_jtag_uart_irq+0x1a8>
   4e260:	e0bffb17 	ldw	r2,-20(fp)
   4e264:	10c00d17 	ldw	r3,52(r2)
   4e268:	e0bffb17 	ldw	r2,-20(fp)
   4e26c:	10800c17 	ldw	r2,48(r2)
   4e270:	18bfe51e 	bne	r3,r2,4e208 <__alt_data_end+0xfffee208>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4e274:	e0bffa17 	ldw	r2,-24(fp)
   4e278:	103f9d26 	beq	r2,zero,4e0f0 <__alt_data_end+0xfffee0f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e27c:	e0bffb17 	ldw	r2,-20(fp)
   4e280:	10c00817 	ldw	r3,32(r2)
   4e284:	00bfff44 	movi	r2,-3
   4e288:	1886703a 	and	r3,r3,r2
   4e28c:	e0bffb17 	ldw	r2,-20(fp)
   4e290:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e294:	e0bffb17 	ldw	r2,-20(fp)
   4e298:	10800017 	ldw	r2,0(r2)
   4e29c:	10800104 	addi	r2,r2,4
   4e2a0:	1007883a 	mov	r3,r2
   4e2a4:	e0bffb17 	ldw	r2,-20(fp)
   4e2a8:	10800817 	ldw	r2,32(r2)
   4e2ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e2b0:	e0bffc17 	ldw	r2,-16(fp)
   4e2b4:	10800104 	addi	r2,r2,4
   4e2b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4e2bc:	003f8c06 	br	4e0f0 <__alt_data_end+0xfffee0f0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4e2c0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4e2c4:	0001883a 	nop
   4e2c8:	e037883a 	mov	sp,fp
   4e2cc:	df000017 	ldw	fp,0(sp)
   4e2d0:	dec00104 	addi	sp,sp,4
   4e2d4:	f800283a 	ret

0004e2d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4e2d8:	defff804 	addi	sp,sp,-32
   4e2dc:	df000715 	stw	fp,28(sp)
   4e2e0:	df000704 	addi	fp,sp,28
   4e2e4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4e2e8:	e0bffb17 	ldw	r2,-20(fp)
   4e2ec:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4e2f0:	e0bff917 	ldw	r2,-28(fp)
   4e2f4:	10800017 	ldw	r2,0(r2)
   4e2f8:	10800104 	addi	r2,r2,4
   4e2fc:	10800037 	ldwio	r2,0(r2)
   4e300:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4e304:	e0bffa17 	ldw	r2,-24(fp)
   4e308:	1081000c 	andi	r2,r2,1024
   4e30c:	10000b26 	beq	r2,zero,4e33c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4e310:	e0bff917 	ldw	r2,-28(fp)
   4e314:	10800017 	ldw	r2,0(r2)
   4e318:	10800104 	addi	r2,r2,4
   4e31c:	1007883a 	mov	r3,r2
   4e320:	e0bff917 	ldw	r2,-28(fp)
   4e324:	10800817 	ldw	r2,32(r2)
   4e328:	10810014 	ori	r2,r2,1024
   4e32c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4e330:	e0bff917 	ldw	r2,-28(fp)
   4e334:	10000915 	stw	zero,36(r2)
   4e338:	00000a06 	br	4e364 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4e33c:	e0bff917 	ldw	r2,-28(fp)
   4e340:	10c00917 	ldw	r3,36(r2)
   4e344:	00a00034 	movhi	r2,32768
   4e348:	10bfff04 	addi	r2,r2,-4
   4e34c:	10c00536 	bltu	r2,r3,4e364 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4e350:	e0bff917 	ldw	r2,-28(fp)
   4e354:	10800917 	ldw	r2,36(r2)
   4e358:	10c00044 	addi	r3,r2,1
   4e35c:	e0bff917 	ldw	r2,-28(fp)
   4e360:	10c00915 	stw	r3,36(r2)
   4e364:	d0a6d917 	ldw	r2,-25756(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4e368:	e037883a 	mov	sp,fp
   4e36c:	df000017 	ldw	fp,0(sp)
   4e370:	dec00104 	addi	sp,sp,4
   4e374:	f800283a 	ret

0004e378 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4e378:	defffd04 	addi	sp,sp,-12
   4e37c:	df000215 	stw	fp,8(sp)
   4e380:	df000204 	addi	fp,sp,8
   4e384:	e13ffe15 	stw	r4,-8(fp)
   4e388:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4e38c:	00000506 	br	4e3a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4e390:	e0bfff17 	ldw	r2,-4(fp)
   4e394:	1090000c 	andi	r2,r2,16384
   4e398:	10000226 	beq	r2,zero,4e3a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4e39c:	00bffd44 	movi	r2,-11
   4e3a0:	00000b06 	br	4e3d0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4e3a4:	e0bffe17 	ldw	r2,-8(fp)
   4e3a8:	10c00d17 	ldw	r3,52(r2)
   4e3ac:	e0bffe17 	ldw	r2,-8(fp)
   4e3b0:	10800c17 	ldw	r2,48(r2)
   4e3b4:	18800526 	beq	r3,r2,4e3cc <altera_avalon_jtag_uart_close+0x54>
   4e3b8:	e0bffe17 	ldw	r2,-8(fp)
   4e3bc:	10c00917 	ldw	r3,36(r2)
   4e3c0:	e0bffe17 	ldw	r2,-8(fp)
   4e3c4:	10800117 	ldw	r2,4(r2)
   4e3c8:	18bff136 	bltu	r3,r2,4e390 <__alt_data_end+0xfffee390>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4e3cc:	0005883a 	mov	r2,zero
}
   4e3d0:	e037883a 	mov	sp,fp
   4e3d4:	df000017 	ldw	fp,0(sp)
   4e3d8:	dec00104 	addi	sp,sp,4
   4e3dc:	f800283a 	ret

0004e3e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4e3e0:	defffa04 	addi	sp,sp,-24
   4e3e4:	df000515 	stw	fp,20(sp)
   4e3e8:	df000504 	addi	fp,sp,20
   4e3ec:	e13ffd15 	stw	r4,-12(fp)
   4e3f0:	e17ffe15 	stw	r5,-8(fp)
   4e3f4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4e3f8:	00bff9c4 	movi	r2,-25
   4e3fc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4e400:	e0bffe17 	ldw	r2,-8(fp)
   4e404:	10da8060 	cmpeqi	r3,r2,27137
   4e408:	1800031e 	bne	r3,zero,4e418 <altera_avalon_jtag_uart_ioctl+0x38>
   4e40c:	109a80a0 	cmpeqi	r2,r2,27138
   4e410:	1000181e 	bne	r2,zero,4e474 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4e414:	00002906 	br	4e4bc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4e418:	e0bffd17 	ldw	r2,-12(fp)
   4e41c:	10c00117 	ldw	r3,4(r2)
   4e420:	00a00034 	movhi	r2,32768
   4e424:	10bfffc4 	addi	r2,r2,-1
   4e428:	18802126 	beq	r3,r2,4e4b0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4e42c:	e0bfff17 	ldw	r2,-4(fp)
   4e430:	10800017 	ldw	r2,0(r2)
   4e434:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4e438:	e0bffc17 	ldw	r2,-16(fp)
   4e43c:	10800090 	cmplti	r2,r2,2
   4e440:	1000061e 	bne	r2,zero,4e45c <altera_avalon_jtag_uart_ioctl+0x7c>
   4e444:	e0fffc17 	ldw	r3,-16(fp)
   4e448:	00a00034 	movhi	r2,32768
   4e44c:	10bfffc4 	addi	r2,r2,-1
   4e450:	18800226 	beq	r3,r2,4e45c <altera_avalon_jtag_uart_ioctl+0x7c>
   4e454:	e0bffc17 	ldw	r2,-16(fp)
   4e458:	00000206 	br	4e464 <altera_avalon_jtag_uart_ioctl+0x84>
   4e45c:	00a00034 	movhi	r2,32768
   4e460:	10bfff84 	addi	r2,r2,-2
   4e464:	e0fffd17 	ldw	r3,-12(fp)
   4e468:	18800115 	stw	r2,4(r3)
      rc = 0;
   4e46c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e470:	00000f06 	br	4e4b0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4e474:	e0bffd17 	ldw	r2,-12(fp)
   4e478:	10c00117 	ldw	r3,4(r2)
   4e47c:	00a00034 	movhi	r2,32768
   4e480:	10bfffc4 	addi	r2,r2,-1
   4e484:	18800c26 	beq	r3,r2,4e4b8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4e488:	e0bffd17 	ldw	r2,-12(fp)
   4e48c:	10c00917 	ldw	r3,36(r2)
   4e490:	e0bffd17 	ldw	r2,-12(fp)
   4e494:	10800117 	ldw	r2,4(r2)
   4e498:	1885803a 	cmpltu	r2,r3,r2
   4e49c:	10c03fcc 	andi	r3,r2,255
   4e4a0:	e0bfff17 	ldw	r2,-4(fp)
   4e4a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4e4a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e4ac:	00000206 	br	4e4b8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4e4b0:	0001883a 	nop
   4e4b4:	00000106 	br	4e4bc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4e4b8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4e4bc:	e0bffb17 	ldw	r2,-20(fp)
}
   4e4c0:	e037883a 	mov	sp,fp
   4e4c4:	df000017 	ldw	fp,0(sp)
   4e4c8:	dec00104 	addi	sp,sp,4
   4e4cc:	f800283a 	ret

0004e4d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4e4d0:	defff304 	addi	sp,sp,-52
   4e4d4:	dfc00c15 	stw	ra,48(sp)
   4e4d8:	df000b15 	stw	fp,44(sp)
   4e4dc:	df000b04 	addi	fp,sp,44
   4e4e0:	e13ffc15 	stw	r4,-16(fp)
   4e4e4:	e17ffd15 	stw	r5,-12(fp)
   4e4e8:	e1bffe15 	stw	r6,-8(fp)
   4e4ec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4e4f0:	e0bffd17 	ldw	r2,-12(fp)
   4e4f4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e4f8:	00004706 	br	4e618 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4e4fc:	e0bffc17 	ldw	r2,-16(fp)
   4e500:	10800a17 	ldw	r2,40(r2)
   4e504:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4e508:	e0bffc17 	ldw	r2,-16(fp)
   4e50c:	10800b17 	ldw	r2,44(r2)
   4e510:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4e514:	e0fff717 	ldw	r3,-36(fp)
   4e518:	e0bff817 	ldw	r2,-32(fp)
   4e51c:	18800536 	bltu	r3,r2,4e534 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4e520:	e0fff717 	ldw	r3,-36(fp)
   4e524:	e0bff817 	ldw	r2,-32(fp)
   4e528:	1885c83a 	sub	r2,r3,r2
   4e52c:	e0bff615 	stw	r2,-40(fp)
   4e530:	00000406 	br	4e544 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4e534:	00c20004 	movi	r3,2048
   4e538:	e0bff817 	ldw	r2,-32(fp)
   4e53c:	1885c83a 	sub	r2,r3,r2
   4e540:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e544:	e0bff617 	ldw	r2,-40(fp)
   4e548:	10001e26 	beq	r2,zero,4e5c4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4e54c:	e0fffe17 	ldw	r3,-8(fp)
   4e550:	e0bff617 	ldw	r2,-40(fp)
   4e554:	1880022e 	bgeu	r3,r2,4e560 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4e558:	e0bffe17 	ldw	r2,-8(fp)
   4e55c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4e560:	e0bffc17 	ldw	r2,-16(fp)
   4e564:	10c00e04 	addi	r3,r2,56
   4e568:	e0bff817 	ldw	r2,-32(fp)
   4e56c:	1885883a 	add	r2,r3,r2
   4e570:	e1bff617 	ldw	r6,-40(fp)
   4e574:	100b883a 	mov	r5,r2
   4e578:	e13ff517 	ldw	r4,-44(fp)
   4e57c:	0045be00 	call	45be0 <memcpy>
      ptr   += n;
   4e580:	e0fff517 	ldw	r3,-44(fp)
   4e584:	e0bff617 	ldw	r2,-40(fp)
   4e588:	1885883a 	add	r2,r3,r2
   4e58c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4e590:	e0fffe17 	ldw	r3,-8(fp)
   4e594:	e0bff617 	ldw	r2,-40(fp)
   4e598:	1885c83a 	sub	r2,r3,r2
   4e59c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e5a0:	e0fff817 	ldw	r3,-32(fp)
   4e5a4:	e0bff617 	ldw	r2,-40(fp)
   4e5a8:	1885883a 	add	r2,r3,r2
   4e5ac:	10c1ffcc 	andi	r3,r2,2047
   4e5b0:	e0bffc17 	ldw	r2,-16(fp)
   4e5b4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4e5b8:	e0bffe17 	ldw	r2,-8(fp)
   4e5bc:	00bfcf16 	blt	zero,r2,4e4fc <__alt_data_end+0xfffee4fc>
   4e5c0:	00000106 	br	4e5c8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4e5c4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4e5c8:	e0fff517 	ldw	r3,-44(fp)
   4e5cc:	e0bffd17 	ldw	r2,-12(fp)
   4e5d0:	1880141e 	bne	r3,r2,4e624 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4e5d4:	e0bfff17 	ldw	r2,-4(fp)
   4e5d8:	1090000c 	andi	r2,r2,16384
   4e5dc:	1000131e 	bne	r2,zero,4e62c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4e5e0:	0001883a 	nop
   4e5e4:	e0bffc17 	ldw	r2,-16(fp)
   4e5e8:	10c00a17 	ldw	r3,40(r2)
   4e5ec:	e0bff717 	ldw	r2,-36(fp)
   4e5f0:	1880051e 	bne	r3,r2,4e608 <altera_avalon_jtag_uart_read+0x138>
   4e5f4:	e0bffc17 	ldw	r2,-16(fp)
   4e5f8:	10c00917 	ldw	r3,36(r2)
   4e5fc:	e0bffc17 	ldw	r2,-16(fp)
   4e600:	10800117 	ldw	r2,4(r2)
   4e604:	18bff736 	bltu	r3,r2,4e5e4 <__alt_data_end+0xfffee5e4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4e608:	e0bffc17 	ldw	r2,-16(fp)
   4e60c:	10c00a17 	ldw	r3,40(r2)
   4e610:	e0bff717 	ldw	r2,-36(fp)
   4e614:	18800726 	beq	r3,r2,4e634 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e618:	e0bffe17 	ldw	r2,-8(fp)
   4e61c:	00bfb716 	blt	zero,r2,4e4fc <__alt_data_end+0xfffee4fc>
   4e620:	00000506 	br	4e638 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4e624:	0001883a 	nop
   4e628:	00000306 	br	4e638 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4e62c:	0001883a 	nop
   4e630:	00000106 	br	4e638 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4e634:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4e638:	e0fff517 	ldw	r3,-44(fp)
   4e63c:	e0bffd17 	ldw	r2,-12(fp)
   4e640:	18801826 	beq	r3,r2,4e6a4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e644:	0005303a 	rdctl	r2,status
   4e648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e64c:	e0fffb17 	ldw	r3,-20(fp)
   4e650:	00bfff84 	movi	r2,-2
   4e654:	1884703a 	and	r2,r3,r2
   4e658:	1001703a 	wrctl	status,r2
  
  return context;
   4e65c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4e660:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e664:	e0bffc17 	ldw	r2,-16(fp)
   4e668:	10800817 	ldw	r2,32(r2)
   4e66c:	10c00054 	ori	r3,r2,1
   4e670:	e0bffc17 	ldw	r2,-16(fp)
   4e674:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e678:	e0bffc17 	ldw	r2,-16(fp)
   4e67c:	10800017 	ldw	r2,0(r2)
   4e680:	10800104 	addi	r2,r2,4
   4e684:	1007883a 	mov	r3,r2
   4e688:	e0bffc17 	ldw	r2,-16(fp)
   4e68c:	10800817 	ldw	r2,32(r2)
   4e690:	18800035 	stwio	r2,0(r3)
   4e694:	e0bffa17 	ldw	r2,-24(fp)
   4e698:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e69c:	e0bff917 	ldw	r2,-28(fp)
   4e6a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4e6a4:	e0fff517 	ldw	r3,-44(fp)
   4e6a8:	e0bffd17 	ldw	r2,-12(fp)
   4e6ac:	18800426 	beq	r3,r2,4e6c0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4e6b0:	e0fff517 	ldw	r3,-44(fp)
   4e6b4:	e0bffd17 	ldw	r2,-12(fp)
   4e6b8:	1885c83a 	sub	r2,r3,r2
   4e6bc:	00000606 	br	4e6d8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4e6c0:	e0bfff17 	ldw	r2,-4(fp)
   4e6c4:	1090000c 	andi	r2,r2,16384
   4e6c8:	10000226 	beq	r2,zero,4e6d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4e6cc:	00bffd44 	movi	r2,-11
   4e6d0:	00000106 	br	4e6d8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4e6d4:	00bffec4 	movi	r2,-5
}
   4e6d8:	e037883a 	mov	sp,fp
   4e6dc:	dfc00117 	ldw	ra,4(sp)
   4e6e0:	df000017 	ldw	fp,0(sp)
   4e6e4:	dec00204 	addi	sp,sp,8
   4e6e8:	f800283a 	ret

0004e6ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e6ec:	defff304 	addi	sp,sp,-52
   4e6f0:	dfc00c15 	stw	ra,48(sp)
   4e6f4:	df000b15 	stw	fp,44(sp)
   4e6f8:	df000b04 	addi	fp,sp,44
   4e6fc:	e13ffc15 	stw	r4,-16(fp)
   4e700:	e17ffd15 	stw	r5,-12(fp)
   4e704:	e1bffe15 	stw	r6,-8(fp)
   4e708:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4e70c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4e710:	e0bffd17 	ldw	r2,-12(fp)
   4e714:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e718:	00003706 	br	4e7f8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4e71c:	e0bffc17 	ldw	r2,-16(fp)
   4e720:	10800c17 	ldw	r2,48(r2)
   4e724:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4e728:	e0bffc17 	ldw	r2,-16(fp)
   4e72c:	10800d17 	ldw	r2,52(r2)
   4e730:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4e734:	e0fff917 	ldw	r3,-28(fp)
   4e738:	e0bff517 	ldw	r2,-44(fp)
   4e73c:	1880062e 	bgeu	r3,r2,4e758 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4e740:	e0fff517 	ldw	r3,-44(fp)
   4e744:	e0bff917 	ldw	r2,-28(fp)
   4e748:	1885c83a 	sub	r2,r3,r2
   4e74c:	10bfffc4 	addi	r2,r2,-1
   4e750:	e0bff615 	stw	r2,-40(fp)
   4e754:	00000b06 	br	4e784 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4e758:	e0bff517 	ldw	r2,-44(fp)
   4e75c:	10000526 	beq	r2,zero,4e774 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4e760:	00c20004 	movi	r3,2048
   4e764:	e0bff917 	ldw	r2,-28(fp)
   4e768:	1885c83a 	sub	r2,r3,r2
   4e76c:	e0bff615 	stw	r2,-40(fp)
   4e770:	00000406 	br	4e784 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4e774:	00c1ffc4 	movi	r3,2047
   4e778:	e0bff917 	ldw	r2,-28(fp)
   4e77c:	1885c83a 	sub	r2,r3,r2
   4e780:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e784:	e0bff617 	ldw	r2,-40(fp)
   4e788:	10001e26 	beq	r2,zero,4e804 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4e78c:	e0fffe17 	ldw	r3,-8(fp)
   4e790:	e0bff617 	ldw	r2,-40(fp)
   4e794:	1880022e 	bgeu	r3,r2,4e7a0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4e798:	e0bffe17 	ldw	r2,-8(fp)
   4e79c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4e7a0:	e0bffc17 	ldw	r2,-16(fp)
   4e7a4:	10c20e04 	addi	r3,r2,2104
   4e7a8:	e0bff917 	ldw	r2,-28(fp)
   4e7ac:	1885883a 	add	r2,r3,r2
   4e7b0:	e1bff617 	ldw	r6,-40(fp)
   4e7b4:	e17ffd17 	ldw	r5,-12(fp)
   4e7b8:	1009883a 	mov	r4,r2
   4e7bc:	0045be00 	call	45be0 <memcpy>
      ptr   += n;
   4e7c0:	e0fffd17 	ldw	r3,-12(fp)
   4e7c4:	e0bff617 	ldw	r2,-40(fp)
   4e7c8:	1885883a 	add	r2,r3,r2
   4e7cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4e7d0:	e0fffe17 	ldw	r3,-8(fp)
   4e7d4:	e0bff617 	ldw	r2,-40(fp)
   4e7d8:	1885c83a 	sub	r2,r3,r2
   4e7dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e7e0:	e0fff917 	ldw	r3,-28(fp)
   4e7e4:	e0bff617 	ldw	r2,-40(fp)
   4e7e8:	1885883a 	add	r2,r3,r2
   4e7ec:	10c1ffcc 	andi	r3,r2,2047
   4e7f0:	e0bffc17 	ldw	r2,-16(fp)
   4e7f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e7f8:	e0bffe17 	ldw	r2,-8(fp)
   4e7fc:	00bfc716 	blt	zero,r2,4e71c <__alt_data_end+0xfffee71c>
   4e800:	00000106 	br	4e808 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4e804:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e808:	0005303a 	rdctl	r2,status
   4e80c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e810:	e0fffb17 	ldw	r3,-20(fp)
   4e814:	00bfff84 	movi	r2,-2
   4e818:	1884703a 	and	r2,r3,r2
   4e81c:	1001703a 	wrctl	status,r2
  
  return context;
   4e820:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4e824:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e828:	e0bffc17 	ldw	r2,-16(fp)
   4e82c:	10800817 	ldw	r2,32(r2)
   4e830:	10c00094 	ori	r3,r2,2
   4e834:	e0bffc17 	ldw	r2,-16(fp)
   4e838:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e83c:	e0bffc17 	ldw	r2,-16(fp)
   4e840:	10800017 	ldw	r2,0(r2)
   4e844:	10800104 	addi	r2,r2,4
   4e848:	1007883a 	mov	r3,r2
   4e84c:	e0bffc17 	ldw	r2,-16(fp)
   4e850:	10800817 	ldw	r2,32(r2)
   4e854:	18800035 	stwio	r2,0(r3)
   4e858:	e0bffa17 	ldw	r2,-24(fp)
   4e85c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e860:	e0bff817 	ldw	r2,-32(fp)
   4e864:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4e868:	e0bffe17 	ldw	r2,-8(fp)
   4e86c:	0080100e 	bge	zero,r2,4e8b0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4e870:	e0bfff17 	ldw	r2,-4(fp)
   4e874:	1090000c 	andi	r2,r2,16384
   4e878:	1000101e 	bne	r2,zero,4e8bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4e87c:	0001883a 	nop
   4e880:	e0bffc17 	ldw	r2,-16(fp)
   4e884:	10c00d17 	ldw	r3,52(r2)
   4e888:	e0bff517 	ldw	r2,-44(fp)
   4e88c:	1880051e 	bne	r3,r2,4e8a4 <altera_avalon_jtag_uart_write+0x1b8>
   4e890:	e0bffc17 	ldw	r2,-16(fp)
   4e894:	10c00917 	ldw	r3,36(r2)
   4e898:	e0bffc17 	ldw	r2,-16(fp)
   4e89c:	10800117 	ldw	r2,4(r2)
   4e8a0:	18bff736 	bltu	r3,r2,4e880 <__alt_data_end+0xfffee880>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4e8a4:	e0bffc17 	ldw	r2,-16(fp)
   4e8a8:	10800917 	ldw	r2,36(r2)
   4e8ac:	1000051e 	bne	r2,zero,4e8c4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4e8b0:	e0bffe17 	ldw	r2,-8(fp)
   4e8b4:	00bfd016 	blt	zero,r2,4e7f8 <__alt_data_end+0xfffee7f8>
   4e8b8:	00000306 	br	4e8c8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4e8bc:	0001883a 	nop
   4e8c0:	00000106 	br	4e8c8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4e8c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4e8c8:	e0fffd17 	ldw	r3,-12(fp)
   4e8cc:	e0bff717 	ldw	r2,-36(fp)
   4e8d0:	18800426 	beq	r3,r2,4e8e4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4e8d4:	e0fffd17 	ldw	r3,-12(fp)
   4e8d8:	e0bff717 	ldw	r2,-36(fp)
   4e8dc:	1885c83a 	sub	r2,r3,r2
   4e8e0:	00000606 	br	4e8fc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4e8e4:	e0bfff17 	ldw	r2,-4(fp)
   4e8e8:	1090000c 	andi	r2,r2,16384
   4e8ec:	10000226 	beq	r2,zero,4e8f8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4e8f0:	00bffd44 	movi	r2,-11
   4e8f4:	00000106 	br	4e8fc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4e8f8:	00bffec4 	movi	r2,-5
}
   4e8fc:	e037883a 	mov	sp,fp
   4e900:	dfc00117 	ldw	ra,4(sp)
   4e904:	df000017 	ldw	fp,0(sp)
   4e908:	dec00204 	addi	sp,sp,8
   4e90c:	f800283a 	ret

0004e910 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4e910:	defffa04 	addi	sp,sp,-24
   4e914:	dfc00515 	stw	ra,20(sp)
   4e918:	df000415 	stw	fp,16(sp)
   4e91c:	df000404 	addi	fp,sp,16
   4e920:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4e924:	0007883a 	mov	r3,zero
   4e928:	e0bfff17 	ldw	r2,-4(fp)
   4e92c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4e930:	e0bfff17 	ldw	r2,-4(fp)
   4e934:	10800104 	addi	r2,r2,4
   4e938:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e93c:	0005303a 	rdctl	r2,status
   4e940:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e944:	e0fffd17 	ldw	r3,-12(fp)
   4e948:	00bfff84 	movi	r2,-2
   4e94c:	1884703a 	and	r2,r3,r2
   4e950:	1001703a 	wrctl	status,r2
  
  return context;
   4e954:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4e958:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4e95c:	004f1dc0 	call	4f1dc <alt_tick>
   4e960:	e0bffc17 	ldw	r2,-16(fp)
   4e964:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e968:	e0bffe17 	ldw	r2,-8(fp)
   4e96c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4e970:	0001883a 	nop
   4e974:	e037883a 	mov	sp,fp
   4e978:	dfc00117 	ldw	ra,4(sp)
   4e97c:	df000017 	ldw	fp,0(sp)
   4e980:	dec00204 	addi	sp,sp,8
   4e984:	f800283a 	ret

0004e988 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4e988:	defff804 	addi	sp,sp,-32
   4e98c:	dfc00715 	stw	ra,28(sp)
   4e990:	df000615 	stw	fp,24(sp)
   4e994:	df000604 	addi	fp,sp,24
   4e998:	e13ffc15 	stw	r4,-16(fp)
   4e99c:	e17ffd15 	stw	r5,-12(fp)
   4e9a0:	e1bffe15 	stw	r6,-8(fp)
   4e9a4:	e1ffff15 	stw	r7,-4(fp)
   4e9a8:	e0bfff17 	ldw	r2,-4(fp)
   4e9ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4e9b0:	d0a6d917 	ldw	r2,-25756(gp)
   4e9b4:	1000021e 	bne	r2,zero,4e9c0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   4e9b8:	e0bffb17 	ldw	r2,-20(fp)
   4e9bc:	d0a6d915 	stw	r2,-25756(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4e9c0:	e0bffc17 	ldw	r2,-16(fp)
   4e9c4:	10800104 	addi	r2,r2,4
   4e9c8:	00c001c4 	movi	r3,7
   4e9cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4e9d0:	d8000015 	stw	zero,0(sp)
   4e9d4:	e1fffc17 	ldw	r7,-16(fp)
   4e9d8:	01800174 	movhi	r6,5
   4e9dc:	31ba4404 	addi	r6,r6,-5872
   4e9e0:	e17ffe17 	ldw	r5,-8(fp)
   4e9e4:	e13ffd17 	ldw	r4,-12(fp)
   4e9e8:	004d1ac0 	call	4d1ac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4e9ec:	0001883a 	nop
   4e9f0:	e037883a 	mov	sp,fp
   4e9f4:	dfc00117 	ldw	ra,4(sp)
   4e9f8:	df000017 	ldw	fp,0(sp)
   4e9fc:	dec00204 	addi	sp,sp,8
   4ea00:	f800283a 	ret

0004ea04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4ea04:	defff504 	addi	sp,sp,-44
   4ea08:	df000a15 	stw	fp,40(sp)
   4ea0c:	df000a04 	addi	fp,sp,40
   4ea10:	e13ffc15 	stw	r4,-16(fp)
   4ea14:	e17ffd15 	stw	r5,-12(fp)
   4ea18:	e1bffe15 	stw	r6,-8(fp)
   4ea1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4ea20:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4ea24:	d0a6d917 	ldw	r2,-25756(gp)
  
  if (alt_ticks_per_second ())
   4ea28:	10003c26 	beq	r2,zero,4eb1c <alt_alarm_start+0x118>
  {
    if (alarm)
   4ea2c:	e0bffc17 	ldw	r2,-16(fp)
   4ea30:	10003826 	beq	r2,zero,4eb14 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4ea34:	e0bffc17 	ldw	r2,-16(fp)
   4ea38:	e0fffe17 	ldw	r3,-8(fp)
   4ea3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4ea40:	e0bffc17 	ldw	r2,-16(fp)
   4ea44:	e0ffff17 	ldw	r3,-4(fp)
   4ea48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ea4c:	0005303a 	rdctl	r2,status
   4ea50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ea54:	e0fff917 	ldw	r3,-28(fp)
   4ea58:	00bfff84 	movi	r2,-2
   4ea5c:	1884703a 	and	r2,r3,r2
   4ea60:	1001703a 	wrctl	status,r2
  
  return context;
   4ea64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4ea68:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4ea6c:	d0a6da17 	ldw	r2,-25752(gp)
      
      current_nticks = alt_nticks();
   4ea70:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4ea74:	e0fffd17 	ldw	r3,-12(fp)
   4ea78:	e0bff617 	ldw	r2,-40(fp)
   4ea7c:	1885883a 	add	r2,r3,r2
   4ea80:	10c00044 	addi	r3,r2,1
   4ea84:	e0bffc17 	ldw	r2,-16(fp)
   4ea88:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4ea8c:	e0bffc17 	ldw	r2,-16(fp)
   4ea90:	10c00217 	ldw	r3,8(r2)
   4ea94:	e0bff617 	ldw	r2,-40(fp)
   4ea98:	1880042e 	bgeu	r3,r2,4eaac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4ea9c:	e0bffc17 	ldw	r2,-16(fp)
   4eaa0:	00c00044 	movi	r3,1
   4eaa4:	10c00405 	stb	r3,16(r2)
   4eaa8:	00000206 	br	4eab4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4eaac:	e0bffc17 	ldw	r2,-16(fp)
   4eab0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4eab4:	e0bffc17 	ldw	r2,-16(fp)
   4eab8:	d0e00e04 	addi	r3,gp,-32712
   4eabc:	e0fffa15 	stw	r3,-24(fp)
   4eac0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4eac4:	e0bffb17 	ldw	r2,-20(fp)
   4eac8:	e0fffa17 	ldw	r3,-24(fp)
   4eacc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4ead0:	e0bffa17 	ldw	r2,-24(fp)
   4ead4:	10c00017 	ldw	r3,0(r2)
   4ead8:	e0bffb17 	ldw	r2,-20(fp)
   4eadc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4eae0:	e0bffa17 	ldw	r2,-24(fp)
   4eae4:	10800017 	ldw	r2,0(r2)
   4eae8:	e0fffb17 	ldw	r3,-20(fp)
   4eaec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4eaf0:	e0bffa17 	ldw	r2,-24(fp)
   4eaf4:	e0fffb17 	ldw	r3,-20(fp)
   4eaf8:	10c00015 	stw	r3,0(r2)
   4eafc:	e0bff817 	ldw	r2,-32(fp)
   4eb00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4eb04:	e0bff717 	ldw	r2,-36(fp)
   4eb08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4eb0c:	0005883a 	mov	r2,zero
   4eb10:	00000306 	br	4eb20 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4eb14:	00bffa84 	movi	r2,-22
   4eb18:	00000106 	br	4eb20 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4eb1c:	00bfde84 	movi	r2,-134
  }
}
   4eb20:	e037883a 	mov	sp,fp
   4eb24:	df000017 	ldw	fp,0(sp)
   4eb28:	dec00104 	addi	sp,sp,4
   4eb2c:	f800283a 	ret

0004eb30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4eb30:	deffff04 	addi	sp,sp,-4
   4eb34:	df000015 	stw	fp,0(sp)
   4eb38:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4eb3c:	0001883a 	nop
   4eb40:	e037883a 	mov	sp,fp
   4eb44:	df000017 	ldw	fp,0(sp)
   4eb48:	dec00104 	addi	sp,sp,4
   4eb4c:	f800283a 	ret

0004eb50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eb50:	defffe04 	addi	sp,sp,-8
   4eb54:	dfc00115 	stw	ra,4(sp)
   4eb58:	df000015 	stw	fp,0(sp)
   4eb5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eb60:	d0a00b17 	ldw	r2,-32724(gp)
   4eb64:	10000326 	beq	r2,zero,4eb74 <alt_get_errno+0x24>
   4eb68:	d0a00b17 	ldw	r2,-32724(gp)
   4eb6c:	103ee83a 	callr	r2
   4eb70:	00000106 	br	4eb78 <alt_get_errno+0x28>
   4eb74:	d0a6d304 	addi	r2,gp,-25780
}
   4eb78:	e037883a 	mov	sp,fp
   4eb7c:	dfc00117 	ldw	ra,4(sp)
   4eb80:	df000017 	ldw	fp,0(sp)
   4eb84:	dec00204 	addi	sp,sp,8
   4eb88:	f800283a 	ret

0004eb8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4eb8c:	defffa04 	addi	sp,sp,-24
   4eb90:	dfc00515 	stw	ra,20(sp)
   4eb94:	df000415 	stw	fp,16(sp)
   4eb98:	df000404 	addi	fp,sp,16
   4eb9c:	e13ffe15 	stw	r4,-8(fp)
   4eba0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4eba4:	e0bffe17 	ldw	r2,-8(fp)
   4eba8:	10000326 	beq	r2,zero,4ebb8 <alt_dev_llist_insert+0x2c>
   4ebac:	e0bffe17 	ldw	r2,-8(fp)
   4ebb0:	10800217 	ldw	r2,8(r2)
   4ebb4:	1000061e 	bne	r2,zero,4ebd0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4ebb8:	004eb500 	call	4eb50 <alt_get_errno>
   4ebbc:	1007883a 	mov	r3,r2
   4ebc0:	00800584 	movi	r2,22
   4ebc4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4ebc8:	00bffa84 	movi	r2,-22
   4ebcc:	00001306 	br	4ec1c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ebd0:	e0bffe17 	ldw	r2,-8(fp)
   4ebd4:	e0ffff17 	ldw	r3,-4(fp)
   4ebd8:	e0fffc15 	stw	r3,-16(fp)
   4ebdc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ebe0:	e0bffd17 	ldw	r2,-12(fp)
   4ebe4:	e0fffc17 	ldw	r3,-16(fp)
   4ebe8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4ebec:	e0bffc17 	ldw	r2,-16(fp)
   4ebf0:	10c00017 	ldw	r3,0(r2)
   4ebf4:	e0bffd17 	ldw	r2,-12(fp)
   4ebf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ebfc:	e0bffc17 	ldw	r2,-16(fp)
   4ec00:	10800017 	ldw	r2,0(r2)
   4ec04:	e0fffd17 	ldw	r3,-12(fp)
   4ec08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4ec0c:	e0bffc17 	ldw	r2,-16(fp)
   4ec10:	e0fffd17 	ldw	r3,-12(fp)
   4ec14:	10c00015 	stw	r3,0(r2)

  return 0;  
   4ec18:	0005883a 	mov	r2,zero
}
   4ec1c:	e037883a 	mov	sp,fp
   4ec20:	dfc00117 	ldw	ra,4(sp)
   4ec24:	df000017 	ldw	fp,0(sp)
   4ec28:	dec00204 	addi	sp,sp,8
   4ec2c:	f800283a 	ret

0004ec30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4ec30:	defffd04 	addi	sp,sp,-12
   4ec34:	dfc00215 	stw	ra,8(sp)
   4ec38:	df000115 	stw	fp,4(sp)
   4ec3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4ec40:	00800174 	movhi	r2,5
   4ec44:	10be8f04 	addi	r2,r2,-1476
   4ec48:	e0bfff15 	stw	r2,-4(fp)
   4ec4c:	00000606 	br	4ec68 <_do_ctors+0x38>
        (*ctor) (); 
   4ec50:	e0bfff17 	ldw	r2,-4(fp)
   4ec54:	10800017 	ldw	r2,0(r2)
   4ec58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4ec5c:	e0bfff17 	ldw	r2,-4(fp)
   4ec60:	10bfff04 	addi	r2,r2,-4
   4ec64:	e0bfff15 	stw	r2,-4(fp)
   4ec68:	e0ffff17 	ldw	r3,-4(fp)
   4ec6c:	00800174 	movhi	r2,5
   4ec70:	10be9004 	addi	r2,r2,-1472
   4ec74:	18bff62e 	bgeu	r3,r2,4ec50 <__alt_data_end+0xfffeec50>
        (*ctor) (); 
}
   4ec78:	0001883a 	nop
   4ec7c:	e037883a 	mov	sp,fp
   4ec80:	dfc00117 	ldw	ra,4(sp)
   4ec84:	df000017 	ldw	fp,0(sp)
   4ec88:	dec00204 	addi	sp,sp,8
   4ec8c:	f800283a 	ret

0004ec90 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4ec90:	defffd04 	addi	sp,sp,-12
   4ec94:	dfc00215 	stw	ra,8(sp)
   4ec98:	df000115 	stw	fp,4(sp)
   4ec9c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4eca0:	00800174 	movhi	r2,5
   4eca4:	10be8f04 	addi	r2,r2,-1476
   4eca8:	e0bfff15 	stw	r2,-4(fp)
   4ecac:	00000606 	br	4ecc8 <_do_dtors+0x38>
        (*dtor) (); 
   4ecb0:	e0bfff17 	ldw	r2,-4(fp)
   4ecb4:	10800017 	ldw	r2,0(r2)
   4ecb8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4ecbc:	e0bfff17 	ldw	r2,-4(fp)
   4ecc0:	10bfff04 	addi	r2,r2,-4
   4ecc4:	e0bfff15 	stw	r2,-4(fp)
   4ecc8:	e0ffff17 	ldw	r3,-4(fp)
   4eccc:	00800174 	movhi	r2,5
   4ecd0:	10be9004 	addi	r2,r2,-1472
   4ecd4:	18bff62e 	bgeu	r3,r2,4ecb0 <__alt_data_end+0xfffeecb0>
        (*dtor) (); 
}
   4ecd8:	0001883a 	nop
   4ecdc:	e037883a 	mov	sp,fp
   4ece0:	dfc00117 	ldw	ra,4(sp)
   4ece4:	df000017 	ldw	fp,0(sp)
   4ece8:	dec00204 	addi	sp,sp,8
   4ecec:	f800283a 	ret

0004ecf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4ecf0:	deffff04 	addi	sp,sp,-4
   4ecf4:	df000015 	stw	fp,0(sp)
   4ecf8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4ecfc:	0001883a 	nop
   4ed00:	e037883a 	mov	sp,fp
   4ed04:	df000017 	ldw	fp,0(sp)
   4ed08:	dec00104 	addi	sp,sp,4
   4ed0c:	f800283a 	ret

0004ed10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4ed10:	defffe04 	addi	sp,sp,-8
   4ed14:	df000115 	stw	fp,4(sp)
   4ed18:	df000104 	addi	fp,sp,4
   4ed1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4ed20:	e0bfff17 	ldw	r2,-4(fp)
   4ed24:	10bffe84 	addi	r2,r2,-6
   4ed28:	10c00428 	cmpgeui	r3,r2,16
   4ed2c:	18001a1e 	bne	r3,zero,4ed98 <alt_exception_cause_generated_bad_addr+0x88>
   4ed30:	100690ba 	slli	r3,r2,2
   4ed34:	00800174 	movhi	r2,5
   4ed38:	10bb5204 	addi	r2,r2,-4792
   4ed3c:	1885883a 	add	r2,r3,r2
   4ed40:	10800017 	ldw	r2,0(r2)
   4ed44:	1000683a 	jmp	r2
   4ed48:	0004ed88 	cmpgei	zero,zero,5046
   4ed4c:	0004ed88 	cmpgei	zero,zero,5046
   4ed50:	0004ed98 	cmpnei	zero,zero,5046
   4ed54:	0004ed98 	cmpnei	zero,zero,5046
   4ed58:	0004ed98 	cmpnei	zero,zero,5046
   4ed5c:	0004ed88 	cmpgei	zero,zero,5046
   4ed60:	0004ed90 	cmplti	zero,zero,5046
   4ed64:	0004ed98 	cmpnei	zero,zero,5046
   4ed68:	0004ed88 	cmpgei	zero,zero,5046
   4ed6c:	0004ed88 	cmpgei	zero,zero,5046
   4ed70:	0004ed98 	cmpnei	zero,zero,5046
   4ed74:	0004ed88 	cmpgei	zero,zero,5046
   4ed78:	0004ed90 	cmplti	zero,zero,5046
   4ed7c:	0004ed98 	cmpnei	zero,zero,5046
   4ed80:	0004ed98 	cmpnei	zero,zero,5046
   4ed84:	0004ed88 	cmpgei	zero,zero,5046
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4ed88:	00800044 	movi	r2,1
   4ed8c:	00000306 	br	4ed9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4ed90:	0005883a 	mov	r2,zero
   4ed94:	00000106 	br	4ed9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4ed98:	0005883a 	mov	r2,zero
  }
}
   4ed9c:	e037883a 	mov	sp,fp
   4eda0:	df000017 	ldw	fp,0(sp)
   4eda4:	dec00104 	addi	sp,sp,4
   4eda8:	f800283a 	ret

0004edac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4edac:	defff904 	addi	sp,sp,-28
   4edb0:	dfc00615 	stw	ra,24(sp)
   4edb4:	df000515 	stw	fp,20(sp)
   4edb8:	df000504 	addi	fp,sp,20
   4edbc:	e13ffc15 	stw	r4,-16(fp)
   4edc0:	e17ffd15 	stw	r5,-12(fp)
   4edc4:	e1bffe15 	stw	r6,-8(fp)
   4edc8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4edcc:	e1bfff17 	ldw	r6,-4(fp)
   4edd0:	e17ffe17 	ldw	r5,-8(fp)
   4edd4:	e13ffd17 	ldw	r4,-12(fp)
   4edd8:	004efec0 	call	4efec <open>
   4eddc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4ede0:	e0bffb17 	ldw	r2,-20(fp)
   4ede4:	10001c16 	blt	r2,zero,4ee58 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4ede8:	00800174 	movhi	r2,5
   4edec:	1081ae04 	addi	r2,r2,1720
   4edf0:	e0fffb17 	ldw	r3,-20(fp)
   4edf4:	18c00324 	muli	r3,r3,12
   4edf8:	10c5883a 	add	r2,r2,r3
   4edfc:	10c00017 	ldw	r3,0(r2)
   4ee00:	e0bffc17 	ldw	r2,-16(fp)
   4ee04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4ee08:	00800174 	movhi	r2,5
   4ee0c:	1081ae04 	addi	r2,r2,1720
   4ee10:	e0fffb17 	ldw	r3,-20(fp)
   4ee14:	18c00324 	muli	r3,r3,12
   4ee18:	10c5883a 	add	r2,r2,r3
   4ee1c:	10800104 	addi	r2,r2,4
   4ee20:	10c00017 	ldw	r3,0(r2)
   4ee24:	e0bffc17 	ldw	r2,-16(fp)
   4ee28:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4ee2c:	00800174 	movhi	r2,5
   4ee30:	1081ae04 	addi	r2,r2,1720
   4ee34:	e0fffb17 	ldw	r3,-20(fp)
   4ee38:	18c00324 	muli	r3,r3,12
   4ee3c:	10c5883a 	add	r2,r2,r3
   4ee40:	10800204 	addi	r2,r2,8
   4ee44:	10c00017 	ldw	r3,0(r2)
   4ee48:	e0bffc17 	ldw	r2,-16(fp)
   4ee4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4ee50:	e13ffb17 	ldw	r4,-20(fp)
   4ee54:	004db8c0 	call	4db8c <alt_release_fd>
  }
} 
   4ee58:	0001883a 	nop
   4ee5c:	e037883a 	mov	sp,fp
   4ee60:	dfc00117 	ldw	ra,4(sp)
   4ee64:	df000017 	ldw	fp,0(sp)
   4ee68:	dec00204 	addi	sp,sp,8
   4ee6c:	f800283a 	ret

0004ee70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4ee70:	defffb04 	addi	sp,sp,-20
   4ee74:	dfc00415 	stw	ra,16(sp)
   4ee78:	df000315 	stw	fp,12(sp)
   4ee7c:	df000304 	addi	fp,sp,12
   4ee80:	e13ffd15 	stw	r4,-12(fp)
   4ee84:	e17ffe15 	stw	r5,-8(fp)
   4ee88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4ee8c:	01c07fc4 	movi	r7,511
   4ee90:	01800044 	movi	r6,1
   4ee94:	e17ffd17 	ldw	r5,-12(fp)
   4ee98:	01000174 	movhi	r4,5
   4ee9c:	2101b104 	addi	r4,r4,1732
   4eea0:	004edac0 	call	4edac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4eea4:	01c07fc4 	movi	r7,511
   4eea8:	000d883a 	mov	r6,zero
   4eeac:	e17ffe17 	ldw	r5,-8(fp)
   4eeb0:	01000174 	movhi	r4,5
   4eeb4:	2101ae04 	addi	r4,r4,1720
   4eeb8:	004edac0 	call	4edac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4eebc:	01c07fc4 	movi	r7,511
   4eec0:	01800044 	movi	r6,1
   4eec4:	e17fff17 	ldw	r5,-4(fp)
   4eec8:	01000174 	movhi	r4,5
   4eecc:	2101b404 	addi	r4,r4,1744
   4eed0:	004edac0 	call	4edac <alt_open_fd>
}  
   4eed4:	0001883a 	nop
   4eed8:	e037883a 	mov	sp,fp
   4eedc:	dfc00117 	ldw	ra,4(sp)
   4eee0:	df000017 	ldw	fp,0(sp)
   4eee4:	dec00204 	addi	sp,sp,8
   4eee8:	f800283a 	ret

0004eeec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eeec:	defffe04 	addi	sp,sp,-8
   4eef0:	dfc00115 	stw	ra,4(sp)
   4eef4:	df000015 	stw	fp,0(sp)
   4eef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eefc:	d0a00b17 	ldw	r2,-32724(gp)
   4ef00:	10000326 	beq	r2,zero,4ef10 <alt_get_errno+0x24>
   4ef04:	d0a00b17 	ldw	r2,-32724(gp)
   4ef08:	103ee83a 	callr	r2
   4ef0c:	00000106 	br	4ef14 <alt_get_errno+0x28>
   4ef10:	d0a6d304 	addi	r2,gp,-25780
}
   4ef14:	e037883a 	mov	sp,fp
   4ef18:	dfc00117 	ldw	ra,4(sp)
   4ef1c:	df000017 	ldw	fp,0(sp)
   4ef20:	dec00204 	addi	sp,sp,8
   4ef24:	f800283a 	ret

0004ef28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4ef28:	defffd04 	addi	sp,sp,-12
   4ef2c:	df000215 	stw	fp,8(sp)
   4ef30:	df000204 	addi	fp,sp,8
   4ef34:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4ef38:	e0bfff17 	ldw	r2,-4(fp)
   4ef3c:	10800217 	ldw	r2,8(r2)
   4ef40:	10d00034 	orhi	r3,r2,16384
   4ef44:	e0bfff17 	ldw	r2,-4(fp)
   4ef48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ef4c:	e03ffe15 	stw	zero,-8(fp)
   4ef50:	00001d06 	br	4efc8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ef54:	00800174 	movhi	r2,5
   4ef58:	1081ae04 	addi	r2,r2,1720
   4ef5c:	e0fffe17 	ldw	r3,-8(fp)
   4ef60:	18c00324 	muli	r3,r3,12
   4ef64:	10c5883a 	add	r2,r2,r3
   4ef68:	10c00017 	ldw	r3,0(r2)
   4ef6c:	e0bfff17 	ldw	r2,-4(fp)
   4ef70:	10800017 	ldw	r2,0(r2)
   4ef74:	1880111e 	bne	r3,r2,4efbc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4ef78:	00800174 	movhi	r2,5
   4ef7c:	1081ae04 	addi	r2,r2,1720
   4ef80:	e0fffe17 	ldw	r3,-8(fp)
   4ef84:	18c00324 	muli	r3,r3,12
   4ef88:	10c5883a 	add	r2,r2,r3
   4ef8c:	10800204 	addi	r2,r2,8
   4ef90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ef94:	1000090e 	bge	r2,zero,4efbc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4ef98:	e0bffe17 	ldw	r2,-8(fp)
   4ef9c:	10c00324 	muli	r3,r2,12
   4efa0:	00800174 	movhi	r2,5
   4efa4:	1081ae04 	addi	r2,r2,1720
   4efa8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4efac:	e0bfff17 	ldw	r2,-4(fp)
   4efb0:	18800226 	beq	r3,r2,4efbc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4efb4:	00bffcc4 	movi	r2,-13
   4efb8:	00000806 	br	4efdc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4efbc:	e0bffe17 	ldw	r2,-8(fp)
   4efc0:	10800044 	addi	r2,r2,1
   4efc4:	e0bffe15 	stw	r2,-8(fp)
   4efc8:	d0a00a17 	ldw	r2,-32728(gp)
   4efcc:	1007883a 	mov	r3,r2
   4efd0:	e0bffe17 	ldw	r2,-8(fp)
   4efd4:	18bfdf2e 	bgeu	r3,r2,4ef54 <__alt_data_end+0xfffeef54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4efd8:	0005883a 	mov	r2,zero
}
   4efdc:	e037883a 	mov	sp,fp
   4efe0:	df000017 	ldw	fp,0(sp)
   4efe4:	dec00104 	addi	sp,sp,4
   4efe8:	f800283a 	ret

0004efec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4efec:	defff604 	addi	sp,sp,-40
   4eff0:	dfc00915 	stw	ra,36(sp)
   4eff4:	df000815 	stw	fp,32(sp)
   4eff8:	df000804 	addi	fp,sp,32
   4effc:	e13ffd15 	stw	r4,-12(fp)
   4f000:	e17ffe15 	stw	r5,-8(fp)
   4f004:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4f008:	00bfffc4 	movi	r2,-1
   4f00c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4f010:	00bffb44 	movi	r2,-19
   4f014:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4f018:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4f01c:	d1600804 	addi	r5,gp,-32736
   4f020:	e13ffd17 	ldw	r4,-12(fp)
   4f024:	004f3080 	call	4f308 <alt_find_dev>
   4f028:	e0bff815 	stw	r2,-32(fp)
   4f02c:	e0bff817 	ldw	r2,-32(fp)
   4f030:	1000051e 	bne	r2,zero,4f048 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4f034:	e13ffd17 	ldw	r4,-12(fp)
   4f038:	004f3980 	call	4f398 <alt_find_file>
   4f03c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4f040:	00800044 	movi	r2,1
   4f044:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4f048:	e0bff817 	ldw	r2,-32(fp)
   4f04c:	10002926 	beq	r2,zero,4f0f4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4f050:	e13ff817 	ldw	r4,-32(fp)
   4f054:	004f4a00 	call	4f4a0 <alt_get_fd>
   4f058:	e0bff915 	stw	r2,-28(fp)
   4f05c:	e0bff917 	ldw	r2,-28(fp)
   4f060:	1000030e 	bge	r2,zero,4f070 <open+0x84>
    {
      status = index;
   4f064:	e0bff917 	ldw	r2,-28(fp)
   4f068:	e0bffa15 	stw	r2,-24(fp)
   4f06c:	00002306 	br	4f0fc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4f070:	e0bff917 	ldw	r2,-28(fp)
   4f074:	10c00324 	muli	r3,r2,12
   4f078:	00800174 	movhi	r2,5
   4f07c:	1081ae04 	addi	r2,r2,1720
   4f080:	1885883a 	add	r2,r3,r2
   4f084:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4f088:	e0fffe17 	ldw	r3,-8(fp)
   4f08c:	00900034 	movhi	r2,16384
   4f090:	10bfffc4 	addi	r2,r2,-1
   4f094:	1886703a 	and	r3,r3,r2
   4f098:	e0bffc17 	ldw	r2,-16(fp)
   4f09c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4f0a0:	e0bffb17 	ldw	r2,-20(fp)
   4f0a4:	1000051e 	bne	r2,zero,4f0bc <open+0xd0>
   4f0a8:	e13ffc17 	ldw	r4,-16(fp)
   4f0ac:	004ef280 	call	4ef28 <alt_file_locked>
   4f0b0:	e0bffa15 	stw	r2,-24(fp)
   4f0b4:	e0bffa17 	ldw	r2,-24(fp)
   4f0b8:	10001016 	blt	r2,zero,4f0fc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4f0bc:	e0bff817 	ldw	r2,-32(fp)
   4f0c0:	10800317 	ldw	r2,12(r2)
   4f0c4:	10000826 	beq	r2,zero,4f0e8 <open+0xfc>
   4f0c8:	e0bff817 	ldw	r2,-32(fp)
   4f0cc:	10800317 	ldw	r2,12(r2)
   4f0d0:	e1ffff17 	ldw	r7,-4(fp)
   4f0d4:	e1bffe17 	ldw	r6,-8(fp)
   4f0d8:	e17ffd17 	ldw	r5,-12(fp)
   4f0dc:	e13ffc17 	ldw	r4,-16(fp)
   4f0e0:	103ee83a 	callr	r2
   4f0e4:	00000106 	br	4f0ec <open+0x100>
   4f0e8:	0005883a 	mov	r2,zero
   4f0ec:	e0bffa15 	stw	r2,-24(fp)
   4f0f0:	00000206 	br	4f0fc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4f0f4:	00bffb44 	movi	r2,-19
   4f0f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4f0fc:	e0bffa17 	ldw	r2,-24(fp)
   4f100:	1000090e 	bge	r2,zero,4f128 <open+0x13c>
  {
    alt_release_fd (index);  
   4f104:	e13ff917 	ldw	r4,-28(fp)
   4f108:	004db8c0 	call	4db8c <alt_release_fd>
    ALT_ERRNO = -status;
   4f10c:	004eeec0 	call	4eeec <alt_get_errno>
   4f110:	1007883a 	mov	r3,r2
   4f114:	e0bffa17 	ldw	r2,-24(fp)
   4f118:	0085c83a 	sub	r2,zero,r2
   4f11c:	18800015 	stw	r2,0(r3)
    return -1;
   4f120:	00bfffc4 	movi	r2,-1
   4f124:	00000106 	br	4f12c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4f128:	e0bff917 	ldw	r2,-28(fp)
}
   4f12c:	e037883a 	mov	sp,fp
   4f130:	dfc00117 	ldw	ra,4(sp)
   4f134:	df000017 	ldw	fp,0(sp)
   4f138:	dec00204 	addi	sp,sp,8
   4f13c:	f800283a 	ret

0004f140 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4f140:	defffa04 	addi	sp,sp,-24
   4f144:	df000515 	stw	fp,20(sp)
   4f148:	df000504 	addi	fp,sp,20
   4f14c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f150:	0005303a 	rdctl	r2,status
   4f154:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f158:	e0fffc17 	ldw	r3,-16(fp)
   4f15c:	00bfff84 	movi	r2,-2
   4f160:	1884703a 	and	r2,r3,r2
   4f164:	1001703a 	wrctl	status,r2
  
  return context;
   4f168:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4f16c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4f170:	e0bfff17 	ldw	r2,-4(fp)
   4f174:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4f178:	e0bffd17 	ldw	r2,-12(fp)
   4f17c:	10800017 	ldw	r2,0(r2)
   4f180:	e0fffd17 	ldw	r3,-12(fp)
   4f184:	18c00117 	ldw	r3,4(r3)
   4f188:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4f18c:	e0bffd17 	ldw	r2,-12(fp)
   4f190:	10800117 	ldw	r2,4(r2)
   4f194:	e0fffd17 	ldw	r3,-12(fp)
   4f198:	18c00017 	ldw	r3,0(r3)
   4f19c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4f1a0:	e0bffd17 	ldw	r2,-12(fp)
   4f1a4:	e0fffd17 	ldw	r3,-12(fp)
   4f1a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4f1ac:	e0bffd17 	ldw	r2,-12(fp)
   4f1b0:	e0fffd17 	ldw	r3,-12(fp)
   4f1b4:	10c00015 	stw	r3,0(r2)
   4f1b8:	e0bffb17 	ldw	r2,-20(fp)
   4f1bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f1c0:	e0bffe17 	ldw	r2,-8(fp)
   4f1c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4f1c8:	0001883a 	nop
   4f1cc:	e037883a 	mov	sp,fp
   4f1d0:	df000017 	ldw	fp,0(sp)
   4f1d4:	dec00104 	addi	sp,sp,4
   4f1d8:	f800283a 	ret

0004f1dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4f1dc:	defffb04 	addi	sp,sp,-20
   4f1e0:	dfc00415 	stw	ra,16(sp)
   4f1e4:	df000315 	stw	fp,12(sp)
   4f1e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4f1ec:	d0a00e17 	ldw	r2,-32712(gp)
   4f1f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4f1f4:	d0a6da17 	ldw	r2,-25752(gp)
   4f1f8:	10800044 	addi	r2,r2,1
   4f1fc:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f200:	00002e06 	br	4f2bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4f204:	e0bffd17 	ldw	r2,-12(fp)
   4f208:	10800017 	ldw	r2,0(r2)
   4f20c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4f210:	e0bffd17 	ldw	r2,-12(fp)
   4f214:	10800403 	ldbu	r2,16(r2)
   4f218:	10803fcc 	andi	r2,r2,255
   4f21c:	10000426 	beq	r2,zero,4f230 <alt_tick+0x54>
   4f220:	d0a6da17 	ldw	r2,-25752(gp)
   4f224:	1000021e 	bne	r2,zero,4f230 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4f228:	e0bffd17 	ldw	r2,-12(fp)
   4f22c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4f230:	e0bffd17 	ldw	r2,-12(fp)
   4f234:	10800217 	ldw	r2,8(r2)
   4f238:	d0e6da17 	ldw	r3,-25752(gp)
   4f23c:	18801d36 	bltu	r3,r2,4f2b4 <alt_tick+0xd8>
   4f240:	e0bffd17 	ldw	r2,-12(fp)
   4f244:	10800403 	ldbu	r2,16(r2)
   4f248:	10803fcc 	andi	r2,r2,255
   4f24c:	1000191e 	bne	r2,zero,4f2b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4f250:	e0bffd17 	ldw	r2,-12(fp)
   4f254:	10800317 	ldw	r2,12(r2)
   4f258:	e0fffd17 	ldw	r3,-12(fp)
   4f25c:	18c00517 	ldw	r3,20(r3)
   4f260:	1809883a 	mov	r4,r3
   4f264:	103ee83a 	callr	r2
   4f268:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4f26c:	e0bfff17 	ldw	r2,-4(fp)
   4f270:	1000031e 	bne	r2,zero,4f280 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4f274:	e13ffd17 	ldw	r4,-12(fp)
   4f278:	004f1400 	call	4f140 <alt_alarm_stop>
   4f27c:	00000d06 	br	4f2b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4f280:	e0bffd17 	ldw	r2,-12(fp)
   4f284:	10c00217 	ldw	r3,8(r2)
   4f288:	e0bfff17 	ldw	r2,-4(fp)
   4f28c:	1887883a 	add	r3,r3,r2
   4f290:	e0bffd17 	ldw	r2,-12(fp)
   4f294:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4f298:	e0bffd17 	ldw	r2,-12(fp)
   4f29c:	10c00217 	ldw	r3,8(r2)
   4f2a0:	d0a6da17 	ldw	r2,-25752(gp)
   4f2a4:	1880032e 	bgeu	r3,r2,4f2b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4f2a8:	e0bffd17 	ldw	r2,-12(fp)
   4f2ac:	00c00044 	movi	r3,1
   4f2b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4f2b4:	e0bffe17 	ldw	r2,-8(fp)
   4f2b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f2bc:	e0fffd17 	ldw	r3,-12(fp)
   4f2c0:	d0a00e04 	addi	r2,gp,-32712
   4f2c4:	18bfcf1e 	bne	r3,r2,4f204 <__alt_data_end+0xfffef204>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4f2c8:	0001883a 	nop
}
   4f2cc:	0001883a 	nop
   4f2d0:	e037883a 	mov	sp,fp
   4f2d4:	dfc00117 	ldw	ra,4(sp)
   4f2d8:	df000017 	ldw	fp,0(sp)
   4f2dc:	dec00204 	addi	sp,sp,8
   4f2e0:	f800283a 	ret

0004f2e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4f2e4:	deffff04 	addi	sp,sp,-4
   4f2e8:	df000015 	stw	fp,0(sp)
   4f2ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4f2f0:	000170fa 	wrctl	ienable,zero
}
   4f2f4:	0001883a 	nop
   4f2f8:	e037883a 	mov	sp,fp
   4f2fc:	df000017 	ldw	fp,0(sp)
   4f300:	dec00104 	addi	sp,sp,4
   4f304:	f800283a 	ret

0004f308 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4f308:	defffa04 	addi	sp,sp,-24
   4f30c:	dfc00515 	stw	ra,20(sp)
   4f310:	df000415 	stw	fp,16(sp)
   4f314:	df000404 	addi	fp,sp,16
   4f318:	e13ffe15 	stw	r4,-8(fp)
   4f31c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4f320:	e0bfff17 	ldw	r2,-4(fp)
   4f324:	10800017 	ldw	r2,0(r2)
   4f328:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4f32c:	e13ffe17 	ldw	r4,-8(fp)
   4f330:	004712c0 	call	4712c <strlen>
   4f334:	10800044 	addi	r2,r2,1
   4f338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f33c:	00000d06 	br	4f374 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4f340:	e0bffc17 	ldw	r2,-16(fp)
   4f344:	10800217 	ldw	r2,8(r2)
   4f348:	e0fffd17 	ldw	r3,-12(fp)
   4f34c:	180d883a 	mov	r6,r3
   4f350:	e17ffe17 	ldw	r5,-8(fp)
   4f354:	1009883a 	mov	r4,r2
   4f358:	004f5900 	call	4f590 <memcmp>
   4f35c:	1000021e 	bne	r2,zero,4f368 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4f360:	e0bffc17 	ldw	r2,-16(fp)
   4f364:	00000706 	br	4f384 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4f368:	e0bffc17 	ldw	r2,-16(fp)
   4f36c:	10800017 	ldw	r2,0(r2)
   4f370:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f374:	e0fffc17 	ldw	r3,-16(fp)
   4f378:	e0bfff17 	ldw	r2,-4(fp)
   4f37c:	18bff01e 	bne	r3,r2,4f340 <__alt_data_end+0xfffef340>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4f380:	0005883a 	mov	r2,zero
}
   4f384:	e037883a 	mov	sp,fp
   4f388:	dfc00117 	ldw	ra,4(sp)
   4f38c:	df000017 	ldw	fp,0(sp)
   4f390:	dec00204 	addi	sp,sp,8
   4f394:	f800283a 	ret

0004f398 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4f398:	defffb04 	addi	sp,sp,-20
   4f39c:	dfc00415 	stw	ra,16(sp)
   4f3a0:	df000315 	stw	fp,12(sp)
   4f3a4:	df000304 	addi	fp,sp,12
   4f3a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4f3ac:	d0a00617 	ldw	r2,-32744(gp)
   4f3b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f3b4:	00003106 	br	4f47c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4f3b8:	e0bffd17 	ldw	r2,-12(fp)
   4f3bc:	10800217 	ldw	r2,8(r2)
   4f3c0:	1009883a 	mov	r4,r2
   4f3c4:	004712c0 	call	4712c <strlen>
   4f3c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4f3cc:	e0bffd17 	ldw	r2,-12(fp)
   4f3d0:	10c00217 	ldw	r3,8(r2)
   4f3d4:	e0bffe17 	ldw	r2,-8(fp)
   4f3d8:	10bfffc4 	addi	r2,r2,-1
   4f3dc:	1885883a 	add	r2,r3,r2
   4f3e0:	10800003 	ldbu	r2,0(r2)
   4f3e4:	10803fcc 	andi	r2,r2,255
   4f3e8:	1080201c 	xori	r2,r2,128
   4f3ec:	10bfe004 	addi	r2,r2,-128
   4f3f0:	10800bd8 	cmpnei	r2,r2,47
   4f3f4:	1000031e 	bne	r2,zero,4f404 <alt_find_file+0x6c>
    {
      len -= 1;
   4f3f8:	e0bffe17 	ldw	r2,-8(fp)
   4f3fc:	10bfffc4 	addi	r2,r2,-1
   4f400:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f404:	e0bffe17 	ldw	r2,-8(fp)
   4f408:	e0ffff17 	ldw	r3,-4(fp)
   4f40c:	1885883a 	add	r2,r3,r2
   4f410:	10800003 	ldbu	r2,0(r2)
   4f414:	10803fcc 	andi	r2,r2,255
   4f418:	1080201c 	xori	r2,r2,128
   4f41c:	10bfe004 	addi	r2,r2,-128
   4f420:	10800be0 	cmpeqi	r2,r2,47
   4f424:	1000081e 	bne	r2,zero,4f448 <alt_find_file+0xb0>
   4f428:	e0bffe17 	ldw	r2,-8(fp)
   4f42c:	e0ffff17 	ldw	r3,-4(fp)
   4f430:	1885883a 	add	r2,r3,r2
   4f434:	10800003 	ldbu	r2,0(r2)
   4f438:	10803fcc 	andi	r2,r2,255
   4f43c:	1080201c 	xori	r2,r2,128
   4f440:	10bfe004 	addi	r2,r2,-128
   4f444:	10000a1e 	bne	r2,zero,4f470 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4f448:	e0bffd17 	ldw	r2,-12(fp)
   4f44c:	10800217 	ldw	r2,8(r2)
   4f450:	e0fffe17 	ldw	r3,-8(fp)
   4f454:	180d883a 	mov	r6,r3
   4f458:	e17fff17 	ldw	r5,-4(fp)
   4f45c:	1009883a 	mov	r4,r2
   4f460:	004f5900 	call	4f590 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f464:	1000021e 	bne	r2,zero,4f470 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4f468:	e0bffd17 	ldw	r2,-12(fp)
   4f46c:	00000706 	br	4f48c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4f470:	e0bffd17 	ldw	r2,-12(fp)
   4f474:	10800017 	ldw	r2,0(r2)
   4f478:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f47c:	e0fffd17 	ldw	r3,-12(fp)
   4f480:	d0a00604 	addi	r2,gp,-32744
   4f484:	18bfcc1e 	bne	r3,r2,4f3b8 <__alt_data_end+0xfffef3b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4f488:	0005883a 	mov	r2,zero
}
   4f48c:	e037883a 	mov	sp,fp
   4f490:	dfc00117 	ldw	ra,4(sp)
   4f494:	df000017 	ldw	fp,0(sp)
   4f498:	dec00204 	addi	sp,sp,8
   4f49c:	f800283a 	ret

0004f4a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4f4a0:	defffc04 	addi	sp,sp,-16
   4f4a4:	df000315 	stw	fp,12(sp)
   4f4a8:	df000304 	addi	fp,sp,12
   4f4ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4f4b0:	00bffa04 	movi	r2,-24
   4f4b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f4b8:	e03ffd15 	stw	zero,-12(fp)
   4f4bc:	00001906 	br	4f524 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   4f4c0:	00800174 	movhi	r2,5
   4f4c4:	1081ae04 	addi	r2,r2,1720
   4f4c8:	e0fffd17 	ldw	r3,-12(fp)
   4f4cc:	18c00324 	muli	r3,r3,12
   4f4d0:	10c5883a 	add	r2,r2,r3
   4f4d4:	10800017 	ldw	r2,0(r2)
   4f4d8:	10000f1e 	bne	r2,zero,4f518 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4f4dc:	00800174 	movhi	r2,5
   4f4e0:	1081ae04 	addi	r2,r2,1720
   4f4e4:	e0fffd17 	ldw	r3,-12(fp)
   4f4e8:	18c00324 	muli	r3,r3,12
   4f4ec:	10c5883a 	add	r2,r2,r3
   4f4f0:	e0ffff17 	ldw	r3,-4(fp)
   4f4f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4f4f8:	d0e00a17 	ldw	r3,-32728(gp)
   4f4fc:	e0bffd17 	ldw	r2,-12(fp)
   4f500:	1880020e 	bge	r3,r2,4f50c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   4f504:	e0bffd17 	ldw	r2,-12(fp)
   4f508:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   4f50c:	e0bffd17 	ldw	r2,-12(fp)
   4f510:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4f514:	00000606 	br	4f530 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f518:	e0bffd17 	ldw	r2,-12(fp)
   4f51c:	10800044 	addi	r2,r2,1
   4f520:	e0bffd15 	stw	r2,-12(fp)
   4f524:	e0bffd17 	ldw	r2,-12(fp)
   4f528:	10800810 	cmplti	r2,r2,32
   4f52c:	103fe41e 	bne	r2,zero,4f4c0 <__alt_data_end+0xfffef4c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4f530:	e0bffe17 	ldw	r2,-8(fp)
}
   4f534:	e037883a 	mov	sp,fp
   4f538:	df000017 	ldw	fp,0(sp)
   4f53c:	dec00104 	addi	sp,sp,4
   4f540:	f800283a 	ret

0004f544 <atexit>:
   4f544:	200b883a 	mov	r5,r4
   4f548:	000f883a 	mov	r7,zero
   4f54c:	000d883a 	mov	r6,zero
   4f550:	0009883a 	mov	r4,zero
   4f554:	004f7741 	jmpi	4f774 <__register_exitproc>

0004f558 <exit>:
   4f558:	defffe04 	addi	sp,sp,-8
   4f55c:	000b883a 	mov	r5,zero
   4f560:	dc000015 	stw	r16,0(sp)
   4f564:	dfc00115 	stw	ra,4(sp)
   4f568:	2021883a 	mov	r16,r4
   4f56c:	004f88c0 	call	4f88c <__call_exitprocs>
   4f570:	00800174 	movhi	r2,5
   4f574:	10862604 	addi	r2,r2,6296
   4f578:	11000017 	ldw	r4,0(r2)
   4f57c:	20800f17 	ldw	r2,60(r4)
   4f580:	10000126 	beq	r2,zero,4f588 <exit+0x30>
   4f584:	103ee83a 	callr	r2
   4f588:	8009883a 	mov	r4,r16
   4f58c:	004fa0c0 	call	4fa0c <_exit>

0004f590 <memcmp>:
   4f590:	01c000c4 	movi	r7,3
   4f594:	3980192e 	bgeu	r7,r6,4f5fc <memcmp+0x6c>
   4f598:	2144b03a 	or	r2,r4,r5
   4f59c:	11c4703a 	and	r2,r2,r7
   4f5a0:	10000f26 	beq	r2,zero,4f5e0 <memcmp+0x50>
   4f5a4:	20800003 	ldbu	r2,0(r4)
   4f5a8:	28c00003 	ldbu	r3,0(r5)
   4f5ac:	10c0151e 	bne	r2,r3,4f604 <memcmp+0x74>
   4f5b0:	31bfff84 	addi	r6,r6,-2
   4f5b4:	01ffffc4 	movi	r7,-1
   4f5b8:	00000406 	br	4f5cc <memcmp+0x3c>
   4f5bc:	20800003 	ldbu	r2,0(r4)
   4f5c0:	28c00003 	ldbu	r3,0(r5)
   4f5c4:	31bfffc4 	addi	r6,r6,-1
   4f5c8:	10c00e1e 	bne	r2,r3,4f604 <memcmp+0x74>
   4f5cc:	21000044 	addi	r4,r4,1
   4f5d0:	29400044 	addi	r5,r5,1
   4f5d4:	31fff91e 	bne	r6,r7,4f5bc <__alt_data_end+0xfffef5bc>
   4f5d8:	0005883a 	mov	r2,zero
   4f5dc:	f800283a 	ret
   4f5e0:	20c00017 	ldw	r3,0(r4)
   4f5e4:	28800017 	ldw	r2,0(r5)
   4f5e8:	18bfee1e 	bne	r3,r2,4f5a4 <__alt_data_end+0xfffef5a4>
   4f5ec:	31bfff04 	addi	r6,r6,-4
   4f5f0:	21000104 	addi	r4,r4,4
   4f5f4:	29400104 	addi	r5,r5,4
   4f5f8:	39bff936 	bltu	r7,r6,4f5e0 <__alt_data_end+0xfffef5e0>
   4f5fc:	303fe91e 	bne	r6,zero,4f5a4 <__alt_data_end+0xfffef5a4>
   4f600:	003ff506 	br	4f5d8 <__alt_data_end+0xfffef5d8>
   4f604:	10c5c83a 	sub	r2,r2,r3
   4f608:	f800283a 	ret

0004f60c <_putc_r>:
   4f60c:	defffc04 	addi	sp,sp,-16
   4f610:	dc000215 	stw	r16,8(sp)
   4f614:	dfc00315 	stw	ra,12(sp)
   4f618:	2021883a 	mov	r16,r4
   4f61c:	20000226 	beq	r4,zero,4f628 <_putc_r+0x1c>
   4f620:	20800e17 	ldw	r2,56(r4)
   4f624:	10001b26 	beq	r2,zero,4f694 <_putc_r+0x88>
   4f628:	30800217 	ldw	r2,8(r6)
   4f62c:	10bfffc4 	addi	r2,r2,-1
   4f630:	30800215 	stw	r2,8(r6)
   4f634:	10000a16 	blt	r2,zero,4f660 <_putc_r+0x54>
   4f638:	30800017 	ldw	r2,0(r6)
   4f63c:	11400005 	stb	r5,0(r2)
   4f640:	30800017 	ldw	r2,0(r6)
   4f644:	10c00044 	addi	r3,r2,1
   4f648:	30c00015 	stw	r3,0(r6)
   4f64c:	10800003 	ldbu	r2,0(r2)
   4f650:	dfc00317 	ldw	ra,12(sp)
   4f654:	dc000217 	ldw	r16,8(sp)
   4f658:	dec00404 	addi	sp,sp,16
   4f65c:	f800283a 	ret
   4f660:	30c00617 	ldw	r3,24(r6)
   4f664:	10c00616 	blt	r2,r3,4f680 <_putc_r+0x74>
   4f668:	30800017 	ldw	r2,0(r6)
   4f66c:	00c00284 	movi	r3,10
   4f670:	11400005 	stb	r5,0(r2)
   4f674:	30800017 	ldw	r2,0(r6)
   4f678:	11400003 	ldbu	r5,0(r2)
   4f67c:	28fff11e 	bne	r5,r3,4f644 <__alt_data_end+0xfffef644>
   4f680:	8009883a 	mov	r4,r16
   4f684:	dfc00317 	ldw	ra,12(sp)
   4f688:	dc000217 	ldw	r16,8(sp)
   4f68c:	dec00404 	addi	sp,sp,16
   4f690:	004997c1 	jmpi	4997c <__swbuf_r>
   4f694:	d9400015 	stw	r5,0(sp)
   4f698:	d9800115 	stw	r6,4(sp)
   4f69c:	0044a4c0 	call	44a4c <__sinit>
   4f6a0:	d9800117 	ldw	r6,4(sp)
   4f6a4:	d9400017 	ldw	r5,0(sp)
   4f6a8:	003fdf06 	br	4f628 <__alt_data_end+0xfffef628>

0004f6ac <putc>:
   4f6ac:	00800174 	movhi	r2,5
   4f6b0:	defffc04 	addi	sp,sp,-16
   4f6b4:	10862704 	addi	r2,r2,6300
   4f6b8:	dc000115 	stw	r16,4(sp)
   4f6bc:	14000017 	ldw	r16,0(r2)
   4f6c0:	dc400215 	stw	r17,8(sp)
   4f6c4:	dfc00315 	stw	ra,12(sp)
   4f6c8:	2023883a 	mov	r17,r4
   4f6cc:	80000226 	beq	r16,zero,4f6d8 <putc+0x2c>
   4f6d0:	80800e17 	ldw	r2,56(r16)
   4f6d4:	10001a26 	beq	r2,zero,4f740 <putc+0x94>
   4f6d8:	28800217 	ldw	r2,8(r5)
   4f6dc:	10bfffc4 	addi	r2,r2,-1
   4f6e0:	28800215 	stw	r2,8(r5)
   4f6e4:	10000b16 	blt	r2,zero,4f714 <putc+0x68>
   4f6e8:	28800017 	ldw	r2,0(r5)
   4f6ec:	14400005 	stb	r17,0(r2)
   4f6f0:	28800017 	ldw	r2,0(r5)
   4f6f4:	10c00044 	addi	r3,r2,1
   4f6f8:	28c00015 	stw	r3,0(r5)
   4f6fc:	10800003 	ldbu	r2,0(r2)
   4f700:	dfc00317 	ldw	ra,12(sp)
   4f704:	dc400217 	ldw	r17,8(sp)
   4f708:	dc000117 	ldw	r16,4(sp)
   4f70c:	dec00404 	addi	sp,sp,16
   4f710:	f800283a 	ret
   4f714:	28c00617 	ldw	r3,24(r5)
   4f718:	10c00e16 	blt	r2,r3,4f754 <putc+0xa8>
   4f71c:	28800017 	ldw	r2,0(r5)
   4f720:	01000284 	movi	r4,10
   4f724:	14400005 	stb	r17,0(r2)
   4f728:	28800017 	ldw	r2,0(r5)
   4f72c:	10c00003 	ldbu	r3,0(r2)
   4f730:	193ff01e 	bne	r3,r4,4f6f4 <__alt_data_end+0xfffef6f4>
   4f734:	280d883a 	mov	r6,r5
   4f738:	180b883a 	mov	r5,r3
   4f73c:	00000706 	br	4f75c <putc+0xb0>
   4f740:	8009883a 	mov	r4,r16
   4f744:	d9400015 	stw	r5,0(sp)
   4f748:	0044a4c0 	call	44a4c <__sinit>
   4f74c:	d9400017 	ldw	r5,0(sp)
   4f750:	003fe106 	br	4f6d8 <__alt_data_end+0xfffef6d8>
   4f754:	280d883a 	mov	r6,r5
   4f758:	880b883a 	mov	r5,r17
   4f75c:	8009883a 	mov	r4,r16
   4f760:	dfc00317 	ldw	ra,12(sp)
   4f764:	dc400217 	ldw	r17,8(sp)
   4f768:	dc000117 	ldw	r16,4(sp)
   4f76c:	dec00404 	addi	sp,sp,16
   4f770:	004997c1 	jmpi	4997c <__swbuf_r>

0004f774 <__register_exitproc>:
   4f774:	defffa04 	addi	sp,sp,-24
   4f778:	dc000315 	stw	r16,12(sp)
   4f77c:	04000174 	movhi	r16,5
   4f780:	84062604 	addi	r16,r16,6296
   4f784:	80c00017 	ldw	r3,0(r16)
   4f788:	dc400415 	stw	r17,16(sp)
   4f78c:	dfc00515 	stw	ra,20(sp)
   4f790:	18805217 	ldw	r2,328(r3)
   4f794:	2023883a 	mov	r17,r4
   4f798:	10003726 	beq	r2,zero,4f878 <__register_exitproc+0x104>
   4f79c:	10c00117 	ldw	r3,4(r2)
   4f7a0:	010007c4 	movi	r4,31
   4f7a4:	20c00e16 	blt	r4,r3,4f7e0 <__register_exitproc+0x6c>
   4f7a8:	1a000044 	addi	r8,r3,1
   4f7ac:	8800221e 	bne	r17,zero,4f838 <__register_exitproc+0xc4>
   4f7b0:	18c00084 	addi	r3,r3,2
   4f7b4:	18c7883a 	add	r3,r3,r3
   4f7b8:	18c7883a 	add	r3,r3,r3
   4f7bc:	12000115 	stw	r8,4(r2)
   4f7c0:	10c7883a 	add	r3,r2,r3
   4f7c4:	19400015 	stw	r5,0(r3)
   4f7c8:	0005883a 	mov	r2,zero
   4f7cc:	dfc00517 	ldw	ra,20(sp)
   4f7d0:	dc400417 	ldw	r17,16(sp)
   4f7d4:	dc000317 	ldw	r16,12(sp)
   4f7d8:	dec00604 	addi	sp,sp,24
   4f7dc:	f800283a 	ret
   4f7e0:	00800034 	movhi	r2,0
   4f7e4:	10800004 	addi	r2,r2,0
   4f7e8:	10002626 	beq	r2,zero,4f884 <__register_exitproc+0x110>
   4f7ec:	01006404 	movi	r4,400
   4f7f0:	d9400015 	stw	r5,0(sp)
   4f7f4:	d9800115 	stw	r6,4(sp)
   4f7f8:	d9c00215 	stw	r7,8(sp)
   4f7fc:	00000000 	call	0 <__reset-0x40000>
   4f800:	d9400017 	ldw	r5,0(sp)
   4f804:	d9800117 	ldw	r6,4(sp)
   4f808:	d9c00217 	ldw	r7,8(sp)
   4f80c:	10001d26 	beq	r2,zero,4f884 <__register_exitproc+0x110>
   4f810:	81000017 	ldw	r4,0(r16)
   4f814:	10000115 	stw	zero,4(r2)
   4f818:	02000044 	movi	r8,1
   4f81c:	22405217 	ldw	r9,328(r4)
   4f820:	0007883a 	mov	r3,zero
   4f824:	12400015 	stw	r9,0(r2)
   4f828:	20805215 	stw	r2,328(r4)
   4f82c:	10006215 	stw	zero,392(r2)
   4f830:	10006315 	stw	zero,396(r2)
   4f834:	883fde26 	beq	r17,zero,4f7b0 <__alt_data_end+0xfffef7b0>
   4f838:	18c9883a 	add	r4,r3,r3
   4f83c:	2109883a 	add	r4,r4,r4
   4f840:	1109883a 	add	r4,r2,r4
   4f844:	21802215 	stw	r6,136(r4)
   4f848:	01800044 	movi	r6,1
   4f84c:	12406217 	ldw	r9,392(r2)
   4f850:	30cc983a 	sll	r6,r6,r3
   4f854:	4992b03a 	or	r9,r9,r6
   4f858:	12406215 	stw	r9,392(r2)
   4f85c:	21c04215 	stw	r7,264(r4)
   4f860:	01000084 	movi	r4,2
   4f864:	893fd21e 	bne	r17,r4,4f7b0 <__alt_data_end+0xfffef7b0>
   4f868:	11006317 	ldw	r4,396(r2)
   4f86c:	218cb03a 	or	r6,r4,r6
   4f870:	11806315 	stw	r6,396(r2)
   4f874:	003fce06 	br	4f7b0 <__alt_data_end+0xfffef7b0>
   4f878:	18805304 	addi	r2,r3,332
   4f87c:	18805215 	stw	r2,328(r3)
   4f880:	003fc606 	br	4f79c <__alt_data_end+0xfffef79c>
   4f884:	00bfffc4 	movi	r2,-1
   4f888:	003fd006 	br	4f7cc <__alt_data_end+0xfffef7cc>

0004f88c <__call_exitprocs>:
   4f88c:	defff504 	addi	sp,sp,-44
   4f890:	df000915 	stw	fp,36(sp)
   4f894:	dd400615 	stw	r21,24(sp)
   4f898:	dc800315 	stw	r18,12(sp)
   4f89c:	dfc00a15 	stw	ra,40(sp)
   4f8a0:	ddc00815 	stw	r23,32(sp)
   4f8a4:	dd800715 	stw	r22,28(sp)
   4f8a8:	dd000515 	stw	r20,20(sp)
   4f8ac:	dcc00415 	stw	r19,16(sp)
   4f8b0:	dc400215 	stw	r17,8(sp)
   4f8b4:	dc000115 	stw	r16,4(sp)
   4f8b8:	d9000015 	stw	r4,0(sp)
   4f8bc:	2839883a 	mov	fp,r5
   4f8c0:	04800044 	movi	r18,1
   4f8c4:	057fffc4 	movi	r21,-1
   4f8c8:	00800174 	movhi	r2,5
   4f8cc:	10862604 	addi	r2,r2,6296
   4f8d0:	12000017 	ldw	r8,0(r2)
   4f8d4:	45005217 	ldw	r20,328(r8)
   4f8d8:	44c05204 	addi	r19,r8,328
   4f8dc:	a0001c26 	beq	r20,zero,4f950 <__call_exitprocs+0xc4>
   4f8e0:	a0800117 	ldw	r2,4(r20)
   4f8e4:	15ffffc4 	addi	r23,r2,-1
   4f8e8:	b8000d16 	blt	r23,zero,4f920 <__call_exitprocs+0x94>
   4f8ec:	14000044 	addi	r16,r2,1
   4f8f0:	8421883a 	add	r16,r16,r16
   4f8f4:	8421883a 	add	r16,r16,r16
   4f8f8:	84402004 	addi	r17,r16,128
   4f8fc:	a463883a 	add	r17,r20,r17
   4f900:	a421883a 	add	r16,r20,r16
   4f904:	e0001e26 	beq	fp,zero,4f980 <__call_exitprocs+0xf4>
   4f908:	80804017 	ldw	r2,256(r16)
   4f90c:	e0801c26 	beq	fp,r2,4f980 <__call_exitprocs+0xf4>
   4f910:	bdffffc4 	addi	r23,r23,-1
   4f914:	843fff04 	addi	r16,r16,-4
   4f918:	8c7fff04 	addi	r17,r17,-4
   4f91c:	bd7ff91e 	bne	r23,r21,4f904 <__alt_data_end+0xfffef904>
   4f920:	00800034 	movhi	r2,0
   4f924:	10800004 	addi	r2,r2,0
   4f928:	10000926 	beq	r2,zero,4f950 <__call_exitprocs+0xc4>
   4f92c:	a0800117 	ldw	r2,4(r20)
   4f930:	1000301e 	bne	r2,zero,4f9f4 <__call_exitprocs+0x168>
   4f934:	a0800017 	ldw	r2,0(r20)
   4f938:	10003226 	beq	r2,zero,4fa04 <__call_exitprocs+0x178>
   4f93c:	a009883a 	mov	r4,r20
   4f940:	98800015 	stw	r2,0(r19)
   4f944:	00000000 	call	0 <__reset-0x40000>
   4f948:	9d000017 	ldw	r20,0(r19)
   4f94c:	a03fe41e 	bne	r20,zero,4f8e0 <__alt_data_end+0xfffef8e0>
   4f950:	dfc00a17 	ldw	ra,40(sp)
   4f954:	df000917 	ldw	fp,36(sp)
   4f958:	ddc00817 	ldw	r23,32(sp)
   4f95c:	dd800717 	ldw	r22,28(sp)
   4f960:	dd400617 	ldw	r21,24(sp)
   4f964:	dd000517 	ldw	r20,20(sp)
   4f968:	dcc00417 	ldw	r19,16(sp)
   4f96c:	dc800317 	ldw	r18,12(sp)
   4f970:	dc400217 	ldw	r17,8(sp)
   4f974:	dc000117 	ldw	r16,4(sp)
   4f978:	dec00b04 	addi	sp,sp,44
   4f97c:	f800283a 	ret
   4f980:	a0800117 	ldw	r2,4(r20)
   4f984:	80c00017 	ldw	r3,0(r16)
   4f988:	10bfffc4 	addi	r2,r2,-1
   4f98c:	15c01426 	beq	r2,r23,4f9e0 <__call_exitprocs+0x154>
   4f990:	80000015 	stw	zero,0(r16)
   4f994:	183fde26 	beq	r3,zero,4f910 <__alt_data_end+0xfffef910>
   4f998:	95c8983a 	sll	r4,r18,r23
   4f99c:	a0806217 	ldw	r2,392(r20)
   4f9a0:	a5800117 	ldw	r22,4(r20)
   4f9a4:	2084703a 	and	r2,r4,r2
   4f9a8:	10000b26 	beq	r2,zero,4f9d8 <__call_exitprocs+0x14c>
   4f9ac:	a0806317 	ldw	r2,396(r20)
   4f9b0:	2088703a 	and	r4,r4,r2
   4f9b4:	20000c1e 	bne	r4,zero,4f9e8 <__call_exitprocs+0x15c>
   4f9b8:	89400017 	ldw	r5,0(r17)
   4f9bc:	d9000017 	ldw	r4,0(sp)
   4f9c0:	183ee83a 	callr	r3
   4f9c4:	a0800117 	ldw	r2,4(r20)
   4f9c8:	15bfbf1e 	bne	r2,r22,4f8c8 <__alt_data_end+0xfffef8c8>
   4f9cc:	98800017 	ldw	r2,0(r19)
   4f9d0:	153fcf26 	beq	r2,r20,4f910 <__alt_data_end+0xfffef910>
   4f9d4:	003fbc06 	br	4f8c8 <__alt_data_end+0xfffef8c8>
   4f9d8:	183ee83a 	callr	r3
   4f9dc:	003ff906 	br	4f9c4 <__alt_data_end+0xfffef9c4>
   4f9e0:	a5c00115 	stw	r23,4(r20)
   4f9e4:	003feb06 	br	4f994 <__alt_data_end+0xfffef994>
   4f9e8:	89000017 	ldw	r4,0(r17)
   4f9ec:	183ee83a 	callr	r3
   4f9f0:	003ff406 	br	4f9c4 <__alt_data_end+0xfffef9c4>
   4f9f4:	a0800017 	ldw	r2,0(r20)
   4f9f8:	a027883a 	mov	r19,r20
   4f9fc:	1029883a 	mov	r20,r2
   4fa00:	003fb606 	br	4f8dc <__alt_data_end+0xfffef8dc>
   4fa04:	0005883a 	mov	r2,zero
   4fa08:	003ffb06 	br	4f9f8 <__alt_data_end+0xfffef9f8>

0004fa0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4fa0c:	defffd04 	addi	sp,sp,-12
   4fa10:	df000215 	stw	fp,8(sp)
   4fa14:	df000204 	addi	fp,sp,8
   4fa18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4fa1c:	0001883a 	nop
   4fa20:	e0bfff17 	ldw	r2,-4(fp)
   4fa24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4fa28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4fa2c:	10000226 	beq	r2,zero,4fa38 <_exit+0x2c>
    ALT_SIM_FAIL();
   4fa30:	002af070 	cmpltui	zero,zero,43969
   4fa34:	00000106 	br	4fa3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4fa38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4fa3c:	003fff06 	br	4fa3c <__alt_data_end+0xfffefa3c>
